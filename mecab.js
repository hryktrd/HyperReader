
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = 'mecab.data';
    var REMOTE_PACKAGE_BASE = 'mecab.data';
    var REMOTE_PACKAGE_NAME = typeof Module['locateFilePackage'] === 'function' ?
                              Module['locateFilePackage'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
    var REMOTE_PACKAGE_SIZE = 53051455;
    var PACKAGE_UUID = '759fa94a-6a5f-41c8-a1bd-8e15d1cea348';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'ipadic', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 295, 0, 0).open('GET', '/mecabrc');
    new DataRequest(295, 5985, 0, 0).open('GET', '/ipadic/unk.dic');
    new DataRequest(5985, 3469701, 0, 0).open('GET', '/ipadic/matrix.bin');
    new DataRequest(3469701, 3471178, 0, 0).open('GET', '/ipadic/pos-id.def');
    new DataRequest(3471178, 3527088, 0, 0).open('GET', '/ipadic/right-id.def');
    new DataRequest(3527088, 3582998, 0, 0).open('GET', '/ipadic/left-id.def');
    new DataRequest(3582998, 52782025, 0, 0).open('GET', '/ipadic/sys.dic');
    new DataRequest(52782025, 52788266, 0, 0).open('GET', '/ipadic/rewrite.def');
    new DataRequest(52788266, 53050762, 0, 0).open('GET', '/ipadic/char.bin');
    new DataRequest(53050762, 53051455, 0, 0).open('GET', '/ipadic/dicrc');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/mecabrc"].onload();
          DataRequest.prototype.requests["/ipadic/unk.dic"].onload();
          DataRequest.prototype.requests["/ipadic/matrix.bin"].onload();
          DataRequest.prototype.requests["/ipadic/pos-id.def"].onload();
          DataRequest.prototype.requests["/ipadic/right-id.def"].onload();
          DataRequest.prototype.requests["/ipadic/left-id.def"].onload();
          DataRequest.prototype.requests["/ipadic/sys.dic"].onload();
          DataRequest.prototype.requests["/ipadic/rewrite.def"].onload();
          DataRequest.prototype.requests["/ipadic/char.bin"].onload();
          DataRequest.prototype.requests["/ipadic/dicrc"].onload();
          Module['removeRunDependency']('datafile_mecab.data');

    };
    Module['addRunDependency']('datafile_mecab.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(420339);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });
  

/* memory initializer */ allocate([0,0,0,0,168,1,0,0,1,0,0,0,2,0,0,0,118,105,116,101,114,98,105,46,99,112,112,0,0,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,116,111,107,101,110,105,122,101,114,95,45,62,111,112,101,110,40,112,97,114,97,109,41,0,93,32,0,0,0,0,0,0,116,111,107,101,110,105,122,101,114,95,45,62,100,105,99,116,105,111,110,97,114,121,95,105,110,102,111,40,41,0,0,0,68,105,99,116,105,111,110,97,114,121,32,105,115,32,101,109,112,116,121,0,0,0,0,0,99,111,110,110,101,99,116,111,114,95,45,62,111,112,101,110,40,112,97,114,97,109,41,0,116,111,107,101,110,105,122,101,114,95,45,62,100,105,99,116,105,111,110,97,114,121,95,105,110,102,111,40,41,45,62,108,115,105,122,101,32,61,61,32,99,111,110,110,101,99,116,111,114,95,45,62,108,101,102,116,95,115,105,122,101,40,41,32,38,38,32,116,111,107,101,110,105,122,101,114,95,45,62,100,105,99,116,105,111,110,97,114,121,95,105,110,102,111,40,41,45,62,114,115,105,122,101,32,61,61,32,99,111,110,110,101,99,116,111,114,95,45,62,114,105,103,104,116,95,115,105,122,101,40,41,0,0,0,0,0,84,114,97,110,115,105,116,105,111,110,32,116,97,98,108,101,32,97,110,100,32,100,105,99,116,105,111,110,97,114,121,32,97,114,101,32,110,111,116,32,99,111,109,112,97,116,105,98,108,101,0,0,0,0,0,0,99,111,115,116,45,102,97,99,116,111,114,0,0,0,0,0,9,0,0,0,0,0,0,0,69,79,83,0,0,0,0,0,10,0,0,0,0,0,0,0,78,53,77,101,67,97,98,55,86,105,116,101,114,98,105,69,0,0,0,0,0,0,0,0,40,99,6,0,144,1,0,0,0,0,0,0,224,1,0,0,3,0,0,0,4,0,0,0,78,53,77,101,67,97,98,49,52,78,66,101,115,116,71,101,110,101,114,97,116,111,114,69,0,0,0,0,0,0,0,0,40,99,6,0,192,1,0,0,0,0,0,0,48,2,0,0,5,0,0,0,6,0,0,0,78,53,77,101,67,97,98,56,70,114,101,101,76,105,115,116,73,78,83,95,49,52,78,66,101,115,116,71,101,110,101,114,97,116,111,114,49,50,81,117,101,117,101,69,108,101,109,101,110,116,69,69,69,0,0,0,40,99,6,0,248,1,0,0,116,111,111,32,108,111,110,103,32,115,101,110,116,101,110,99,101,46,0,0,0,0,0,0,0,0,0,0,136,2,0,0,7,0,0,0,8,0,0,0,78,53,77,101,67,97,98,56,70,114,101,101,76,105,115,116,73,49,50,109,101,99,97,98,95,112,97,116,104,95,116,69,69,0,0,0,0,0,0,0,40,99,6,0,96,2,0,0,64,0,0,0,0,0,0,0,64,3,0,0,9,0,0,0,10,0,0,0,56,0,0,0,248,255,255,255,64,3,0,0,11,0,0,0,12,0,0,0,192,255,255,255,192,255,255,255,64,3,0,0,13,0,0,0,14,0,0,0,0,0,0,0,156,2,0,0,92,3,0,0,156,3,0,0,176,3,0,0,196,3,0,0,216,3,0,0,132,3,0,0,112,3,0,0,196,2,0,0,176,2,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,80,99,6,0,248,2,0,0,8,57,6,0,0,0,0,0,64,0,0,0,0,0,0,0,8,57,6,0,15,0,0,0,16,0,0,0,56,0,0,0,248,255,255,255,8,57,6,0,17,0,0,0,18,0,0,0,192,255,255,255,192,255,255,255,8,57,6,0,19,0,0,0,20,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,232,55,6,0,21,0,0,0,22,0,0,0,192,255,255,255,192,255,255,255,232,55,6,0,23,0,0,0,24,0,0,0,56,0,0,0,0,0,0,0,120,56,6,0,25,0,0,0,26,0,0,0,200,255,255,255,200,255,255,255,120,56,6,0,27,0,0,0,28,0,0,0,0,0,0,0,104,4,0,0,29,0,0,0,30,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,80,99,6,0,32,4,0,0,112,55,6,0,0,0,0,0,0,0,0,0,160,4,0,0,31,0,0,0,32,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,105,69,69,0,40,99,6,0,136,4,0,0,0,0,0,0,224,4,0,0,33,0,0,0,34,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,57,67,111,110,110,101,99,116,111,114,69,69,69,0,0,0,0,40,99,6,0,184,4,0,0,0,0,0,0,64,5,0,0,35,0,0,0,36,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,57,84,111,107,101,110,105,122,101,114,73,49,50,109,101,99,97,98,95,110,111,100,101,95,116,49,50,109,101,99,97,98,95,112,97,116,104,95,116,69,69,69,69,0,0,0,0,0,0,40,99,6,0,248,4,0,0,0,0,0,0,120,5,0,0,37,0,0,0,38,0,0,0,78,53,77,101,67,97,98,49,50,115,99,111,112,101,100,95,97,114,114,97,121,73,99,69,69,0,0,0,0,0,0,0,40,99,6,0,88,5,0,0,0,0,0,0,168,5,0,0,39,0,0,0,40,0,0,0,78,53,77,101,67,97,98,57,67,111,110,110,101,99,116,111,114,69,0,0,0,0,0,0,40,99,6,0,144,5,0,0,0,0,0,0,232,5,0,0,41,0,0,0,42,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,52,77,109,97,112,73,115,69,69,69,69,0,0,0,0,0,0,40,99,6,0,192,5,0,0,0,0,0,0,24,6,0,0,43,0,0,0,44,0,0,0,78,53,77,101,67,97,98,52,77,109,97,112,73,115,69,69,0,0,0,0,0,0,0,0,40,99,6,0,0,6,0,0,56,0,0,0,0,0,0,0,160,6,0,0,45,0,0,0,46,0,0,0,200,255,255,255,200,255,255,255,160,6,0,0,47,0,0,0,48,0,0,0,44,6,0,0,188,6,0,0,208,6,0,0,64,6,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,80,99,6,0,88,6,0,0,120,56,6,0,0,0,0,0,56,0,0,0,0,0,0,0,120,56,6,0,25,0,0,0,26,0,0,0,200,255,255,255,200,255,255,255,120,56,6,0,27,0,0,0,28,0,0,0,240,14,0,0,114,0,0,0,0,0,0,0,248,14,0,0,0,15,0,0,32,15,0,0,100,0,0,0,0,0,0,0,40,15,0,0,48,15,0,0,80,15,0,0,117,0,0,0,0,0,0,0,248,14,0,0,88,15,0,0,240,8,0,0,108,0,0,0,120,15,0,0,128,15,0,0,136,15,0,0,152,9,0,0,68,0,0,0,0,0,0,0,0,0,0,0,176,15,0,0,216,15,0,0,79,0,0,0,0,0,0,0,240,15,0,0,248,15,0,0,40,16,0,0,97,0,0,0,0,0,0,0,0,0,0,0,56,16,0,0,80,9,0,0,78,0,0,0,96,16,0,0,128,15,0,0,104,16,0,0,32,10,0,0,112,0,0,0,0,0,0,0,0,0,0,0,144,16,0,0,184,16,0,0,109,0,0,0,0,0,0,0,0,0,0,0,200,16,0,0,248,16,0,0,77,0,0,0,16,17,0,0,128,15,0,0,24,17,0,0,80,17,0,0,70,0,0,0,96,17,0,0,112,17,0,0,120,17,0,0,160,17,0,0,85,0,0,0,96,17,0,0,112,17,0,0,176,17,0,0,224,17,0,0,66,0,0,0,240,17,0,0,112,17,0,0,248,17,0,0,56,18,0,0,69,0,0,0,72,18,0,0,112,17,0,0,80,18,0,0,136,18,0,0,83,0,0,0,240,17,0,0,112,17,0,0,152,18,0,0,200,18,0,0,120,0,0,0,0,0,0,0,112,17,0,0,216,18,0,0,8,10,0,0,98,0,0,0,0,0,0,0,128,15,0,0,0,19,0,0,136,9,0,0,80,0,0,0,0,0,0,0,0,0,0,0,40,19,0,0,64,19,0,0,67,0,0,0,0,0,0,0,0,0,0,0,88,19,0,0,184,14,0,0,116,0,0,0,128,19,0,0,136,19,0,0,144,19,0,0,192,19,0,0,99,0,0,0,208,19,0,0,128,15,0,0,216,19,0,0,64,9,0,0,111,0,0,0,0,0,0,0,248,14,0,0,248,19,0,0,232,8,0,0,118,0,0,0,0,0,0,0,0,0,0,0,24,20,0,0,224,8,0,0,104,0,0,0,0,0,0,0,0,0,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,101,108,112,0,0,0,0,118,101,114,115,105,111,110,0,108,97,116,116,105,99,101,45,108,101,118,101,108,0,0,0,108,97,116,116,105,99,101,45,108,101,118,101,108,32,105,115,32,68,69,80,69,82,67,65,84,69,68,46,32,0,0,0,117,115,101,32,45,45,109,97,114,103,105,110,97,108,32,111,114,32,45,45,110,98,101,115,116,46,0,0,0,0,0,0,111,117,116,112,117,116,0,0,45,0,0,0,0,0,0,0,110,98,101,115,116,0,0,0,105,110,118,97,108,105,100,32,78,32,118,97,108,117,101,0,110,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,58,32,0,0,0,0,0,100,117,109,112,45,99,111,110,102,105,103,0,0,0,0,0,100,105,99,116,105,111,110,97,114,121,45,105,110,102,111,0,102,105,108,101,110,97,109,101,58,9,0,0,0,0,0,0,118,101,114,115,105,111,110,58,9,0,0,0,0,0,0,0,99,104,97,114,115,101,116,58,9,0,0,0,0,0,0,0,116,121,112,101,58,9,0,0,115,105,122,101,58,9,0,0,108,101,102,116,32,115,105,122,101,58,9,0,0,0,0,0,114,105,103,104,116,32,115,105,122,101,58,9,0,0,0,0,105,110,112,117,116,45,98,117,102,102,101,114,45,115,105,122,101,0,0,0,0,0,0,0,112,97,114,116,105,97,108,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,116,97,103,103,101,114,0,0,0,0,69,79,83,0,0,0,0,0,105,110,112,117,116,45,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,46,32,0,84,104,101,32,108,105,110,101,32,105,115,32,115,112,108,105,116,46,32,117,115,101,32,45,98,32,35,83,73,90,69,32,111,112,116,105,111,110,46,0,0,0,0,0,192,10,0,0,49,0,0,0,50,0,0,0,78,53,77,101,67,97,98,49,56,115,99,111,112,101,100,95,102,105,120,101,100,95,97,114,114,97,121,73,99,76,105,56,49,57,50,69,69,69,0,0,40,99,6,0,152,10,0,0,0,0,0,0,48,11,0,0,51,0,0,0,52,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,49,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,49,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,69,69,0,0,40,99,6,0,216,10,0,0,0,0,0,0,96,11,0,0,53,0,0,0,54,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,98,69,69,0,40,99,6,0,72,11,0,0,0,0,0,0,160,11,0,0,55,0,0,0,56,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,54,84,97,103,103,101,114,69,69,69,0,0,0,0,0,0,0,40,99,6,0,120,11,0,0,0,0,0,0,240,11,0,0,57,0,0,0,58,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,49,50,95,71,76,79,66,65,76,95,95,78,95,49,57,77,111,100,101,108,73,109,112,108,69,69,69,0,0,0,0,0,0,40,99,6,0,184,11,0,0,0,0,0,0,24,12,0,0,59,0,0,0,60,0,0,0,78,53,77,101,67,97,98,53,80,97,114,97,109,69,0,0,40,99,6,0,8,12,0,0,0,0,0,0,80,12,0,0,61,0,0,0,62,0,0,0,78,53,77,101,67,97,98,49,53,111,115,116,114,101,97,109,95,119,114,97,112,112,101,114,69,0,0,0,0,0,0,0,40,99,6,0,48,12,0,0,0,0,0,0,136,12,0,0,63,0,0,0,64,0,0,0,78,53,77,101,67,97,98,49,53,105,115,116,114,101,97,109,95,119,114,97,112,112,101,114,69,0,0,0,0,0,0,0,40,99,6,0,104,12,0,0,108,0,0,0,0,0,0,0,248,12,0,0,65,0,0,0,66,0,0,0,148,255,255,255,148,255,255,255,248,12,0,0,67,0,0,0,68,0,0,0,156,12,0,0,20,13,0,0,40,13,0,0,176,12,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,80,99,6,0,200,12,0,0,232,55,6,0,0,0,0,0,108,0,0,0,0,0,0,0,232,55,6,0,21,0,0,0,22,0,0,0,148,255,255,255,148,255,255,255,232,55,6,0,23,0,0,0,24,0,0,0,0,0,0,0,160,13,0,0,69,0,0,0,70,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,80,99,6,0,112,13,0,0,112,55,6,0,0,0,0,0,119,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,119,43,0,0,0,0,0,0,97,43,0,0,0,0,0,0,119,98,0,0,0,0,0,0,97,98,0,0,0,0,0,0,114,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,119,43,98,0,0,0,0,0,97,43,98,0,0,0,0,0,104,0,0,0,0,0,0,0,120,14,0,0,71,0,0,0,72,0,0,0,152,255,255,255,152,255,255,255,120,14,0,0,73,0,0,0,74,0,0,0,28,14,0,0,148,14,0,0,168,14,0,0,48,14,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,111,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,80,99,6,0,72,14,0,0,120,56,6,0,0,0,0,0,104,0,0,0,0,0,0,0,120,56,6,0,25,0,0,0,26,0,0,0,152,255,255,255,152,255,255,255,120,56,6,0,27,0,0,0,28,0,0,0,32,0,0,0,0,0,0,0,116,104,101,116,97,0,0,0,0,0,0,0,232,14,0,0,75,0,0,0,76,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,100,69,69,0,40,99,6,0,208,14,0,0,114,99,102,105,108,101,0,0,70,73,76,69,0,0,0,0,117,115,101,32,70,73,76,69,32,97,115,32,114,101,115,111,117,114,99,101,32,102,105,108,101,0,0,0,0,0,0,0,100,105,99,100,105,114,0,0,68,73,82,0,0,0,0,0,115,101,116,32,68,73,82,32,32,97,115,32,97,32,115,121,115,116,101,109,32,100,105,99,100,105,114,0,0,0,0,0,117,115,101,114,100,105,99,0,117,115,101,32,70,73,76,69,32,97,115,32,97,32,117,115,101,114,32,100,105,99,116,105,111,110,97,114,121,0,0,0,48,0,0,0,0,0,0,0,73,78,84,0,0,0,0,0,108,97,116,116,105,99,101,32,105,110,102,111,114,109,97,116,105,111,110,32,108,101,118,101,108,32,40,68,69,80,82,69,67,65,84,69,68,41,0,0,115,104,111,119,32,100,105,99,116,105,111,110,97,114,121,32,105,110,102,111,114,109,97,116,105,111,110,32,97,110,100,32,101,120,105,116,0,0,0,0,111,117,116,112,117,116,45,102,111,114,109,97,116,45,116,121,112,101,0,0,0,0,0,0,84,89,80,69,0,0,0,0,115,101,116,32,111,117,116,112,117,116,32,102,111,114,109,97,116,32,116,121,112,101,32,40,119,97,107,97,116,105,44,110,111,110,101,44,46,46,46,41,0,0,0,0,0,0,0,0,97,108,108,45,109,111,114,112,104,115,0,0,0,0,0,0,111,117,116,112,117,116,32,97,108,108,32,109,111,114,112,104,115,40,100,101,102,97,117,108,116,32,102,97,108,115,101,41,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,111,117,116,112,117,116,32,78,32,98,101,115,116,32,114,101,115,117,108,116,115,32,40,100,101,102,97,117,108,116,32,49,41,0,0,0,0,0,0,0,112,97,114,116,105,97,108,32,112,97,114,115,105,110,103,32,109,111,100,101,32,40,100,101,102,97,117,108,116,32,102,97,108,115,101,41,0,0,0,0,109,97,114,103,105,110,97,108,0,0,0,0,0,0,0,0,111,117,116,112,117,116,32,109,97,114,103,105,110,97,108,32,112,114,111,98,97,98,105,108,105,116,121,32,40,100,101,102,97,117,108,116,32,102,97,108,115,101,41,0,0,0,0,0,109,97,120,45,103,114,111,117,112,105,110,103,45,115,105,122,101,0,0,0,0,0,0,0,50,52,0,0,0,0,0,0,109,97,120,105,109,117,109,32,103,114,111,117,112,105,110,103,32,115,105,122,101,32,102,111,114,32,117,110,107,110,111,119,110,32,119,111,114,100,115,32,40,100,101,102,97,117,108,116,32,50,52,41,0,0,0,0,110,111,100,101,45,102,111,114,109,97,116,0,0,0,0,0,37,109,92,116,37,72,92,110,0,0,0,0,0,0,0,0,83,84,82,0,0,0,0,0,117,115,101,32,83,84,82,32,97,115,32,116,104,101,32,117,115,101,114,45,100,101,102,105,110,101,100,32,110,111,100,101,32,102,111,114,109,97,116,0,117,110,107,45,102,111,114,109,97,116,0,0,0,0,0,0,117,115,101,32,83,84,82,32,97,115,32,116,104,101,32,117,115,101,114,45,100,101,102,105,110,101,100,32,117,110,107,110,111,119,110,32,110,111,100,101,32,102,111,114,109,97,116,0,98,111,115,45,102,111,114,109,97,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,115,101,32,83,84,82,32,97,115,32,116,104,101,32,117,115,101,114,45,100,101,102,105,110,101,100,32,98,101,103,105,110,110,105,110,103,45,111,102,45,115,101,110,116,101,110,99,101,32,102,111,114,109,97,116,0,0,0,0,0,0,0,0,101,111,115,45,102,111,114,109,97,116,0,0,0,0,0,0,69,79,83,92,110,0,0,0,117,115,101,32,83,84,82,32,97,115,32,116,104,101,32,117,115,101,114,45,100,101,102,105,110,101,100,32,101,110,100,45,111,102,45,115,101,110,116,101,110,99,101,32,102,111,114,109,97,116,0,0,0,0,0,0,101,111,110,45,102,111,114,109,97,116,0,0,0,0,0,0,117,115,101,32,83,84,82,32,97,115,32,116,104,101,32,117,115,101,114,45,100,101,102,105,110,101,100,32,101,110,100,45,111,102,45,78,66,101,115,116,32,102,111,114,109,97,116,0,117,110,107,45,102,101,97,116,117,114,101,0,0,0,0,0,117,115,101,32,83,84,82,32,97,115,32,116,104,101,32,102,101,97,116,117,114,101,32,102,111,114,32,117,110,107,110,111,119,110,32,119,111,114,100,0,115,101,116,32,105,110,112,117,116,32,98,117,102,102,101,114,32,115,105,122,101,32,40,100,101,102,97,117,108,116,32,56,49,57,50,41,0,0,0,0,100,117,109,112,32,77,101,67,97,98,32,112,97,114,97,109,101,116,101,114,115,0,0,0,97,108,108,111,99,97,116,101,45,115,101,110,116,101,110,99,101,0,0,0,0,0,0,0,97,108,108,111,99,97,116,101,32,110,101,119,32,109,101,109,111,114,121,32,102,111,114,32,105,110,112,117,116,32,115,101,110,116,101,110,99,101,0,0,48,46,55,53,0,0,0,0,70,76,79,65,84,0,0,0,115,101,116,32,116,101,109,112,97,114,97,116,117,114,101,32,112,97,114,97,109,101,116,101,114,32,116,104,101,116,97,32,40,100,101,102,97,117,108,116,32,48,46,55,53,41,0,0,99,111,115,116,45,102,97,99,116,111,114,0,0,0,0,0,55,48,48,0,0,0,0,0,115,101,116,32,99,111,115,116,32,102,97,99,116,111,114,32,40,100,101,102,97,117,108,116,32,55,48,48,41,0,0,0,115,101,116,32,116,104,101,32,111,117,116,112,117,116,32,102,105,108,101,32,110,97,109,101,0,0,0,0,0,0,0,0,115,104,111,119,32,116,104,101,32,118,101,114,115,105,111,110,32,97,110,100,32,101,120,105,116,46,0,0,0,0,0,0,115,104,111,119,32,116,104,105,115,32,104,101,108,112,32,97,110,100,32,101,120,105,116,46,0,0,0,0,0,0,0,0,0,0,0,0,72,21,0,0,77,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,6,0,0,0,12,0,0,0,3,0,0,0,1,0,0,0,13,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,14,0,0,0,15,0,0,0,7,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,8,0,0,0,9,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,19,0,0,0,10,0,0,0,11,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,20,0,0,0,8,0,0,0,78,0,0,0,79,0,0,0,78,53,77,101,67,97,98,49,50,95,71,76,79,66,65,76,95,95,78,95,49,49,49,76,97,116,116,105,99,101,73,109,112,108,69,0,0,0,0,0,78,53,77,101,67,97,98,55,76,97,116,116,105,99,101,69,0,0,0,0,0,0,0,0,40,99,6,0,40,21,0,0,80,99,6,0,0,21,0,0,64,21,0,0,0,0,0,0,10,0,0,0,0,0,0,0,116,97,103,103,101,114,46,99,112,112,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,108,115,105,122,101,32,61,61,32,108,105,110,101,115,46,115,105,122,101,40,41,0,0,0,93,32,0,0,0,0,0,0,9,0,0,0,0,0,0,0,102,101,97,116,117,114,101,115,46,115,105,122,101,40,41,32,61,61,32,115,117,114,102,97,99,101,115,46,115,105,122,101,40,41,0,0,0,0,0,0,66,79,83,47,69,79,83,0,0,0,0,0,8,22,0,0,80,0,0,0,81,0,0,0,78,53,77,101,67,97,98,49,51,67,104,117,110,107,70,114,101,101,76,105,115,116,73,99,69,69,0,0,0,0,0,0,40,99,6,0,232,21,0,0,110,98,101,115,116,32,115,105,122,101,32,109,117,115,116,32,98,101,32,49,32,60,61,32,110,98,101,115,116,32,60,61,32,53,49,50,0,0,0,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,0,0,69,79,83,10,0,0,0,0,110,111,100,101,32,105,115,32,78,85,76,76,0,0,0,0,77,69,67,65,66,95,78,66,69,83,84,32,114,101,113,117,101,115,116,32,116,121,112,101,32,105,115,32,110,111,116,32,115,101,116,0,0,0,0,0,0,0,0,0,208,22,0,0,82,0,0,0,83,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,49,50,83,116,114,105,110,103,66,117,102,102,101,114,69,69,69,0,0,0,0,0,0,0,0,40,99,6,0,160,22,0,0,0,0,0,0,48,23,0,0,84,0,0,0,85,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,57,65,108,108,111,99,97,116,111,114,73,49,50,109,101,99,97,98,95,110,111,100,101,95,116,49,50,109,101,99,97,98,95,112,97,116,104,95,116,69,69,69,69,0,0,0,0,0,0,40,99,6,0,232,22,0,0,0,0,0,0,128,23,0,0,86,0,0,0,87,0,0,0,78,53,77,101,67,97,98,57,65,108,108,111,99,97,116,111,114,73,49,50,109,101,99,97,98,95,110,111,100,101,95,116,49,50,109,101,99,97,98,95,112,97,116,104,95,116,69,69,0,0,0,0,0,0,0,0,40,99,6,0,72,23,0,0,0,0,0,0,248,23,0,0,88,0,0,0,89,0,0,0,78,53,77,101,67,97,98,49,50,115,99,111,112,101,100,95,97,114,114,97,121,73,78,83,95,53,68,97,114,116,115,49,53,68,111,117,98,108,101,65,114,114,97,121,73,109,112,108,73,99,104,105,106,78,83,49,95,54,76,101,110,103,116,104,73,99,69,69,69,49,54,114,101,115,117,108,116,95,112,97,105,114,95,116,121,112,101,69,69,69,0,0,0,0,0,0,40,99,6,0,152,23,0,0,0,0,0,0,72,24,0,0,90,0,0,0,91,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,56,70,114,101,101,76,105,115,116,73,49,50,109,101,99,97,98,95,110,111,100,101,95,116,69,69,69,69,0,0,0,0,0,40,99,6,0,16,24,0,0,0,0,0,0,152,24,0,0,92,0,0,0,93,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,56,70,114,101,101,76,105,115,116,73,49,50,109,101,99,97,98,95,112,97,116,104,95,116,69,69,69,69,0,0,0,0,0,40,99,6,0,96,24,0,0,0,0,0,0,224,24,0,0,94,0,0,0,95,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,49,51,67,104,117,110,107,70,114,101,101,76,105,115,116,73,99,69,69,69,69,0,0,0,0,40,99,6,0,176,24,0,0,0,0,0,0,40,25,0,0,96,0,0,0,97,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,49,52,78,66,101,115,116,71,101,110,101,114,97,116,111,114,69,69,69,0,0,0,0,0,0,40,99,6,0,248,24,0,0,0,0,0,0,104,25,0,0,98,0,0,0,99,0,0,0,78,53,77,101,67,97,98,56,70,114,101,101,76,105,115,116,73,49,50,109,101,99,97,98,95,110,111,100,101,95,116,69,69,0,0,0,0,0,0,0,40,99,6,0,64,25,0,0,0,0,0,0,64,21,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,100,0,0,0,101,0,0,0,0,0,0,0,128,26,0,0,21,0,0,0,6,0,0,0,3,0,0,0,22,0,0,0,23,0,0,0,12,0,0,0,102,0,0,0,103,0,0,0,78,53,77,101,67,97,98,49,50,95,71,76,79,66,65,76,95,95,78,95,49,57,77,111,100,101,108,73,109,112,108,69,0,0,0,0,0,0,0,0,78,53,77,101,67,97,98,53,77,111,100,101,108,69,0,0,40,99,6,0,104,26,0,0,80,99,6,0,64,26,0,0,120,26,0,0,0,0,0,0,99,117,114,114,101,110,116,32,109,111,100,101,108,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,73,110,118,97,108,105,100,32,109,111,100,101,108,32,105,115,32,112,97,115,115,101,100,0,80,97,115,115,101,100,32,109,111,100,101,108,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,0,0,0,0,32,27,0,0,104,0,0,0,105,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,53,77,111,100,101,108,69,69,69,0,0,0,0,0,0,0,0,40,99,6,0,248,26,0,0,77,111,100,101,108,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,0,0,0,120,27,0,0,106,0,0,0,107,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,54,87,114,105,116,101,114,69,69,69,0,0,0,0,0,0,0,40,99,6,0,80,27,0,0,0,0,0,0,120,26,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,108,0,0,0,109,0,0,0,0,0,0,0,104,28,0,0,13,0,0,0,14,0,0,0,15,0,0,0,7,0,0,0,16,0,0,0,24,0,0,0,25,0,0,0,17,0,0,0,1,0,0,0,8,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,11,0,0,0,1,0,0,0,5,0,0,0,9,0,0,0,26,0,0,0,27,0,0,0,10,0,0,0,28,0,0,0,11,0,0,0,29,0,0,0,12,0,0,0,3,0,0,0,3,0,0,0,30,0,0,0,31,0,0,0,110,0,0,0,111,0,0,0,78,53,77,101,67,97,98,49,50,95,71,76,79,66,65,76,95,95,78,95,49,49,48,84,97,103,103,101,114,73,109,112,108,69,0,0,0,0,0,0,78,53,77,101,67,97,98,54,84,97,103,103,101,114,69,0,40,99,6,0,80,28,0,0,80,99,6,0,40,28,0,0,96,28,0,0,0,0,0,0,0,0,0,0,176,28,0,0,112,0,0,0,113,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,55,76,97,116,116,105,99,101,69,69,69,0,0,0,0,0,0,40,99,6,0,136,28,0,0,110,111,32,109,111,114,101,32,114,101,115,117,108,116,115,0,0,0,0,0,96,28,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,114,0,0,0,115,0,0,0,115,106,105,115,0,0,0,0,115,104,105,102,116,45,106,105,115,0,0,0,0,0,0,0,115,104,105,102,116,95,106,105,115,0,0,0,0,0,0,0,99,112,57,51,50,0,0,0,101,117,99,0,0,0,0,0,101,117,99,95,106,112,0,0,101,117,99,45,106,112,0,0,117,116,102,56,0,0,0,0,117,116,102,95,56,0,0,0,117,116,102,45,56,0,0,0,117,116,102,49,54,0,0,0,117,116,102,95,49,54,0,0,117,116,102,45,49,54,0,0,117,116,102,49,54,98,101,0,117,116,102,95,49,54,98,101,0,0,0,0,0,0,0,0,117,116,102,45,49,54,98,101,0,0,0,0,0,0,0,0,117,116,102,49,54,108,101,0,117,116,102,95,49,54,108,101,0,0,0,0,0,0,0,0,117,116,102,45,49,54,108,101,0,0,0,0,0,0,0,0,97,115,99,105,105,0,0,0,46,0,0,0,0,0,0,0,97,108,108,111,99,97,116,101,45,115,101,110,116,101,110,99,101,0,0,0,0,0,0,0,112,97,114,116,105,97,108,0,97,108,108,45,109,111,114,112,104,115,0,0,0,0,0,0,109,97,114,103,105,110,97,108,0,0,0,0,0,0,0,0,110,98,101,115,116,0,0,0,108,97,116,116,105,99,101,45,108,101,118,101,108,0,0,0,114,99,102,105,108,101,0,0,72,79,77,69,0,0,0,0,46,109,101,99,97,98,114,99,0,0,0,0,0,0,0,0,77,69,67,65,66,82,67,0,47,117,115,114,47,108,111,99,97,108,47,101,116,99,47,109,101,99,97,98,114,99,0,0,100,105,99,100,105,114,0,0,36,40,114,99,112,97,116,104,41,0,0,0,0,0,0,0,100,105,99,114,99,0,0,0,0,0,0,0,16,31,0,0,116,0,0,0,117,0,0,0,78,53,77,101,67,97,98,49,56,115,99,111,112,101,100,95,102,105,120,101,100,95,97,114,114,97,121,73,80,99,76,105,56,49,57,50,69,69,69,0,40,99,6,0,232,30,0,0,114,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,93,32,0,0,0,0,0,0,114,43,0,0,0,0,0,0,46,47,109,109,97,112,46,104,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,117,110,107,110,111,119,110,32,111,112,101,110,32,109,111,100,101,58,32,0,0,0,0,0,40,102,100,32,61,32,58,58,111,112,101,110,40,102,105,108,101,110,97,109,101,44,32,102,108,97,103,32,124,32,79,95,66,73,78,65,82,89,41,41,32,62,61,32,48,0,0,0,111,112,101,110,32,102,97,105,108,101,100,58,32,0,0,0,58,58,102,115,116,97,116,40,102,100,44,32,38,115,116,41,32,62,61,32,48,0,0,0,102,97,105,108,101,100,32,116,111,32,103,101,116,32,102,105,108,101,32,115,105,122,101,58,32,0,0,0,0,0,0,0,58,58,114,101,97,100,40,102,100,44,32,116,101,120,116,44,32,108,101,110,103,116,104,41,32,62,61,32,48,0,0,0,114,101,97,100,40,41,32,102,97,105,108,101,100,58,32,0,0,0,0,0,64,32,0,0,118,0,0,0,119,0,0,0,78,53,77,101,67,97,98,52,77,109,97,112,73,99,69,69,0,0,0,0,0,0,0,0,40,99,6,0,40,32,0,0,0,0,0,0,112,32,0,0,120,0,0,0,121,0,0,0,78,53,77,101,67,97,98,49,50,67,104,97,114,80,114,111,112,101,114,116,121,69,0,0,40,99,6,0,88,32,0,0,0,0,0,0,176,32,0,0,122,0,0,0,123,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,78,83,95,52,77,109,97,112,73,99,69,69,69,69,0,0,0,0,0,0,40,99,6,0,136,32,0,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,255,98,255,99,255,100,255,101,255,102,255,103,255,104,255,105,255,106,255,107,255,108,255,109,255,110,255,111,255,112,255,113,255,114,255,115,255,116,255,117,255,118,255,119,255,120,255,121,255,122,255,123,255,124,255,125,255,126,255,127,255,128,255,129,255,130,255,131,255,132,255,133,255,134,255,135,255,136,255,137,255,138,255,139,255,140,255,141,255,142,255,143,255,144,255,145,255,146,255,147,255,148,255,149,255,150,255,151,255,152,255,153,255,154,255,155,255,156,255,157,255,158,255,159,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([48,1,48,2,48,12,255,14,255,251,48,26,255,27,255,31,255,1,255,155,48,156,48,180,0,64,255,168,0,62,255,227,255,63,255,253,48,254,48,157,48,158,48,3,48,221,78,5,48,6,48,7,48,252,48,21,32,16,32,15,255,60,255,94,255,37,34,92,255,38,32,37,32,24,32,25,32,28,32,29,32,8,255,9,255,20,48,21,48,59,255,61,255,91,255,93,255,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,11,255,13,255,177,0,215,0,0,0,247,0,29,255,96,34,28,255,30,255,102,34,103,34,30,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,229,255,4,255,224,255,225,255,5,255,3,255,6,255,10,255,32,255,167,0,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,59,32,18,48,146,33,144,33,145,33,147,33,19,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,34,40,34,226,255,210,33,212,33,0,34,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,165,34,18,35,2,34,7,34,97,34,82,34,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,33,48,32,111,38,109,38,106,38,32,32,33,32,182,0,0,0,0,0,0,0,0,0,239,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,0,0,0,0,0,0,0,0,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,0,0,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,0,0,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+74545);
/* memory initializer */ allocate([96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,106,36,107,36,108,36,109,36,110,36,111,36,112,36,113,36,114,36,115,36,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,0,0,73,51,20,51,34,51,77,51,24,51,39,51,3,51,54,51,81,51,87,51,13,51,38,51,35,51,43,51,74,51,59,51,156,51,157,51,158,51,142,51,143,51,196,51,161,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,51,0,0,29,48,31,48,22,33,205,51,33,33,164,50,165,50,166,50,167,50,168,50,49,50,50,50,57,50,126,51,125,51,124,51,82,34,97,34,43,34,46,34,17,34,26,34,165,34,32,34,31,34,191,34,53,34,41,34,42,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,78,22,85,3,90,63,150,192,84,27,97,40,99,246,89,34,144,117,132,28,131,80,122,170,96,225,99,37,110,237,101,102,132,166,130,245,155,147,104,39,87,161,101,113,98,155,91,208,89,123,134,244,152,98,125,190,125,142,155,22,98,159,124,183,136,137,91,181,94,9,99,151,102,72,104,199,149,141,151,79,103,229,78,10,79,77,79,157,79,73,80,242,86,55,89,212,89,1,90,9,92,223,96,15,97,112,97,19,102,5,105,186,112,79,117,112,117,251,121,173,125,239,125,195,128,14,132,99,136,2,139,85,144,122,144,59,83,149,78,165,78,223,87,178,128,193,144,239,120,0,78,241,88,162,110,56,144,50,122,40,131,139,130,47,156,65,81,112,83,189,84,225,84,224,86,251,89,21,95,242,152,235,109,228,128,45,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,150,112,150,160,150,251,151,11,84,243,83,135,91,207,112,189,127,194,143,232,150,111,83,92,157,186,122,17,78,147,120,252,129,38,110,24,86,4,85,29,107,26,133,59,156,229,89,169,83,102,109,220,116,143,149,66,86,145,78,75,144,242,150,79,131,12,153,225,83,182,85,48,91,113,95,32,102,243,102,4,104,56,108,243,108,41,109,91,116,200,118,78,122,52,152,241,130,91,136,96,138,237,146,178,109,171,117,202,118,197,153,166,96,1,139,138,141,178,149,142,105,173,83,134,81,0,0,18,87,48,88,68,89,180,91,246,94,40,96,169,99,244,99,191,108,20,111,142,112,20,113,89,113,213,113,63,115,1,126,118,130,209,130,151,133,96,144,91,146,27,157,105,88,188,101,90,108,37,117,249,81,46,89,101,89,128,95,220,95,188,98,250,101,42,106,39,107,180,107,139,115,193,127,86,137,44,157,14,157,196,158,161,92,150,108,123,131,4,81,75,92,182,97,198,129,118,104,97,114,89,78,250,79,120,83,105,96,41,110,79,122,243,151,11,78,22,83,238,78,85,79,61,79,161,79,115,79,160,82,239,83,9,86,15,89,193,90,182,91,225,91,209,121,135,102,156,103,182,103,76,107,179,108,107,112,194,115,141,121,190,121,60,122,135,123,177,130,219,130,4,131,119,131,239,131,211,131,102,135,178,138,41,86,168,140,230,143,78,144,30,151,138,134,196,79,232,92,17,98,89,114,59,117,229,129,189,130,254,134,192,140,197,150,19,153,213,153,203,78,26,79,227,137,222,86,74,88,202,88,251,94,235,95,42,96,148,96,98,96,208,97,18,98,208,98,57,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,155,102,102,176,104,119,109,112,112,76,117,134,118,117,125,165,130,249,135,139,149,142,150,157,140,241,81,190,82,22,89,179,84,179,91,22,93,104,97,130,105,175,109,141,120,203,132,87,136,114,138,167,147,184,154,108,109,168,153,217,134,163,87,255,103,206,134,14,146,131,82,135,86,4,84,211,94,225,98,185,100,60,104,56,104,187,107,114,115,186,120,107,122,154,137,210,137,107,141,3,143,237,144,163,149,148,150,105,151,102,91,179,92,125,105,77,152,78,152,155,99,32,123,43,106,0,0,127,106,182,104,13,156,95,111,114,82,157,85,112,96,236,98,59,109,7,110,209,110,91,132,16,137,68,143,20,78,57,156,246,83,27,105,58,106,132,151,42,104,92,81,195,122,178,132,220,145,140,147,91,86,40,157,34,104,5,131,49,132,165,124,8,82,197,130,230,116,126,78,131,79,160,81,210,91,10,82,216,82,231,82,251,93,154,85,42,88,230,89,140,91,152,91,219,91,114,94,121,94,163,96,31,97,99,97,190,97,219,99,98,101,209,103,83,104,250,104,62,107,83,107,87,108,34,111,151,111,69,111,176,116,24,117,227,118,11,119,255,122,161,123,33,124,233,125,54,127,240,127,157,128,102,130,158,131,179,137,204,138,171,140,132,144,81,148,147,149,145,149,162,149,101,150,211,151,40,153,24,130,56,78,43,84,184,92,204,93,169,115,76,118,60,119,169,92,235,127,11,141,193,150,17,152,84,152,88,152,1,79,14,79,113,83,156,85,104,86,250,87,71,89,9,91,196,91,144,92,12,94,126,94,204,95,238,99,58,103,215,101,226,101,31,103,203,104,196,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,106,48,94,197,107,23,108,125,108,127,117,72,121,99,91,0,122,0,125,189,95,143,137,24,138,180,140,119,141,204,142,29,143,226,152,14,154,60,155,128,78,125,80,0,81,147,89,156,91,47,98,128,98,236,100,58,107,160,114,145,117,71,121,169,127,251,135,188,138,112,139,172,99,202,131,160,151,9,84,3,84,171,85,84,104,88,106,112,138,39,120,117,103,205,158,116,83,162,91,26,129,80,134,6,144,24,78,69,78,199,78,17,79,202,83,56,84,174,91,19,95,37,96,81,101,0,0,61,103,66,108,114,108,227,108,120,112,3,116,118,122,174,122,8,123,26,125,254,124,102,125,231,101,91,114,187,83,69,92,232,93,210,98,224,98,25,99,32,110,90,134,49,138,221,141,248,146,1,111,166,121,90,155,168,78,171,78,172,78,155,79,160,79,209,80,71,81,246,122,113,81,246,81,84,83,33,83,127,83,235,83,172,85,131,88,225,92,55,95,74,95,47,96,80,96,109,96,31,99,89,101,75,106,193,108,194,114,237,114,239,119,248,128,5,129,8,130,78,133,247,144,225,147,255,151,87,153,90,154,240,78,221,81,45,92,129,102,109,105,64,92,242,102,117,105,137,115,80,104,129,124,197,80,228,82,71,87,254,93,38,147,164,101,35,107,61,107,52,116,129,121,189,121,75,123,202,125,185,130,204,131,127,136,95,137,57,139,209,143,209,145,31,84,128,146,93,78,54,80,229,83,58,83,215,114,150,115,233,119,230,130,175,142,198,153,200,153,210,153,119,81,26,97,94,134,176,85,122,122,118,80,211,91,71,144,133,150,50,78,219,106,231,145,81,92,72,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,99,159,122,147,108,116,151,97,143,170,122,138,113,136,150,130,124,23,104,112,126,81,104,108,147,242,82,27,84,171,133,19,138,164,127,205,142,225,144,102,83,136,136,65,121,194,79,190,80,17,82,68,81,83,85,45,87,234,115,139,87,81,89,98,95,132,95,117,96,118,97,103,97,169,97,178,99,58,100,108,101,111,102,66,104,19,110,102,117,61,122,251,124,76,125,153,125,75,126,107,127,14,131,74,131,205,134,8,138,99,138,102,139,253,142,26,152,143,157,184,130,206,143,232,155,0,0,135,82,31,98,131,100,192,111,153,150,65,104,145,80,32,107,122,108,84,111,116,122,80,125,64,136,35,138,8,103,246,78,57,80,38,80,101,80,124,81,56,82,99,82,167,85,15,87,5,88,204,90,250,94,178,97,248,97,243,98,114,99,28,105,41,106,125,114,172,114,46,115,20,120,111,120,121,125,12,119,169,128,139,137,25,139,226,140,210,142,99,144,117,147,122,150,85,152,19,154,120,158,67,81,159,83,179,83,123,94,38,95,27,110,144,110,132,115,254,115,67,125,55,130,0,138,250,138,80,150,78,78,11,80,228,83,124,84,250,86,209,89,100,91,241,93,171,94,39,95,56,98,69,101,175,103,86,110,208,114,202,124,180,136,161,128,225,128,240,131,78,134,135,138,232,141,55,146,199,150,103,152,19,159,148,78,146,78,13,79,72,83,73,84,62,84,47,90,140,95,161,95,159,96,167,104,142,106,90,116,129,120,158,138,164,138,119,139,144,145,94,78,201,155,164,78,124,79,175,79,25,80,22,80,73,81,108,81,159,82,185,82,254,82,154,83,227,83,17,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,84,137,85,81,87,162,87,125,89,84,91,93,91,143,91,229,93,231,93,247,93,120,94,131,94,154,94,183,94,24,95,82,96,76,97,151,98,216,98,167,99,59,101,2,102,67,102,244,102,109,103,33,104,151,104,203,105,95,108,42,109,105,109,47,110,157,110,50,117,135,118,108,120,63,122,224,124,5,125,24,125,94,125,177,125,21,128,3,128,175,128,177,128,84,129,143,129,42,130,82,131,76,136,97,136,27,139,162,140,252,140,202,144,117,145,113,146,63,120,252,146,164,149,77,150,0,0,5,152,153,153,216,154,59,157,91,82,171,82,247,83,8,84,213,88,247,98,224,111,106,140,95,143,185,158,75,81,59,82,74,84,253,86,64,122,119,145,96,157,210,158,68,115,9,111,112,129,17,117,253,95,218,96,168,154,219,114,188,143,100,107,3,152,202,78,240,86,100,87,190,88,90,90,104,96,199,97,15,102,6,102,57,104,177,104,247,109,213,117,58,125,110,130,66,155,155,78,80,79,201,83,6,85,111,93,230,93,238,93,251,103,153,108,115,116,2,120,80,138,150,147,223,136,80,87,167,94,43,99,181,80,172,80,141,81,0,103,201,84,94,88,187,89,176,91,105,95,77,98,161,99,61,104,115,107,8,110,125,112,199,145,128,114,21,120,38,120,109,121,142,101,48,125,220,131,193,136,9,143,155,150,100,82,40,87,80,103,106,127,161,140,180,81,66,87,42,150,58,88,138,105,180,128,178,84,14,93,252,87,149,120,250,157,92,79,74,82,139,84,62,100,40,102,20,103,245,103,132,122,86,123,34,125,47,147,92,104,173,155,57,123,25,83,138,81,55,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,91,246,98,174,100,230,100,45,103,186,107,169,133,209,150,144,118,214,155,76,99,6,147,171,155,191,118,82,102,9,78,152,80,194,83,113,92,232,96,146,100,99,101,95,104,230,113,202,115,35,117,151,123,130,126,149,134,131,139,219,140,120,145,16,153,172,101,171,102,139,107,213,78,212,78,58,79,127,79,58,82,248,83,242,83,227,85,219,86,235,88,203,89,201,89,255,89,80,91,77,92,2,94,43,94,215,95,29,96,7,99,47,101,92,91,175,101,189,101,232,101,157,103,98,107,0,0,123,107,15,108,69,115,73,121,193,121,248,124,25,125,43,125,162,128,2,129,243,129,150,137,94,138,105,138,102,138,140,138,238,138,199,140,220,140,204,150,252,152,111,107,139,78,60,79,141,79,80,81,87,91,250,91,72,97,1,99,66,102,33,107,203,110,187,108,62,114,189,116,212,117,193,120,58,121,12,128,51,128,234,129,148,132,158,143,80,108,127,158,15,95,88,139,43,157,250,122,248,142,141,91,235,150,3,78,241,83,247,87,49,89,201,90,164,91,137,96,127,110,6,111,190,117,234,140,159,91,0,133,224,123,114,80,244,103,157,130,97,92,74,133,30,126,14,130,153,81,4,92,104,99,102,141,156,101,110,113,62,121,23,125,5,128,29,139,202,142,110,144,199,134,170,144,31,80,250,82,58,92,83,103,124,112,53,114,76,145,200,145,43,147,229,130,194,91,49,95,249,96,59,78,214,83,136,91,75,98,49,103,138,107,233,114,224,115,46,122,107,129,163,141,82,145,150,153,18,81,215,83,106,84,255,91,136,99,57,106,172,125,0,151,218,86,206,83,104,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,91,49,92,222,93,238,79,1,97,254,98,50,109,192,121,203,121,66,125,77,126,210,127,237,129,31,130,144,132,70,136,114,137,144,139,116,142,47,143,49,144,75,145,108,145,198,150,156,145,192,78,79,79,69,81,65,83,147,95,14,98,212,103,65,108,11,110,99,115,38,126,205,145,131,146,212,83,25,89,191,91,209,109,93,121,46,126,155,124,126,88,159,113,250,81,83,136,240,143,202,79,251,92,37,102,172,119,227,122,28,130,255,153,198,81,170,95,236,101,111,105,137,107,243,109,0,0,150,110,100,111,254,118,20,125,225,93,117,144,135,145,6,152,230,81,29,82,64,98,145,102,217,102,26,110,182,94,210,125,114,127,248,102,175,133,247,133,248,138,169,82,217,83,115,89,143,94,144,95,85,96,228,146,100,150,183,80,31,81,221,82,32,83,71,83,236,83,232,84,70,85,49,85,23,86,104,89,190,89,60,90,181,91,6,92,15,92,17,92,26,92,132,94,138,94,224,94,112,95,127,98,132,98,219,98,140,99,119,99,7,102,12,102,45,102,118,102,126,103,162,104,31,106,53,106,188,108,136,109,9,110,88,110,60,113,38,113,103,113,199,117,1,119,93,120,1,121,101,121,240,121,224,122,17,123,167,124,57,125,150,128,214,131,139,132,73,133,93,136,243,136,31,138,60,138,84,138,115,138,97,140,222,140,164,145,102,146,126,147,24,148,156,150,152,151,10,78,8,78,30,78,87,78,151,81,112,82,206,87,52,88,204,88,34,91,56,94,197,96,254,100,97,103,86,103,68,109,182,114,115,117,99,122,184,132,114,139,184,145,32,147,49,86,244,87,254,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,98,13,105,150,107,237,113,84,126,119,128,114,130,230,137,223,152,85,135,177,143,59,92,56,79,225,79,181,79,7,85,32,90,221,91,233,91,195,95,78,97,47,99,176,101,75,102,238,104,155,105,120,109,241,109,51,117,185,117,31,119,94,121,230,121,51,125,227,129,175,130,170,133,170,137,58,138,171,142,155,143,50,144,221,145,7,151,186,78,193,78,3,82,117,88,236,88,11,92,26,117,61,92,78,129,10,138,197,143,99,150,109,151,37,123,207,138,8,152,98,145,243,86,168,83,0,0,23,144,57,84,130,87,37,94,168,99,52,108,138,112,97,119,139,124,224,127,112,136,66,144,84,145,16,147,24,147,143,150,94,116,196,154,7,93,105,93,112,101,162,103,168,141,219,150,110,99,73,103,25,105,197,131,23,152,192,150,254,136,132,111,122,100,248,91,22,78,44,112,93,117,47,102,196,81,54,82,226,82,211,89,129,95,39,96,16,98,63,101,116,101,31,102,116,102,242,104,22,104,99,107,5,110,114,114,31,117,219,118,190,124,86,128,240,88,253,136,127,137,160,138,147,138,203,138,29,144,146,145,82,151,89,151,137,101,14,122,6,129,187,150,45,94,220,96,26,98,165,101,20,102,144,103,243,119,77,122,77,124,62,126,10,129,172,140,100,141,225,141,95,142,169,120,7,82,217,98,165,99,66,100,152,98,45,138,131,122,192,123,172,138,234,150,118,125,12,130,73,135,217,78,72,81,67,83,96,83,163,91,2,92,22,92,221,93,38,98,71,98,176,100,19,104,52,104,201,108,69,109,23,109,211,103,92,111,78,113,125,113,203,101,127,122,173,123,218,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,126,168,127,122,129,27,130,57,130,166,133,110,138,206,140,245,141,120,144,119,144,173,146,145,146,131,149,174,155,77,82,132,85,56,111,54,113,104,81,133,121,85,126,179,129,206,124,76,86,81,88,168,92,170,99,254,102,253,102,90,105,217,114,143,117,142,117,14,121,86,121,223,121,151,124,32,125,68,125,7,134,52,138,59,150,97,144,32,159,231,80,117,82,204,83,226,83,9,80,170,85,238,88,79,89,61,114,139,91,100,92,29,83,227,96,243,96,92,99,131,99,63,99,187,99,0,0,205,100,233,101,249,102,227,93,205,105,253,105,21,111,229,113,137,78,233,117,248,118,147,122,223,124,207,125,156,125,97,128,73,131,88,131,108,132,188,132,251,133,197,136,112,141,1,144,109,144,151,147,28,151,18,154,207,80,151,88,142,97,211,129,53,133,8,141,32,144,195,79,116,80,71,82,115,83,111,96,73,99,95,103,44,110,179,141,31,144,215,79,94,92,202,140,207,101,154,125,82,83,150,136,118,81,195,99,88,91,107,91,10,92,13,100,81,103,92,144,214,78,26,89,42,89,112,108,81,138,62,85,21,88,165,89,240,96,83,98,193,103,53,130,85,105,64,150,196,153,40,154,83,79,6,88,254,91,16,128,177,92,47,94,133,95,32,96,75,97,52,98,255,102,240,108,222,110,206,128,127,129,212,130,139,136,184,140,0,144,46,144,138,150,219,158,219,155,227,78,240,83,39,89,44,123,141,145,76,152,249,157,221,110,39,112,83,83,68,85,133,91,88,98,158,98,211,98,162,108,239,111,34,116,23,138,56,148,193,111,254,138,56,131,231,81,248,134,234,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,83,70,79,84,144,176,143,106,89,49,129,253,93,234,122,191,143,218,104,55,140,248,114,72,156,61,106,176,138,57,78,88,83,6,86,102,87,197,98,162,99,230,101,78,107,225,109,91,110,173,112,237,119,239,122,170,123,187,125,61,128,198,128,203,134,149,138,91,147,227,86,199,88,62,95,173,101,150,102,128,106,181,107,55,117,199,138,36,80,229,119,48,87,27,95,101,96,122,102,96,108,244,117,26,122,110,127,244,129,24,135,69,144,179,153,201,123,92,117,249,122,81,123,196,132,0,0,16,144,233,121,146,122,54,131,225,90,64,119,45,78,242,78,153,91,224,95,189,98,60,102,241,103,232,108,107,134,119,136,59,138,78,145,243,146,208,153,23,106,38,112,42,115,231,130,87,132,175,140,1,78,70,81,203,81,139,85,245,91,22,94,51,94,129,94,20,95,53,95,107,95,180,95,242,97,17,99,162,102,29,103,110,111,82,114,58,117,58,119,116,128,57,129,120,129,118,135,191,138,220,138,133,141,243,141,154,146,119,149,2,152,229,156,197,82,87,99,244,118,21,103,136,108,205,115,195,140,174,147,115,150,37,109,156,88,14,105,204,105,253,143,154,147,219,117,26,144,90,88,2,104,180,99,251,105,67,79,44,111,216,103,187,143,38,133,180,125,84,147,63,105,112,111,106,87,247,88,44,91,44,125,42,114,10,84,227,145,180,157,173,78,78,79,92,80,117,80,67,82,158,140,72,84,36,88,154,91,29,94,149,94,173,94,247,94,31,95,140,96,181,98,58,99,208,99,175,104,64,108,135,120,142,121,11,122,224,125,71,130,2,138,230,138,68,142,19,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,144,45,145,216,145,14,159,229,108,88,100,226,100,117,101,244,110,132,118,27,123,105,144,209,147,186,110,242,84,185,95,164,100,77,143,237,143,68,146,120,81,107,88,41,89,85,92,151,94,251,109,143,126,28,117,188,140,226,142,91,152,185,112,29,79,191,107,177,111,48,117,251,150,78,81,16,84,53,88,87,88,172,89,96,92,146,95,151,101,92,103,33,110,123,118,223,131,237,140,20,144,253,144,77,147,37,120,58,120,170,82,166,94,31,87,116,89,18,96,18,80,90,81,172,81,0,0,205,81,0,82,16,85,84,88,88,88,87,89,149,91,246,92,139,93,188,96,149,98,45,100,113,103,67,104,188,104,223,104,215,118,216,109,111,110,155,109,111,112,200,113,83,95,216,117,119,121,73,123,84,123,82,123,214,124,113,125,48,82,99,132,105,133,228,133,14,138,4,139,70,140,15,142,3,144,15,144,25,148,118,150,45,152,48,154,216,149,205,80,213,82,12,84,2,88,14,92,167,97,158,100,30,109,179,119,229,122,244,128,4,132,83,144,133,146,224,92,7,157,63,83,151,95,179,95,156,109,121,114,99,119,191,121,228,123,210,107,236,114,173,138,3,104,97,106,248,81,129,122,52,105,74,92,246,156,235,130,197,91,73,145,30,112,120,86,111,92,199,96,102,101,140,108,90,140,65,144,19,152,81,84,199,102,13,146,72,89,163,144,133,81,77,78,234,81,153,133,14,139,88,112,122,99,75,147,98,105,180,153,4,126,119,117,87,83,96,105,223,142,227,150,93,108,140,78,60,92,16,95,233,143,2,83,209,140,137,128,121,134,255,94,229,101,115,78,101,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,89,63,92,238,151,251,78,138,89,205,95,141,138,225,111,176,121,98,121,231,91,113,132,43,115,177,113,116,94,245,95,123,99,154,100,195,113,152,124,67,78,252,94,75,78,220,87,162,86,169,96,195,111,13,125,253,128,51,129,191,129,178,143,151,137,164,134,244,93,138,98,173,100,135,137,119,103,226,108,62,109,54,116,52,120,70,90,117,127,173,130,172,153,243,79,195,94,221,98,146,99,87,101,111,103,195,118,76,114,204,128,186,128,41,143,77,145,13,80,249,87,146,90,133,104,0,0,115,105,100,113,253,114,183,140,242,88,224,140,106,150,25,144,127,135,228,121,231,119,41,132,47,79,101,82,90,83,205,98,207,103,202,108,125,118,148,123,149,124,54,130,132,133,235,143,221,102,32,111,6,114,27,126,171,131,193,153,166,158,253,81,177,123,114,120,184,123,135,128,72,123,232,106,97,94,140,128,81,117,96,117,107,81,98,146,140,110,122,118,151,145,234,154,16,79,112,127,156,98,79,123,165,149,233,156,122,86,89,88,228,134,188,150,52,79,36,82,74,83,205,83,219,83,6,94,44,100,145,101,127,103,62,108,78,108,72,114,175,114,237,115,84,117,65,126,44,130,233,133,169,140,196,123,198,145,105,113,18,152,239,152,61,99,105,102,106,117,228,118,208,120,67,133,238,134,42,83,81,83,38,84,131,89,135,94,124,95,178,96,73,98,121,98,171,98,144,101,212,107,204,108,178,117,174,118,145,120,216,121,203,125,119,127,165,128,171,136,185,138,187,140,127,144,94,151,219,152,11,106,56,124,153,80,62,92,174,95,135,103,216,107,53,116,9,119,142,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,159,202,103,23,122,57,83,139,117,237,154,102,95,157,129,241,131,152,128,60,95,197,95,98,117,70,123,60,144,103,104,235,89,155,90,16,125,126,118,44,139,245,79,106,95,25,106,55,108,2,111,226,116,104,121,104,136,85,138,121,140,223,94,207,99,197,117,210,121,215,130,40,147,242,146,156,132,237,134,45,156,193,84,108,95,140,101,92,109,21,112,167,140,211,140,59,152,79,101,246,116,13,78,216,78,224,87,43,89,102,90,204,91,168,81,3,94,156,94,22,96,118,98,119,101,0,0,167,101,110,102,110,109,54,114,38,123,80,129,154,129,153,130,92,139,160,140,230,140,116,141,28,150,68,150,174,79,171,100,102,107,30,130,97,132,106,133,232,144,1,92,83,105,168,152,122,132,87,133,15,79,111,82,169,95,69,94,13,103,143,121,121,129,7,137,134,137,245,109,23,95,85,98,184,108,207,78,105,114,146,155,6,82,59,84,116,86,179,88,164,97,110,98,26,113,110,89,137,124,222,124,27,125,240,150,135,101,94,128,25,78,117,79,117,81,64,88,99,94,115,94,10,95,196,103,38,78,61,133,137,149,91,150,115,124,1,152,251,80,193,88,86,118,167,120,37,82,165,119,17,133,134,123,79,80,9,89,71,114,199,123,232,125,186,143,212,143,77,144,191,79,201,82,41,90,1,95,173,151,221,79,23,130,234,146,3,87,85,99,105,107,43,117,220,136,20,143,66,122,223,82,147,88,85,97,10,98,174,102,205,107,63,124,233,131,35,80,248,79,5,83,70,84,49,88,73,89,157,91,240,92,239,92,41,93,150,94,177,98,103,99,62,101,185,101,11,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,108,225,108,249,112,50,120,43,126,222,128,179,130,12,132,236,132,2,135,18,137,42,138,74,140,166,144,210,146,253,152,243,156,108,157,79,78,161,78,141,80,86,82,74,87,168,89,61,94,216,95,217,95,63,98,180,102,27,103,208,103,210,104,146,81,33,125,170,128,168,129,0,139,140,140,191,140,126,146,50,150,32,84,44,152,23,83,213,80,92,83,168,88,178,100,52,103,103,114,102,119,70,122,230,145,195,82,161,108,134,107,0,88,76,94,84,89,44,103,251,127,225,81,198,118,0,0,105,100,232,120,84,155,187,158,203,87,185,89,39,102,154,103,206,107,233,84,217,105,85,94,156,129,149,103,170,155,254,103,82,156,93,104,166,78,227,79,200,83,185,98,43,103,171,108,196,143,173,79,109,126,191,158,7,78,98,97,128,110,43,111,19,133,115,84,42,103,69,155,243,93,149,123,172,92,198,91,28,135,74,110,209,132,20,122,8,129,153,89,141,124,17,108,32,119,217,82,34,89,33,113,95,114,219,119,39,151,97,157,11,105,127,90,24,90,165,81,13,84,125,84,14,102,223,118,247,143,152,146,244,156,234,89,93,114,197,110,77,81,201,104,191,125,236,125,98,151,186,158,120,100,33,106,2,131,132,89,95,91,219,107,27,115,242,118,178,125,23,128,153,132,50,81,40,103,217,158,238,118,98,103,255,82,5,153,36,92,59,98,126,124,176,140,79,85,182,96,11,125,128,149,1,83,95,78,182,81,28,89,58,114,54,128,206,145,37,95,226,119,132,83,121,95,4,125,172,133,51,138,141,142,86,151,243,103,174,133,83,148,9,97,8,97,185,108,82,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,138,56,143,47,85,81,79,42,81,199,82,203,83,165,91,125,94,160,96,130,97,214,99,9,103,218,103,103,110,140,109,54,115,55,115,49,117,80,121,213,136,152,138,74,144,145,144,245,144,196,150,141,135,21,89,136,78,89,79,14,78,137,138,63,143,16,152,173,80,124,94,150,89,185,91,184,94,218,99,250,99,193,100,220,102,74,105,216,105,11,109,182,110,148,113,40,117,175,122,138,127,0,128,73,132,201,132,129,137,33,139,10,142,101,144,125,150,10,153,126,97,145,98,50,107,0,0,131,108,116,109,204,127,252,127,192,109,133,127,186,135,248,136,101,103,177,131,60,152,247,150,27,109,97,125,61,132,106,145,113,78,117,83,80,93,4,107,235,111,205,133,45,134,167,137,41,82,15,84,101,92,78,103,168,104,6,116,131,116,226,117,207,136,225,136,204,145,226,150,120,150,139,95,135,115,203,122,78,132,160,99,101,117,137,82,65,109,156,110,9,116,89,117,107,120,146,124,134,150,220,122,141,159,182,79,110,97,197,101,92,134,134,78,174,78,218,80,33,78,204,81,238,91,153,101,129,104,188,109,31,115,66,118,173,119,28,122,231,124,111,130,210,138,124,144,207,145,117,150,24,152,155,82,209,125,43,80,152,83,151,103,203,109,208,113,51,116,232,129,42,143,163,150,87,156,159,158,96,116,65,88,153,109,47,125,94,152,228,78,54,79,139,79,183,81,177,82,186,93,28,96,178,115,60,121,211,130,52,146,183,150,246,150,10,151,151,158,98,159,166,102,116,107,23,82,163,82,200,112,194,136,201,94,75,96,144,97,35,111,73,113,62,124,244,125,111,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,132,35,144,44,147,66,84,111,155,211,106,137,112,194,140,239,141,50,151,180,82,65,90,202,94,4,95,23,103,124,105,148,105,106,109,15,111,98,114,252,114,237,123,1,128,126,128,75,135,206,144,109,81,147,158,132,121,139,128,50,147,214,138,45,80,140,84,113,138,106,107,196,140,7,129,209,96,160,103,242,157,153,78,152,78,16,156,107,138,193,133,104,133,0,105,126,110,151,120,85,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,95,16,78,21,78,42,78,49,78,54,78,60,78,63,78,66,78,86,78,88,78,130,78,133,78,107,140,138,78,18,130,13,95,142,78,158,78,159,78,160,78,162,78,176,78,179,78,182,78,206,78,205,78,196,78,198,78,194,78,215,78,222,78,237,78,223,78,247,78,9,79,90,79,48,79,91,79,93,79,87,79,71,79,118,79,136,79,143,79,152,79,123,79,105,79,112,79,145,79,111,79,134,79,150,79,24,81,212,79,223,79,206,79,216,79,219,79,209,79,218,79,208,79,228,79,229,79,26,80,40,80,20,80,42,80,37,80,5,80,28,79,246,79,33,80,41,80,44,80,254,79,239,79,17,80,6,80,67,80,71,80,3,103,85,80,80,80,72,80,90,80,86,80,108,80,120,80,128,80,154,80,133,80,180,80,178,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,80,202,80,179,80,194,80,214,80,222,80,229,80,237,80,227,80,238,80,249,80,245,80,9,81,1,81,2,81,22,81,21,81,20,81,26,81,33,81,58,81,55,81,60,81,59,81,63,81,64,81,82,81,76,81,84,81,98,81,248,122,105,81,106,81,110,81,128,81,130,81,216,86,140,81,137,81,143,81,145,81,147,81,149,81,150,81,164,81,166,81,162,81,169,81,170,81,171,81,179,81,177,81,178,81,176,81,181,81,189,81,197,81,201,81,219,81,224,81,85,134,233,81,237,81,0,0,240,81,245,81,254,81,4,82,11,82,20,82,14,82,39,82,42,82,46,82,51,82,57,82,79,82,68,82,75,82,76,82,94,82,84,82,106,82,116,82,105,82,115,82,127,82,125,82,141,82,148,82,146,82,113,82,136,82,145,82,168,143,167,143,172,82,173,82,188,82,181,82,193,82,205,82,215,82,222,82,227,82,230,82,237,152,224,82,243,82,245,82,248,82,249,82,6,83,8,83,56,117,13,83,16,83,15,83,21,83,26,83,35,83,47,83,49,83,51,83,56,83,64,83,70,83,69,83,23,78,73,83,77,83,214,81,94,83,105,83,110,83,24,89,123,83,119,83,130,83,150,83,160,83,166,83,165,83,174,83,176,83,182,83,195,83,18,124,217,150,223,83,252,102,238,113,238,83,232,83,237,83,250,83,1,84,61,84,64,84,44,84,45,84,60,84,46,84,54,84,41,84,29,84,78,84,143,84,117,84,142,84,95,84,113,84,119,84,112,84,146,84,123,84,128,84,118,84,132,84,144,84,134,84,199,84,162,84,184,84,165,84,172,84,196,84,200,84,168,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,84,194,84,164,84,190,84,188,84,216,84,229,84,230,84,15,85,20,85,253,84,238,84,237,84,250,84,226,84,57,85,64,85,99,85,76,85,46,85,92,85,69,85,86,85,87,85,56,85,51,85,93,85,153,85,128,85,175,84,138,85,159,85,123,85,126,85,152,85,158,85,174,85,124,85,131,85,169,85,135,85,168,85,218,85,197,85,223,85,196,85,220,85,228,85,212,85,20,86,247,85,22,86,254,85,253,85,27,86,249,85,78,86,80,86,223,113,52,86,54,86,50,86,56,86,0,0,107,86,100,86,47,86,108,86,106,86,134,86,128,86,138,86,160,86,148,86,143,86,165,86,174,86,182,86,180,86,194,86,188,86,193,86,195,86,192,86,200,86,206,86,209,86,211,86,215,86,238,86,249,86,0,87,255,86,4,87,9,87,8,87,11,87,13,87,19,87,24,87,22,87,199,85,28,87,38,87,55,87,56,87,78,87,59,87,64,87,79,87,105,87,192,87,136,87,97,87,127,87,137,87,147,87,160,87,179,87,164,87,170,87,176,87,195,87,198,87,212,87,210,87,211,87,10,88,214,87,227,87,11,88,25,88,29,88,114,88,33,88,98,88,75,88,112,88,192,107,82,88,61,88,121,88,133,88,185,88,159,88,171,88,186,88,222,88,187,88,184,88,174,88,197,88,211,88,209,88,215,88,217,88,216,88,229,88,220,88,228,88,223,88,239,88,250,88,249,88,251,88,252,88,253,88,2,89,10,89,16,89,27,89,166,104,37,89,44,89,45,89,50,89,56,89,62,89,210,122,85,89,80,89,78,89,90,89,88,89,98,89,96,89,103,89,108,89,105,89], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+77616);
/* memory initializer */ allocate([120,89,129,89,157,89,94,79,171,79,163,89,178,89,198,89,232,89,220,89,141,89,217,89,218,89,37,90,31,90,17,90,28,90,9,90,26,90,64,90,108,90,73,90,53,90,54,90,98,90,106,90,154,90,188,90,190,90,203,90,194,90,189,90,227,90,215,90,230,90,233,90,214,90,250,90,251,90,12,91,11,91,22,91,50,91,208,90,42,91,54,91,62,91,67,91,69,91,64,91,81,91,85,91,90,91,91,91,101,91,105,91,112,91,115,91,117,91,120,91,136,101,122,91,128,91,0,0,131,91,166,91,184,91,195,91,199,91,201,91,212,91,208,91,228,91,230,91,226,91,222,91,229,91,235,91,240,91,246,91,243,91,5,92,7,92,8,92,13,92,19,92,32,92,34,92,40,92,56,92,57,92,65,92,70,92,78,92,83,92,80,92,79,92,113,91,108,92,110,92,98,78,118,92,121,92,140,92,145,92,148,92,155,89,171,92,187,92,182,92,188,92,183,92,197,92,190,92,199,92,217,92,233,92,253,92,250,92,237,92,140,93,234,92,11,93,21,93,23,93,92,93,31,93,27,93,17,93,20,93,34,93,26,93,25,93,24,93,76,93,82,93,78,93,75,93,108,93,115,93,118,93,135,93,132,93,130,93,162,93,157,93,172,93,174,93,189,93,144,93,183,93,188,93,201,93,205,93,211,93,210,93,214,93,219,93,235,93,242,93,245,93,11,94,26,94,25,94,17,94,27,94,54,94,55,94,68,94,67,94,64,94,78,94,87,94,84,94,95,94,98,94,100,94,71,94,117,94,118,94,122,94,188,158,127,94,160,94,193,94,194,94,200,94,208,94,207,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,94,227,94,221,94,218,94,219,94,226,94,225,94,232,94,233,94,236,94,241,94,243,94,240,94,244,94,248,94,254,94,3,95,9,95,93,95,92,95,11,95,17,95,22,95,41,95,45,95,56,95,65,95,72,95,76,95,78,95,47,95,81,95,86,95,87,95,89,95,97,95,109,95,115,95,119,95,131,95,130,95,127,95,138,95,136,95,145,95,135,95,158,95,153,95,152,95,160,95,168,95,173,95,188,95,214,95,251,95,228,95,248,95,241,95,221,95,179,96,255,95,33,96,96,96,0,0,25,96,16,96,41,96,14,96,49,96,27,96,21,96,43,96,38,96,15,96,58,96,90,96,65,96,106,96,119,96,95,96,74,96,70,96,77,96,99,96,67,96,100,96,66,96,108,96,107,96,89,96,129,96,141,96,231,96,131,96,154,96,132,96,155,96,150,96,151,96,146,96,167,96,139,96,225,96,184,96,224,96,211,96,180,96,240,95,189,96,198,96,181,96,216,96,77,97,21,97,6,97,246,96,247,96,0,97,244,96,250,96,3,97,33,97,251,96,241,96,13,97,14,97,71,97,62,97,40,97,39,97,74,97,63,97,60,97,44,97,52,97,61,97,66,97,68,97,115,97,119,97,88,97,89,97,90,97,107,97,116,97,111,97,101,97,113,97,95,97,93,97,83,97,117,97,153,97,150,97,135,97,172,97,148,97,154,97,138,97,145,97,171,97,174,97,204,97,202,97,201,97,247,97,200,97,195,97,198,97,186,97,203,97,121,127,205,97,230,97,227,97,246,97,250,97,244,97,255,97,253,97,252,97,254,97,0,98,8,98,9,98,13,98,12,98,20,98,27,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,98,33,98,42,98,46,98,48,98,50,98,51,98,65,98,78,98,94,98,99,98,91,98,96,98,104,98,124,98,130,98,137,98,126,98,146,98,147,98,150,98,212,98,131,98,148,98,215,98,209,98,187,98,207,98,255,98,198,98,212,100,200,98,220,98,204,98,202,98,194,98,199,98,155,98,201,98,12,99,238,98,241,98,39,99,2,99,8,99,239,98,245,98,80,99,62,99,77,99,28,100,79,99,150,99,142,99,128,99,171,99,118,99,163,99,143,99,137,99,159,99,181,99,107,99,0,0,105,99,190,99,233,99,192,99,198,99,227,99,201,99,210,99,246,99,196,99,22,100,52,100,6,100,19,100,38,100,54,100,29,101,23,100,40,100,15,100,103,100,111,100,118,100,78,100,42,101,149,100,147,100,165,100,169,100,136,100,188,100,218,100,210,100,197,100,199,100,187,100,216,100,194,100,241,100,231,100,9,130,224,100,225,100,172,98,227,100,239,100,44,101,246,100,244,100,242,100,250,100,0,101,253,100,24,101,28,101,5,101,36,101,35,101,43,101,52,101,53,101,55,101,54,101,56,101,75,117,72,101,86,101,85,101,77,101,88,101,94,101,93,101,114,101,120,101,130,101,131,101,138,139,155,101,159,101,171,101,183,101,195,101,198,101,193,101,196,101,204,101,210,101,219,101,217,101,224,101,225,101,241,101,114,103,10,102,3,102,251,101,115,103,53,102,54,102,52,102,28,102,79,102,68,102,73,102,65,102,94,102,93,102,100,102,103,102,104,102,95,102,98,102,112,102,131,102,136,102,142,102,137,102,132,102,152,102,157,102,193,102,185,102,201,102,190,102,188,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,102,184,102,214,102,218,102,224,102,63,102,230,102,233,102,240,102,245,102,247,102,15,103,22,103,30,103,38,103,39,103,56,151,46,103,63,103,54,103,65,103,56,103,55,103,70,103,94,103,96,103,89,103,99,103,100,103,137,103,112,103,169,103,124,103,106,103,140,103,139,103,166,103,161,103,133,103,183,103,239,103,180,103,236,103,179,103,233,103,184,103,228,103,222,103,221,103,226,103,238,103,185,103,206,103,198,103,231,103,156,106,30,104,70,104,41,104,64,104,77,104,50,104,78,104,0,0,179,104,43,104,89,104,99,104,119,104,127,104,159,104,143,104,173,104,148,104,157,104,155,104,131,104,174,106,185,104,116,104,181,104,160,104,186,104,15,105,141,104,126,104,1,105,202,104,8,105,216,104,34,105,38,105,225,104,12,105,205,104,212,104,231,104,213,104,54,105,18,105,4,105,215,104,227,104,37,105,249,104,224,104,239,104,40,105,42,105,26,105,35,105,33,105,198,104,121,105,119,105,92,105,120,105,107,105,84,105,126,105,110,105,57,105,116,105,61,105,89,105,48,105,97,105,94,105,93,105,129,105,106,105,178,105,174,105,208,105,191,105,193,105,211,105,190,105,206,105,232,91,202,105,221,105,187,105,195,105,167,105,46,106,145,105,160,105,156,105,149,105,180,105,222,105,232,105,2,106,27,106,255,105,10,107,249,105,242,105,231,105,5,106,177,105,30,106,237,105,20,106,235,105,10,106,18,106,193,106,35,106,19,106,68,106,12,106,114,106,54,106,120,106,71,106,98,106,89,106,102,106,72,106,56,106,34,106,144,106,141,106,160,106,132,106,162,106,163,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,106,23,134,187,106,195,106,194,106,184,106,179,106,172,106,222,106,209,106,223,106,170,106,218,106,234,106,251,106,5,107,22,134,250,106,18,107,22,107,49,155,31,107,56,107,55,107,220,118,57,107,238,152,71,107,67,107,73,107,80,107,89,107,84,107,91,107,95,107,97,107,120,107,121,107,127,107,128,107,132,107,131,107,141,107,152,107,149,107,158,107,164,107,170,107,171,107,175,107,178,107,177,107,179,107,183,107,188,107,198,107,203,107,211,107,223,107,236,107,235,107,243,107,239,107,0,0,190,158,8,108,19,108,20,108,27,108,36,108,35,108,94,108,85,108,98,108,106,108,130,108,141,108,154,108,129,108,155,108,126,108,104,108,115,108,146,108,144,108,196,108,241,108,211,108,189,108,215,108,197,108,221,108,174,108,177,108,190,108,186,108,219,108,239,108,217,108,234,108,31,109,77,136,54,109,43,109,61,109,56,109,25,109,53,109,51,109,18,109,12,109,99,109,147,109,100,109,90,109,121,109,89,109,142,109,149,109,228,111,133,109,249,109,21,110,10,110,181,109,199,109,230,109,184,109,198,109,236,109,222,109,204,109,232,109,210,109,197,109,250,109,217,109,228,109,213,109,234,109,238,109,45,110,110,110,46,110,25,110,114,110,95,110,62,110,35,110,107,110,43,110,118,110,77,110,31,110,67,110,58,110,78,110,36,110,255,110,29,110,56,110,130,110,170,110,152,110,201,110,183,110,211,110,189,110,175,110,196,110,178,110,212,110,213,110,143,110,165,110,194,110,159,110,65,111,17,111,76,112,236,110,248,110,254,110,63,111,242,110,49,111,239,110,50,111,204,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+87856);
/* memory initializer */ allocate([62,111,19,111,247,110,134,111,122,111,120,111,129,111,128,111,111,111,91,111,243,111,109,111,130,111,124,111,88,111,142,111,145,111,194,111,102,111,179,111,163,111,161,111,164,111,185,111,198,111,170,111,223,111,213,111,236,111,212,111,216,111,241,111,238,111,219,111,9,112,11,112,250,111,17,112,1,112,15,112,254,111,27,112,26,112,116,111,29,112,24,112,31,112,48,112,62,112,50,112,81,112,99,112,153,112,146,112,175,112,241,112,172,112,184,112,179,112,174,112,223,112,203,112,221,112,0,0,217,112,9,113,253,112,28,113,25,113,101,113,85,113,136,113,102,113,98,113,76,113,86,113,108,113,143,113,251,113,132,113,149,113,168,113,172,113,215,113,185,113,190,113,210,113,201,113,212,113,206,113,224,113,236,113,231,113,245,113,252,113,249,113,255,113,13,114,16,114,27,114,40,114,45,114,44,114,48,114,50,114,59,114,60,114,63,114,64,114,70,114,75,114,88,114,116,114,126,114,130,114,129,114,135,114,146,114,150,114,162,114,167,114,185,114,178,114,195,114,198,114,196,114,206,114,210,114,226,114,224,114,225,114,249,114,247,114,15,80,23,115,10,115,28,115,22,115,29,115,52,115,47,115,41,115,37,115,62,115,78,115,79,115,216,158,87,115,106,115,104,115,112,115,120,115,117,115,123,115,122,115,200,115,179,115,206,115,187,115,192,115,229,115,238,115,222,115,162,116,5,116,111,116,37,116,248,115,50,116,58,116,85,116,63,116,95,116,89,116,65,116,92,116,105,116,112,116,99,116,106,116,118,116,126,116,139,116,158,116,167,116,202,116,207,116,212,116,241,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,116,227,116,231,116,233,116,238,116,242,116,240,116,241,116,248,116,247,116,4,117,3,117,5,117,12,117,14,117,13,117,21,117,19,117,30,117,38,117,44,117,60,117,68,117,77,117,74,117,73,117,91,117,70,117,90,117,105,117,100,117,103,117,107,117,109,117,120,117,118,117,134,117,135,117,116,117,138,117,137,117,130,117,148,117,154,117,157,117,165,117,163,117,194,117,179,117,195,117,181,117,189,117,184,117,188,117,177,117,205,117,202,117,210,117,217,117,227,117,222,117,254,117,255,117,0,0,252,117,1,118,240,117,250,117,242,117,243,117,11,118,13,118,9,118,31,118,39,118,32,118,33,118,34,118,36,118,52,118,48,118,59,118,71,118,72,118,70,118,92,118,88,118,97,118,98,118,104,118,105,118,106,118,103,118,108,118,112,118,114,118,118,118,120,118,124,118,128,118,131,118,136,118,139,118,142,118,150,118,147,118,153,118,154,118,176,118,180,118,184,118,185,118,186,118,194,118,205,118,214,118,210,118,222,118,225,118,229,118,231,118,234,118,47,134,251,118,8,119,7,119,4,119,41,119,36,119,30,119,37,119,38,119,27,119,55,119,56,119,71,119,90,119,104,119,107,119,91,119,101,119,127,119,126,119,121,119,142,119,139,119,145,119,160,119,158,119,176,119,182,119,185,119,191,119,188,119,189,119,187,119,199,119,205,119,215,119,218,119,220,119,227,119,238,119,252,119,12,120,18,120,38,121,32,120,42,121,69,120,142,120,116,120,134,120,124,120,154,120,140,120,163,120,181,120,170,120,175,120,209,120,198,120,203,120,212,120,190,120,188,120,197,120,202,120,236,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,120,218,120,253,120,244,120,7,121,18,121,17,121,25,121,44,121,43,121,64,121,96,121,87,121,95,121,90,121,85,121,83,121,122,121,127,121,138,121,157,121,167,121,75,159,170,121,174,121,179,121,185,121,186,121,201,121,213,121,231,121,236,121,225,121,227,121,8,122,13,122,24,122,25,122,32,122,31,122,128,121,49,122,59,122,62,122,55,122,67,122,87,122,73,122,97,122,98,122,105,122,157,159,112,122,121,122,125,122,136,122,151,122,149,122,152,122,150,122,169,122,200,122,176,122,0,0,182,122,197,122,196,122,191,122,131,144,199,122,202,122,205,122,207,122,213,122,211,122,217,122,218,122,221,122,225,122,226,122,230,122,237,122,240,122,2,123,15,123,10,123,6,123,51,123,24,123,25,123,30,123,53,123,40,123,54,123,80,123,122,123,4,123,77,123,11,123,76,123,69,123,117,123,101,123,116,123,103,123,112,123,113,123,108,123,110,123,157,123,152,123,159,123,141,123,156,123,154,123,139,123,146,123,143,123,93,123,153,123,203,123,193,123,204,123,207,123,180,123,198,123,221,123,233,123,17,124,20,124,230,123,229,123,96,124,0,124,7,124,19,124,243,123,247,123,23,124,13,124,246,123,35,124,39,124,42,124,31,124,55,124,43,124,61,124,76,124,67,124,84,124,79,124,64,124,80,124,88,124,95,124,100,124,86,124,101,124,108,124,117,124,131,124,144,124,164,124,173,124,162,124,171,124,161,124,168,124,179,124,178,124,177,124,174,124,185,124,189,124,192,124,197,124,194,124,216,124,210,124,220,124,226,124,59,155,239,124,242,124,244,124,246,124,250,124,6,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,125,28,125,21,125,10,125,69,125,75,125,46,125,50,125,63,125,53,125,70,125,115,125,86,125,78,125,114,125,104,125,110,125,79,125,99,125,147,125,137,125,91,125,143,125,125,125,155,125,186,125,174,125,163,125,181,125,199,125,189,125,171,125,61,126,162,125,175,125,220,125,184,125,159,125,176,125,216,125,221,125,228,125,222,125,251,125,242,125,225,125,5,126,10,126,35,126,33,126,18,126,49,126,31,126,9,126,11,126,34,126,70,126,102,126,59,126,53,126,57,126,67,126,55,126,0,0,50,126,58,126,103,126,93,126,86,126,94,126,89,126,90,126,121,126,106,126,105,126,124,126,123,126,131,126,213,125,125,126,174,143,127,126,136,126,137,126,140,126,146,126,144,126,147,126,148,126,150,126,142,126,155,126,156,126,56,127,58,127,69,127,76,127,77,127,78,127,80,127,81,127,85,127,84,127,88,127,95,127,96,127,104,127,105,127,103,127,120,127,130,127,134,127,131,127,136,127,135,127,140,127,148,127,158,127,157,127,154,127,163,127,175,127,178,127,185,127,174,127,182,127,184,127,113,139,197,127,198,127,202,127,213,127,212,127,225,127,230,127,233,127,243,127,249,127,220,152,6,128,4,128,11,128,18,128,24,128,25,128,28,128,33,128,40,128,63,128,59,128,74,128,70,128,82,128,88,128,90,128,95,128,98,128,104,128,115,128,114,128,112,128,118,128,121,128,125,128,127,128,132,128,134,128,133,128,155,128,147,128,154,128,173,128,144,81,172,128,219,128,229,128,217,128,221,128,196,128,218,128,214,128,9,129,239,128,241,128,27,129,41,129,35,129,47,129,75,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,150,70,129,62,129,83,129,81,129,252,128,113,129,110,129,101,129,102,129,116,129,131,129,136,129,138,129,128,129,130,129,160,129,149,129,164,129,163,129,95,129,147,129,169,129,176,129,181,129,190,129,184,129,189,129,192,129,194,129,186,129,201,129,205,129,209,129,217,129,216,129,200,129,218,129,223,129,224,129,231,129,250,129,251,129,254,129,1,130,2,130,5,130,7,130,10,130,13,130,16,130,22,130,41,130,43,130,56,130,51,130,64,130,89,130,88,130,93,130,90,130,95,130,100,130,0,0,98,130,104,130,106,130,107,130,46,130,113,130,119,130,120,130,126,130,141,130,146,130,171,130,159,130,187,130,172,130,225,130,227,130,223,130,210,130,244,130,243,130,250,130,147,131,3,131,251,130,249,130,222,130,6,131,220,130,9,131,217,130,53,131,52,131,22,131,50,131,49,131,64,131,57,131,80,131,69,131,47,131,43,131,23,131,24,131,133,131,154,131,170,131,159,131,162,131,150,131,35,131,142,131,135,131,138,131,124,131,181,131,115,131,117,131,160,131,137,131,168,131,244,131,19,132,235,131,206,131,253,131,3,132,216,131,11,132,193,131,247,131,7,132,224,131,242,131,13,132,34,132,32,132,189,131,56,132,6,133,251,131,109,132,42,132,60,132,90,133,132,132,119,132,107,132,173,132,110,132,130,132,105,132,70,132,44,132,111,132,121,132,53,132,202,132,98,132,185,132,191,132,159,132,217,132,205,132,187,132,218,132,208,132,193,132,198,132,214,132,161,132,33,133,255,132,244,132,23,133,24,133,44,133,31,133,21,133,20,133,252,132,64,133,99,133,88,133,72,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,133,2,134,75,133,85,133,128,133,164,133,136,133,145,133,138,133,168,133,109,133,148,133,155,133,234,133,135,133,156,133,119,133,126,133,144,133,201,133,186,133,207,133,185,133,208,133,213,133,221,133,229,133,220,133,249,133,10,134,19,134,11,134,254,133,250,133,6,134,34,134,26,134,48,134,63,134,77,134,85,78,84,134,95,134,103,134,113,134,147,134,163,134,169,134,170,134,139,134,140,134,182,134,175,134,196,134,198,134,176,134,201,134,35,136,171,134,212,134,222,134,233,134,236,134,0,0,223,134,219,134,239,134,18,135,6,135,8,135,0,135,3,135,251,134,17,135,9,135,13,135,249,134,10,135,52,135,63,135,55,135,59,135,37,135,41,135,26,135,96,135,95,135,120,135,76,135,78,135,116,135,87,135,104,135,110,135,89,135,83,135,99,135,106,135,5,136,162,135,159,135,130,135,175,135,203,135,189,135,192,135,208,135,214,150,171,135,196,135,179,135,199,135,198,135,187,135,239,135,242,135,224,135,15,136,13,136,254,135,246,135,247,135,14,136,210,135,17,136,22,136,21,136,34,136,33,136,49,136,54,136,57,136,39,136,59,136,68,136,66,136,82,136,89,136,94,136,98,136,107,136,129,136,126,136,158,136,117,136,125,136,181,136,114,136,130,136,151,136,146,136,174,136,153,136,162,136,141,136,164,136,176,136,191,136,177,136,195,136,196,136,212,136,216,136,217,136,221,136,249,136,2,137,252,136,244,136,232,136,242,136,4,137,12,137,10,137,19,137,67,137,30,137,37,137,42,137,43,137,65,137,68,137,59,137,54,137,56,137,76,137,29,137,96,137,94,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,137,100,137,109,137,106,137,111,137,116,137,119,137,126,137,131,137,136,137,138,137,147,137,152,137,161,137,169,137,166,137,172,137,175,137,178,137,186,137,189,137,191,137,192,137,218,137,220,137,221,137,231,137,244,137,248,137,3,138,22,138,16,138,12,138,27,138,29,138,37,138,54,138,65,138,91,138,82,138,70,138,72,138,124,138,109,138,108,138,98,138,133,138,130,138,132,138,168,138,161,138,145,138,165,138,166,138,154,138,163,138,196,138,205,138,194,138,218,138,235,138,243,138,231,138,0,0,228,138,241,138,20,139,224,138,226,138,247,138,222,138,219,138,12,139,7,139,26,139,225,138,22,139,16,139,23,139,32,139,51,139,171,151,38,139,43,139,62,139,40,139,65,139,76,139,79,139,78,139,73,139,86,139,91,139,90,139,107,139,95,139,108,139,111,139,116,139,125,139,128,139,140,139,142,139,146,139,147,139,150,139,153,139,154,139,58,140,65,140,63,140,72,140,76,140,78,140,80,140,85,140,98,140,108,140,120,140,122,140,130,140,137,140,133,140,138,140,141,140,142,140,148,140,124,140,152,140,29,98,173,140,170,140,189,140,178,140,179,140,174,140,182,140,200,140,193,140,228,140,227,140,218,140,253,140,250,140,251,140,4,141,5,141,10,141,7,141,15,141,13,141,16,141,78,159,19,141,205,140,20,141,22,141,103,141,109,141,113,141,115,141,129,141,153,141,194,141,190,141,186,141,207,141,218,141,214,141,204,141,219,141,203,141,234,141,235,141,223,141,227,141,252,141,8,142,9,142,255,141,29,142,30,142,16,142,31,142,66,142,53,142,48,142,52,142,74,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,142,73,142,76,142,80,142,72,142,89,142,100,142,96,142,42,142,99,142,85,142,118,142,114,142,124,142,129,142,135,142,133,142,132,142,139,142,138,142,147,142,145,142,148,142,153,142,170,142,161,142,172,142,176,142,198,142,177,142,190,142,197,142,200,142,203,142,219,142,227,142,252,142,251,142,235,142,254,142,10,143,5,143,21,143,18,143,25,143,19,143,28,143,31,143,27,143,12,143,38,143,51,143,59,143,57,143,69,143,66,143,62,143,76,143,73,143,70,143,78,143,87,143,92,143,0,0,98,143,99,143,100,143,156,143,159,143,163,143,173,143,175,143,183,143,218,143,229,143,226,143,234,143,239,143,135,144,244,143,5,144,249,143,250,143,17,144,21,144,33,144,13,144,30,144,22,144,11,144,39,144,54,144,53,144,57,144,248,143,79,144,80,144,81,144,82,144,14,144,73,144,62,144,86,144,88,144,94,144,104,144,111,144,118,144,168,150,114,144,130,144,125,144,129,144,128,144,138,144,137,144,143,144,168,144,175,144,177,144,181,144,226,144,228,144,72,98,219,144,2,145,18,145,25,145,50,145,48,145,74,145,86,145,88,145,99,145,101,145,105,145,115,145,114,145,139,145,137,145,130,145,162,145,171,145,175,145,170,145,181,145,180,145,186,145,192,145,193,145,201,145,203,145,208,145,214,145,223,145,225,145,219,145,252,145,245,145,246,145,30,146,255,145,20,146,44,146,21,146,17,146,94,146,87,146,69,146,73,146,100,146,72,146,149,146,63,146,75,146,80,146,156,146,150,146,147,146,155,146,90,146,207,146,185,146,183,146,233,146,15,147,250,146,68,147,46,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,147,34,147,26,147,35,147,58,147,53,147,59,147,92,147,96,147,124,147,110,147,86,147,176,147,172,147,173,147,148,147,185,147,214,147,215,147,232,147,229,147,216,147,195,147,221,147,208,147,200,147,228,147,26,148,20,148,19,148,3,148,7,148,16,148,54,148,43,148,53,148,33,148,58,148,65,148,82,148,68,148,91,148,96,148,98,148,94,148,106,148,41,146,112,148,117,148,119,148,125,148,90,148,124,148,126,148,129,148,127,148,130,149,135,149,138,149,148,149,150,149,152,149,153,149,0,0,160,149,168,149,167,149,173,149,188,149,187,149,185,149,190,149,202,149,246,111,195,149,205,149,204,149,213,149,212,149,214,149,220,149,225,149,229,149,226,149,33,150,40,150,46,150,47,150,66,150,76,150,79,150,75,150,119,150,92,150,94,150,93,150,95,150,102,150,114,150,108,150,141,150,152,150,149,150,151,150,170,150,167,150,177,150,178,150,176,150,180,150,182,150,184,150,185,150,206,150,203,150,201,150,205,150,77,137,220,150,13,151,213,150,249,150,4,151,6,151,8,151,19,151,14,151,17,151,15,151,22,151,25,151,36,151,42,151,48,151,57,151,61,151,62,151,68,151,70,151,72,151,66,151,73,151,92,151,96,151,100,151,102,151,104,151,210,82,107,151,113,151,121,151,133,151,124,151,129,151,122,151,134,151,139,151,143,151,144,151,156,151,168,151,166,151,163,151,179,151,180,151,195,151,198,151,200,151,203,151,220,151,237,151,79,159,242,151,223,122,246,151,245,151,15,152,12,152,56,152,36,152,33,152,55,152,61,152,70,152,79,152,75,152,107,152,111,152,112,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,152,116,152,115,152,170,152,175,152,177,152,182,152,196,152,195,152,198,152,233,152,235,152,3,153,9,153,18,153,20,153,24,153,33,153,29,153,30,153,36,153,32,153,44,153,46,153,61,153,62,153,66,153,73,153,69,153,80,153,75,153,81,153,82,153,76,153,85,153,151,153,152,153,165,153,173,153,174,153,188,153,223,153,219,153,221,153,216,153,209,153,237,153,238,153,241,153,242,153,251,153,248,153,1,154,15,154,5,154,226,153,25,154,43,154,55,154,69,154,66,154,64,154,67,154,0,0,62,154,85,154,77,154,91,154,87,154,95,154,98,154,101,154,100,154,105,154,107,154,106,154,173,154,176,154,188,154,192,154,207,154,209,154,211,154,212,154,222,154,223,154,226,154,227,154,230,154,239,154,235,154,238,154,244,154,241,154,247,154,251,154,6,155,24,155,26,155,31,155,34,155,35,155,37,155,39,155,40,155,41,155,42,155,46,155,47,155,50,155,68,155,67,155,79,155,77,155,78,155,81,155,88,155,116,155,147,155,131,155,145,155,150,155,151,155,159,155,160,155,168,155,180,155,192,155,202,155,185,155,198,155,207,155,209,155,210,155,227,155,226,155,228,155,212,155,225,155,58,156,242,155,241,155,240,155,21,156,20,156,9,156,19,156,12,156,6,156,8,156,18,156,10,156,4,156,46,156,27,156,37,156,36,156,33,156,48,156,71,156,50,156,70,156,62,156,90,156,96,156,103,156,118,156,120,156,231,156,236,156,240,156,9,157,8,157,235,156,3,157,6,157,42,157,38,157,175,157,35,157,31,157,68,157,21,157,18,157,65,157,63,157,62,157,70,157,72,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,157,94,157,100,157,81,157,80,157,89,157,114,157,137,157,135,157,171,157,111,157,122,157,154,157,164,157,169,157,178,157,196,157,193,157,187,157,184,157,186,157,198,157,207,157,194,157,217,157,211,157,248,157,230,157,237,157,239,157,253,157,26,158,27,158,30,158,117,158,121,158,125,158,129,158,136,158,139,158,140,158,146,158,149,158,145,158,157,158,165,158,169,158,184,158,170,158,173,158,97,151,204,158,206,158,207,158,208,158,212,158,220,158,222,158,221,158,224,158,229,158,232,158,239,158,0,0,244,158,246,158,247,158,249,158,251,158,252,158,253,158,7,159,8,159,183,118,21,159,33,159,44,159,62,159,74,159,82,159,84,159,99,159,95,159,96,159,97,159,102,159,103,159,108,159,106,159,119,159,114,159,118,159,149,159,156,159,160,159,47,88,199,105,89,144,100,116,220,81,153,113], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+123184);
/* memory initializer */ allocate([138,126,28,137,72,147,136,146,220,132,201,79,187,112,49,102,200,104,249,146,251,102,69,95,40,78,225,78,252,78,0,79,3,79,57,79,86,79,146,79,138,79,154,79,148,79,205,79,64,80,34,80,255,79,30,80,70,80,112,80,66,80,148,80,244,80,216,80,74,81,100,81,157,81,190,81,236,81,21,82,156,82,166,82,192,82,219,82,0,83,7,83,36,83,114,83,147,83,178,83,221,83,14,250,156,84,138,84,169,84,255,84,134,85,89,87,101,87,172,87,200,87,199,87,15,250,0,0,16,250,158,88,178,88,11,89,83,89,91,89,93,89,99,89,164,89,186,89,86,91,192,91,47,117,216,91,236,91,30,92,166,92,186,92,245,92,39,93,83,93,17,250,66,93,109,93,184,93,185,93,208,93,33,95,52,95,103,95,183,95,222,95,93,96,133,96,138,96,222,96,213,96,32,97,242,96,17,97,55,97,48,97,152,97,19,98,166,98,245,99,96,100,157,100,206,100,78,101,0,102,21,102,59,102,9,102,46,102,30,102,36,102,101,102,87,102,89,102,18,250,115,102,153,102,160,102,178,102,191,102,250,102,14,103,41,249,102,103,187,103,82,104,192,103,1,104,68,104,207,104,19,250,104,105,20,250,152,105,226,105,48,106,107,106,70,106,115,106,126,106,226,106,228,106,214,107,63,108,92,108,134,108,111,108,218,108,4,109,135,109,111,109,150,109,172,109,207,109,248,109,242,109,252,109,57,110,92,110,39,110,60,110,191,110,136,111,181,111,245,111,5,112,7,112,40,112,133,112,171,112,15,113,4,113,92,113,70,113,71,113,21,250,193,113,254,113,177,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,114,36,115,22,250,119,115,189,115,201,115,214,115,227,115,210,115,7,116,245,115,38,116,42,116,41,116,46,116,98,116,137,116,159,116,1,117,111,117,130,118,156,118,158,118,155,118,166,118,23,250,70,119,175,82,33,120,78,120,100,120,122,120,48,121,24,250,25,250,26,250,148,121,27,250,155,121,209,122,231,122,28,250,235,122,158,123,29,250,72,125,92,125,183,125,160,125,214,125,82,126,71,127,161,127,30,250,1,131,98,131,127,131,199,131,246,131,72,132,180,132,83,133,89,133,0,0,107,133,31,250,176,133,32,250,33,250,7,136,245,136,18,138,55,138,121,138,167,138,190,138,223,138,34,250,246,138,83,139,127,139,240,140,244,140,18,141,118,141,35,250,207,142,36,250,37,250,103,144,222,144,38,250,21,145,39,145,218,145,215,145,222,145,237,145,238,145,228,145,229,145,6,146,16,146,10,146,58,146,64,146,60,146,78,146,89,146,81,146,57,146,103,146,167,146,119,146,120,146,231,146,215,146,217,146,208,146,39,250,213,146,224,146,211,146,37,147,33,147,251,146,40,250,30,147,255,146,29,147,2,147,112,147,87,147,164,147,198,147,222,147,248,147,49,148,69,148,72,148,146,149,220,249,41,250,157,150,175,150,51,151,59,151,67,151,77,151,79,151,81,151,85,151,87,152,101,152,42,250,43,250,39,153,44,250,158,153,78,154,217,154,220,154,117,155,114,155,143,155,177,155,187,155,0,156,112,157,107,157,45,250,25,158,209,158,0,0,0,0,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,226,255,228,255,7,255,2,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+129840);
/* memory initializer */ allocate([112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,226,255,228,255,7,255,2,255,49,50,22,33,33,33,53,34,138,126,28,137,72,147,136,146,220,132,201,79,187,112,49,102,200,104,249,146,251,102,69,95,40,78,225,78,252,78,0,79,3,79,57,79,86,79,146,79,138,79,154,79,148,79,205,79,64,80,34,80,255,79,30,80,70,80,112,80,66,80,148,80,244,80,216,80,74,81,0,0,100,81,157,81,190,81,236,81,21,82,156,82,166,82,192,82,219,82,0,83,7,83,36,83,114,83,147,83,178,83,221,83,14,250,156,84,138,84,169,84,255,84,134,85,89,87,101,87,172,87,200,87,199,87,15,250,16,250,158,88,178,88,11,89,83,89,91,89,93,89,99,89,164,89,186,89,86,91,192,91,47,117,216,91,236,91,30,92,166,92,186,92,245,92,39,93,83,93,17,250,66,93,109,93,184,93,185,93,208,93,33,95,52,95,103,95,183,95,222,95,93,96,133,96,138,96,222,96,213,96,32,97,242,96,17,97,55,97,48,97,152,97,19,98,166,98,245,99,96,100,157,100,206,100,78,101,0,102,21,102,59,102,9,102,46,102,30,102,36,102,101,102,87,102,89,102,18,250,115,102,153,102,160,102,178,102,191,102,250,102,14,103,41,249,102,103,187,103,82,104,192,103,1,104,68,104,207,104,19,250,104,105,20,250,152,105,226,105,48,106,107,106,70,106,115,106,126,106,226,106,228,106,214,107,63,108,92,108,134,108,111,108,218,108,4,109,135,109,111,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,109,172,109,207,109,248,109,242,109,252,109,57,110,92,110,39,110,60,110,191,110,136,111,181,111,245,111,5,112,7,112,40,112,133,112,171,112,15,113,4,113,92,113,70,113,71,113,21,250,193,113,254,113,177,114,190,114,36,115,22,250,119,115,189,115,201,115,214,115,227,115,210,115,7,116,245,115,38,116,42,116,41,116,46,116,98,116,137,116,159,116,1,117,111,117,130,118,156,118,158,118,155,118,166,118,23,250,70,119,175,82,33,120,78,120,100,120,122,120,48,121,24,250,25,250,0,0,26,250,148,121,27,250,155,121,209,122,231,122,28,250,235,122,158,123,29,250,72,125,92,125,183,125,160,125,214,125,82,126,71,127,161,127,30,250,1,131,98,131,127,131,199,131,246,131,72,132,180,132,83,133,89,133,107,133,31,250,176,133,32,250,33,250,7,136,245,136,18,138,55,138,121,138,167,138,190,138,223,138,34,250,246,138,83,139,127,139,240,140,244,140,18,141,118,141,35,250,207,142,36,250,37,250,103,144,222,144,38,250,21,145,39,145,218,145,215,145,222,145,237,145,238,145,228,145,229,145,6,146,16,146,10,146,58,146,64,146,60,146,78,146,89,146,81,146,57,146,103,146,167,146,119,146,120,146,231,146,215,146,217,146,208,146,39,250,213,146,224,146,211,146,37,147,33,147,251,146,40,250,30,147,255,146,29,147,2,147,112,147,87,147,164,147,198,147,222,147,248,147,49,148,69,148,72,148,146,149,220,249,41,250,157,150,175,150,51,151,59,151,67,151,77,151,79,151,81,151,85,151,87,152,101,152,42,250,43,250,39,153,44,250,158,153,78,154,217,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,154,117,155,114,155,143,155,177,155,187,155,0,156,112,157,107,157,45,250,25,158,209,158], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+136496);
/* memory initializer */ allocate([2,78,15,78,18,78,41,78,43,78,46,78,64,78,71,78,72,78,0,0,81,78,6,52,0,0,90,78,105,78,157,78,44,52,46,52,185,78,187,78,0,0,188,78,195,78,200,78,208,78,235,78,218,78,241,78,245,78,0,79,22,79,100,79,55,79,62,79,84,79,88,79,0,0,119,79,120,79,122,79,125,79,130,79,133,79,146,79,154,79,230,79,178,79,190,79,197,79,203,79,207,79,210,79,106,52,242,79,0,80,16,80,19,80,28,80,30,80,34,80,104,52,66,80,70,80,78,80,83,80,87,80,99,80,102,80,106,80,112,80,163,80,136,80,146,80,147,80,149,80,150,80,156,80,170,80,0,0,177,80,186,80,187,80,196,80,199,80,243,80,0,0,206,80,0,0,212,80,217,80,225,80,233,80,146,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,81,0,0,23,81,27,81,0,0,96,81,0,0,115,81,131,81,139,81,188,52,152,81,163,81,173,81,199,52,188,81,0,0,0,0,243,81,244,81,2,82,18,82,22,82,0,0,85,82,92,82,108,82,119,82,132,82,130,82,0,0,152,82,0,0,164,82,166,82,175,82,186,82,187,82,202,82,31,53,209,82,0,0,247,82,10,83,11,83,36,83,53,83,62,83,66,83,0,0,0,0,103,83,108,83,122,83,164,83,180,83,0,0,183,83,192,83,0,0,93,53,94,53,213,83,218,83,99,53,244,83,245,83,85,84,36,84,40,84,110,53,67,84,98,84,102,84,108,84,138,84,141,84,149,84,160,84,166,84,173,84,174,84,183,84,186,84,191,84,195,84,0,0,236,84,239,84,241,84,243,84,0,85,1,85,9,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,85,65,85,166,53,71,85,74,85,168,53,96,85,97,85,100,85,0,0,125,85,130,85,136,85,145,85,197,53,210,85,0,0,0,0,191,85,201,85,204,85,209,85,221,85,218,53,226,85,0,0,233,85,40,86,0,0,7,86,16,86,48,86,55,86,244,53,61,86,63,86,64,86,71,86,94,86,96,86,109,86,5,54,136,86,140,86,149,86,154,86,157,86,168,86,173,86,178,86,197,86,205,86,223,86,232,86,246,86,247,86,0,0,21,87,35,87,0,0,41,87,0,0,69,87,70,87,76,87,77,87,0,0,104,87,111,87,115,87,116,87,117,87,123,87,0,0,0,0,172,87,154,87,157,87,158,87,168,87,215,87,0,0,204,87,0,0,0,0,222,87,230,87,240,87,74,54,248,87,251,87,253,87,4,88,30,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,88,39,88,50,88,57,88,0,0,73,88,76,88,103,88,138,88,139,88,141,88,143,88,144,88,148,88,157,88,170,88,177,88,0,0,195,88,205,88,226,88,243,88,244,88,5,89,6,89,11,89,13,89,20,89,36,89,0,0,145,54,61,89,153,54,70,89,150,54,0,0,91,89,95,89,0,0,117,89,118,89,124,89,159,89,174,89,188,89,200,89,205,89,222,89,227,89,228,89,231,89,238,89,0,0,0,0,207,54,12,90,13,90,23,90,39,90,45,90,85,90,101,90,122,90,139,90,156,90,159,90,160,90,162,90,177,90,179,90,181,90,186,90,191,90,218,90,220,90,224,90,229,90,240,90,238,90,245,90,0,91,8,91,23,91,52,91,45,91,76,91,82,91,104,91,111,91,124,91,127,91,129,91,132,91], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+139956);
/* memory initializer */ allocate([150,91,172,91,97,55,192,91,98,55,206,91,214,91,108,55,107,55,241,91,253,91,117,55,3,92,41,92,48,92,0,0,95,92,99,92,103,92,104,92,105,92,112,92,0,0,0,0,124,92,0,0,0,0,136,92,138,92,193,55,0,0,0,0,160,92,162,92,166,92,167,92,0,0,173,92,181,92,0,0,201,92,0,0,0,0,6,93,16,93,43,93,29,93,32,93,36,93,38,93,49,93,57,93,66,93,232,55,97,93,106,93,244,55,112,93,0,0,253,55,136,93,0,56,146,93,148,93,151,93,153,93,176,93,178,93,180,93,0,0,185,93,209,93,215,93,216,93,224,93,0,0,228,93,233,93,47,56,0,94,54,56,18,94,21,94,64,56,31,94,46,94,62,94,73,94,92,56,86,94,97,56,107,94,108,94,109,94], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+143538);
/* memory initializer */ allocate([110,94,0,0,165,94,170,94,172,94,185,94,191,94,198,94,210,94,217,94,0,0,253,94,8,95,14,95,28,95,0,0,30,95,71,95,99,95,114,95,126,95,143,95,162,95,164,95,184,95,196,95,250,56,199,95,203,95,210,95,211,95,212,95,226,95,238,95,239,95,243,95,252,95,23,57,23,96,34,96,36,96,26,57,76,96,127,96,138,96,149,96,168,96,0,0,176,96,177,96,190,96,200,96,217,96,219,96,238,96,242,96,245,96,16,97,18,97,19,97,25,97,30,97,58,97,111,57,65,97,70,97,96,97,124,97,0,0,146,97,147,97,151,97,152,97,165,97,168,97,173,97,0,0,213,97,221,97,223,97,245,97,0,0,21,98,35,98,41,98,70,98,76,98,81,98,82,98,97,98,100,98,123,98,109,98,115,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,98,166,98,213,98,0,0,253,98,3,99,13,99,16,99,0,0,0,0,50,99,53,99,59,99,60,99,65,99,68,99,78,99,0,0,89,99,0,0,0,0,108,99,132,99,153,99,0,0,148,99,189,99,247,99,212,99,213,99,220,99,224,99,235,99,236,99,242,99,9,100,30,100,37,100,41,100,47,100,90,100,91,100,93,100,115,100,125,100,135,100,145,100,157,100,159,100,203,100,204,100,213,100,215,100,0,0,228,100,229,100,255,100,4,101,110,58,15,101,20,101,22,101,115,58,30,101,50,101,68,101,84,101,107,101,122,101,129,101,132,101,133,101,138,101,178,101,181,101,184,101,191,101,194,101,201,101,212,101,214,58,242,101,249,101,252,101,4,102,8,102,33,102,42,102,69,102,81,102,78,102,234,58,0,0,87,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,102,99,102,0,0,0,0,106,102,107,102,108,102,109,102,123,102,128,102,144,102,146,102,153,102,14,59,173,102,177,102,181,102,26,59,191,102,28,59,236,102,215,58,1,103,5,103,18,103,0,0,25,103,0,0,0,0,76,103,77,103,84,103,93,103,0,0,0,0,0,0,116,103,118,103,0,0,146,103,0,0,99,131,16,104,176,103,178,103,195,103,200,103,210,103,217,103,219,103,240,103,247,103,0,0,0,0,0,0,24,104,31,104,45,104,0,0,51,104,59,104,62,104,68,104,69,104,73,104,76,104,85,104,87,104,119,59,107,104,110,104,122,104,124,104,130,104,144,104,150,104,109,59,152,104,153,104,154,104,156,104,170,104,171,104,180,104,187,104,251,104,0,0,0,0,19,250,195,104,197,104,204,104,207,104,214,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,104,228,104,229,104,236,104,247,104,3,105,7,105,135,59,136,59,0,0,59,105,141,59,70,105,105,105,108,105,114,105,122,105,127,105,146,105,164,59,150,105,152,105,166,105,176,105,183,105,186,105,188,105,192,105,209,105,214,105,0,0,0,0,48,106,0,0,0,0,227,105,238,105,239,105,243,105,205,59,244,105,254,105,17,106,26,106,29,106,0,0,50,106,51,106,52,106,63,106,70,106,73,106,122,106,78,106,82,106,100,106,0,0,126,106,131,106,139,106,240,59,145,106,159,106,161,106,0,0,171,106,189,106,198,106,212,106,208,106,220,106,221,106,0,0,0,0,236,106,241,106,242,106,243,106,253,106,0,0,11,107,15,107,16,107,17,107,0,0,23,107,38,60,47,107,74,107,88,107,108,107,117,107,122,107,129,107], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+145586);
/* memory initializer */ allocate([155,107,174,107,0,0,189,107,190,107,199,107,200,107,201,107,218,107,230,107,231,107,238,107,241,107,2,108,10,108,14,108,53,108,54,108,58,108,0,0,63,108,77,108,91,108,109,108,132,108,137,108,195,60,148,108,149,108,151,108,173,108,194,108,208,108,210,60,214,108,218,108,220,108,233,108,236,108,237,108,0,0,0,109,10,109,36,109,38,109,39,109,103,108,47,109,60,109,91,109,94,109,96,109,112,109,128,109,129,109,138,109,141,109,145,109,152,109,0,0,23,110,0,0,0,0,0,0,171,109,174,109,180,109,194,109,52,109,200,109,206,109,207,109,208,109,223,109,233,109,246,109,54,110,30,110,34,110,39,110,17,61,50,110,60,110,72,110,73,110,75,110,76,110,79,110,81,110,83,110,84,110,87,110,99,110,30,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,110,167,110,180,110,191,110,195,110,202,110,217,110,53,111,235,110,249,110,251,110,10,111,12,111,24,111,37,111,54,111,60,111,0,0,82,111,87,111,90,111,96,111,104,111,152,111,125,111,144,111,150,111,190,111,159,111,165,111,175,111,100,61,181,111,200,111,201,111,218,111,222,111,233,111,0,0,252,111,0,112,7,112,10,112,35,112,0,0,57,112,58,112,60,112,67,112,71,112,75,112,154,61,84,112,101,112,105,112,108,112,110,112,118,112,126,112,129,112,134,112,149,112,151,112,187,112,0,0,159,112,177,112,0,0,236,112,202,112,209,112,211,112,220,112,3,113,4,113,6,113,7,113,8,113,12,113,192,61,47,113,49,113,80,113,74,113,83,113,94,113,212,61,150,113,128,113,155,113,160,113,162,113,174,113,175,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,113,0,0,203,113,211,113,217,113,220,113,7,114,5,62,73,250,43,114,52,114,56,114,57,114,44,78,66,114,83,114,87,114,99,114,0,0,110,114,111,114,120,114,127,114,142,114,0,0,173,114,174,114,176,114,177,114,193,114,96,62,204,114,102,62,104,62,243,114,250,114,7,115,18,115,24,115,25,115,131,62,57,115,44,115,49,115,51,115,61,115,82,115,148,62,107,115,108,115,0,0,110,115,111,115,113,115,119,115,129,115,133,115,138,115,148,115,152,115,156,115,158,115,165,115,168,115,181,115,183,115,185,115,188,115,191,115,197,115,203,115,225,115,231,115,249,115,19,116,250,115,1,116,36,116,49,116,57,116,83,116,64,116,67,116,77,116,82,116,93,116,113,116,129,116,133,116,136,116,0,0,146,116,151,116,153,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,116,161,116,165,116,170,116,171,116,185,116,187,116,186,116,214,116,216,116,222,116,239,116,235,116,0,0,250,116,0,0,32,117,36,117,42,117,87,63,0,0,61,117,62,117,64,117,72,117,78,117,80,117,82,117,108,117,114,117,113,117,122,117,125,117,126,117,129,117,0,0,140,117,117,63,162,117,119,63,176,117,183,117,191,117,192,117,198,117,207,117,211,117,221,117,223,117,224,117,231,117,236,117,238,117,241,117,249,117,3,118,24,118,7,118,15,118,174,63,0,0,19,118,27,118,28,118,0,0,37,118,40,118,60,118,51,118,0,0,201,63,65,118,0,0,73,118,85,118,215,63,110,118,149,118,156,118,161,118,160,118,167,118,168,118,175,118,0,0,201,118,0,0,232,118,236,118,0,0,23,119,26,119,45,119,53,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,64,0,0,0,0,88,119,96,119,106,119,0,0,114,119,124,119,125,119,0,0,88,64,154,119,159,119,162,119,164,119,169,119,222,119,223,119,228,119,230,119,234,119,236,119,147,64,240,119,244,119,251,119,0,0,5,120,6,120,9,120,13,120,25,120,33,120,44,120,71,120,100,120,106,120,0,0,138,120,148,120,164,120,157,120,158,120,159,120,187,120,200,120,204,120,206,120,213,120,224,120,225,120,230,120,249,120,250,120,251,120,254,120,0,0,16,121,27,121,48,121,37,121,59,121,74,121,88,121,91,121,5,65,103,121,114,121,148,121,149,121,150,121,155,121,161,121,169,121,180,121,187,121,194,121,199,121,204,121,205,121,214,121,72,65,0,0,0,0,79,65,10,122,17,122,21,122,27,122,30,122,99,65,45,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,122,71,122,76,122,86,122,89,122,92,122,95,122,96,122,103,122,106,122,117,122,120,122,130,122,138,122,144,122,163,122,172,122,0,0,180,65,185,122,188,122,190,122,191,65,204,122,209,122,231,122,232,122,244,122,0,0,0,0,7,123,0,0,61,123,39,123,42,123,46,123,47,123,49,123,230,65,243,65,127,123,65,123,238,65,85,123,121,123,100,123,102,123,105,123,115,123,0,0,7,66,144,123,145,123,155,123,14,66,175,123,181,123,188,123,197,123,202,123,0,0,0,0,212,123,214,123,218,123,234,123,240,123,3,124,11,124,14,124,15,124,38,124,69,124,74,124,81,124,87,124,94,124,97,124,105,124,110,124,111,124,112,124,0,0,0,0,0,0,166,124,0,0,182,124,183,124,191,124,0,0,196,124,0,0,200,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,124,0,0,215,124,0,0,230,124,235,124,0,0,245,124,3,125,9,125,198,66,18,125,30,125,0,0,0,0,61,125,62,125,64,125,71,125,0,0,0,0,214,66,89,125,90,125,106,125,112,125,221,66,127,125,0,0,134,125,136,125,140,125,151,125,0,0,157,125,167,125,170,125,182,125,183,125,192,125,215,125,217,125,230,125,241,125,249,125,2,67,0,0,88,250,16,126,23,126,29,126,32,126,39,126,44,126,69,126,115,126,117,126,126,126,134,126,135,126,43,67,145,126,152,126,154,126,67,67,60,127,59,127,62,127,67,127,68,127,79,127,193,52,0,0,82,127,0,0,97,127,99,127,100,127,109,127,125,127,126,127,0,0,144,127,123,81,0,0,150,127,156,127,173,127,0,0,195,127,207,127,227,127,229,127,239,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,127,2,128,10,128,8,128,14,128,17,128,22,128,36,128,44,128,48,128,67,128,102,128,113,128,117,128,123,128,153,128,156,128,164,128,167,128,184,128,0,0,197,128,213,128,216,128,230,128,0,0,13,129,245,128,251,128,238,67,53,129,22,129,30,129,240,67,36,129,39,129,44,129,0,0,61,129,8,68,105,129,23,68,129,129,28,68,132,129,133,129,34,68,152,129,178,129,193,129,195,129,214,129,219,129,0,0,228,129,0,0,236,129,0,0,253,129,255,129,0,0,4,130,0,0,25,130,33,130,34,130,0,0,50,130,52,130,60,130,70,130,73,130,69,130,0,0,75,130,118,68,79,130,122,68,87,130,0,0,92,130,99,130,0,0,93,250,94,250,121,130,145,68,125,130,127,130,131,130,138,130,147,130,167,130,168,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,130,180,130,186,130,188,130,226,130,232,130,247,130,7,131,8,131,12,131,84,131,27,131,29,131,48,131,60,131,68,131,87,131,190,68,127,131,212,68,179,68,141,131,148,131,149,131,155,131,157,131,201,131,208,131,212,131,221,131,229,131,249,131,15,132,17,132,21,132,0,0,23,132,57,132,74,132,79,132,81,132,82,132,89,132,90,132,92,132,0,0,101,132,118,132,120,132,124,132,129,132,13,69,220,132,151,132,166,132,190,132,8,69,206,132,207,132,211,132,0,0,231,132,234,132,239,132,240,132,241,132,250,132,253,132,12,133,27,133,36,133,37,133,43,133,52,133,79,133,111,133,37,69,67,69,62,133,81,133,83,133,94,133,97,133,98,133,0,0,123,133,125,133,127,133,129,133,134,133,147,133,157,133,159,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,133,188,133,199,133,202,133,216,133,217,133,223,133,225,133,230,133,246,133,0,134,17,134,30,134,33,134,36,134,39,134,0,0,57,134,60,134,0,0,64,134,32,250,83,134,86,134,111,134,119,134,122,134,135,134,137,134,141,134,145,134,156,134,157,134,168,134,33,250,177,134,179,134,193,134,195,134,209,134,213,134,215,134,227,134,230,134,184,69,5,135,7,135,14,135,16,135,19,135,25,135,31,135,33,135,35,135,49,135,58,135,62,135,64,135,67,135,81,135,88,135,100,135,101,135,114,135,124,135,0,0,0,0,167,135,137,135,139,135,147,135,160,135,0,0,229,69,190,135,0,0,193,135,206,135,245,135,223,135,0,0,227,135,229,135,230,135,234,135,235,135,237,135,1,136,3,136,11,136,19,136,40,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,136,50,136,60,136,15,70,74,136,88,136,95,136,100,136,0,0,0,0,105,136,0,0,111,136,160,136,188,136,189,136,190,136,192,136,210,136,0,0,209,136,211,136,219,136,240,136,241,136,65,70,1,137,0,0,55,137,0,0,66,137,69,137,73,137,0,0,101,70,98,137,128,137,137,137,144,137,159,137,176,137,183,137,214,137,216,137,235,137,161,70,241,137,243,137,253,137,255,137,175,70,17,138,20,138,0,0,33,138,53,138,62,138,69,138,77,138,88,138,174,138,144,138,183,138,190,138,215,138,252,138,0,0,10,139,5,139,13,139,28,139,31,139,45,139,67,139,12,71,81,139,94,139,118,139,127,139,129,139,139,139,148,139,149,139,156,139,158,139,57,140,0,0,61,140,0,0,0,0,69,140,71,140,79,140,84,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,140,105,140,109,140,115,140,0,0,147,140,146,140,153,140,100,71,155,140,164,140,214,140,213,140,217,140,0,0,240,140,241,140,0,0,9,141,14,141,108,141,132,141,149,141,166,141,0,0,198,141,200,141,217,141,236,141,12,142,253,71,253,141,6,142,0,0,20,142,22,142,33,142,34,142,39,142,0,0,22,72,54,142,57,142,75,142,84,142,98,142,108,142,109,142,111,142,152,142,158,142,174,142,179,142,181,142,182,142,187,142,0,0,209,142,212,142,78,72,249,142,0,0,0,143,8,143,23,143,43,143,64,143,74,143,88,143,0,0,164,143,180,143,102,250,182,143,0,0,193,143,198,143,36,250,202,143,205,143,211,143,213,143,224,143,241,143,245,143,251,143,2,144,12,144,55,144,0,0,67,144,68,144,93,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,144,140,144,144,144,29,150,161,144,181,72,176,144,182,144,195,144,200,144,0,0,220,144,223,144,0,0,246,144,242,144,0,145,235,144,254,144,255,144,4,145,6,145,24,145,28,145,30,145,55,145,57,145,58,145,70,145,71,145,87,145,89,145,97,145,100,145,116,145,121,145,133,145,142,145,168,145,174,145,179,145,182,145,195,145,196,145,218,145,0,0,0,0,236,145,238,145,1,146,10,146,22,146,23,146,0,0,51,146,66,146,71,146,74,146,78,146,81,146,86,146,89,146,96,146,97,146,101,146,103,146,104,146,0,0,0,0,124,146,125,146,127,146,137,146,141,146,151,146,153,146,159,146,167,146,171,146,0,0,0,0,178,146,191,146,192,146,198,146,206,146,208,146,215,146,217,146,229,146,231,146,17,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,146,249,146,251,146,2,147,13,147,21,147,29,147,30,147,39,147,41,147,0,0,0,0,71,147,81,147,87,147,90,147,107,147,113,147,115,147,161,147,0,0,0,0,136,147,139,147,143,147,158,147,245,147,0,0,0,0,241,147,193,147,199,147,220,147,226,147,231,147,9,148,15,148,22,148,23,148,251,147,50,148,52,148,59,148,69,148,0,0,0,0,109,148,111,148,120,149,121,149,134,149,140,149,141,149,0,0,171,149,180,149,0,0,200,149,0,0,0,0,44,150,51,150,52,150,0,0,60,150,65,150,97,150,0,0,130,150,0,0,154,150,0,0,231,73,169,150,175,150,179,150,186,150,189,150,250,73,0,0,216,150,218,150,221,150,4,74,20,151,35,151,41,74,54,151,65,151,71,151,85,151,87,151,91,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,151,0,0,0,0,150,151,154,151,158,151,162,151,177,151,178,151,190,151,204,151,209,151,212,151,216,151,217,151,225,151,241,151,4,152,13,152,14,152,20,152,22,152,188,74,0,0,35,152,50,152,51,152,37,152,71,152,102,152,171,152,173,152,176,152,0,0,183,152,184,152,187,152,188,152,191,152,194,152,199,152,203,152,224,152,0,0,225,152,227,152,229,152,234,152,240,152,241,152,243,152,8,153,59,75,0,0,22,153,23,153,0,0,26,153,27,153,28,153,0,0,49,153,50,153,51,153,58,153,59,153,60,153,64,153,65,153,70,153,77,153,78,153,92,153,95,153,96,153,163,153,166,153,185,153,189,153,191,153,195,153,201,153,212,153,217,153,222,153,0,0,240,153,249,153,252,153,10,154,17,154,22,154,26,154,32,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,154,54,154,68,154,76,154,88,154,194,75,175,154,202,75,183,154,210,75,185,154,0,0,198,154,208,154,210,154,213,154,232,75,220,154,224,154,229,154,233,154,3,155,12,155,16,155,18,155,22,155,29,155,43,155,51,155,61,155,32,76,75,155,99,155,101,155,107,155,108,155,115,155,118,155,119,155,166,155,172,155,177,155,0,0,0,0,178,155,184,155,190,155,199,155,243,155,216,155,221,155,231,155,234,155,235,155,239,155,238,155,0,0,250,155,0,0,247,155,0,0,22,156,24,156,25,156,26,156,29,156,34,156,39,156,41,156,42,156,0,0,49,156,54,156,55,156,69,156,92,156,0,0,73,156,74,156,0,0,84,156,88,156,91,156,93,156,95,156,105,156,106,156,107,156,109,156,110,156,112,156,114,156,117,156,122,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,156,242,156,11,157,2,157,0,0,17,157,23,157,24,157,0,0,196,76,0,0,50,157,209,76,66,157,74,157,95,157,98,157,0,0,105,157,107,157,0,0,115,157,118,157,119,157,126,157,132,157,141,157,153,157,161,157,191,157,181,157,185,157,189,157,195,157,199,157,201,157,214,157,218,157,223,157,224,157,227,157,244,157,7,77,10,158,2,158,13,158,25,158,28,158,29,158,123,158,0,0,128,158,133,158,155,158,168,158,0,0,189,158,0,0,223,158,231,158,238,158,255,158,2,159,119,77,3,159,23,159,25,159,47,159,55,159,58,159,61,159,65,159,69,159,70,159,83,159,85,159,88,159,0,0,93,159,0,0,105,159,0,0,109,159,112,159,117,159], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+179378);
/* memory initializer */ allocate([1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,155,0,156,0,157,0,158,0,159], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+270514);
/* memory initializer */ allocate([97,255,98,255,99,255,100,255,101,255,102,255,103,255,104,255,105,255,106,255,107,255,108,255,109,255,110,255,111,255,112,255,113,255,114,255,115,255,116,255,117,255,118,255,119,255,120,255,121,255,122,255,123,255,124,255,125,255,126,255,127,255,128,255,129,255,130,255,131,255,132,255,133,255,134,255,135,255,136,255,137,255,138,255,139,255,140,255,141,255,142,255,143,255,144,255,145,255,146,255,147,255,148,255,149,255,150,255,151,255,152,255,153,255,154,255,155,255,156,255,157,255,158,255,159,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+343538);
/* memory initializer */ allocate([48,1,48,2,48,12,255,14,255,251,48,26,255,27,255,31,255,1,255,155,48,156,48,180,0,64,255,168,0,62,255,62,32,63,255,253,48,254,48,157,48,158,48,3,48,221,78,5,48,6,48,7,48,252,48,20,32,16,32,15,255,60,255,28,48,22,32,92,255,38,32,37,32,24,32,25,32,28,32,29,32,8,255,9,255,20,48,21,48,59,255,61,255,91,255,93,255,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,11,255,18,34,177,0,215,0,247,0,29,255,96,34,28,255,30,255,102,34,103,34,30,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,165,0,4,255,162,0,163,0,5,255,3,255,6,255,10,255,32,255,167,0,6,38,5,38,203,37,207,37,206,37,199,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,37,161,37,160,37,179,37,178,37,189,37,188,37,59,32,18,48,146,33,144,33,145,33,147,33,19,48,7,255,2,255,13,255,94,255,51,48,52,48,53,48,59,48,60,48,255,48,159,48,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,132,34,133,34,138,34,139,34,9,34,5,34,5,35,6,35,39,34,40,34,172,0,210,33,212,33,0,34,3,34,149,34,150,34,151,34,37,34,38,34,133,41,134,41,24,48,25,48,22,48,23,48,32,34,165,34,18,35,2,34,7,34,97,34,82,34,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,98,34,67,34,69,34,72,34,118,34,119,34,148,33,43,33,48,32,111,38,109,38,106,38,32,32,33,32,182,0,110,38,107,38,108,38,105,38,239,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,37,182,37,193,37,192,37,151,33,152,33,150,33,153,33,196,33,232,33,230,33,231,33,233,33,52,41,53,41,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,191,41,201,37,61,48,70,254,69,254,230,37,34,32,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,19,34,53,33,15,33,203,51,19,33,39,33,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,160,48,19,32,250,41,251,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,148,48,149,48,150,48,75,48,77,48,79,48,81,48,83,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,171,48,173,48,175,48,177,48,179,48,187,48,196,48,200,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,100,38,96,38,98,38,102,38,97,38,101,38,103,38,99,38,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,194,3,245,36,246,36,247,36,248,36,249,36,250,36,251,36,252,36,253,36,254,36,22,38,23,38,32,48,14,38,0,38,1,38,2,38,3,38,104,38,177,37,240,49,241,49,242,49,243,49,244,49,245,49,246,49,247,49,248,49,249,49,247,49,250,49,251,49,252,49,253,49,254,49,255,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,190,35,191,35,192,35,193,35,194,35,195,35,196,35,197,35,198,35,199,35,200,35,201,35,202,35,203,35,204,35,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,247,48,248,48,249,48,250,48,218,34,219,34,83,33,84,33,85,33,19,39,24,35,35,36,206,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37,81,50,82,50,83,50,84,50,85,50,86,50,87,50,88,50,89,50,90,50,91,50,92,50,93,50,94,50,95,50,177,50,178,50,179,50,180,50,181,50,182,50,183,50,184,50,185,50,186,50,187,50,188,50,189,50,190,50,191,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,37,209,37,210,37,211,37,60,32,71,32,72,32,73,32,205,1,206,1,208,1,62,30,63,30,248,1,249,1,209,1,210,1,212,1,214,1,216,1,218,1,220,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,32,160,0,161,0,164,0,166,0,169,0,170,0,171,0,173,0,174,0,175,0,178,0,179,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,208,0,209,0,210,0,211,0,212,0,213,0,214,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,248,0,249,0,250,0,251,0,252,0,253,0,254,0,255,0,0,1,42,1,106,1,18,1,76,1,1,1,43,1,107,1,19,1,77,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,216,2,65,1,61,1,90,1,96,1,94,1,100,1,121,1,125,1,123,1,5,1,219,2,66,1,62,1,91,1,199,2,97,1,95,1,101,1,122,1,221,2,126,1,124,1,84,1,2,1,57,1,6,1,12,1,24,1,26,1,14,1,67,1,71,1,80,1,88,1,110,1,112,1,98,1,85,1,3,1,58,1,7,1,13,1,25,1,27,1,15,1,17,1,68,1,72,1,81,1,89,1,111,1,113,1,99,1,217,2,8,1,28,1,36,1,52,1,92,1,108,1,9,1,29,1,37,1,53,1,93,1,109,1,113,2,139,2,126,2,131,2,146,2,108,2,110,2,121,2,136,2,86,2,115,2,125,2,130,2,144,2,123,2,109,2,95,2,114,2,157,2,142,2,97,2,75,1,112,2,129,2,39,1,149,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,2,102,2,152,2,194,1,83,2,87,2,132,2,96,2,147,1,83,1,82,1,104,2,137,2,88,2,117,2,89,2,92,2,94,2,80,2,111,2,138,2,100,2,140,2,84,2,81,2,82,2,141,2,101,2,162,2,161,2,85,2,145,2,122,2,103,2,90,2,230,0,253,1,112,31,113,31,84,2,84,2,140,2,140,2,89,2,89,2,90,2,90,2,114,31,115,31,97,3,200,2,204,2,208,2,209,2,6,3,63,32,11,3,1,3,4,3,0,3,15,3,12,3,2,3,229,2,230,2,231,2,232,2,233,2,233,2,229,2,37,3,44,3,57,3,28,3,31,3,32,3,8,3,61,3,41,3,47,3,222,2,36,3,48,3,60,3,52,3,29,3,30,3,24,3,25,3,42,3,58,3,59,3,3,3,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,39,119,39,120,39,121,39,122,39,123,39,124,39,125,39,126,39,127,39,235,36,236,36,237,36,238,36,239,36,240,36,241,36,242,36,243,36,244,36,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,122,33,123,33,208,36,209,36,210,36,211,36,212,36,213,36,214,36,215,36,216,36,217,36,218,36,219,36,220,36,221,36,222,36,223,36,224,36,225,36,226,36,227,36,228,36,229,36,230,36,231,36,232,36,233,36,208,50,209,50,210,50,211,50,212,50,213,50,214,50,215,50,216,50,217,50,218,50,219,50,220,50,221,50,222,50,223,50,224,50,225,50,226,50,227,50,250,50,233,50,229,50,237,50,236,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,32,66,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,106,36,107,36,108,36,109,36,110,36,111,36,112,36,113,36,114,36,115,36,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,106,33,73,51,20,51,34,51,77,51,24,51,39,51,3,51,54,51,81,51,87,51,13,51,38,51,35,51,43,51,74,51,59,51,156,51,157,51,158,51,142,51,143,51,196,51,161,51,107,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,51,29,48,31,48,22,33,205,51,33,33,164,50,165,50,166,50,167,50,168,50,49,50,50,50,57,50,126,51,125,51,124,51,0,0,0,0,0,0,46,34,0,0,0,0,0,0,0,0,31,34,191,34,0,0,0,0,0,0,86,39,30,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,52,40,78,47,78,48,78,141,78,225,78,253,78,255,78,3,79,11,79,96,79,72,79,73,79,86,79,95,79,106,79,108,79,126,79,138,79,148,79,151,79,48,250,201,79,224,79,1,80,2,80,14,80,24,80,39,80,46,80,64,80,59,80,65,80,148,80,204,80,242,80,208,80,230,80,49,250,6,81,3,81,11,81,30,81,53,81,74,81,50,250,85,81,87,81,181,52,157,81,195,81,202,81,222,81,226,81,238,81,1,82,219,52,19,82,21,82,73,82,87,82,97,82,147,82,200,82,51,250,204,82,208,82,214,82,219,82,52,250,240,82,251,82,0,83,7,83,28,83,53,250,97,83,99,83,125,83,147,83,157,83,178,83,18,84,39,84,77,84,156,84,107,84,116,84,127,84,136,84,150,84,161,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,84,198,84,255,84,14,85,43,85,53,85,80,85,94,85,129,85,134,85,142,85,54,250,173,85,206,85,55,250,8,86,14,86,59,86,73,86,118,86,102,86,56,250,111,86,113,86,114,86,153,86,158,86,169,86,172,86,179,86,201,86,202,86,10,87,0,0,33,87,47,87,51,87,52,87,112,87,119,87,124,87,156,87,15,250,0,0,184,87,199,87,200,87,207,87,228,87,237,87,245,87,246,87,255,87,9,88,16,250,97,88,100,88,57,250,124,88,137,88,158,88,58,250,169,88,0,0,210,88,206,88,212,88,218,88,224,88,233,88,12,89,65,134,93,89,109,89,139,89,146,89,164,89,195,89,210,89,221,89,19,90,35,90,103,90,109,90,119,90,126,90,132,90,158,90,167,90,196,90,0,0,25,91,37,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,78,22,85,3,90,63,150,192,84,27,97,40,99,246,89,34,144,117,132,28,131,80,122,170,96,225,99,37,110,237,101,102,132,166,130,245,155,147,104,39,87,161,101,113,98,155,91,208,89,123,134,244,152,98,125,190,125,142,155,22,98,159,124,183,136,137,91,181,94,9,99,151,102,72,104,199,149,141,151,79,103,229,78,10,79,77,79,157,79,73,80,242,86,55,89,212,89,1,90,9,92,223,96,15,97,112,97,19,102,5,105,186,112,79,117,112,117,251,121,173,125,239,125,195,128,14,132,99,136,2,139,85,144,122,144,59,83,149,78,165,78,223,87,178,128,193,144,239,120,0,78,241,88,162,110,56,144,50,122,40,131,139,130,47,156,65,81,112,83,189,84,225,84,224,86,251,89,21,95,242,152,235,109,228,128,45,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,150,112,150,160,150,251,151,11,84,243,83,135,91,207,112,189,127,194,143,232,150,111,83,92,157,186,122,17,78,147,120,252,129,38,110,24,86,4,85,29,107,26,133,59,156,229,89,169,83,102,109,220,116,143,149,66,86,145,78,75,144,242,150,79,131,12,153,225,83,182,85,48,91,113,95,32,102,243,102,4,104,56,108,243,108,41,109,91,116,200,118,78,122,52,152,241,130,91,136,96,138,237,146,178,109,171,117,202,118,197,153,166,96,1,139,138,141,178,149,142,105,173,83,134,81,18,87,48,88,68,89,180,91,246,94,40,96,169,99,244,99,191,108,20,111,142,112,20,113,89,113,213,113,63,115,1,126,118,130,209,130,151,133,96,144,91,146,27,157,105,88,188,101,90,108,37,117,249,81,46,89,101,89,128,95,220,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,98,250,101,42,106,39,107,180,107,139,115,193,127,86,137,44,157,14,157,196,158,161,92,150,108,123,131,4,81,75,92,182,97,198,129,118,104,97,114,89,78,250,79,120,83,105,96,41,110,79,122,243,151,11,78,22,83,238,78,85,79,61,79,161,79,115,79,160,82,239,83,9,86,15,89,193,90,182,91,225,91,209,121,135,102,156,103,182,103,76,107,179,108,107,112,194,115,141,121,190,121,60,122,135,123,177,130,219,130,4,131,119,131,239,131,211,131,102,135,178,138,41,86,168,140,230,143,78,144,30,151,138,134,196,79,232,92,17,98,89,114,59,117,229,129,189,130,254,134,192,140,197,150,19,153,213,153,203,78,26,79,227,137,222,86,74,88,202,88,251,94,235,95,42,96,148,96,98,96,208,97,18,98,208,98,57,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,155,102,102,176,104,119,109,112,112,76,117,134,118,117,125,165,130,249,135,139,149,142,150,157,140,241,81,190,82,22,89,179,84,179,91,22,93,104,97,130,105,175,109,141,120,203,132,87,136,114,138,167,147,184,154,108,109,168,153,217,134,163,87,255,103,206,134,14,146,131,82,135,86,4,84,211,94,225,98,185,100,60,104,56,104,187,107,114,115,186,120,107,122,154,137,210,137,107,141,3,143,237,144,163,149,148,150,105,151,102,91,179,92,125,105,77,152,78,152,155,99,32,123,43,106,127,106,182,104,13,156,95,111,114,82,157,85,112,96,236,98,59,109,7,110,209,110,91,132,16,137,68,143,20,78,57,156,246,83,27,105,58,106,132,151,42,104,92,81,195,122,178,132,220,145,140,147,91,86,40,157,34,104,5,131,49,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,124,8,82,197,130,230,116,126,78,131,79,160,81,210,91,10,82,216,82,231,82,251,93,154,85,42,88,230,89,140,91,152,91,219,91,114,94,121,94,163,96,31,97,99,97,190,97,219,99,98,101,209,103,83,104,250,104,62,107,83,107,87,108,34,111,151,111,69,111,176,116,24,117,227,118,11,119,255,122,161,123,33,124,233,125,54,127,240,127,157,128,102,130,158,131,179,137,204,138,171,140,132,144,81,148,147,149,145,149,162,149,101,150,211,151,40,153,24,130,56,78,43,84,184,92,204,93,169,115,76,118,60,119,169,92,235,127,11,141,193,150,17,152,84,152,88,152,1,79,14,79,113,83,156,85,104,86,250,87,71,89,9,91,196,91,144,92,12,94,126,94,204,95,238,99,58,103,215,101,226,101,31,103,203,104,196,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+353267);
/* memory initializer */ allocate([106,48,94,197,107,23,108,125,108,127,117,72,121,99,91,0,122,0,125,189,95,143,137,24,138,180,140,119,141,204,142,29,143,226,152,14,154,60,155,128,78,125,80,0,81,147,89,156,91,47,98,128,98,236,100,58,107,160,114,145,117,71,121,169,127,251,135,188,138,112,139,172,99,202,131,160,151,9,84,3,84,171,85,84,104,88,106,112,138,39,120,117,103,205,158,116,83,162,91,26,129,80,134,6,144,24,78,69,78,199,78,17,79,202,83,56,84,174,91,19,95,37,96,81,101,61,103,66,108,114,108,227,108,120,112,3,116,118,122,174,122,8,123,26,125,254,124,102,125,231,101,91,114,187,83,69,92,232,93,210,98,224,98,25,99,32,110,90,134,49,138,221,141,248,146,1,111,166,121,90,155,168,78,171,78,172,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,79,160,79,209,80,71,81,246,122,113,81,246,81,84,83,33,83,127,83,235,83,172,85,131,88,225,92,55,95,74,95,47,96,80,96,109,96,31,99,89,101,75,106,193,108,194,114,237,114,239,119,248,128,5,129,8,130,78,133,247,144,225,147,255,151,87,153,90,154,240,78,221,81,45,92,129,102,109,105,64,92,242,102,117,105,137,115,80,104,129,124,197,80,228,82,71,87,254,93,38,147,164,101,35,107,61,107,52,116,129,121,189,121,75,123,202,125,185,130,204,131,127,136,95,137,57,139,209,143,209,145,31,84,128,146,93,78,54,80,229,83,58,83,215,114,150,115,233,119,230,130,175,142,198,153,200,153,210,153,119,81,26,97,94,134,176,85,122,122,118,80,211,91,71,144,133,150,50,78,219,106,231,145,81,92,72,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,99,159,122,147,108,116,151,97,143,170,122,138,113,136,150,130,124,23,104,112,126,81,104,108,147,242,82,27,84,171,133,19,138,164,127,205,142,225,144,102,83,136,136,65,121,194,79,190,80,17,82,68,81,83,85,45,87,234,115,139,87,81,89,98,95,132,95,117,96,118,97,103,97,169,97,178,99,58,100,108,101,111,102,66,104,19,110,102,117,61,122,251,124,76,125,153,125,75,126,107,127,14,131,74,131,205,134,8,138,99,138,102,139,253,142,26,152,143,157,184,130,206,143,232,155,135,82,31,98,131,100,192,111,153,150,65,104,145,80,32,107,122,108,84,111,116,122,80,125,64,136,35,138,8,103,246,78,57,80,38,80,101,80,124,81,56,82,99,82,167,85,15,87,5,88,204,90,250,94,178,97,248,97,243,98,114,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,105,41,106,125,114,172,114,46,115,20,120,111,120,121,125,12,119,169,128,139,137,25,139,226,140,210,142,99,144,117,147,122,150,85,152,19,154,120,158,67,81,159,83,179,83,123,94,38,95,27,110,144,110,132,115,254,115,67,125,55,130,0,138,250,138,80,150,78,78,11,80,228,83,124,84,250,86,209,89,100,91,241,93,171,94,39,95,56,98,69,101,175,103,86,110,208,114,202,124,180,136,161,128,225,128,240,131,78,134,135,138,232,141,55,146,199,150,103,152,19,159,148,78,146,78,13,79,72,83,73,84,62,84,47,90,140,95,161,95,159,96,167,104,142,106,90,116,129,120,158,138,164,138,119,139,144,145,94,78,201,155,164,78,124,79,175,79,25,80,22,80,73,81,108,81,159,82,185,82,254,82,154,83,227,83,17,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,84,137,85,81,87,162,87,125,89,84,91,93,91,143,91,229,93,231,93,247,93,120,94,131,94,154,94,183,94,24,95,82,96,76,97,151,98,216,98,167,99,59,101,2,102,67,102,244,102,109,103,33,104,151,104,203,105,95,108,42,109,105,109,47,110,157,110,50,117,135,118,108,120,63,122,224,124,5,125,24,125,94,125,177,125,21,128,3,128,175,128,177,128,84,129,143,129,42,130,82,131,76,136,97,136,27,139,162,140,252,140,202,144,117,145,113,146,63,120,252,146,164,149,77,150,5,152,153,153,216,154,59,157,91,82,171,82,247,83,8,84,213,88,247,98,224,111,106,140,95,143,185,158,75,81,59,82,74,84,253,86,64,122,119,145,96,157,210,158,68,115,9,111,112,129,17,117,253,95,218,96,168,154,219,114,188,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,107,3,152,202,78,240,86,100,87,190,88,90,90,104,96,199,97,15,102,6,102,57,104,177,104,247,109,213,117,58,125,110,130,66,155,155,78,80,79,201,83,6,85,111,93,230,93,238,93,251,103,153,108,115,116,2,120,80,138,150,147,223,136,80,87,167,94,43,99,181,80,172,80,141,81,0,103,201,84,94,88,187,89,176,91,105,95,77,98,161,99,61,104,115,107,8,110,125,112,199,145,128,114,21,120,38,120,109,121,142,101,48,125,220,131,193,136,9,143,155,150,100,82,40,87,80,103,106,127,161,140,180,81,66,87,42,150,58,88,138,105,180,128,178,84,14,93,252,87,149,120,250,157,92,79,74,82,139,84,62,100,40,102,20,103,245,103,132,122,86,123,34,125,47,147,92,104,173,155,57,123,25,83,138,81,55,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,91,246,98,174,100,230,100,45,103,186,107,169,133,209,150,144,118,214,155,76,99,6,147,171,155,191,118,82,102,9,78,152,80,194,83,113,92,232,96,146,100,99,101,95,104,230,113,202,115,35,117,151,123,130,126,149,134,131,139,219,140,120,145,16,153,172,101,171,102,139,107,213,78,212,78,58,79,127,79,58,82,248,83,242,83,227,85,219,86,235,88,203,89,201,89,255,89,80,91,77,92,2,94,43,94,215,95,29,96,7,99,47,101,92,91,175,101,189,101,232,101,157,103,98,107,123,107,15,108,69,115,73,121,193,121,248,124,25,125,43,125,162,128,2,129,243,129,150,137,94,138,105,138,102,138,140,138,238,138,199,140,220,140,204,150,252,152,111,107,139,78,60,79,141,79,80,81,87,91,250,91,72,97,1,99,66,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,107,203,110,187,108,62,114,189,116,212,117,193,120,58,121,12,128,51,128,234,129,148,132,158,143,80,108,127,158,15,95,88,139,43,157,250,122,248,142,141,91,235,150,3,78,241,83,247,87,49,89,201,90,164,91,137,96,127,110,6,111,190,117,234,140,159,91,0,133,224,123,114,80,244,103,157,130,97,92,74,133,30,126,14,130,153,81,4,92,104,99,102,141,156,101,110,113,62,121,23,125,5,128,29,139,202,142,110,144,199,134,170,144,31,80,250,82,58,92,83,103,124,112,53,114,76,145,200,145,43,147,229,130,194,91,49,95,249,96,59,78,214,83,136,91,75,98,49,103,138,107,233,114,224,115,46,122,107,129,163,141,82,145,150,153,18,81,215,83,106,84,255,91,136,99,57,106,172,125,0,151,218,86,206,83,104,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,91,49,92,222,93,238,79,1,97,254,98,50,109,192,121,203,121,66,125,77,126,210,127,237,129,31,130,144,132,70,136,114,137,144,139,116,142,47,143,49,144,75,145,108,145,198,150,156,145,192,78,79,79,69,81,65,83,147,95,14,98,212,103,65,108,11,110,99,115,38,126,205,145,131,146,212,83,25,89,191,91,209,109,93,121,46,126,155,124,126,88,159,113,250,81,83,136,240,143,202,79,251,92,37,102,172,119,227,122,28,130,255,153,198,81,170,95,236,101,111,105,137,107,243,109,150,110,100,111,254,118,20,125,225,93,117,144,135,145,6,152,230,81,29,82,64,98,145,102,217,102,26,110,182,94,210,125,114,127,248,102,175,133,247,133,248,138,169,82,217,83,115,89,143,94,144,95,85,96,228,146,100,150,183,80,31,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,82,32,83,71,83,236,83,232,84,70,85,49,85,23,86,104,89,190,89,60,90,181,91,6,92,15,92,17,92,26,92,132,94,138,94,224,94,112,95,127,98,132,98,219,98,140,99,119,99,7,102,12,102,45,102,118,102,126,103,162,104,31,106,53,106,188,108,136,109,9,110,88,110,60,113,38,113,103,113,199,117,1,119,93,120,1,121,101,121,240,121,224,122,17,123,167,124,57,125,150,128,214,131,139,132,73,133,93,136,243,136,31,138,60,138,84,138,115,138,97,140,222,140,164,145,102,146,126,147,24,148,156,150,152,151,10,78,8,78,30,78,87,78,151,81,112,82,206,87,52,88,204,88,34,91,56,94,197,96,254,100,97,103,86,103,68,109,182,114,115,117,99,122,184,132,114,139,184,145,32,147,49,86,244,87,254,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,98,13,105,150,107,237,113,84,126,119,128,114,130,230,137,223,152,85,135,177,143,59,92,56,79,225,79,181,79,7,85,32,90,221,91,233,91,195,95,78,97,47,99,176,101,75,102,238,104,155,105,120,109,241,109,51,117,185,117,31,119,94,121,230,121,51,125,227,129,175,130,170,133,170,137,58,138,171,142,155,143,50,144,221,145,7,151,186,78,193,78,3,82,117,88,236,88,11,92,26,117,61,92,78,129,10,138,197,143,99,150,109,151,37,123,207,138,8,152,98,145,243,86,168,83,23,144,57,84,130,87,37,94,168,99,52,108,138,112,97,119,139,124,224,127,112,136,66,144,84,145,16,147,24,147,143,150,94,116,196,154,7,93,105,93,112,101,162,103,168,141,219,150,110,99,73,103,25,105,197,131,23,152,192,150,254,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,111,122,100,248,91,22,78,44,112,93,117,47,102,196,81,54,82,226,82,211,89,129,95,39,96,16,98,63,101,116,101,31,102,116,102,242,104,22,104,99,107,5,110,114,114,31,117,219,118,190,124,86,128,240,88,253,136,127,137,160,138,147,138,203,138,29,144,146,145,82,151,89,151,137,101,14,122,6,129,187,150,45,94,220,96,26,98,165,101,20,102,144,103,243,119,77,122,77,124,62,126,10,129,172,140,100,141,225,141,95,142,169,120,7,82,217,98,165,99,66,100,152,98,45,138,131,122,192,123,172,138,234,150,118,125,12,130,73,135,217,78,72,81,67,83,96,83,163,91,2,92,22,92,221,93,38,98,71,98,176,100,19,104,52,104,201,108,69,109,23,109,211,103,92,111,78,113,125,113,203,101,127,122,173,123,218,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,126,168,127,122,129,27,130,57,130,166,133,110,138,206,140,245,141,120,144,119,144,173,146,145,146,131,149,174,155,77,82,132,85,56,111,54,113,104,81,133,121,85,126,179,129,206,124,76,86,81,88,168,92,170,99,254,102,253,102,90,105,217,114,143,117,142,117,14,121,86,121,223,121,151,124,32,125,68,125,7,134,52,138,59,150,97,144,32,159,231,80,117,82,204,83,226,83,9,80,170,85,238,88,79,89,61,114,139,91,100,92,29,83,227,96,243,96,92,99,131,99,63,99,187,99,205,100,233,101,249,102,227,93,205,105,253,105,21,111,229,113,137,78,233,117,248,118,147,122,223,124,207,125,156,125,97,128,73,131,88,131,108,132,188,132,251,133,197,136,112,141,1,144,109,144,151,147,28,151,18,154,207,80,151,88,142,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,129,53,133,8,141,32,144,195,79,116,80,71,82,115,83,111,96,73,99,95,103,44,110,179,141,31,144,215,79,94,92,202,140,207,101,154,125,82,83,150,136,118,81,195,99,88,91,107,91,10,92,13,100,81,103,92,144,214,78,26,89,42,89,112,108,81,138,62,85,21,88,165,89,240,96,83,98,193,103,53,130,85,105,64,150,196,153,40,154,83,79,6,88,254,91,16,128,177,92,47,94,133,95,32,96,75,97,52,98,255,102,240,108,222,110,206,128,127,129,212,130,139,136,184,140,0,144,46,144,138,150,219,158,219,155,227,78,240,83,39,89,44,123,141,145,76,152,249,157,221,110,39,112,83,83,68,85,133,91,88,98,158,98,211,98,162,108,239,111,34,116,23,138,56,148,193,111,254,138,56,131,231,81,248,134,234,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,83,70,79,84,144,176,143,106,89,49,129,253,93,234,122,191,143,218,104,55,140,248,114,72,156,61,106,176,138,57,78,88,83,6,86,102,87,197,98,162,99,230,101,78,107,225,109,91,110,173,112,237,119,239,122,170,123,187,125,61,128,198,128,203,134,149,138,91,147,227,86,199,88,62,95,173,101,150,102,128,106,181,107,55,117,199,138,36,80,229,119,48,87,27,95,101,96,122,102,96,108,244,117,26,122,110,127,244,129,24,135,69,144,179,153,201,123,92,117,249,122,81,123,196,132,16,144,233,121,146,122,54,131,225,90,64,119,45,78,242,78,153,91,224,95,189,98,60,102,241,103,232,108,107,134,119,136,59,138,78,145,243,146,208,153,23,106,38,112,42,115,231,130,87,132,175,140,1,78,70,81,203,81,139,85,245,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,94,51,94,129,94,20,95,53,95,107,95,180,95,242,97,17,99,162,102,29,103,110,111,82,114,58,117,58,119,116,128,57,129,120,129,118,135,191,138,220,138,133,141,243,141,154,146,119,149,2,152,229,156,197,82,87,99,244,118,21,103,136,108,205,115,195,140,174,147,115,150,37,109,156,88,14,105,204,105,253,143,154,147,219,117,26,144,90,88,2,104,180,99,251,105,67,79,44,111,216,103,187,143,38,133,180,125,84,147,63,105,112,111,106,87,247,88,44,91,44,125,42,114,10,84,227,145,180,157,173,78,78,79,92,80,117,80,67,82,158,140,72,84,36,88,154,91,29,94,149,94,173,94,247,94,31,95,140,96,181,98,58,99,208,99,175,104,64,108,135,120,142,121,11,122,224,125,71,130,2,138,230,138,68,142,19,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,144,45,145,216,145,14,159,229,108,88,100,226,100,117,101,244,110,132,118,27,123,105,144,209,147,186,110,242,84,185,95,164,100,77,143,237,143,68,146,120,81,107,88,41,89,85,92,151,94,251,109,143,126,28,117,188,140,226,142,91,152,185,112,29,79,191,107,177,111,48,117,251,150,78,81,16,84,53,88,87,88,172,89,96,92,146,95,151,101,92,103,33,110,123,118,223,131,237,140,20,144,253,144,77,147,37,120,58,120,170,82,166,94,31,87,116,89,18,96,18,80,90,81,172,81,205,81,0,82,16,85,84,88,88,88,87,89,149,91,246,92,139,93,188,96,149,98,45,100,113,103,67,104,188,104,223,104,215,118,216,109,111,110,155,109,111,112,200,113,83,95,216,117,119,121,73,123,84,123,82,123,214,124,113,125,48,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,132,105,133,228,133,14,138,4,139,70,140,15,142,3,144,15,144,25,148,118,150,45,152,48,154,216,149,205,80,213,82,12,84,2,88,14,92,167,97,158,100,30,109,179,119,229,122,244,128,4,132,83,144,133,146,224,92,7,157,63,83,151,95,179,95,156,109,121,114,99,119,191,121,228,123,210,107,236,114,173,138,3,104,97,106,248,81,129,122,52,105,74,92,246,156,235,130,197,91,73,145,30,112,120,86,111,92,199,96,102,101,140,108,90,140,65,144,19,152,81,84,199,102,13,146,72,89,163,144,133,81,77,78,234,81,153,133,14,139,88,112,122,99,75,147,98,105,180,153,4,126,119,117,87,83,96,105,223,142,227,150,93,108,140,78,60,92,16,95,233,143,2,83,209,140,137,128,121,134,255,94,229,101,115,78,101,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,89,63,92,238,151,251,78,138,89,205,95,141,138,225,111,176,121,98,121,231,91,113,132,43,115,177,113,116,94,245,95,123,99,154,100,195,113,152,124,67,78,252,94,75,78,220,87,162,86,169,96,195,111,13,125,253,128,51,129,191,129,178,143,151,137,164,134,244,93,138,98,173,100,135,137,119,103,226,108,62,109,54,116,52,120,70,90,117,127,173,130,172,153,243,79,195,94,221,98,146,99,87,101,111,103,195,118,76,114,204,128,186,128,41,143,77,145,13,80,249,87,146,90,133,104,115,105,100,113,253,114,183,140,242,88,224,140,106,150,25,144,127,135,228,121,231,119,41,132,47,79,101,82,90,83,205,98,207,103,202,108,125,118,148,123,149,124,54,130,132,133,235,143,221,102,32,111,6,114,27,126,171,131,193,153,166,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,81,177,123,114,120,184,123,135,128,72,123,232,106,97,94,140,128,81,117,96,117,107,81,98,146,140,110,122,118,151,145,234,154,16,79,112,127,156,98,79,123,165,149,233,156,122,86,89,88,228,134,188,150,52,79,36,82,74,83,205,83,219,83,6,94,44,100,145,101,127,103,62,108,78,108,72,114,175,114,237,115,84,117,65,126,44,130,233,133,169,140,196,123,198,145,105,113,18,152,239,152,61,99,105,102,106,117,228,118,208,120,67,133,238,134,42,83,81,83,38,84,131,89,135,94,124,95,178,96,73,98,121,98,171,98,144,101,212,107,204,108,178,117,174,118,145,120,216,121,203,125,119,127,165,128,171,136,185,138,187,140,127,144,94,151,219,152,11,106,56,124,153,80,62,92,174,95,135,103,216,107,53,116,9,119,142,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+363507);
/* memory initializer */ allocate([159,202,103,23,122,57,83,139,117,237,154,102,95,157,129,241,131,152,128,60,95,197,95,98,117,70,123,60,144,103,104,235,89,155,90,16,125,126,118,44,139,245,79,106,95,25,106,55,108,2,111,226,116,104,121,104,136,85,138,121,140,223,94,207,99,197,117,210,121,215,130,40,147,242,146,156,132,237,134,45,156,193,84,108,95,140,101,92,109,21,112,167,140,211,140,59,152,79,101,246,116,13,78,216,78,224,87,43,89,102,90,204,91,168,81,3,94,156,94,22,96,118,98,119,101,167,101,110,102,110,109,54,114,38,123,80,129,154,129,153,130,92,139,160,140,230,140,116,141,28,150,68,150,174,79,171,100,102,107,30,130,97,132,106,133,232,144,1,92,83,105,168,152,122,132,87,133,15,79,111,82,169,95,69,94,13,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,121,121,129,7,137,134,137,245,109,23,95,85,98,184,108,207,78,105,114,146,155,6,82,59,84,116,86,179,88,164,97,110,98,26,113,110,89,137,124,222,124,27,125,240,150,135,101,94,128,25,78,117,79,117,81,64,88,99,94,115,94,10,95,196,103,38,78,61,133,137,149,91,150,115,124,1,152,251,80,193,88,86,118,167,120,37,82,165,119,17,133,134,123,79,80,9,89,71,114,199,123,232,125,186,143,212,143,77,144,191,79,201,82,41,90,1,95,173,151,221,79,23,130,234,146,3,87,85,99,105,107,43,117,220,136,20,143,66,122,223,82,147,88,85,97,10,98,174,102,205,107,63,124,233,131,35,80,248,79,5,83,70,84,49,88,73,89,157,91,240,92,239,92,41,93,150,94,177,98,103,99,62,101,185,101,11,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,108,225,108,249,112,50,120,43,126,222,128,179,130,12,132,236,132,2,135,18,137,42,138,74,140,166,144,210,146,253,152,243,156,108,157,79,78,161,78,141,80,86,82,74,87,168,89,61,94,216,95,217,95,63,98,180,102,27,103,208,103,210,104,146,81,33,125,170,128,168,129,0,139,140,140,191,140,126,146,50,150,32,84,44,152,23,83,213,80,92,83,168,88,178,100,52,103,103,114,102,119,70,122,230,145,195,82,161,108,134,107,0,88,76,94,84,89,44,103,251,127,225,81,198,118,105,100,232,120,84,155,187,158,203,87,185,89,39,102,154,103,206,107,233,84,217,105,85,94,156,129,149,103,170,155,254,103,82,156,93,104,166,78,227,79,200,83,185,98,43,103,171,108,196,143,173,79,109,126,191,158,7,78,98,97,128,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,111,19,133,115,84,42,103,69,155,243,93,149,123,172,92,198,91,28,135,74,110,209,132,20,122,8,129,153,89,141,124,17,108,32,119,217,82,34,89,33,113,95,114,219,119,39,151,97,157,11,105,127,90,24,90,165,81,13,84,125,84,14,102,223,118,247,143,152,146,244,156,234,89,93,114,197,110,77,81,201,104,191,125,236,125,98,151,186,158,120,100,33,106,2,131,132,89,95,91,219,107,27,115,242,118,178,125,23,128,153,132,50,81,40,103,217,158,238,118,98,103,255,82,5,153,36,92,59,98,126,124,176,140,79,85,182,96,11,125,128,149,1,83,95,78,182,81,28,89,58,114,54,128,206,145,37,95,226,119,132,83,121,95,4,125,172,133,51,138,141,142,86,151,243,103,174,133,83,148,9,97,8,97,185,108,82,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,138,56,143,47,85,81,79,42,81,199,82,203,83,165,91,125,94,160,96,130,97,214,99,9,103,218,103,103,110,140,109,54,115,55,115,49,117,80,121,213,136,152,138,74,144,145,144,245,144,196,150,141,135,21,89,136,78,89,79,14,78,137,138,63,143,16,152,173,80,124,94,150,89,185,91,184,94,218,99,250,99,193,100,220,102,74,105,216,105,11,109,182,110,148,113,40,117,175,122,138,127,0,128,73,132,201,132,129,137,33,139,10,142,101,144,125,150,10,153,126,97,145,98,50,107,131,108,116,109,204,127,252,127,192,109,133,127,186,135,248,136,101,103,177,131,60,152,247,150,27,109,97,125,61,132,106,145,113,78,117,83,80,93,4,107,235,111,205,133,45,134,167,137,41,82,15,84,101,92,78,103,168,104,6,116,131,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,117,207,136,225,136,204,145,226,150,120,150,139,95,135,115,203,122,78,132,160,99,101,117,137,82,65,109,156,110,9,116,89,117,107,120,146,124,134,150,220,122,141,159,182,79,110,97,197,101,92,134,134,78,174,78,218,80,33,78,204,81,238,91,153,101,129,104,188,109,31,115,66,118,173,119,28,122,231,124,111,130,210,138,124,144,207,145,117,150,24,152,155,82,209,125,43,80,152,83,151,103,203,109,208,113,51,116,232,129,42,143,163,150,87,156,159,158,96,116,65,88,153,109,47,125,94,152,228,78,54,79,139,79,183,81,177,82,186,93,28,96,178,115,60,121,211,130,52,146,183,150,246,150,10,151,151,158,98,159,166,102,116,107,23,82,163,82,200,112,194,136,201,94,75,96,144,97,35,111,73,113,62,124,244,125,111,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,132,35,144,44,147,66,84,111,155,211,106,137,112,194,140,239,141,50,151,180,82,65,90,202,94,4,95,23,103,124,105,148,105,106,109,15,111,98,114,252,114,237,123,1,128,126,128,75,135,206,144,109,81,147,158,132,121,139,128,50,147,214,138,45,80,140,84,113,138,106,107,196,140,7,129,209,96,160,103,242,157,153,78,152,78,16,156,107,138,193,133,104,133,0,105,126,110,151,120,85,129,0,0,65,91,86,91,125,91,147,91,216,91,236,91,18,92,30,92,35,92,43,92,141,55,98,92,59,250,60,250,0,0,122,92,143,92,159,92,163,92,170,92,186,92,203,92,208,92,210,92,244,92,0,0,226,55,13,93,39,93,17,250,70,93,71,93,83,93,74,93,109,93,129,93,160,93,164,93,167,93,184,93,203,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,95,16,78,21,78,42,78,49,78,54,78,60,78,63,78,66,78,86,78,88,78,130,78,133,78,107,140,138,78,18,130,13,95,142,78,158,78,159,78,160,78,162,78,176,78,179,78,182,78,206,78,205,78,196,78,198,78,194,78,215,78,222,78,237,78,223,78,247,78,9,79,90,79,48,79,91,79,93,79,87,79,71,79,118,79,136,79,143,79,152,79,123,79,105,79,112,79,145,79,111,79,134,79,150,79,24,81,212,79,223,79,206,79,216,79,219,79,209,79,218,79,208,79,228,79,229,79,26,80,40,80,20,80,42,80,37,80,5,80,28,79,246,79,33,80,41,80,44,80,254,79,239,79,17,80,6,80,67,80,71,80,3,103,85,80,80,80,72,80,90,80,86,80,108,80,120,80,128,80,154,80,133,80,180,80,178,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,80,202,80,179,80,194,80,214,80,222,80,229,80,237,80,227,80,238,80,249,80,245,80,9,81,1,81,2,81,22,81,21,81,20,81,26,81,33,81,58,81,55,81,60,81,59,81,63,81,64,81,82,81,76,81,84,81,98,81,248,122,105,81,106,81,110,81,128,81,130,81,216,86,140,81,137,81,143,81,145,81,147,81,149,81,150,81,164,81,166,81,162,81,169,81,170,81,171,81,179,81,177,81,178,81,176,81,181,81,189,81,197,81,201,81,219,81,224,81,85,134,233,81,237,81,240,81,245,81,254,81,4,82,11,82,20,82,14,82,39,82,42,82,46,82,51,82,57,82,79,82,68,82,75,82,76,82,94,82,84,82,106,82,116,82,105,82,115,82,127,82,125,82,141,82,148,82,146,82,113,82,136,82,145,82,168,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,143,172,82,173,82,188,82,181,82,193,82,205,82,215,82,222,82,227,82,230,82,237,152,224,82,243,82,245,82,248,82,249,82,6,83,8,83,56,117,13,83,16,83,15,83,21,83,26,83,35,83,47,83,49,83,51,83,56,83,64,83,70,83,69,83,23,78,73,83,77,83,214,81,94,83,105,83,110,83,24,89,123,83,119,83,130,83,150,83,160,83,166,83,165,83,174,83,176,83,182,83,195,83,18,124,217,150,223,83,252,102,238,113,238,83,232,83,237,83,250,83,1,84,61,84,64,84,44,84,45,84,60,84,46,84,54,84,41,84,29,84,78,84,143,84,117,84,142,84,95,84,113,84,119,84,112,84,146,84,123,84,128,84,118,84,132,84,144,84,134,84,199,84,162,84,184,84,165,84,172,84,196,84,200,84,168,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,84,194,84,164,84,190,84,188,84,216,84,229,84,230,84,15,85,20,85,253,84,238,84,237,84,250,84,226,84,57,85,64,85,99,85,76,85,46,85,92,85,69,85,86,85,87,85,56,85,51,85,93,85,153,85,128,85,175,84,138,85,159,85,123,85,126,85,152,85,158,85,174,85,124,85,131,85,169,85,135,85,168,85,218,85,197,85,223,85,196,85,220,85,228,85,212,85,20,86,247,85,22,86,254,85,253,85,27,86,249,85,78,86,80,86,223,113,52,86,54,86,50,86,56,86,107,86,100,86,47,86,108,86,106,86,134,86,128,86,138,86,160,86,148,86,143,86,165,86,174,86,182,86,180,86,194,86,188,86,193,86,195,86,192,86,200,86,206,86,209,86,211,86,215,86,238,86,249,86,0,87,255,86,4,87,9,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,87,11,87,13,87,19,87,24,87,22,87,199,85,28,87,38,87,55,87,56,87,78,87,59,87,64,87,79,87,105,87,192,87,136,87,97,87,127,87,137,87,147,87,160,87,179,87,164,87,170,87,176,87,195,87,198,87,212,87,210,87,211,87,10,88,214,87,227,87,11,88,25,88,29,88,114,88,33,88,98,88,75,88,112,88,192,107,82,88,61,88,121,88,133,88,185,88,159,88,171,88,186,88,222,88,187,88,184,88,174,88,197,88,211,88,209,88,215,88,217,88,216,88,229,88,220,88,228,88,223,88,239,88,250,88,249,88,251,88,252,88,253,88,2,89,10,89,16,89,27,89,166,104,37,89,44,89,45,89,50,89,56,89,62,89,210,122,85,89,80,89,78,89,90,89,88,89,98,89,96,89,103,89,108,89,105,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,89,129,89,157,89,94,79,171,79,163,89,178,89,198,89,232,89,220,89,141,89,217,89,218,89,37,90,31,90,17,90,28,90,9,90,26,90,64,90,108,90,73,90,53,90,54,90,98,90,106,90,154,90,188,90,190,90,203,90,194,90,189,90,227,90,215,90,230,90,233,90,214,90,250,90,251,90,12,91,11,91,22,91,50,91,208,90,42,91,54,91,62,91,67,91,69,91,64,91,81,91,85,91,90,91,91,91,101,91,105,91,112,91,115,91,117,91,120,91,136,101,122,91,128,91,131,91,166,91,184,91,195,91,199,91,201,91,212,91,208,91,228,91,230,91,226,91,222,91,229,91,235,91,240,91,246,91,243,91,5,92,7,92,8,92,13,92,19,92,32,92,34,92,40,92,56,92,57,92,65,92,70,92,78,92,83,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,92,79,92,113,91,108,92,110,92,98,78,118,92,121,92,140,92,145,92,148,92,155,89,171,92,187,92,182,92,188,92,183,92,197,92,190,92,199,92,217,92,233,92,253,92,250,92,237,92,140,93,234,92,11,93,21,93,23,93,92,93,31,93,27,93,17,93,20,93,34,93,26,93,25,93,24,93,76,93,82,93,78,93,75,93,108,93,115,93,118,93,135,93,132,93,130,93,162,93,157,93,172,93,174,93,189,93,144,93,183,93,188,93,201,93,205,93,211,93,210,93,214,93,219,93,235,93,242,93,245,93,11,94,26,94,25,94,17,94,27,94,54,94,55,94,68,94,67,94,64,94,78,94,87,94,84,94,95,94,98,94,100,94,71,94,117,94,118,94,122,94,188,158,127,94,160,94,193,94,194,94,200,94,208,94,207,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,94,227,94,221,94,218,94,219,94,226,94,225,94,232,94,233,94,236,94,241,94,243,94,240,94,244,94,248,94,254,94,3,95,9,95,93,95,92,95,11,95,17,95,22,95,41,95,45,95,56,95,65,95,72,95,76,95,78,95,47,95,81,95,86,95,87,95,89,95,97,95,109,95,115,95,119,95,131,95,130,95,127,95,138,95,136,95,145,95,135,95,158,95,153,95,152,95,160,95,168,95,173,95,188,95,214,95,251,95,228,95,248,95,241,95,221,95,179,96,255,95,33,96,96,96,25,96,16,96,41,96,14,96,49,96,27,96,21,96,43,96,38,96,15,96,58,96,90,96,65,96,106,96,119,96,95,96,74,96,70,96,77,96,99,96,67,96,100,96,66,96,108,96,107,96,89,96,129,96,141,96,231,96,131,96,154,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,96,155,96,150,96,151,96,146,96,167,96,139,96,225,96,184,96,224,96,211,96,180,96,240,95,189,96,198,96,181,96,216,96,77,97,21,97,6,97,246,96,247,96,0,97,244,96,250,96,3,97,33,97,251,96,241,96,13,97,14,97,71,97,62,97,40,97,39,97,74,97,63,97,60,97,44,97,52,97,61,97,66,97,68,97,115,97,119,97,88,97,89,97,90,97,107,97,116,97,111,97,101,97,113,97,95,97,93,97,83,97,117,97,153,97,150,97,135,97,172,97,148,97,154,97,138,97,145,97,171,97,174,97,204,97,202,97,201,97,247,97,200,97,195,97,198,97,186,97,203,97,121,127,205,97,230,97,227,97,246,97,250,97,244,97,255,97,253,97,252,97,254,97,0,98,8,98,9,98,13,98,12,98,20,98,27,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,98,33,98,42,98,46,98,48,98,50,98,51,98,65,98,78,98,94,98,99,98,91,98,96,98,104,98,124,98,130,98,137,98,126,98,146,98,147,98,150,98,212,98,131,98,148,98,215,98,209,98,187,98,207,98,255,98,198,98,212,100,200,98,220,98,204,98,202,98,194,98,199,98,155,98,201,98,12,99,238,98,241,98,39,99,2,99,8,99,239,98,245,98,80,99,62,99,77,99,28,100,79,99,150,99,142,99,128,99,171,99,118,99,163,99,143,99,137,99,159,99,181,99,107,99,105,99,190,99,233,99,192,99,198,99,227,99,201,99,210,99,246,99,196,99,22,100,52,100,6,100,19,100,38,100,54,100,29,101,23,100,40,100,15,100,103,100,111,100,118,100,78,100,42,101,149,100,147,100,165,100,169,100,136,100,188,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,100,210,100,197,100,199,100,187,100,216,100,194,100,241,100,231,100,9,130,224,100,225,100,172,98,227,100,239,100,44,101,246,100,244,100,242,100,250,100,0,101,253,100,24,101,28,101,5,101,36,101,35,101,43,101,52,101,53,101,55,101,54,101,56,101,75,117,72,101,86,101,85,101,77,101,88,101,94,101,93,101,114,101,120,101,130,101,131,101,138,139,155,101,159,101,171,101,183,101,195,101,198,101,193,101,196,101,204,101,210,101,219,101,217,101,224,101,225,101,241,101,114,103,10,102,3,102,251,101,115,103,53,102,54,102,52,102,28,102,79,102,68,102,73,102,65,102,94,102,93,102,100,102,103,102,104,102,95,102,98,102,112,102,131,102,136,102,142,102,137,102,132,102,152,102,157,102,193,102,185,102,201,102,190,102,188,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,102,184,102,214,102,218,102,224,102,63,102,230,102,233,102,240,102,245,102,247,102,15,103,22,103,30,103,38,103,39,103,56,151,46,103,63,103,54,103,65,103,56,103,55,103,70,103,94,103,96,103,89,103,99,103,100,103,137,103,112,103,169,103,124,103,106,103,140,103,139,103,166,103,161,103,133,103,183,103,239,103,180,103,236,103,179,103,233,103,184,103,228,103,222,103,221,103,226,103,238,103,185,103,206,103,198,103,231,103,156,106,30,104,70,104,41,104,64,104,77,104,50,104,78,104,179,104,43,104,89,104,99,104,119,104,127,104,159,104,143,104,173,104,148,104,157,104,155,104,131,104,174,106,185,104,116,104,181,104,160,104,186,104,15,105,141,104,126,104,1,105,202,104,8,105,216,104,34,105,38,105,225,104,12,105,205,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,104,231,104,213,104,54,105,18,105,4,105,215,104,227,104,37,105,249,104,224,104,239,104,40,105,42,105,26,105,35,105,33,105,198,104,121,105,119,105,92,105,120,105,107,105,84,105,126,105,110,105,57,105,116,105,61,105,89,105,48,105,97,105,94,105,93,105,129,105,106,105,178,105,174,105,208,105,191,105,193,105,211,105,190,105,206,105,232,91,202,105,221,105,187,105,195,105,167,105,46,106,145,105,160,105,156,105,149,105,180,105,222,105,232,105,2,106,27,106,255,105,10,107,249,105,242,105,231,105,5,106,177,105,30,106,237,105,20,106,235,105,10,106,18,106,193,106,35,106,19,106,68,106,12,106,114,106,54,106,120,106,71,106,98,106,89,106,102,106,72,106,56,106,34,106,144,106,141,106,160,106,132,106,162,106,163,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+373747);
/* memory initializer */ allocate([106,23,134,187,106,195,106,194,106,184,106,179,106,172,106,222,106,209,106,223,106,170,106,218,106,234,106,251,106,5,107,22,134,250,106,18,107,22,107,49,155,31,107,56,107,55,107,220,118,57,107,238,152,71,107,67,107,73,107,80,107,89,107,84,107,91,107,95,107,97,107,120,107,121,107,127,107,128,107,132,107,131,107,141,107,152,107,149,107,158,107,164,107,170,107,171,107,175,107,178,107,177,107,179,107,183,107,188,107,198,107,203,107,211,107,223,107,236,107,235,107,243,107,239,107,190,158,8,108,19,108,20,108,27,108,36,108,35,108,94,108,85,108,98,108,106,108,130,108,141,108,154,108,129,108,155,108,126,108,104,108,115,108,146,108,144,108,196,108,241,108,211,108,189,108,215,108,197,108,221,108,174,108,177,108,190,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,108,219,108,239,108,217,108,234,108,31,109,77,136,54,109,43,109,61,109,56,109,25,109,53,109,51,109,18,109,12,109,99,109,147,109,100,109,90,109,121,109,89,109,142,109,149,109,228,111,133,109,249,109,21,110,10,110,181,109,199,109,230,109,184,109,198,109,236,109,222,109,204,109,232,109,210,109,197,109,250,109,217,109,228,109,213,109,234,109,238,109,45,110,110,110,46,110,25,110,114,110,95,110,62,110,35,110,107,110,43,110,118,110,77,110,31,110,67,110,58,110,78,110,36,110,255,110,29,110,56,110,130,110,170,110,152,110,201,110,183,110,211,110,189,110,175,110,196,110,178,110,212,110,213,110,143,110,165,110,194,110,159,110,65,111,17,111,76,112,236,110,248,110,254,110,63,111,242,110,49,111,239,110,50,111,204,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,111,19,111,247,110,134,111,122,111,120,111,129,111,128,111,111,111,91,111,243,111,109,111,130,111,124,111,88,111,142,111,145,111,194,111,102,111,179,111,163,111,161,111,164,111,185,111,198,111,170,111,223,111,213,111,236,111,212,111,216,111,241,111,238,111,219,111,9,112,11,112,250,111,17,112,1,112,15,112,254,111,27,112,26,112,116,111,29,112,24,112,31,112,48,112,62,112,50,112,81,112,99,112,153,112,146,112,175,112,241,112,172,112,184,112,179,112,174,112,223,112,203,112,221,112,217,112,9,113,253,112,28,113,25,113,101,113,85,113,136,113,102,113,98,113,76,113,86,113,108,113,143,113,251,113,132,113,149,113,168,113,172,113,215,113,185,113,190,113,210,113,201,113,212,113,206,113,224,113,236,113,231,113,245,113,252,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,113,255,113,13,114,16,114,27,114,40,114,45,114,44,114,48,114,50,114,59,114,60,114,63,114,64,114,70,114,75,114,88,114,116,114,126,114,130,114,129,114,135,114,146,114,150,114,162,114,167,114,185,114,178,114,195,114,198,114,196,114,206,114,210,114,226,114,224,114,225,114,249,114,247,114,15,80,23,115,10,115,28,115,22,115,29,115,52,115,47,115,41,115,37,115,62,115,78,115,79,115,216,158,87,115,106,115,104,115,112,115,120,115,117,115,123,115,122,115,200,115,179,115,206,115,187,115,192,115,229,115,238,115,222,115,162,116,5,116,111,116,37,116,248,115,50,116,58,116,85,116,63,116,95,116,89,116,65,116,92,116,105,116,112,116,99,116,106,116,118,116,126,116,139,116,158,116,167,116,202,116,207,116,212,116,241,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,116,227,116,231,116,233,116,238,116,242,116,240,116,241,116,248,116,247,116,4,117,3,117,5,117,12,117,14,117,13,117,21,117,19,117,30,117,38,117,44,117,60,117,68,117,77,117,74,117,73,117,91,117,70,117,90,117,105,117,100,117,103,117,107,117,109,117,120,117,118,117,134,117,135,117,116,117,138,117,137,117,130,117,148,117,154,117,157,117,165,117,163,117,194,117,179,117,195,117,181,117,189,117,184,117,188,117,177,117,205,117,202,117,210,117,217,117,227,117,222,117,254,117,255,117,252,117,1,118,240,117,250,117,242,117,243,117,11,118,13,118,9,118,31,118,39,118,32,118,33,118,34,118,36,118,52,118,48,118,59,118,71,118,72,118,70,118,92,118,88,118,97,118,98,118,104,118,105,118,106,118,103,118,108,118,112,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,118,118,118,120,118,124,118,128,118,131,118,136,118,139,118,142,118,150,118,147,118,153,118,154,118,176,118,180,118,184,118,185,118,186,118,194,118,205,118,214,118,210,118,222,118,225,118,229,118,231,118,234,118,47,134,251,118,8,119,7,119,4,119,41,119,36,119,30,119,37,119,38,119,27,119,55,119,56,119,71,119,90,119,104,119,107,119,91,119,101,119,127,119,126,119,121,119,142,119,139,119,145,119,160,119,158,119,176,119,182,119,185,119,191,119,188,119,189,119,187,119,199,119,205,119,215,119,218,119,220,119,227,119,238,119,252,119,12,120,18,120,38,121,32,120,42,121,69,120,142,120,116,120,134,120,124,120,154,120,140,120,163,120,181,120,170,120,175,120,209,120,198,120,203,120,212,120,190,120,188,120,197,120,202,120,236,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,120,218,120,253,120,244,120,7,121,18,121,17,121,25,121,44,121,43,121,64,121,96,121,87,121,95,121,90,121,85,121,83,121,122,121,127,121,138,121,157,121,167,121,75,159,170,121,174,121,179,121,185,121,186,121,201,121,213,121,231,121,236,121,225,121,227,121,8,122,13,122,24,122,25,122,32,122,31,122,128,121,49,122,59,122,62,122,55,122,67,122,87,122,73,122,97,122,98,122,105,122,157,159,112,122,121,122,125,122,136,122,151,122,149,122,152,122,150,122,169,122,200,122,176,122,182,122,197,122,196,122,191,122,131,144,199,122,202,122,205,122,207,122,213,122,211,122,217,122,218,122,221,122,225,122,226,122,230,122,237,122,240,122,2,123,15,123,10,123,6,123,51,123,24,123,25,123,30,123,53,123,40,123,54,123,80,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,123,4,123,77,123,11,123,76,123,69,123,117,123,101,123,116,123,103,123,112,123,113,123,108,123,110,123,157,123,152,123,159,123,141,123,156,123,154,123,139,123,146,123,143,123,93,123,153,123,203,123,193,123,204,123,207,123,180,123,198,123,221,123,233,123,17,124,20,124,230,123,229,123,96,124,0,124,7,124,19,124,243,123,247,123,23,124,13,124,246,123,35,124,39,124,42,124,31,124,55,124,43,124,61,124,76,124,67,124,84,124,79,124,64,124,80,124,88,124,95,124,100,124,86,124,101,124,108,124,117,124,131,124,144,124,164,124,173,124,162,124,171,124,161,124,168,124,179,124,178,124,177,124,174,124,185,124,189,124,192,124,197,124,194,124,216,124,210,124,220,124,226,124,59,155,239,124,242,124,244,124,246,124,250,124,6,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,125,28,125,21,125,10,125,69,125,75,125,46,125,50,125,63,125,53,125,70,125,115,125,86,125,78,125,114,125,104,125,110,125,79,125,99,125,147,125,137,125,91,125,143,125,125,125,155,125,186,125,174,125,163,125,181,125,199,125,189,125,171,125,61,126,162,125,175,125,220,125,184,125,159,125,176,125,216,125,221,125,228,125,222,125,251,125,242,125,225,125,5,126,10,126,35,126,33,126,18,126,49,126,31,126,9,126,11,126,34,126,70,126,102,126,59,126,53,126,57,126,67,126,55,126,50,126,58,126,103,126,93,126,86,126,94,126,89,126,90,126,121,126,106,126,105,126,124,126,123,126,131,126,213,125,125,126,174,143,127,126,136,126,137,126,140,126,146,126,144,126,147,126,148,126,150,126,142,126,155,126,156,126,56,127,58,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,127,76,127,77,127,78,127,80,127,81,127,85,127,84,127,88,127,95,127,96,127,104,127,105,127,103,127,120,127,130,127,134,127,131,127,136,127,135,127,140,127,148,127,158,127,157,127,154,127,163,127,175,127,178,127,185,127,174,127,182,127,184,127,113,139,197,127,198,127,202,127,213,127,212,127,225,127,230,127,233,127,243,127,249,127,220,152,6,128,4,128,11,128,18,128,24,128,25,128,28,128,33,128,40,128,63,128,59,128,74,128,70,128,82,128,88,128,90,128,95,128,98,128,104,128,115,128,114,128,112,128,118,128,121,128,125,128,127,128,132,128,134,128,133,128,155,128,147,128,154,128,173,128,144,81,172,128,219,128,229,128,217,128,221,128,196,128,218,128,214,128,9,129,239,128,241,128,27,129,41,129,35,129,47,129,75,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,150,70,129,62,129,83,129,81,129,252,128,113,129,110,129,101,129,102,129,116,129,131,129,136,129,138,129,128,129,130,129,160,129,149,129,164,129,163,129,95,129,147,129,169,129,176,129,181,129,190,129,184,129,189,129,192,129,194,129,186,129,201,129,205,129,209,129,217,129,216,129,200,129,218,129,223,129,224,129,231,129,250,129,251,129,254,129,1,130,2,130,5,130,7,130,10,130,13,130,16,130,22,130,41,130,43,130,56,130,51,130,64,130,89,130,88,130,93,130,90,130,95,130,100,130,98,130,104,130,106,130,107,130,46,130,113,130,119,130,120,130,126,130,141,130,146,130,171,130,159,130,187,130,172,130,225,130,227,130,223,130,210,130,244,130,243,130,250,130,147,131,3,131,251,130,249,130,222,130,6,131,220,130,9,131,217,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,131,52,131,22,131,50,131,49,131,64,131,57,131,80,131,69,131,47,131,43,131,23,131,24,131,133,131,154,131,170,131,159,131,162,131,150,131,35,131,142,131,135,131,138,131,124,131,181,131,115,131,117,131,160,131,137,131,168,131,244,131,19,132,235,131,206,131,253,131,3,132,216,131,11,132,193,131,247,131,7,132,224,131,242,131,13,132,34,132,32,132,189,131,56,132,6,133,251,131,109,132,42,132,60,132,90,133,132,132,119,132,107,132,173,132,110,132,130,132,105,132,70,132,44,132,111,132,121,132,53,132,202,132,98,132,185,132,191,132,159,132,217,132,205,132,187,132,218,132,208,132,193,132,198,132,214,132,161,132,33,133,255,132,244,132,23,133,24,133,44,133,31,133,21,133,20,133,252,132,64,133,99,133,88,133,72,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,133,2,134,75,133,85,133,128,133,164,133,136,133,145,133,138,133,168,133,109,133,148,133,155,133,234,133,135,133,156,133,119,133,126,133,144,133,201,133,186,133,207,133,185,133,208,133,213,133,221,133,229,133,220,133,249,133,10,134,19,134,11,134,254,133,250,133,6,134,34,134,26,134,48,134,63,134,77,134,85,78,84,134,95,134,103,134,113,134,147,134,163,134,169,134,170,134,139,134,140,134,182,134,175,134,196,134,198,134,176,134,201,134,35,136,171,134,212,134,222,134,233,134,236,134,223,134,219,134,239,134,18,135,6,135,8,135,0,135,3,135,251,134,17,135,9,135,13,135,249,134,10,135,52,135,63,135,55,135,59,135,37,135,41,135,26,135,96,135,95,135,120,135,76,135,78,135,116,135,87,135,104,135,110,135,89,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,135,99,135,106,135,5,136,162,135,159,135,130,135,175,135,203,135,189,135,192,135,208,135,214,150,171,135,196,135,179,135,199,135,198,135,187,135,239,135,242,135,224,135,15,136,13,136,254,135,246,135,247,135,14,136,210,135,17,136,22,136,21,136,34,136,33,136,49,136,54,136,57,136,39,136,59,136,68,136,66,136,82,136,89,136,94,136,98,136,107,136,129,136,126,136,158,136,117,136,125,136,181,136,114,136,130,136,151,136,146,136,174,136,153,136,162,136,141,136,164,136,176,136,191,136,177,136,195,136,196,136,212,136,216,136,217,136,221,136,249,136,2,137,252,136,244,136,232,136,242,136,4,137,12,137,10,137,19,137,67,137,30,137,37,137,42,137,43,137,65,137,68,137,59,137,54,137,56,137,76,137,29,137,96,137,94,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,137,100,137,109,137,106,137,111,137,116,137,119,137,126,137,131,137,136,137,138,137,147,137,152,137,161,137,169,137,166,137,172,137,175,137,178,137,186,137,189,137,191,137,192,137,218,137,220,137,221,137,231,137,244,137,248,137,3,138,22,138,16,138,12,138,27,138,29,138,37,138,54,138,65,138,91,138,82,138,70,138,72,138,124,138,109,138,108,138,98,138,133,138,130,138,132,138,168,138,161,138,145,138,165,138,166,138,154,138,163,138,196,138,205,138,194,138,218,138,235,138,243,138,231,138,228,138,241,138,20,139,224,138,226,138,247,138,222,138,219,138,12,139,7,139,26,139,225,138,22,139,16,139,23,139,32,139,51,139,171,151,38,139,43,139,62,139,40,139,65,139,76,139,79,139,78,139,73,139,86,139,91,139,90,139,107,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,139,108,139,111,139,116,139,125,139,128,139,140,139,142,139,146,139,147,139,150,139,153,139,154,139,58,140,65,140,63,140,72,140,76,140,78,140,80,140,85,140,98,140,108,140,120,140,122,140,130,140,137,140,133,140,138,140,141,140,142,140,148,140,124,140,152,140,29,98,173,140,170,140,189,140,178,140,179,140,174,140,182,140,200,140,193,140,228,140,227,140,218,140,253,140,250,140,251,140,4,141,5,141,10,141,7,141,15,141,13,141,16,141,78,159,19,141,205,140,20,141,22,141,103,141,109,141,113,141,115,141,129,141,153,141,194,141,190,141,186,141,207,141,218,141,214,141,204,141,219,141,203,141,234,141,235,141,223,141,227,141,252,141,8,142,9,142,255,141,29,142,30,142,16,142,31,142,66,142,53,142,48,142,52,142,74,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,142,73,142,76,142,80,142,72,142,89,142,100,142,96,142,42,142,99,142,85,142,118,142,114,142,124,142,129,142,135,142,133,142,132,142,139,142,138,142,147,142,145,142,148,142,153,142,170,142,161,142,172,142,176,142,198,142,177,142,190,142,197,142,200,142,203,142,219,142,227,142,252,142,251,142,235,142,254,142,10,143,5,143,21,143,18,143,25,143,19,143,28,143,31,143,27,143,12,143,38,143,51,143,59,143,57,143,69,143,66,143,62,143,76,143,73,143,70,143,78,143,87,143,92,143,98,143,99,143,100,143,156,143,159,143,163,143,173,143,175,143,183,143,218,143,229,143,226,143,234,143,239,143,135,144,244,143,5,144,249,143,250,143,17,144,21,144,33,144,13,144,30,144,22,144,11,144,39,144,54,144,53,144,57,144,248,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,144,80,144,81,144,82,144,14,144,73,144,62,144,86,144,88,144,94,144,104,144,111,144,118,144,168,150,114,144,130,144,125,144,129,144,128,144,138,144,137,144,143,144,168,144,175,144,177,144,181,144,226,144,228,144,72,98,219,144,2,145,18,145,25,145,50,145,48,145,74,145,86,145,88,145,99,145,101,145,105,145,115,145,114,145,139,145,137,145,130,145,162,145,171,145,175,145,170,145,181,145,180,145,186,145,192,145,193,145,201,145,203,145,208,145,214,145,223,145,225,145,219,145,252,145,245,145,246,145,30,146,255,145,20,146,44,146,21,146,17,146,94,146,87,146,69,146,73,146,100,146,72,146,149,146,63,146,75,146,80,146,156,146,150,146,147,146,155,146,90,146,207,146,185,146,183,146,233,146,15,147,250,146,68,147,46,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,147,34,147,26,147,35,147,58,147,53,147,59,147,92,147,96,147,124,147,110,147,86,147,176,147,172,147,173,147,148,147,185,147,214,147,215,147,232,147,229,147,216,147,195,147,221,147,208,147,200,147,228,147,26,148,20,148,19,148,3,148,7,148,16,148,54,148,43,148,53,148,33,148,58,148,65,148,82,148,68,148,91,148,96,148,98,148,94,148,106,148,41,146,112,148,117,148,119,148,125,148,90,148,124,148,126,148,129,148,127,148,130,149,135,149,138,149,148,149,150,149,152,149,153,149,160,149,168,149,167,149,173,149,188,149,187,149,185,149,190,149,202,149,246,111,195,149,205,149,204,149,213,149,212,149,214,149,220,149,225,149,229,149,226,149,33,150,40,150,46,150,47,150,66,150,76,150,79,150,75,150,119,150,92,150,94,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,150,95,150,102,150,114,150,108,150,141,150,152,150,149,150,151,150,170,150,167,150,177,150,178,150,176,150,180,150,182,150,184,150,185,150,206,150,203,150,201,150,205,150,77,137,220,150,13,151,213,150,249,150,4,151,6,151,8,151,19,151,14,151,17,151,15,151,22,151,25,151,36,151,42,151,48,151,57,151,61,151,62,151,68,151,70,151,72,151,66,151,73,151,92,151,96,151,100,151,102,151,104,151,210,82,107,151,113,151,121,151,133,151,124,151,129,151,122,151,134,151,139,151,143,151,144,151,156,151,168,151,166,151,163,151,179,151,180,151,195,151,198,151,200,151,203,151,220,151,237,151,79,159,242,151,223,122,246,151,245,151,15,152,12,152,56,152,36,152,33,152,55,152,61,152,70,152,79,152,75,152,107,152,111,152,112,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+383987);
/* memory initializer */ allocate([152,116,152,115,152,170,152,175,152,177,152,182,152,196,152,195,152,198,152,233,152,235,152,3,153,9,153,18,153,20,153,24,153,33,153,29,153,30,153,36,153,32,153,44,153,46,153,61,153,62,153,66,153,73,153,69,153,80,153,75,153,81,153,82,153,76,153,85,153,151,153,152,153,165,153,173,153,174,153,188,153,223,153,219,153,221,153,216,153,209,153,237,153,238,153,241,153,242,153,251,153,248,153,1,154,15,154,5,154,226,153,25,154,43,154,55,154,69,154,66,154,64,154,67,154,62,154,85,154,77,154,91,154,87,154,95,154,98,154,101,154,100,154,105,154,107,154,106,154,173,154,176,154,188,154,192,154,207,154,209,154,211,154,212,154,222,154,223,154,226,154,227,154,230,154,239,154,235,154,238,154,244,154,241,154,247,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,154,6,155,24,155,26,155,31,155,34,155,35,155,37,155,39,155,40,155,41,155,42,155,46,155,47,155,50,155,68,155,67,155,79,155,77,155,78,155,81,155,88,155,116,155,147,155,131,155,145,155,150,155,151,155,159,155,160,155,168,155,180,155,192,155,202,155,185,155,198,155,207,155,209,155,210,155,227,155,226,155,228,155,212,155,225,155,58,156,242,155,241,155,240,155,21,156,20,156,9,156,19,156,12,156,6,156,8,156,18,156,10,156,4,156,46,156,27,156,37,156,36,156,33,156,48,156,71,156,50,156,70,156,62,156,90,156,96,156,103,156,118,156,120,156,231,156,236,156,240,156,9,157,8,157,235,156,3,157,6,157,42,157,38,157,175,157,35,157,31,157,68,157,21,157,18,157,65,157,63,157,62,157,70,157,72,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,157,94,157,100,157,81,157,80,157,89,157,114,157,137,157,135,157,171,157,111,157,122,157,154,157,164,157,169,157,178,157,196,157,193,157,187,157,184,157,186,157,198,157,207,157,194,157,217,157,211,157,248,157,230,157,237,157,239,157,253,157,26,158,27,158,30,158,117,158,121,158,125,158,129,158,136,158,139,158,140,158,146,158,149,158,145,158,157,158,165,158,169,158,184,158,170,158,173,158,97,151,204,158,206,158,207,158,208,158,212,158,220,158,222,158,221,158,224,158,229,158,232,158,239,158,244,158,246,158,247,158,249,158,251,158,252,158,253,158,7,159,8,159,183,118,21,159,33,159,44,159,62,159,74,159,82,159,84,159,99,159,95,159,96,159,97,159,102,159,103,159,108,159,106,159,119,159,114,159,118,159,149,159,156,159,160,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,88,199,105,89,144,100,116,220,81,153,113,0,0,226,93,20,94,24,94,88,94,94,94,190,94,40,249,203,94,249,94,0,95,2,95,7,95,29,95,35,95,52,95,54,95,61,95,64,95,69,95,84,95,88,95,100,95,103,95,125,95,137,95,156,95,167,95,175,95,181,95,183,95,201,95,222,95,225,95,233,95,13,96,20,96,24,96,51,96,53,96,71,96,61,250,157,96,158,96,203,96,212,96,213,96,221,96,248,96,28,97,43,97,48,97,55,97,62,250,141,97,63,250,188,97,185,97,64,250,34,98,62,98,67,98,86,98,90,98,111,98,133,98,196,98,214,98,252,98,10,99,24,99,57,99,67,99,101,99,124,99,229,99,237,99,245,99,16,100,20,100,34,100,121,100,81,100,96,100,109,100,206,100,190,100,191,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,100,202,100,208,100,247,100,251,100,34,101,41,101,65,250,103,101,157,101,66,250,0,102,9,102,21,102,30,102,58,102,34,102,36,102,43,102,48,102,49,102,51,102,251,102,72,102,76,102,0,0,89,102,90,102,97,102,101,102,115,102,119,102,120,102,141,102,67,250,160,102,178,102,187,102,198,102,200,102,34,59,219,102,232,102,250,102,19,103,41,249,51,103,102,103,71,103,72,103,123,103,129,103,147,103,152,103,155,103,187,103,249,103,192,103,215,103,252,103,1,104,82,104,29,104,44,104,49,104,91,104,114,104,117,104,68,250,163,104,165,104,178,104,200,104,208,104,232,104,237,104,240,104,241,104,252,104,10,105,73,105,0,0,53,105,66,105,87,105,99,105,100,105,104,105,128,105,20,250,165,105,173,105,207,105,182,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,59,226,105,233,105,234,105,245,105,246,105,15,106,21,106,0,0,59,106,62,106,69,106,80,106,86,106,91,106,107,106,115,106,0,0,137,106,148,106,157,106,158,106,165,106,228,106,231,106,15,60,29,249,27,107,30,107,44,107,53,107,70,107,86,107,96,107,101,107,103,107,119,107,130,107,169,107,173,107,112,249,207,107,214,107,215,107,255,107,5,108,16,108,51,108,89,108,92,108,170,108,116,108,118,108,133,108,134,108,152,108,156,108,251,108,198,108,212,108,224,108,235,108,238,108,0,0,4,109,14,109,46,109,49,109,57,109,63,109,88,109,101,109,69,250,130,109,135,109,137,109,148,109,170,109,172,109,191,109,196,109,214,109,218,109,219,109,221,109,252,109,70,250,52,110,68,110,92,110,94,110,171,110,177,110,193,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,110,206,110,16,111,26,111,71,250,42,111,47,111,51,111,81,111,89,111,94,111,97,111,98,111,126,111,136,111,140,111,141,111,148,111,160,111,167,111,182,111,188,111,199,111,202,111,249,111,240,111,245,111,5,112,6,112,40,112,74,112,93,112,94,112,78,112,100,112,117,112,133,112,164,112,171,112,183,112,212,112,216,112,228,112,15,113,43,113,30,113,32,113,46,113,48,113,70,113,71,113,81,113,72,250,82,113,92,113,96,113,104,113,21,250,133,113,135,113,146,113,193,113,186,113,196,113,254,113,0,114,21,114,85,114,86,114,63,62,141,114,155,114,190,114,192,114,251,114,0,0,39,115,40,115,22,250,80,115,102,115,124,115,149,115,159,115,160,115,162,115,166,115,171,115,201,115,207,115,214,115,217,115,227,115,233,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,116,10,116,26,116,27,116,74,250,38,116,40,116,42,116,43,116,44,116,46,116,47,116,48,116,68,116,70,116,71,116,75,116,87,116,98,116,107,116,109,116,134,116,135,116,137,116,152,116,156,116,159,116,163,116,144,116,166,116,168,116,169,116,181,116,191,116,200,116,201,116,218,116,255,116,1,117,23,117,47,117,111,117,121,117,146,117,114,63,206,117,228,117,0,118,2,118,8,118,21,118,22,118,25,118,30,118,45,118,53,118,67,118,75,118,100,118,101,118,109,118,111,118,113,118,129,118,155,118,157,118,158,118,166,118,170,118,182,118,197,118,204,118,206,118,212,118,230,118,241,118,252,118,10,119,25,119,52,119,54,119,70,119,77,119,78,119,92,119,95,119,98,119,122,119,128,119,148,119,170,119,224,119,45,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,120,78,120,79,120,81,120,104,120,110,120,75,250,176,120,0,0,173,120,228,120,242,120,0,121,247,120,28,121,46,121,49,121,52,121,76,250,77,250,69,121,70,121,78,250,79,250,80,250,92,121,81,250,25,250,26,250,121,121,82,250,83,250,27,250,152,121,177,121,184,121,200,121,202,121,0,0,212,121,222,121,235,121,237,121,3,122,84,250,57,122,93,122,109,122,85,250,133,122,160,122,0,0,179,122,187,122,206,122,235,122,253,122,18,123,45,123,59,123,71,123,78,123,96,123,109,123,111,123,114,123,158,123,86,250,215,123,217,123,1,124,49,124,30,124,32,124,51,124,54,124,100,66,0,0,89,124,109,124,121,124,143,124,148,124,160,124,188,124,213,124,217,124,221,124,7,125,8,125,19,125,29,125,35,125,49,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,125,72,125,83,125,92,125,122,125,131,125,139,125,160,125,166,125,194,125,204,125,214,125,227,125,87,250,40,126,8,126,17,126,21,126,89,250,71,126,82,126,97,126,138,126,141,126,71,127,90,250,145,127,151,127,191,127,206,127,219,127,223,127,236,127,238,127,250,127,91,250,20,128,38,128,53,128,55,128,60,128,202,128,215,128,224,128,243,128,24,129,74,129,96,129,103,129,104,129,109,129,187,129,202,129,207,129,215,129,92,250,83,68,91,68,96,130,116,130,0,0,142,130,161,130,163,130,164,130,169,130,174,130,183,130,190,130,191,130,198,130,213,130,253,130,254,130,0,131,1,131,98,131,34,131,45,131,58,131,67,131,71,131,81,131,85,131,125,131,134,131,146,131,152,131,167,131,169,131,191,131,192,131,199,131,207,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,131,225,131,234,131,1,132,6,132,10,132,95,250,72,132,95,132,112,132,115,132,133,132,158,132,175,132,180,132,186,132,192,132,194,132,0,0,50,133,30,133,35,133,47,133,89,133,100,133,31,250,173,133,122,133,140,133,143,133,162,133,176,133,203,133,206,133,237,133,18,134,255,133,4,134,5,134,16,134,0,0,24,134,41,134,56,134,87,134,91,134,54,249,98,134,157,69,108,134,117,134,152,134,184,134,250,134,252,134,253,134,11,135,113,135,135,135,136,135,172,135,173,135,181,135,234,69,214,135,236,135,6,136,10,136,16,136,20,136,31,136,152,136,170,136,202,136,206,136,0,0,245,136,28,137,96,250,24,137,25,137,26,137,39,137,48,137,50,137,57,137,64,137,148,137,97,250,212,137,229,137,246,137,18,138,21,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,138,55,138,71,138,78,138,93,138,97,138,117,138,121,138,167,138,208,138,223,138,244,138,246,138,34,250,98,250,99,250,70,139,84,139,89,139,105,139,157,139,73,140,104,140,100,250,225,140,244,140,248,140,254,140,101,250,18,141,27,141,175,141,206,141,209,141,215,141,32,142,35,142,61,142,112,142,123,142,0,0,192,142,68,72,250,142,30,143,45,143,54,143,84,143,0,0,166,143,181,143,228,143,232,143,238,143,8,144,45,144,103,250,136,144,149,144,151,144,153,144,155,144,162,144,179,144,190,144,196,144,197,144,199,144,215,144,221,144,222,144,239,144,244,144,38,250,20,145,21,145,22,145,34,145,35,145,39,145,47,145,49,145,52,145,61,145,72,145,91,145,131,145,158,145,172,145,177,145,188,145,215,145,251,145,228,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,145,237,145,241,145,7,146,16,146,56,146,57,146,58,146,60,146,64,146,67,146,79,146,120,146,136,146,194,146,203,146,204,146,211,146,224,146,255,146,4,147,31,147,33,147,37,147,72,147,73,147,74,147,100,147,101,147,106,147,112,147,155,147,163,147,186,147,198,147,222,147,223,147,4,148,253,147,51,148,74,148,99,148,107,148,113,148,114,148,142,149,159,149,166,149,169,149,172,149,182,149,189,149,203,149,208,149,211,149,176,73,218,149,222,149,88,150,132,150,220,249,157,150,164,150,165,150,210,150,222,150,104,250,233,150,239,150,51,151,59,151,77,151,78,151,79,151,90,151,110,151,115,151,149,151,174,151,186,151,193,151,201,151,222,151,219,151,244,151,105,250,10,152,30,152,43,152,48,152,106,250,82,152,83,152,86,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,152,89,152,90,152,208,249,101,152,108,152,186,152,200,152,231,152,88,153,158,153,2,154,3,154,36,154,45,154,46,154,56,154,74,154,78,154,82,154,182,154,193,154,195,154,206,154,214,154,249,154,2,155,8,155,32,155,23,76,45,155,94,155,121,155,102,155,114,155,117,155,132,155,138,155,143,155,158,155,167,155,193,155,206,155,229,155,248,155,253,155,0,156,35,156,65,156,79,156,80,156,83,156,99,156,101,156,119,156,29,157,30,157,67,157,71,157,82,157,99,157,112,157,124,157,138,157,150,157,192,157,172,157,188,157,215,157,0,0,231,157,7,158,21,158,124,158,158,158,164,158,172,158,175,158,180,158,181,158,195,158,209,158,16,159,57,159,87,159,144,159,148,159,151,159,162,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,32,6,0,124,0,0,0,125,0,0,0,78,53,77,101,67,97,98,49,48,68,105,99,116,105,111,110,97,114,121,69,0,0,0,0,40,99,6,0,200,32,6,0,100,105,99,100,105,114,0,0,109,97,116,114,105,120,46,98,105,110,0,0,0,0,0,0,114,0,0,0,0,0,0,0,99,111,110,110,101,99,116,111,114,46,99,112,112,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,99,109,109,97,112,95,45,62,111,112,101,110,40,102,105,108,101,110,97,109,101,44,32,109,111,100,101,41,0,0,0,0,93,32,0,0,0,0,0,0,99,97,110,110,111,116,32,111,112,101,110,58,32,0,0,0,109,97,116,114,105,120,95,0,109,97,116,114,105,120,32,105,115,32,78,85,76,76,0,0,99,109,109,97,112,95,45,62,115,105,122,101,40,41,32,62,61,32,50,0,0,0,0,0,102,105,108,101,32,115,105,122,101,32,105,115,32,105,110,118,97,108,105,100,58,32,0,0,115,116,97,116,105,99,95,99,97,115,116,60,115,105,122,101,95,116,62,40,108,115,105,122,101,95,32,42,32,114,115,105,122,101,95,32,43,32,50,41,32,61,61,32,99,109,109,97,112,95,45,62,115,105,122,101,40,41,0,0,0,0,0,0,114,43,0,0,0,0,0,0,46,47,109,109,97,112,46,104,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,117,110,107,110,111,119,110,32,111,112,101,110,32,109,111,100,101,58,32,0,0,0,0,0,40,102,100,32,61,32,58,58,111,112,101,110,40,102,105,108,101,110,97,109,101,44,32,102,108,97,103,32,124,32,79,95,66,73,78,65,82,89,41,41,32,62,61,32,48,0,0,0,111,112,101,110,32,102,97,105,108,101,100,58,32,0,0,0,58,58,102,115,116,97,116,40,102,100,44,32,38,115,116,41,32,62,61,32,48,0,0,0,102,97,105,108,101,100,32,116,111,32,103,101,116,32,102,105,108,101,32,115,105,122,101,58,32,0,0,0,0,0,0,0,58,58,114,101,97,100,40,102,100,44,32,116,101,120,116,44,32,108,101,110,103,116,104,41,32,62,61,32,48,0,0,0,114,101,97,100,40,41,32,102,97,105,108,101,100,58,32,0,0,0,0,0,40,37,6,0,126,0,0,0,127,0,0,0,111,117,116,112,117,116,45,102,111,114,109,97,116,45,116,121,112,101,0,0,0,0,0,0,119,97,107,97,116,105,0,0,110,111,110,101,0,0,0,0,100,117,109,112,0,0,0,0,101,109,0,0,0,0,0,0,37,109,92,116,37,72,92,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,79,83,92,110,0,0,0,110,111,100,101,45,102,111,114,109,97,116,0,0,0,0,0,98,111,115,45,102,111,114,109,97,116,0,0,0,0,0,0,101,111,115,45,102,111,114,109,97,116,0,0,0,0,0,0,117,110,107,45,102,111,114,109,97,116,0,0,0,0,0,0,101,111,110,45,102,111,114,109,97,116,0,0,0,0,0,0,45,0,0,0,0,0,0,0,119,114,105,116,101,114,46,99,112,112,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,33,116,109,112,46,101,109,112,116,121,40,41,0,0,0,0,93,32,0,0,0,0,0,0,117,110,107,111,119,110,32,102,111,114,109,97,116,32,116,121,112,101,32,91,0,0,0,0,93,0,0,0,0,0,0,0,69,79,83,10,0,0,0,0,85,9,0,0,0,0,0,0,66,79,83,0,0,0,0,0,69,79,83,0,0,0,0,0,66,9,0,0,0,0,0,0,117,110,107,110,111,119,110,32,109,101,116,97,32,99,104,97,114,58,32,0,0,0,0,0,91,105,115,101,83,67,119,99,110,98,108,76,104,93,32,105,115,32,114,101,113,117,105,114,101,100,32,97,102,116,101,114,32,37,112,0,0,0,0,0,108,114,32,105,115,32,114,101,113,117,105,114,101,100,32,97,102,116,101,114,32,37,112,104,0,0,0,0,0,0,0,0,110,111,32,112,97,116,104,32,105,110,102,111,114,109,97,116,105,111,110,32,105,115,32,97,118,97,105,108,97,98,108,101,0,0,0,0,0,0,0,0,91,105,99,80,93,32,105,115,32,114,101,113,117,105,114,101,100,32,97,102,116,101,114,32,37,112,112,0,0,0,0,0,110,111,32,102,101,97,116,117,114,101,32,105,110,102,111,114,109,97,116,105,111,110,32,97,118,97,105,108,97,98,108,101,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,102,105,110,100,32,39,91,39,0,103,105,118,101,110,32,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,99,97,110,110,111,116,32,102,105,110,100,32,39,93,39,0,78,53,77,101,67,97,98,54,87,114,105,116,101,114,69,0,40,99,6,0,24,37,6,0,0,0,0,0,104,37,6,0,128,0,0,0,129,0,0,0,78,53,77,101,67,97,98,49,56,115,99,111,112,101,100,95,102,105,120,101,100,95,97,114,114,97,121,73,80,99,76,105,54,52,69,69,69,0,0,0,40,99,6,0,64,37,6,0,37,45,49,54,102,0,0,0,0,0,0,0,160,37,6,0,130,0,0,0,131,0,0,0,78,53,77,101,67,97,98,49,51,115,99,111,112,101,100,95,115,116,114,105,110,103,69,0,80,99,6,0,136,37,6,0,120,5,0,0,0,0,0,0,0,0,0,0,216,37,6,0,132,0,0,0,133,0,0,0,78,53,77,101,67,97,98,49,50,83,116,114,105,110,103,66,117,102,102,101,114,69,0,0,40,99,6,0,192,37,6,0,58,32,0,0,0,0,0,0,112,97,114,97,109,46,99,112,112,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,105,102,115,0,0,0,0,0,93,32,0,0,0,0,0,0,110,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,58,32,0,0,0,0,0,112,111,115,32,33,61,32,115,116,100,58,58,115,116,114,105,110,103,58,58,110,112,111,115,0,0,0,0,0,0,0,0,102,111,114,109,97,116,32,101,114,114,111,114,58,32,0,0,117,110,107,110,111,119,110,0,117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96,0,0,0,96,0,0,0,0,0,0,0,96,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,0,0,96,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,0,0,0,0,0,109,101,99,97,98,0,0,0,77,101,67,97,98,58,32,89,101,116,32,65,110,111,116,104,101,114,32,80,97,114,116,45,111,102,45,83,112,101,101,99,104,32,97,110,100,32,77,111,114,112,104,111,108,111,103,105,99,97,108,32,65,110,97,108,121,122,101,114,10,10,67,111,112,121,114,105,103,104,116,40,67,41,32,50,48,48,49,45,50,48,49,50,32,84,97,107,117,32,75,117,100,111,32,10,67,111,112,121,114,105,103,104,116,40,67,41,32,50,48,48,52,45,50,48,48,56,32,78,105,112,112,111,110,32,84,101,108,101,103,114,97,112,104,32,97,110,100,32,84,101,108,101,112,104,111,110,101,32,67,111,114,112,111,114,97,116,105,111,110,10,0,0,0,0,0,0,10,85,115,97,103,101,58,32,0,0,0,0,0,0,0,0,32,91,111,112,116,105,111,110,115,93,32,102,105,108,101,115,10,0,0,0,0,0,0,0,32,111,102,32,0,0,0,0,48,46,57,57,54,0,0,0,32,45,0,0,0,0,0,0,44,32,45,45,0,0,0,0,0,0,0,0,8,40,6,0,134,0,0,0,135,0,0,0,78,53,77,101,67,97,98,57,84,111,107,101,110,105,122,101,114,73,49,50,109,101,99,97,98,95,110,111,100,101,95,116,49,50,109,101,99,97,98,95,112,97,116,104,95,116,69,69,0,0,0,0,0,0,0,0,40,99,6,0,208,39,6,0,66,79,83,47,69,79,83,0,116,111,107,101,110,105,122,101,114,46,99,112,112,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,110,101,119,95,110,111,100,101,45,62,102,101,97,116,117,114,101,0,0,0,0,0,0,0,93,32,0,0,0,0,0,0,100,105,99,100,105,114,0,0,117,110,107,46,100,105,99,0,114,0,0,0,0,0,0,0,117,110,107,100,105,99,95,46,111,112,101,110,40,99,114,101,97,116,101,95,102,105,108,101,110,97,109,101,32,40,112,114,101,102,105,120,44,32,85,78,75,95,68,73,67,95,70,73,76,69,41,46,99,95,115,116,114,40,41,41,0,0,0,0,112,114,111,112,101,114,116,121,95,46,111,112,101,110,40,112,97,114,97,109,41,0,0,0,115,121,115,46,100,105,99,0,115,121,115,100,105,99,45,62,111,112,101,110,32,40,99,114,101,97,116,101,95,102,105,108,101,110,97,109,101,40,112,114,101,102,105,120,44,32,83,89,83,95,68,73,67,95,70,73,76,69,41,46,99,95,115,116,114,40,41,41,0,0,0,0,115,121,115,100,105,99,45,62,116,121,112,101,40,41,32,61,61,32,48,0,0,0,0,0,110,111,116,32,97,32,115,121,115,116,101,109,32,100,105,99,116,105,111,110,97,114,121,58,32,0,0,0,0,0,0,0,117,115,101,114,100,105,99,0,100,45,62,111,112,101,110,40,100,105,99,102,105,108,101,91,105,93,41,0,0,0,0,0,100,45,62,116,121,112,101,40,41,32,61,61,32,49,0,0,110,111,116,32,97,32,117,115,101,114,32,100,105,99,116,105,111,110,97,114,121,58,32,0,115,121,115,100,105,99,45,62,105,115,67,111,109,112,97,116,105,98,108,101,40,42,100,41,0,0,0,0,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,32,100,105,99,116,105,111,110,97,114,121,58,32,0,0,0,0,0,0,0,110,46,118,97,108,117,101,32,33,61,32,45,49,0,0,0,99,97,110,110,111,116,32,102,105,110,100,32,85,78,75,32,99,97,116,101,103,111,114,121,58,32,0,0,0,0,0,0,98,111,115,45,102,101,97,116,117,114,101,0,0,0,0,0,117,110,107,45,102,101,97,116,117,114,101,0,0,0,0,0,42,98,111,115,95,102,101,97,116,117,114,101,95,32,33,61,32,39,92,48,39,0,0,0,98,111,115,45,102,101,97,116,117,114,101,32,105,115,32,117,110,100,101,102,105,110,101,100,32,105,110,32,100,105,99,114,99,0,0,0,0,0,0,0,109,97,120,45,103,114,111,117,112,105,110,103,45,115,105,122,101,0,0,0,0,0,0,0,0,0,0,0,160,42,6,0,136,0,0,0,137,0,0,0,78,53,77,101,67,97,98,49,48,115,99,111,112,101,100,95,112,116,114,73,106,69,69,0,40,99,6,0,136,42,6,0,42,0,0,0,0,0,0,0,0,0,0,0,240,42,6,0,138,0,0,0,139,0,0,0,78,53,77,101,67,97,98,56,70,114,101,101,76,105,115,116,73,50,51,109,101,99,97,98,95,100,105,99,116,105,111,110,97,114,121,95,105,110,102,111,95,116,69,69,0,0,0,0,40,99,6,0,192,42,6,0,100,105,99,100,105,114,0,0,99,104,97,114,46,98,105,110,0,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,99,104,97,114,95,112,114,111,112,101,114,116,121,46,99,112,112,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,99,109,109,97,112,95,45,62,111,112,101,110,40,102,105,108,101,110,97,109,101,44,32,34,114,34,41,0,0,0,0,0,93,32,0,0,0,0,0,0,102,115,105,122,101,32,61,61,32,99,109,109,97,112,95,45,62,115,105,122,101,40,41,0,105,110,118,97,108,105,100,32,102,105,108,101,32,115,105,122,101,58,32,0,0,0,0,0,100,105,99,116,105,111,110,97,114,121,46,99,112,112,0,0,40,0,0,0,0,0,0,0,41,32,91,0,0,0,0,0,100,109,109,97,112,95,45,62,111,112,101,110,40,102,105,108,101,44,32,109,111,100,101,41,0,0,0,0,0,0,0,0,93,32,0,0,0,0,0,0,110,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,58,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+394227);
/* memory initializer */ allocate([0,0,0,0,0,100,109,109,97,112,95,45,62,115,105,122,101,40,41,32,62,61,32,49,48,48,0,0,0,100,105,99,116,105,111,110,97,114,121,32,102,105,108,101,32,105,115,32,98,114,111,107,101,110,58,32,0,0,0,0,0,40,109,97,103,105,99,32,94,32,68,105,99,116,105,111,110,97,114,121,77,97,103,105,99,73,68,41,32,61,61,32,100,109,109,97,112,95,45,62,115,105,122,101,40,41,0,0,0,118,101,114,115,105,111,110,95,32,61,61,32,68,73,67,95,86,69,82,83,73,79,78,0,105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,58,32,0,0,112,116,114,32,61,61,32,100,109,109,97,112,95,45,62,101,110,100,40,41], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+404467);
/* memory initializer */ allocate([56,50,6,0,140,0,0,0,141,0,0,0,13,0,0,0,12,0,0,0,3,0,0,0,4,0,0,0,32,0,0,0,33,0,0,0,13,0,0,0,34,0,0,0,35,0,0,0,18,0,0,0,14,0,0,0,19,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,80,99,6,0,24,50,6,0,176,55,6,0,0,0,0,0,0,0,0,0,160,50,6,0,142,0,0,0,143,0,0,0,14,0,0,0,12,0,0,0,3,0,0,0,4,0,0,0,36,0,0,0,33,0,0,0,13,0,0,0,37,0,0,0,38,0,0,0,20,0,0,0,15,0,0,0,21,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,80,99,6,0,136,50,6,0,176,55,6,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,56,51,6,0,144,0,0,0,145,0,0,0,15,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,39,0,0,0,2,0,0,0,2,0,0,0,40,0,0,0,4,0,0,0,22,0,0,0,16,0,0,0,23,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,80,99,6,0,24,51,6,0,112,55,6,0,0,0,0,0,0,0,0,0,160,51,6,0,146,0,0,0,147,0,0,0,16,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,41,0,0,0,42,0,0,0,24,0,0,0,3,0,0,0,25,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,80,99,6,0,136,51,6,0,112,55,6,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,40,99,6,0,176,51,6,0,58,32,0,0,0,0,0,0,0,0,0,0,16,52,6,0,148,0,0,0,149,0,0,0,43,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,80,99,6,0,248,51,6,0,208,97,6,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,40,99,6,0,32,52,6,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,80,99,6,0,72,52,6,0,64,52,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,112,55,6,0,150,0,0,0,151,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,40,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,25,0,0,0,0,0,0,0,176,55,6,0,152,0,0,0,153,0,0,0,17,0,0,0,12,0,0,0,3,0,0,0,4,0,0,0,36,0,0,0,33,0,0,0,13,0,0,0,34,0,0,0,35,0,0,0,18,0,0,0,15,0,0,0,21,0,0,0,8,0,0,0,0,0,0,0,232,55,6,0,21,0,0,0,22,0,0,0,248,255,255,255,248,255,255,255,232,55,6,0,23,0,0,0,24,0,0,0,8,0,0,0,0,0,0,0,48,56,6,0,154,0,0,0,155,0,0,0,248,255,255,255,248,255,255,255,48,56,6,0,156,0,0,0,157,0,0,0,4,0,0,0,0,0,0,0,120,56,6,0,25,0,0,0,26,0,0,0,252,255,255,255,252,255,255,255,120,56,6,0,27,0,0,0,28,0,0,0,4,0,0,0,0,0,0,0,192,56,6,0,158,0,0,0,159,0,0,0,252,255,255,255,252,255,255,255,192,56,6,0,160,0,0,0,161,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,54,6,0,162,0,0,0,163,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,176,54,6,0,164,0,0,0,165,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,80,99,6,0,104,54,6,0,16,52,6,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,40,99,6,0,152,54,6,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,80,99,6,0,184,54,6,0,176,54,6,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,80,99,6,0,248,54,6,0,176,54,6,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,40,99,6,0,56,55,6,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,40,99,6,0,120,55,6,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,176,99,6,0,184,55,6,0,0,0,0,0,1,0,0,0,232,54,6,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,176,99,6,0,0,56,6,0,0,0,0,0,1,0,0,0,40,55,6,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,176,99,6,0,72,56,6,0,0,0,0,0,1,0,0,0,232,54,6,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,176,99,6,0,144,56,6,0,0,0,0,0,1,0,0,0,40,55,6,0,3,244,255,255,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,176,99,6,0,216,56,6,0,3,0,0,0,2,0,0,0,232,55,6,0,2,0,0,0,120,56,6,0,2,8,0,0,0,0,0,0,112,57,6,0,166,0,0,0,167,0,0,0,44,0,0,0,3,0,0,0,17,0,0,0,18,0,0,0,4,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,80,99,6,0,80,57,6,0,96,52,6,0,0,0,0,0,0,0,0,0,184,71,6,0,168,0,0,0,169,0,0,0,170,0,0,0,2,0,0,0,6,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,71,6,0,171,0,0,0,172,0,0,0,170,0,0,0,3,0,0,0,7,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,76,6,0,173,0,0,0,174,0,0,0,170,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,40,77,6,0,175,0,0,0,176,0,0,0,170,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,77,6,0,177,0,0,0,178,0,0,0,170,0,0,0,5,0,0,0,6,0,0,0,23,0,0,0,7,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,128,78,6,0,179,0,0,0,180,0,0,0,170,0,0,0,9,0,0,0,10,0,0,0,25,0,0,0,11,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,168,73,6,0,181,0,0,0,182,0,0,0,170,0,0,0,45,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,168,73,6,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,72,74,6,0,183,0,0,0,184,0,0,0,170,0,0,0,53,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,72,74,6,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,216,74,6,0,185,0,0,0,186,0,0,0,170,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,75,6,0,187,0,0,0,188,0,0,0,170,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,72,6,0,189,0,0,0,190,0,0,0,170,0,0,0,61,0,0,0,62,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,63,0,0,0,22,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,72,6,0,191,0,0,0,192,0,0,0,170,0,0,0,64,0,0,0,65,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,66,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,72,6,0,193,0,0,0,194,0,0,0,170,0,0,0,67,0,0,0,68,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,69,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,72,6,0,195,0,0,0,196,0,0,0,170,0,0,0,70,0,0,0,71,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,72,0,0,0,40,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,79,6,0,197,0,0,0,198,0,0,0,170,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,160,79,6,0,199,0,0,0,200,0,0,0,170,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,48,80,6,0,201,0,0,0,202,0,0,0,170,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,192,80,6,0,203,0,0,0,204,0,0,0,170,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,75,6,0,205,0,0,0,206,0,0,0,170,0,0,0,21,0,0,0,13,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,75,6,0,207,0,0,0,208,0,0,0,170,0,0,0,22,0,0,0,14,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,144,71,6,0,209,0,0,0,210,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,68,6,0,211,0,0,0,212,0,0,0,170,0,0,0,26,0,0,0,23,0,0,0,27,0,0,0,24,0,0,0,28,0,0,0,6,0,0,0,25,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,69,6,0,213,0,0,0,214,0,0,0,170,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,73,0,0,0,74,0,0,0,6,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,71,6,0,215,0,0,0,216,0,0,0,170,0,0,0,76,0,0,0,77,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,104,71,6,0,217,0,0,0,218,0,0,0,170,0,0,0,78,0,0,0,79,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,160,67,6,0,219,0,0,0,220,0,0,0,170,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,80,99,6,0,136,67,6,0,208,51,6,0,0,0,0,0,0,0,0,0,48,68,6,0,219,0,0,0,221,0,0,0,170,0,0,0,26,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,29,0,0,0,27,0,0,0,30,0,0,0,28,0,0,0,31,0,0,0,10,0,0,0,29,0,0,0,7,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,40,99,6,0,16,68,6,0,176,99,6,0,248,67,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,40,68,6,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,176,99,6,0,80,68,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,40,68,6,0,2,0,0,0,0,0,0,0,0,69,6,0,219,0,0,0,222,0,0,0,170,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,80,0,0,0,81,0,0,0,9,0,0,0,82,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,40,99,6,0,224,68,6,0,176,99,6,0,184,68,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,248,68,6,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,176,99,6,0,32,69,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,248,68,6,0,2,0,0,0,0,0,0,0,192,69,6,0,219,0,0,0,223,0,0,0,170,0,0,0,5,0,0,0,6,0,0,0,10,0,0,0,83,0,0,0,84,0,0,0,11,0,0,0,85,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,176,99,6,0,152,69,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,248,68,6,0,2,0,0,0,0,0,0,0,56,70,6,0,219,0,0,0,224,0,0,0,170,0,0,0,7,0,0,0,8,0,0,0,12,0,0,0,86,0,0,0,87,0,0,0,13,0,0,0,88,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,176,99,6,0,16,70,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,248,68,6,0,2,0,0,0,0,0,0,0,176,70,6,0,219,0,0,0,225,0,0,0,170,0,0,0,7,0,0,0,8,0,0,0,12,0,0,0,86,0,0,0,87,0,0,0,13,0,0,0,88,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,80,99,6,0,136,70,6,0,56,70,6,0,0,0,0,0,0,0,0,0,24,71,6,0,219,0,0,0,226,0,0,0,170,0,0,0,7,0,0,0,8,0,0,0,12,0,0,0,86,0,0,0,87,0,0,0,13,0,0,0,88,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,80,99,6,0,240,70,6,0,56,70,6,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,80,99,6,0,40,71,6,0,160,67,6,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,80,99,6,0,80,71,6,0,160,67,6,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,80,99,6,0,120,71,6,0,160,67,6,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,80,99,6,0,160,71,6,0,160,67,6,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,80,99,6,0,200,71,6,0,160,67,6,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,40,99,6,0,16,72,6,0,176,99,6,0,240,71,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,40,72,6,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,176,99,6,0,80,72,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,40,72,6,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,176,99,6,0,144,72,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,40,72,6,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,176,99,6,0,208,72,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,40,72,6,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,40,99,6,0,88,73,6,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,40,99,6,0,120,73,6,0,176,99,6,0,16,73,6,0,0,0,0,0,3,0,0,0,160,67,6,0,2,0,0,0,112,73,6,0,2,0,0,0,160,73,6,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,40,99,6,0,24,74,6,0,176,99,6,0,208,73,6,0,0,0,0,0,3,0,0,0,160,67,6,0,2,0,0,0,112,73,6,0,2,0,0,0,64,74,6,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,40,99,6,0,184,74,6,0,176,99,6,0,112,74,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,208,74,6,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,176,99,6,0,248,74,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,208,74,6,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,40,99,6,0,120,75,6,0,176,99,6,0,96,75,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,144,75,6,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,176,99,6,0,184,75,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,144,75,6,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,40,99,6,0,80,76,6,0,176,99,6,0,56,76,6,0,0,0,0,0,1,0,0,0,112,76,6,0,0,0,0,0,176,99,6,0,240,75,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,120,76,6,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,176,99,6,0,248,76,6,0,0,0,0,0,1,0,0,0,112,76,6,0,0,0,0,0,176,99,6,0,176,76,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,16,77,6,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,40,99,6,0,168,77,6,0,176,99,6,0,144,77,6,0,0,0,0,0,1,0,0,0,200,77,6,0,0,0,0,0,176,99,6,0,72,77,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,208,77,6,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,176,99,6,0,80,78,6,0,0,0,0,0,1,0,0,0,200,77,6,0,0,0,0,0,176,99,6,0,8,78,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,104,78,6,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,40,99,6,0,232,78,6,0,176,99,6,0,160,78,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,8,79,6,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,40,99,6,0,120,79,6,0,176,99,6,0,48,79,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,152,79,6,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,40,99,6,0,8,80,6,0,176,99,6,0,192,79,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,40,80,6,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,40,99,6,0,152,80,6,0,176,99,6,0,80,80,6,0,0,0,0,0,2,0,0,0,160,67,6,0,2,0,0,0,184,80,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+405972);
/* memory initializer */ allocate([0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,192,94,6,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,88,96,6,0,227,0,0,0,228,0,0,0,89,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,80,99,6,0,72,96,6,0,224,96,6,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,40,99,6,0,208,96,6,0,0,0,0,0,40,97,6,0,229,0,0,0,230,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,208,97,6,0,231,0,0,0,232,0,0,0,43,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,80,99,6,0,24,97,6,0,224,96,6,0,0,0,0,0,0,0,0,0,104,97,6,0,229,0,0,0,233,0,0,0,90,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,80,99,6,0,80,97,6,0,40,97,6,0,0,0,0,0,0,0,0,0,168,97,6,0,229,0,0,0,234,0,0,0,90,0,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,80,99,6,0,144,97,6,0,40,97,6,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,80,99,6,0,184,97,6,0,224,96,6,0,0,0,0,0,0,0,0,0,48,98,6,0,235,0,0,0,236,0,0,0,91,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,40,99,6,0,8,98,6,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,80,99,6,0,32,98,6,0,224,96,6,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,80,99,6,0,64,98,6,0,24,98,6,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,80,99,6,0,120,98,6,0,104,98,6,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,80,99,6,0,216,98,6,0,104,98,6,0,0,0,0,0,80,99,6,0,176,98,6,0,0,99,6,0,0,0,0,0,0,0,0,0,160,98,6,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,30,0,0,0,15,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,152,99,6,0,237,0,0,0,241,0,0,0,239,0,0,0,240,0,0,0,30,0,0,0,16,0,0,0,2,0,0,0,9,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,80,99,6,0,112,99,6,0,160,98,6,0,0,0,0,0,0,0,0,0,248,99,6,0,237,0,0,0,242,0,0,0,239,0,0,0,240,0,0,0,30,0,0,0,17,0,0,0,3,0,0,0,10,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,80,99,6,0,208,99,6,0,160,98,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+416212);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _pthread_mutex_lock() {}


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


   
  Module["_strncpy"] = _strncpy;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _log=Math_log;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  function _sched_yield() {
      return 0;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        ptr = EXCEPTIONS.deAdjust(ptr);
        var info = EXCEPTIONS.infos[ptr];
        if (!info) {
          abort('cannot find exception info for ' + ptr + ' in ' + JSON.stringify(EXCEPTIONS.infos));
        }
        if (info.destructor) {
          Runtime.dynCall('vi', info.destructor, [ptr]);
        }
        delete EXCEPTIONS.infos[ptr];
        ___cxa_free_exception(ptr);
        EXCEPTIONS.last = 0;
      }
    }function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }function _ftello() {
  return _ftell.apply(null, arguments)
  }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          var ret = new Date().getTimezoneOffset();
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          var minutes = ret % 60;
          ret = (100*(ret - minutes)/60) + minutes;
          // add sign and adjust length to ?hhmm
          if (ret >= 0) {
            ret = '' + ret;
            while (ret.length < 4) ret = '0' + ret;
            return '+' + ret;
          } else {
            ret = '' + ret;
            ret = ret.substr(1);
            while (ret.length < 4) ret = '0' + ret;
            return '-' + ret;
          }
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          try {
            // Date strings typically end in (PDT) or such.
            return new Date().toString().split('(').slice(-1)[0].split(')')[0];
          } catch(e) {
            return ''; // may not work in all browsers
          }
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }



  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }


  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          ctx = GL.getContext(contextHandle).GLctx;
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      return ptr;
    }


  function _fseeko() {
  return _fseek.apply(null, arguments)
  }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
___buildEnvironment(ENV);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_di=env.invoke_di;
  var invoke_vi=env.invoke_vi;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _log=env._log;
  var _fread=env._fread;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _fmodl=env._fmodl;
  var _fstat=env._fstat;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _fsync=env._fsync;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _sched_yield=env._sched_yield;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _send=env._send;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var _pthread_once=env._pthread_once;
  var _stat=env._stat;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var _vfprintf=env._vfprintf;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pwrite=env._pwrite;
  var _open=env._open;
  var _uselocale=env._uselocale;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _strftime=env._strftime;
  var _fseek=env._fseek;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _copysign=env._copysign;
  var _abort=env._abort;
  var _fopen=env._fopen;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _ungetc=env._ungetc;
  var _calloc=env._calloc;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var __reallyNegative=env.__reallyNegative;
  var _catgets=env._catgets;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var __arraySum=env.__arraySum;
  var _fseeko=env._fseeko;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _getc=env._getc;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _copysignl=env._copysignl;
  var _strerror=env._strerror;
  var _ftello=env._ftello;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function __ZN5MeCab7ViterbiC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8 + 8|0));
 $0 = (($this) + 4|0);
 __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEC1EPS4_($0,0);
 $1 = (($this) + 12|0);
 __ZN5MeCab10scoped_ptrINS_9ConnectorEEC1EPS1_($1,0);
 $2 = (($this) + 20|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 24|0);
 __ZN5MeCab7whatlogC1Ev($3);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEC1EPS4_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEC2EPS4_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9ConnectorEEC1EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9ConnectorEEC2EPS1_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab7whatlogC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab7whatlogC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9ConnectorEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9ConnectorEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab7ViterbiD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab7ViterbiD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab7ViterbiD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8 + 8|0));
 $0 = (($this) + 24|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 12|0);
 __ZN5MeCab10scoped_ptrINS_9ConnectorEED1Ev($1);
 $2 = (($this) + 4|0);
 __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZN5MeCab7whatlogD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab7whatlogD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab7Viterbi4openERKNS_5ParamE($this,$param) {
 $this = $this|0;
 $param = $param|0;
 var $$ = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (($this) + 4|0);
 $5 = (__Znwj(668)|0);
 __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tEC1Ev($5);
 __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEE5resetEPS4_($4,$5);
 $6 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($4)|0);
 $7 = (__ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tE4openERKNS_5ParamE($6,$param)|0);
 if (!($7)) {
  $8 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($0,$8);
  $9 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($8,24)|0);
  $10 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($9,40)|0);
  $11 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($10,50)|0);
  $12 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($11,48)|0);
  $13 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($12,56)|0);
  $14 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($13,80)|0);
  $15 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($4)|0);
  $16 = (__ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tE4whatEv($15)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($14,$16)|0);
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $17 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($4)|0);
 $18 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE15dictionary_infoEv($17)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($1,$20);
  $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,24)|0);
  $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21,40)|0);
  $23 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($22,51)|0);
  $24 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($23,48)|0);
  $25 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($24,88)|0);
  $26 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25,80)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($26,120)|0);
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $27 = (($this) + 12|0);
 $28 = (__Znwj(168)|0);
 __ZN5MeCab9ConnectorC1Ev($28);
 __ZN5MeCab10scoped_ptrINS_9ConnectorEE5resetEPS1_($27,$28);
 $29 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEEptEv($27)|0);
 $30 = (__ZN5MeCab9Connector4openERKNS_5ParamE($29,$param)|0);
 if (!($30)) {
  $31 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$31);
  $32 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($31,24)|0);
  $33 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($32,40)|0);
  $34 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($33,54)|0);
  $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,48)|0);
  $36 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($35,144)|0);
  $37 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,80)|0);
  $38 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEEptEv($27)|0);
  $39 = (__ZN5MeCab9Connector4whatEv($38)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($37,$39)|0);
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $40 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($4)|0);
 $41 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE15dictionary_infoEv($40)|0);
 $42 = (($41) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEEptEv($27)|0);
 $45 = (__ZNK5MeCab9Connector9left_sizeEv($44)|0);
 $46 = ($43|0)==($45|0);
 if ($46) {
  $47 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($4)|0);
  $48 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE15dictionary_infoEv($47)|0);
  $49 = (($48) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEEptEv($27)|0);
  $52 = (__ZNK5MeCab9Connector10right_sizeEv($51)|0);
  $53 = ($50|0)==($52|0);
  if ($53) {
   $61 = (__ZNK5MeCab5Param3getIiEET_PKc($param,360)|0);
   $62 = (($this) + 20|0);
   $63 = ($61|0)==(0);
   $$ = $63 ? 800 : $61;
   HEAP32[$62>>2] = $$;
   $$02 = 1;
   STACKTOP = sp;return ($$02|0);
  }
 }
 $54 = (($this) + 24|0);
 __ZN5MeCab4wlogC1EPNS_7whatlogE($3,$54);
 $55 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($54,24)|0);
 $56 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($55,40)|0);
 $57 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($56,59)|0);
 $58 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($57,48)|0);
 $59 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($58,168)|0);
 $60 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($59,80)|0);
 (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($60,304)|0);
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEE5resetEPS4_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab4wlogC1EPNS_7whatlogE($this,$what) {
 $this = $this|0;
 $what = $what|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab4wlogC2EPNS_7whatlogE($this,$what);
 STACKTOP = sp;return;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $$sum = 0, $$sum$i$i = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 16|0;
 $__s = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$__os);
 $2 = HEAP8[$__s>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
  STACKTOP = sp;return ($__os|0);
 }
 $4 = (_strlen(($__str|0))|0);
 $5 = HEAP32[$__os>>2]|0;
 $6 = (($5) + -12|0);
 $7 = HEAP32[$6>>2]|0;
 $$sum$i$i = (($7) + 24)|0;
 $8 = (($__os) + ($$sum$i$i)|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$0>>2] = $9;
 $10 = HEAP32[$__os>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum = (($12) + 4)|0;
 $13 = (($__os) + ($$sum)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 176;
 $16 = ($15|0)==(32);
 if ($16) {
  $17 = (($__str) + ($4)|0);
  $34 = $17;
 } else {
  $34 = $__str;
 }
 $18 = HEAP32[$__os>>2]|0;
 $19 = (($18) + -12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($__os) + ($20)|0);
 $$sum2 = (($20) + 76)|0;
 $22 = (($__os) + ($$sum2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(-1);
 if ($24) {
  __ZNKSt3__18ios_base6getlocEv($$byval_copy,$21);
  $25 = (__ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy,409576)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_iii[$28 & 31]($25,32)|0);
  __ZNSt3__16localeD2Ev($$byval_copy);
  $30 = $29 << 24 >> 24;
  HEAP32[$22>>2] = $30;
 }
 $31 = HEAP32[$22>>2]|0;
 $32 = $31&255;
 $33 = (($__str) + ($4)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__str,$34,$33,$21,$32);
 $35 = HEAP32[$1>>2]|0;
 $36 = ($35|0)==(0|0);
 if (!($36)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
  STACKTOP = sp;return ($__os|0);
 }
 $37 = HEAP32[$__os>>2]|0;
 $38 = (($37) + -12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($__os) + ($39)|0);
 $$sum3 = (($39) + 16)|0;
 $41 = (($__os) + ($$sum3)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 | 5;
 __ZNSt3__18ios_base5clearEj($40,$43);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
 STACKTOP = sp;return ($__os|0);
}
function __ZN5MeCab10scoped_ptrINS_9ConnectorEE5resetEPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab9ConnectorC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9ConnectorC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_9ConnectorEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab9Connector4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = (__ZN5MeCab7whatlog3strEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab9Connector9left_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 STACKTOP = sp;return ($2|0);
}
function __ZNK5MeCab9Connector10right_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 18|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 STACKTOP = sp;return ($2|0);
}
function __ZNK5MeCab5Param3getIiEET_PKc($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $it = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $it = sp + 36|0;
 $0 = sp + 24|0;
 $r = sp + 16|0;
 $1 = sp;
 $2 = (_strlen(($key|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$key,$2);
 $3 = (($this) + 4|0);
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($it,$3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $4 = (($this) + 8|0);
 $5 = HEAP32[$it>>2]|0;
 $6 = ($5|0)==($4|0);
 if ($6) {
  $7 = (__Znwj(4)|0);
  HEAP32[$7>>2] = 0;
  __ZN5MeCab10scoped_ptrIiEC1EPi($r,$7);
  $8 = (__ZNK5MeCab10scoped_ptrIiEdeEv($r)|0);
  $9 = HEAP32[$8>>2]|0;
  __ZN5MeCab10scoped_ptrIiED1Ev($r);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 } else {
  $10 = (($5) + 28|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($1,$10);
  $11 = (__ZN12_GLOBAL__N_112lexical_castIiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($1)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNK5MeCab7Viterbi7analyzeEPNS_7LatticeE($this,$lattice) {
 $this = $this|0;
 $lattice = $lattice|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($lattice|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$lattice>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($lattice)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (__ZN5MeCab7Viterbi11initPartialEPNS_7LatticeE($lattice)|0);
 $6 = HEAP32[$lattice>>2]|0;
 $7 = (($6) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 31]($lattice,2)|0);
 do {
  if ($9) {
   label = 5;
  } else {
   $10 = HEAP32[$lattice>>2]|0;
   $11 = (($10) + 72|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_iii[$12 & 31]($lattice,8)|0);
   if ($13) {
    label = 5;
   } else {
    $20 = HEAP32[$lattice>>2]|0;
    $21 = (($20) + 120|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($lattice)|0);
    if ($23) {
     $24 = (__ZNK5MeCab7Viterbi7viterbiILb0ELb1EEEbPNS_7LatticeE($this,$lattice)|0);
     if ($24) {
      break;
     } else {
      $$0 = 0;
     }
     STACKTOP = sp;return ($$0|0);
    } else {
     $25 = (__ZNK5MeCab7Viterbi7viterbiILb0ELb0EEEbPNS_7LatticeE($this,$lattice)|0);
     if ($25) {
      break;
     } else {
      $$0 = 0;
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $14 = HEAP32[$lattice>>2]|0;
   $15 = (($14) + 120|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (FUNCTION_TABLE_ii[$16 & 127]($lattice)|0);
   if ($17) {
    $18 = (__ZNK5MeCab7Viterbi7viterbiILb1ELb1EEEbPNS_7LatticeE($this,$lattice)|0);
    if ($18) {
     break;
    } else {
     $$0 = 0;
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    $19 = (__ZNK5MeCab7Viterbi7viterbiILb1ELb0EEEbPNS_7LatticeE($this,$lattice)|0);
    if ($19) {
     break;
    } else {
     $$0 = 0;
    }
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 (__ZN5MeCab7Viterbi15forwardbackwardEPNS_7LatticeE($lattice)|0);
 (__ZN5MeCab7Viterbi16buildBestLatticeEPNS_7LatticeE($lattice)|0);
 (__ZN5MeCab7Viterbi15buildAllLatticeEPNS_7LatticeE($lattice)|0);
 (__ZN5MeCab7Viterbi9initNBestEPNS_7LatticeE($lattice)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab7Viterbi11initPartialEPNS_7LatticeE($lattice) {
 $lattice = $lattice|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $column = 0, $i$020 = 0, $i1$014 = 0, $lines = 0, $n$09 = 0, $os = 0, $pos$115 = 0, $tokens = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy = sp + 80|0;
 $lines = sp + 68|0;
 $0 = sp + 64|0;
 $column = sp + 56|0;
 $buf = sp + 48|0;
 $os = sp + 28|0;
 $tokens = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = HEAP32[$lattice>>2]|0;
 $4 = (($3) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 31]($lattice,4)|0);
 if (!($6)) {
  $7 = HEAP32[$lattice>>2]|0;
  $8 = (($7) + 120|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 127]($lattice)|0);
  if (!($10)) {
   STACKTOP = sp;return 1;
  }
  $11 = HEAP32[$lattice>>2]|0;
  $12 = (($11) + 132|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viii[$13 & 7]($lattice,0,1);
  $14 = HEAP32[$lattice>>2]|0;
  $15 = (($14) + 132|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$lattice>>2]|0;
  $18 = (($17) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 127]($lattice)|0);
  FUNCTION_TABLE_viii[$16 & 7]($lattice,$20,1);
  STACKTOP = sp;return 1;
 }
 $21 = HEAP32[$lattice>>2]|0;
 $22 = (($21) + 88|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 127]($lattice)|0);
 $25 = HEAP32[$lattice>>2]|0;
 $26 = (($25) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_ii[$27 & 127]($lattice)|0);
 $29 = (($28) + 1)|0;
 $30 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE14partial_bufferEj($24,$29)|0);
 $31 = HEAP32[$lattice>>2]|0;
 $32 = (($31) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 127]($lattice)|0);
 $35 = HEAP32[$lattice>>2]|0;
 $36 = (($35) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (FUNCTION_TABLE_ii[$37 & 127]($lattice)|0);
 $39 = (($38) + 1)|0;
 (_strncpy(($30|0),($34|0),($39|0))|0);
 HEAP32[$lines>>2] = 0;
 $40 = (($lines) + 4|0);
 HEAP32[$40>>2] = 0;
 $41 = (($lines) + 8|0);
 HEAP32[$41>>2] = 0;
 HEAP32[$0>>2] = $lines;
 $42 = HEAP32[$lattice>>2]|0;
 $43 = (($42) + 44|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (FUNCTION_TABLE_ii[$44 & 127]($lattice)|0);
 $46 = (($45) + 1)|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $47 = (__ZN5MeCab8tokenizeINSt3__120back_insert_iteratorINS1_6vectorIPcNS1_9allocatorIS4_EEEEEEEEjS4_PKcT_j($30,392,$$byval_copy,$46)|0);
 $48 = HEAP32[$lattice>>2]|0;
 $49 = (($48) + 44|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (FUNCTION_TABLE_ii[$50 & 127]($lattice)|0);
 $52 = (($51) + 1)|0;
 $53 = (__Znaj($52)|0);
 __ZN5MeCab12scoped_arrayIcEC1EPc($buf,$53);
 $54 = (__ZNK5MeCab12scoped_arrayIcE3getEv($buf)|0);
 $55 = HEAP32[$lattice>>2]|0;
 $56 = (($55) + 44|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_ii[$57 & 127]($lattice)|0);
 $59 = (($58) + 1)|0;
 __ZN5MeCab12StringBufferC1EPcj($os,$54,$59);
 HEAP32[$tokens>>2] = 0;
 $60 = (($tokens) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = (($tokens) + 8|0);
 HEAP32[$61>>2] = 0;
 __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE7reserveEj($tokens,$47);
 $62 = ($47|0)==(0);
 L8: do {
  if (!($62)) {
   $63 = (($2) + 4|0);
   $64 = (($column) + 4|0);
   $65 = (($1) + 4|0);
   $i$020 = 0;
   while(1) {
    $66 = HEAP32[$lines>>2]|0;
    $67 = (($66) + ($i$020<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (__ZN5MeCab8tokenizeIPPcEEjS1_PKcT_j($68,376,$column,2)|0);
    $70 = HEAP32[$column>>2]|0;
    do {
     if ((($69|0) == 1)) {
      $71 = (_strcmp($70,384)|0);
      $72 = ($71|0)==(0);
      if ($72) {
       break L8;
      }
      $73 = HEAP32[$column>>2]|0;
      $91 = $73;
      label = 14;
     } else if ((($69|0) == 2)) {
      HEAP32[$1>>2] = $70;
      $74 = HEAP32[$64>>2]|0;
      HEAP32[$65>>2] = $74;
      $75 = HEAP32[$60>>2]|0;
      $76 = HEAP32[$61>>2]|0;
      $77 = ($75>>>0)<($76>>>0);
      if (!($77)) {
       __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($tokens,$1);
       break;
      }
      $78 = ($75|0)==(0|0);
      if (!($78)) {
       $79 = $1;
       $80 = $79;
       $81 = HEAP32[$80>>2]|0;
       $82 = (($79) + 4)|0;
       $83 = $82;
       $84 = HEAP32[$83>>2]|0;
       $85 = $75;
       $86 = $85;
       HEAP32[$86>>2] = $81;
       $87 = (($85) + 4)|0;
       $88 = $87;
       HEAP32[$88>>2] = $84;
      }
      $89 = HEAP32[$60>>2]|0;
      $90 = (($89) + 8|0);
      HEAP32[$60>>2] = $90;
     } else {
      $91 = $70;
      label = 14;
     }
    } while(0);
    do {
     if ((label|0) == 14) {
      label = 0;
      HEAP32[$2>>2] = $91;
      HEAP32[$63>>2] = 0;
      $92 = HEAP32[$60>>2]|0;
      $93 = HEAP32[$61>>2]|0;
      $94 = ($92>>>0)<($93>>>0);
      if (!($94)) {
       __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($tokens,$2);
       break;
      }
      $95 = ($92|0)==(0|0);
      if (!($95)) {
       $96 = $2;
       $97 = $96;
       $98 = HEAP32[$97>>2]|0;
       $99 = (($96) + 4)|0;
       $100 = $99;
       $101 = HEAP32[$100>>2]|0;
       $102 = $92;
       $103 = $102;
       HEAP32[$103>>2] = $98;
       $104 = (($102) + 4)|0;
       $105 = $104;
       HEAP32[$105>>2] = $101;
      }
      $106 = HEAP32[$60>>2]|0;
      $107 = (($106) + 8|0);
      HEAP32[$60>>2] = $107;
     }
    } while(0);
    $108 = HEAP32[$column>>2]|0;
    (__ZN5MeCab12StringBufferlsEPKc($os,$108)|0);
    $109 = (($i$020) + 1)|0;
    $110 = ($109>>>0)<($47>>>0);
    if ($110) {
     $i$020 = $109;
    } else {
     break;
    }
   }
  }
 } while(0);
 (__ZN5MeCab12StringBufferlsEc($os,0)|0);
 $111 = HEAP32[$lattice>>2]|0;
 $112 = (($111) + 36|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (__ZNK5MeCab12StringBuffer3strEv($os)|0);
 FUNCTION_TABLE_vii[$113 & 63]($lattice,$114);
 $115 = HEAP32[$60>>2]|0;
 $116 = HEAP32[$tokens>>2]|0;
 $117 = ($115|0)==($116|0);
 if (!($117)) {
  $119 = $116;$i1$014 = 0;$pos$115 = 0;
  while(1) {
   $118 = (($119) + ($i1$014<<3)|0);
   $120 = HEAP32[$118>>2]|0;
   $121 = ((($119) + ($i1$014<<3)|0) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (_strlen(($120|0))|0);
   $124 = HEAP32[$lattice>>2]|0;
   $125 = (($124) + 132|0);
   $126 = HEAP32[$125>>2]|0;
   FUNCTION_TABLE_viii[$126 & 7]($lattice,$pos$115,1);
   $127 = HEAP32[$lattice>>2]|0;
   $128 = (($127) + 132|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($123) + ($pos$115))|0;
   FUNCTION_TABLE_viii[$129 & 7]($lattice,$130,1);
   $131 = ($122|0)==(0|0);
   if (!($131)) {
    $132 = HEAP32[$lattice>>2]|0;
    $133 = (($132) + 136|0);
    $134 = HEAP32[$133>>2]|0;
    FUNCTION_TABLE_viiii[$134 & 15]($lattice,$pos$115,$130,$122);
    $135 = ($123>>>0)>(1);
    if ($135) {
     $n$09 = 1;
     while(1) {
      $136 = HEAP32[$lattice>>2]|0;
      $137 = (($136) + 132|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($n$09) + ($pos$115))|0;
      FUNCTION_TABLE_viii[$138 & 7]($lattice,$139,2);
      $140 = (($n$09) + 1)|0;
      $141 = ($140>>>0)<($123>>>0);
      if ($141) {
       $n$09 = $140;
      } else {
       break;
      }
     }
    }
   }
   $142 = (($i1$014) + 1)|0;
   $143 = HEAP32[$60>>2]|0;
   $144 = HEAP32[$tokens>>2]|0;
   $145 = $143;
   $146 = $144;
   $147 = (($145) - ($146))|0;
   $148 = $147 >> 3;
   $149 = ($142>>>0)<($148>>>0);
   if ($149) {
    $119 = $144;$i1$014 = $142;$pos$115 = $130;
   } else {
    break;
   }
  }
 }
 __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEED1Ev($tokens);
 __ZN5MeCab12StringBufferD2Ev($os);
 __ZN5MeCab12scoped_arrayIcED1Ev($buf);
 __ZNSt3__16vectorIPcNS_9allocatorIS1_EEED1Ev($lines);
 STACKTOP = sp;return 1;
}
function __ZNK5MeCab7Viterbi7viterbiILb1ELb1EEEbPNS_7LatticeE($this,$lattice) {
 $this = $this|0;
 $lattice = $lattice|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $pos$03 = 0, $pos1$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = HEAP32[$lattice>>2]|0;
 $9 = (($8) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($lattice)|0);
 $12 = HEAP32[$lattice>>2]|0;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($lattice)|0);
 $16 = HEAP32[$lattice>>2]|0;
 $17 = (($16) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($lattice)|0);
 $20 = (($19) + ($15)|0);
 $21 = (($this) + 4|0);
 $22 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $23 = HEAP32[$lattice>>2]|0;
 $24 = (($23) + 88|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 127]($lattice)|0);
 $27 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getBOSNodeEPNS_9AllocatorIS1_S2_EE($22,$26)|0);
 $28 = HEAP32[$lattice>>2]|0;
 $29 = (($28) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_ii[$30 & 127]($lattice)|0);
 $32 = (($27) + 24|0);
 HEAP32[$32>>2] = $31;
 HEAP32[$3>>2] = $27;
 $33 = ($15|0)==(0);
 L1: do {
  if (!($33)) {
   $34 = (($this) + 12|0);
   $pos$03 = 0;
   while(1) {
    $35 = (($3) + ($pos$03<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
     $39 = (($19) + ($pos$03)|0);
     $40 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE6lookupILb1EEEPS1_PKcS7_PNS_9AllocatorIS1_S2_EEPNS_7LatticeE($38,$39,$20,$11,$lattice)|0);
     $41 = (($7) + ($pos$03<<2)|0);
     HEAP32[$41>>2] = $40;
     $42 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($34)|0);
     $43 = (__ZN5MeCab12_GLOBAL__N_17connectILb1EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos$03,$40,$3,$42,$11)|0);
     if (!($43)) {
      break;
     }
    }
    $47 = (($pos$03) + 1)|0;
    $48 = ($47>>>0)<($15>>>0);
    if ($48) {
     $pos$03 = $47;
    } else {
     break L1;
    }
   }
   $44 = HEAP32[$lattice>>2]|0;
   $45 = (($44) + 148|0);
   $46 = HEAP32[$45>>2]|0;
   FUNCTION_TABLE_vii[$46 & 63]($lattice,568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $49 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $50 = HEAP32[$lattice>>2]|0;
 $51 = (($50) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 127]($lattice)|0);
 $54 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getEOSNodeEPNS_9AllocatorIS1_S2_EE($49,$53)|0);
 $55 = HEAP32[$lattice>>2]|0;
 $56 = (($55) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_ii[$57 & 127]($lattice)|0);
 $59 = HEAP32[$lattice>>2]|0;
 $60 = (($59) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (FUNCTION_TABLE_ii[$61 & 127]($lattice)|0);
 $63 = (($58) + ($62)|0);
 $64 = (($54) + 24|0);
 HEAP32[$64>>2] = $63;
 $65 = HEAP32[$lattice>>2]|0;
 $66 = (($65) + 44|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (FUNCTION_TABLE_ii[$67 & 127]($lattice)|0);
 $69 = (($7) + ($68<<2)|0);
 HEAP32[$69>>2] = $54;
 $70 = ($15|0)>(-1);
 L11: do {
  if ($70) {
   $pos1$02 = $15;
   while(1) {
    $73 = (($3) + ($pos1$02<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     break;
    }
    $71 = (($pos1$02) + -1)|0;
    $72 = ($pos1$02|0)>(0);
    if ($72) {
     $pos1$02 = $71;
    } else {
     break L11;
    }
   }
   $76 = (($this) + 12|0);
   $77 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($76)|0);
   $78 = (__ZN5MeCab12_GLOBAL__N_17connectILb1EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos1$02,$54,$3,$77,$11)|0);
   if (!($78)) {
    $79 = HEAP32[$lattice>>2]|0;
    $80 = (($79) + 148|0);
    $81 = HEAP32[$80>>2]|0;
    FUNCTION_TABLE_vii[$81 & 63]($lattice,568);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$3>>2] = $27;
 $82 = HEAP32[$lattice>>2]|0;
 $83 = (($82) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (FUNCTION_TABLE_ii[$84 & 127]($lattice)|0);
 $86 = (($7) + ($85<<2)|0);
 HEAP32[$86>>2] = $54;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab7Viterbi7viterbiILb1ELb0EEEbPNS_7LatticeE($this,$lattice) {
 $this = $this|0;
 $lattice = $lattice|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $pos$03 = 0, $pos1$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = HEAP32[$lattice>>2]|0;
 $9 = (($8) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($lattice)|0);
 $12 = HEAP32[$lattice>>2]|0;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($lattice)|0);
 $16 = HEAP32[$lattice>>2]|0;
 $17 = (($16) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($lattice)|0);
 $20 = (($19) + ($15)|0);
 $21 = (($this) + 4|0);
 $22 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $23 = HEAP32[$lattice>>2]|0;
 $24 = (($23) + 88|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 127]($lattice)|0);
 $27 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getBOSNodeEPNS_9AllocatorIS1_S2_EE($22,$26)|0);
 $28 = HEAP32[$lattice>>2]|0;
 $29 = (($28) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_ii[$30 & 127]($lattice)|0);
 $32 = (($27) + 24|0);
 HEAP32[$32>>2] = $31;
 HEAP32[$3>>2] = $27;
 $33 = ($15|0)==(0);
 L1: do {
  if (!($33)) {
   $34 = (($this) + 12|0);
   $pos$03 = 0;
   while(1) {
    $35 = (($3) + ($pos$03<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
     $39 = (($19) + ($pos$03)|0);
     $40 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE6lookupILb0EEEPS1_PKcS7_PNS_9AllocatorIS1_S2_EEPNS_7LatticeE($38,$39,$20,$11,$lattice)|0);
     $41 = (($7) + ($pos$03<<2)|0);
     HEAP32[$41>>2] = $40;
     $42 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($34)|0);
     $43 = (__ZN5MeCab12_GLOBAL__N_17connectILb1EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos$03,$40,$3,$42,$11)|0);
     if (!($43)) {
      break;
     }
    }
    $47 = (($pos$03) + 1)|0;
    $48 = ($47>>>0)<($15>>>0);
    if ($48) {
     $pos$03 = $47;
    } else {
     break L1;
    }
   }
   $44 = HEAP32[$lattice>>2]|0;
   $45 = (($44) + 148|0);
   $46 = HEAP32[$45>>2]|0;
   FUNCTION_TABLE_vii[$46 & 63]($lattice,568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $49 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $50 = HEAP32[$lattice>>2]|0;
 $51 = (($50) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 127]($lattice)|0);
 $54 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getEOSNodeEPNS_9AllocatorIS1_S2_EE($49,$53)|0);
 $55 = HEAP32[$lattice>>2]|0;
 $56 = (($55) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_ii[$57 & 127]($lattice)|0);
 $59 = HEAP32[$lattice>>2]|0;
 $60 = (($59) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (FUNCTION_TABLE_ii[$61 & 127]($lattice)|0);
 $63 = (($58) + ($62)|0);
 $64 = (($54) + 24|0);
 HEAP32[$64>>2] = $63;
 $65 = HEAP32[$lattice>>2]|0;
 $66 = (($65) + 44|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (FUNCTION_TABLE_ii[$67 & 127]($lattice)|0);
 $69 = (($7) + ($68<<2)|0);
 HEAP32[$69>>2] = $54;
 $70 = ($15|0)>(-1);
 L11: do {
  if ($70) {
   $pos1$02 = $15;
   while(1) {
    $73 = (($3) + ($pos1$02<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     break;
    }
    $71 = (($pos1$02) + -1)|0;
    $72 = ($pos1$02|0)>(0);
    if ($72) {
     $pos1$02 = $71;
    } else {
     break L11;
    }
   }
   $76 = (($this) + 12|0);
   $77 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($76)|0);
   $78 = (__ZN5MeCab12_GLOBAL__N_17connectILb1EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos1$02,$54,$3,$77,$11)|0);
   if (!($78)) {
    $79 = HEAP32[$lattice>>2]|0;
    $80 = (($79) + 148|0);
    $81 = HEAP32[$80>>2]|0;
    FUNCTION_TABLE_vii[$81 & 63]($lattice,568);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$3>>2] = $27;
 $82 = HEAP32[$lattice>>2]|0;
 $83 = (($82) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (FUNCTION_TABLE_ii[$84 & 127]($lattice)|0);
 $86 = (($7) + ($85<<2)|0);
 HEAP32[$86>>2] = $54;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab7Viterbi7viterbiILb0ELb1EEEbPNS_7LatticeE($this,$lattice) {
 $this = $this|0;
 $lattice = $lattice|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $pos$03 = 0, $pos1$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = HEAP32[$lattice>>2]|0;
 $9 = (($8) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($lattice)|0);
 $12 = HEAP32[$lattice>>2]|0;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($lattice)|0);
 $16 = HEAP32[$lattice>>2]|0;
 $17 = (($16) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($lattice)|0);
 $20 = (($19) + ($15)|0);
 $21 = (($this) + 4|0);
 $22 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $23 = HEAP32[$lattice>>2]|0;
 $24 = (($23) + 88|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 127]($lattice)|0);
 $27 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getBOSNodeEPNS_9AllocatorIS1_S2_EE($22,$26)|0);
 $28 = HEAP32[$lattice>>2]|0;
 $29 = (($28) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_ii[$30 & 127]($lattice)|0);
 $32 = (($27) + 24|0);
 HEAP32[$32>>2] = $31;
 HEAP32[$3>>2] = $27;
 $33 = ($15|0)==(0);
 L1: do {
  if (!($33)) {
   $34 = (($this) + 12|0);
   $pos$03 = 0;
   while(1) {
    $35 = (($3) + ($pos$03<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
     $39 = (($19) + ($pos$03)|0);
     $40 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE6lookupILb1EEEPS1_PKcS7_PNS_9AllocatorIS1_S2_EEPNS_7LatticeE($38,$39,$20,$11,$lattice)|0);
     $41 = (($7) + ($pos$03<<2)|0);
     HEAP32[$41>>2] = $40;
     $42 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($34)|0);
     $43 = (__ZN5MeCab12_GLOBAL__N_17connectILb0EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos$03,$40,$3,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $47 = (($pos$03) + 1)|0;
    $48 = ($47>>>0)<($15>>>0);
    if ($48) {
     $pos$03 = $47;
    } else {
     break L1;
    }
   }
   $44 = HEAP32[$lattice>>2]|0;
   $45 = (($44) + 148|0);
   $46 = HEAP32[$45>>2]|0;
   FUNCTION_TABLE_vii[$46 & 63]($lattice,568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $49 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $50 = HEAP32[$lattice>>2]|0;
 $51 = (($50) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 127]($lattice)|0);
 $54 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getEOSNodeEPNS_9AllocatorIS1_S2_EE($49,$53)|0);
 $55 = HEAP32[$lattice>>2]|0;
 $56 = (($55) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_ii[$57 & 127]($lattice)|0);
 $59 = HEAP32[$lattice>>2]|0;
 $60 = (($59) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (FUNCTION_TABLE_ii[$61 & 127]($lattice)|0);
 $63 = (($58) + ($62)|0);
 $64 = (($54) + 24|0);
 HEAP32[$64>>2] = $63;
 $65 = HEAP32[$lattice>>2]|0;
 $66 = (($65) + 44|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (FUNCTION_TABLE_ii[$67 & 127]($lattice)|0);
 $69 = (($7) + ($68<<2)|0);
 HEAP32[$69>>2] = $54;
 $70 = ($15|0)>(-1);
 L11: do {
  if ($70) {
   $pos1$02 = $15;
   while(1) {
    $73 = (($3) + ($pos1$02<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     break;
    }
    $71 = (($pos1$02) + -1)|0;
    $72 = ($pos1$02|0)>(0);
    if ($72) {
     $pos1$02 = $71;
    } else {
     break L11;
    }
   }
   $76 = (($this) + 12|0);
   $77 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($76)|0);
   $78 = (__ZN5MeCab12_GLOBAL__N_17connectILb0EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos1$02,$54,$3,$77)|0);
   if (!($78)) {
    $79 = HEAP32[$lattice>>2]|0;
    $80 = (($79) + 148|0);
    $81 = HEAP32[$80>>2]|0;
    FUNCTION_TABLE_vii[$81 & 63]($lattice,568);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$3>>2] = $27;
 $82 = HEAP32[$lattice>>2]|0;
 $83 = (($82) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (FUNCTION_TABLE_ii[$84 & 127]($lattice)|0);
 $86 = (($7) + ($85<<2)|0);
 HEAP32[$86>>2] = $54;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab7Viterbi7viterbiILb0ELb0EEEbPNS_7LatticeE($this,$lattice) {
 $this = $this|0;
 $lattice = $lattice|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $pos$03 = 0, $pos1$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = HEAP32[$lattice>>2]|0;
 $9 = (($8) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($lattice)|0);
 $12 = HEAP32[$lattice>>2]|0;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($lattice)|0);
 $16 = HEAP32[$lattice>>2]|0;
 $17 = (($16) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($lattice)|0);
 $20 = (($19) + ($15)|0);
 $21 = (($this) + 4|0);
 $22 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $23 = HEAP32[$lattice>>2]|0;
 $24 = (($23) + 88|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 127]($lattice)|0);
 $27 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getBOSNodeEPNS_9AllocatorIS1_S2_EE($22,$26)|0);
 $28 = HEAP32[$lattice>>2]|0;
 $29 = (($28) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_ii[$30 & 127]($lattice)|0);
 $32 = (($27) + 24|0);
 HEAP32[$32>>2] = $31;
 HEAP32[$3>>2] = $27;
 $33 = ($15|0)==(0);
 L1: do {
  if (!($33)) {
   $34 = (($this) + 12|0);
   $pos$03 = 0;
   while(1) {
    $35 = (($3) + ($pos$03<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
     $39 = (($19) + ($pos$03)|0);
     $40 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE6lookupILb0EEEPS1_PKcS7_PNS_9AllocatorIS1_S2_EEPNS_7LatticeE($38,$39,$20,$11,$lattice)|0);
     $41 = (($7) + ($pos$03<<2)|0);
     HEAP32[$41>>2] = $40;
     $42 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($34)|0);
     $43 = (__ZN5MeCab12_GLOBAL__N_17connectILb0EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos$03,$40,$3,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $47 = (($pos$03) + 1)|0;
    $48 = ($47>>>0)<($15>>>0);
    if ($48) {
     $pos$03 = $47;
    } else {
     break L1;
    }
   }
   $44 = HEAP32[$lattice>>2]|0;
   $45 = (($44) + 148|0);
   $46 = HEAP32[$45>>2]|0;
   FUNCTION_TABLE_vii[$46 & 63]($lattice,568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $49 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEptEv($21)|0);
 $50 = HEAP32[$lattice>>2]|0;
 $51 = (($50) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 127]($lattice)|0);
 $54 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getEOSNodeEPNS_9AllocatorIS1_S2_EE($49,$53)|0);
 $55 = HEAP32[$lattice>>2]|0;
 $56 = (($55) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_ii[$57 & 127]($lattice)|0);
 $59 = HEAP32[$lattice>>2]|0;
 $60 = (($59) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (FUNCTION_TABLE_ii[$61 & 127]($lattice)|0);
 $63 = (($58) + ($62)|0);
 $64 = (($54) + 24|0);
 HEAP32[$64>>2] = $63;
 $65 = HEAP32[$lattice>>2]|0;
 $66 = (($65) + 44|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (FUNCTION_TABLE_ii[$67 & 127]($lattice)|0);
 $69 = (($7) + ($68<<2)|0);
 HEAP32[$69>>2] = $54;
 $70 = ($15|0)>(-1);
 L11: do {
  if ($70) {
   $pos1$02 = $15;
   while(1) {
    $73 = (($3) + ($pos1$02<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     break;
    }
    $71 = (($pos1$02) + -1)|0;
    $72 = ($pos1$02|0)>(0);
    if ($72) {
     $pos1$02 = $71;
    } else {
     break L11;
    }
   }
   $76 = (($this) + 12|0);
   $77 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($76)|0);
   $78 = (__ZN5MeCab12_GLOBAL__N_17connectILb0EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos1$02,$54,$3,$77)|0);
   if (!($78)) {
    $79 = HEAP32[$lattice>>2]|0;
    $80 = (($79) + 148|0);
    $81 = HEAP32[$80>>2]|0;
    FUNCTION_TABLE_vii[$81 & 63]($lattice,568);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$3>>2] = $27;
 $82 = HEAP32[$lattice>>2]|0;
 $83 = (($82) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (FUNCTION_TABLE_ii[$84 & 127]($lattice)|0);
 $86 = (($7) + ($85<<2)|0);
 HEAP32[$86>>2] = $54;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab7Viterbi15forwardbackwardEPNS_7LatticeE($lattice) {
 $lattice = $lattice|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $exitcond = 0, $exitcond29 = 0, $node$0 = 0, $node$020 = 0, $node$021 = 0, $node2$0 = 0, $node2$011 = 0, $node2$012 = 0, $node4$0 = 0, $node4$03 = 0, $node4$04 = 0;
 var $path$0 = 0, $path$01 = 0, $path$02 = 0, $pos$025 = 0, $pos1$016 = 0, $pos3$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 31]($lattice,8)|0);
 if (!($3)) {
  STACKTOP = sp;return 1;
 }
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = HEAP32[$lattice>>2]|0;
 $9 = (($8) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($lattice)|0);
 $12 = HEAP32[$lattice>>2]|0;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($lattice)|0);
 $16 = HEAP32[$lattice>>2]|0;
 $17 = (($16) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (+FUNCTION_TABLE_di[$18 & 3]($lattice));
 $20 = $19;
 $21 = HEAP32[$7>>2]|0;
 $22 = (($21) + 52|0);
 HEAPF32[$22>>2] = 0.0;
 $23 = ($15|0)<(0);
 if ($23) {
  $24 = (($11) + ($15<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 56|0);
  HEAPF32[$26>>2] = 0.0;
  $43 = $24;
 } else {
  $pos$025 = 0;
  while(1) {
   $27 = (($11) + ($pos$025<<2)|0);
   $node$020 = HEAP32[$27>>2]|0;
   $28 = ($node$020|0)==(0|0);
   if (!($28)) {
    $node$021 = $node$020;
    while(1) {
     __ZN5MeCab12_GLOBAL__N_110calc_alphaEP12mecab_node_td($node$021,$20);
     $29 = (($node$021) + 12|0);
     $node$0 = HEAP32[$29>>2]|0;
     $30 = ($node$0|0)==(0|0);
     if ($30) {
      break;
     } else {
      $node$021 = $node$0;
     }
    }
   }
   $31 = (($pos$025) + 1)|0;
   $exitcond29 = ($pos$025|0)==($15|0);
   if ($exitcond29) {
    break;
   } else {
    $pos$025 = $31;
   }
  }
  $32 = (($11) + ($15<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 56|0);
  HEAPF32[$34>>2] = 0.0;
  $35 = ($15|0)>(-1);
  if ($35) {
   $pos1$016 = $15;
   while(1) {
    $36 = (($7) + ($pos1$016<<2)|0);
    $node2$011 = HEAP32[$36>>2]|0;
    $37 = ($node2$011|0)==(0|0);
    if (!($37)) {
     $node2$012 = $node2$011;
     while(1) {
      __ZN5MeCab12_GLOBAL__N_19calc_betaEP12mecab_node_td($node2$012,$20);
      $38 = (($node2$012) + 8|0);
      $node2$0 = HEAP32[$38>>2]|0;
      $39 = ($node2$0|0)==(0|0);
      if ($39) {
       break;
      } else {
       $node2$012 = $node2$0;
      }
     }
    }
    $40 = (($pos1$016) + -1)|0;
    $41 = ($pos1$016|0)>(0);
    if ($41) {
     $pos1$016 = $40;
    } else {
     $43 = $32;
     break;
    }
   }
  } else {
   $43 = $32;
  }
 }
 $42 = HEAP32[$43>>2]|0;
 $44 = (($42) + 52|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $45;
 $47 = HEAP32[$lattice>>2]|0;
 $48 = (($47) + 48|0);
 $49 = HEAP32[$48>>2]|0;
 FUNCTION_TABLE_vid[$49 & 3]($lattice,$46);
 $50 = ($15|0)<(0);
 if ($50) {
  STACKTOP = sp;return 1;
 } else {
  $pos3$08 = 0;
 }
 while(1) {
  $51 = (($11) + ($pos3$08<<2)|0);
  $node4$03 = HEAP32[$51>>2]|0;
  $52 = ($node4$03|0)==(0|0);
  if (!($52)) {
   $node4$04 = $node4$03;
   while(1) {
    $53 = (($node4$04) + 52|0);
    $54 = +HEAPF32[$53>>2];
    $55 = (($node4$04) + 56|0);
    $56 = +HEAPF32[$55>>2];
    $57 = $54 + $56;
    $58 = $57;
    $59 = $58 - $46;
    $60 = (+Math_exp((+$59)));
    $61 = $60;
    $62 = (($node4$04) + 60|0);
    HEAPF32[$62>>2] = $61;
    $63 = (($node4$04) + 20|0);
    $path$01 = HEAP32[$63>>2]|0;
    $64 = ($path$01|0)==(0|0);
    if (!($64)) {
     $path$02 = $path$01;
     while(1) {
      $65 = (($path$02) + 8|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (($66) + 52|0);
      $68 = +HEAPF32[$67>>2];
      $69 = $68;
      $70 = (($path$02) + 16|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (+($71|0));
      $73 = $20 * $72;
      $74 = $69 - $73;
      $75 = HEAP32[$path$02>>2]|0;
      $76 = (($75) + 56|0);
      $77 = +HEAPF32[$76>>2];
      $78 = $77;
      $79 = $74 + $78;
      $80 = $79 - $46;
      $81 = (+Math_exp((+$80)));
      $82 = $81;
      $83 = (($path$02) + 20|0);
      HEAPF32[$83>>2] = $82;
      $84 = (($path$02) + 12|0);
      $path$0 = HEAP32[$84>>2]|0;
      $85 = ($path$0|0)==(0|0);
      if ($85) {
       break;
      } else {
       $path$02 = $path$0;
      }
     }
    }
    $86 = (($node4$04) + 12|0);
    $node4$0 = HEAP32[$86>>2]|0;
    $87 = ($node4$0|0)==(0|0);
    if ($87) {
     break;
    } else {
     $node4$04 = $node4$0;
    }
   }
  }
  $88 = (($pos3$08) + 1)|0;
  $exitcond = ($pos3$08|0)==($15|0);
  if ($exitcond) {
   break;
  } else {
   $pos3$08 = $88;
  }
 }
 STACKTOP = sp;return 1;
}
function __ZN5MeCab7Viterbi16buildBestLatticeEPNS_7LatticeE($lattice) {
 $lattice = $lattice|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return 1;
 } else {
  $8 = $3;$node$01 = $3;
 }
 while(1) {
  $6 = (($node$01) + 48|0);
  HEAP8[$6>>0] = 1;
  $7 = HEAP32[$8>>2]|0;
  $9 = (($7) + 4|0);
  HEAP32[$9>>2] = $node$01;
  $10 = HEAP32[$7>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   break;
  } else {
   $8 = $7;$node$01 = $7;
  }
 }
 STACKTOP = sp;return 1;
}
function __ZN5MeCab7Viterbi15buildAllLatticeEPNS_7LatticeE($lattice) {
 $lattice = $lattice|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $node$0 = 0, $node$01 = 0, $node$03 = 0, $pos$05 = 0, $prev$04 = 0, $prev$1$lcssa = 0, $prev$12 = 0, $prev$12$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 31]($lattice,32)|0);
 if (!($3)) {
  STACKTOP = sp;return 1;
 }
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = HEAP32[$lattice>>2]|0;
 $9 = (($8) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($lattice)|0);
 $12 = HEAP32[$lattice>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($lattice)|0);
 $16 = ($11|0)<(0);
 if ($16) {
  STACKTOP = sp;return 1;
 } else {
  $pos$05 = 0;$prev$04 = $7;
 }
 while(1) {
  $17 = (($15) + ($pos$05<<2)|0);
  $node$01 = HEAP32[$17>>2]|0;
  $18 = ($node$01|0)==(0|0);
  if ($18) {
   $prev$1$lcssa = $prev$04;
  } else {
   $node$03 = $node$01;$prev$12 = $prev$04;
   while(1) {
    $19 = (($prev$12) + 4|0);
    HEAP32[$19>>2] = $node$03;
    HEAP32[$node$03>>2] = $prev$12;
    $20 = (($node$03) + 12|0);
    $node$0 = HEAP32[$20>>2]|0;
    $21 = ($node$0|0)==(0|0);
    if ($21) {
     $prev$1$lcssa = $node$03;
     break;
    } else {
     $prev$12$phi = $node$03;$node$03 = $node$0;$prev$12 = $prev$12$phi;
    }
   }
  }
  $22 = (($pos$05) + 1)|0;
  $exitcond = ($pos$05|0)==($11|0);
  if ($exitcond) {
   break;
  } else {
   $pos$05 = $22;$prev$04 = $prev$1$lcssa;
  }
 }
 STACKTOP = sp;return 1;
}
function __ZN5MeCab7Viterbi9initNBestEPNS_7LatticeE($lattice) {
 $lattice = $lattice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 31]($lattice,2)|0);
 if (!($3)) {
  STACKTOP = sp;return 1;
 }
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE15nbest_generatorEv($7)|0);
 (__ZN5MeCab14NBestGenerator3setEPNS_7LatticeE($8,$lattice)|0);
 STACKTOP = sp;return 1;
}
function __ZNK5MeCab7Viterbi9tokenizerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEE3getEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab7Viterbi9connectorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10scoped_ptrINS_9ConnectorEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_110calc_alphaEP12mecab_node_td($n,$beta) {
 $n = $n|0;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $path$0 = 0, $path$01 = 0, $path$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 52|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = (($n) + 20|0);
 $path$01 = HEAP32[$1>>2]|0;
 $2 = ($path$01|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $path$02 = $path$01;
 }
 while(1) {
  $3 = +HEAPF32[$0>>2];
  $4 = $3;
  $5 = (($path$02) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (+($6|0));
  $8 = $7 * $beta;
  $9 = (($path$02) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 52|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $12;
  $14 = $13 - $8;
  $15 = HEAP32[$1>>2]|0;
  $16 = ($path$02|0)==($15|0);
  $17 = (+__ZN5MeCab9logsumexpEddb($4,$14,$16));
  $18 = $17;
  HEAPF32[$0>>2] = $18;
  $19 = (($path$02) + 12|0);
  $path$0 = HEAP32[$19>>2]|0;
  $20 = ($path$0|0)==(0|0);
  if ($20) {
   break;
  } else {
   $path$02 = $path$0;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_19calc_betaEP12mecab_node_td($n,$beta) {
 $n = $n|0;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var $path$0 = 0, $path$01 = 0, $path$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 56|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = (($n) + 16|0);
 $path$01 = HEAP32[$1>>2]|0;
 $2 = ($path$01|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $path$02 = $path$01;
 }
 while(1) {
  $3 = +HEAPF32[$0>>2];
  $4 = $3;
  $5 = (($path$02) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (+($6|0));
  $8 = $7 * $beta;
  $9 = HEAP32[$path$02>>2]|0;
  $10 = (($9) + 56|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $11;
  $13 = $12 - $8;
  $14 = HEAP32[$1>>2]|0;
  $15 = ($path$02|0)==($14|0);
  $16 = (+__ZN5MeCab9logsumexpEddb($4,$13,$15));
  $17 = $16;
  HEAPF32[$0>>2] = $17;
  $18 = (($path$02) + 4|0);
  $path$0 = HEAP32[$18>>2]|0;
  $19 = ($path$0|0)==(0|0);
  if ($19) {
   break;
  } else {
   $path$02 = $path$0;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab7Viterbi19buildResultForNBestEPNS_7LatticeE($lattice) {
 $lattice = $lattice|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (__ZN5MeCab7Viterbi15buildAllLatticeEPNS_7LatticeE($lattice)|0);
 STACKTOP = sp;return 1;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE15nbest_generatorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_14NBestGeneratorEE3getEv($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (__Znwj(48)|0);
  __ZN5MeCab14NBestGeneratorC1Ev($3);
  __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEE5resetEPS1_($0,$3);
 }
 $4 = (__ZNK5MeCab10scoped_ptrINS_14NBestGeneratorEE3getEv($0)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE14partial_bufferEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 __ZNSt3__16vectorIcNS_9allocatorIcEEE6resizeEj($0,$size);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab8tokenizeINSt3__120back_insert_iteratorINS1_6vectorIPcNS1_9allocatorIS4_EEEEEEEEjS4_PKcT_j($str,$del,$out,$max) {
 $str = $str|0;
 $del = $del|0;
 $out = $out|0;
 $max = $max|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$01 = 0, $size$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 5|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $str;
 $2 = (_strlen(($str|0))|0);
 $3 = (($str) + ($2)|0);
 $4 = (_strlen(($del|0))|0);
 $5 = (($del) + ($4)|0);
 $6 = ($max|0)==(0);
 if ($6) {
  $size$1 = 0;
  STACKTOP = sp;return ($size$1|0);
 }
 $7 = HEAP32[$out>>2]|0;
 $8 = (($7) + 4|0);
 $9 = (($7) + 8|0);
 $size$01 = 0;
 while(1) {
  $10 = HEAP32[$1>>2]|0;
  ;HEAP8[$$byval_copy+0>>0]=HEAP8[$0+0>>0]|0;
  $11 = (__ZNSt3__113find_first_ofIPcPKcNS_10__equal_toIccEEEET_S6_S6_T0_S7_T1_($10,$3,$del,$5,$$byval_copy)|0);
  HEAP8[$11>>0] = 0;
  $12 = HEAP32[$8>>2]|0;
  $13 = HEAP32[$9>>2]|0;
  $14 = ($12|0)==($13|0);
  if ($14) {
   __ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($7,$1);
  } else {
   $15 = ($12|0)==(0|0);
   if (!($15)) {
    $16 = HEAP32[$1>>2]|0;
    HEAP32[$12>>2] = $16;
   }
   $17 = HEAP32[$8>>2]|0;
   $18 = (($17) + 4|0);
   HEAP32[$8>>2] = $18;
  }
  $19 = (($size$01) + 1)|0;
  $20 = ($11|0)==($3|0);
  if ($20) {
   $size$1 = $19;
   label = 10;
   break;
  }
  $21 = (($11) + 1|0);
  HEAP32[$1>>2] = $21;
  $22 = ($19>>>0)<($max>>>0);
  if ($22) {
   $size$01 = $19;
  } else {
   $size$1 = $19;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($size$1|0);
 }
 return 0|0;
}
function __ZN5MeCab12scoped_arrayIcEC1EPc($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayIcEC2EPc($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab12StringBufferC1EPcj($this,$_s,$_l) {
 $this = $this|0;
 $_s = $_s|0;
 $_l = $_l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12StringBufferC2EPcj($this,$_s,$_l);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12scoped_arrayIcE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = ($6>>>0)<($__n>>>0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 8|0);
 $9 = (($this) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = (($11) - ($4))|0;
 $13 = $12 >> 3;
 __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEEC1EjjS6_($__v,$__n,$13,$8);
 __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZN5MeCab8tokenizeIPPcEEjS1_PKcT_j($str,$del,$out,$max) {
 $str = $str|0;
 $del = $del|0;
 $out = $out|0;
 $max = $max|0;
 var $$012 = 0, $$04 = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$03 = 0, $size$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 1|0;
 $0 = sp;
 $1 = (_strlen(($str|0))|0);
 $2 = (($str) + ($1)|0);
 $3 = (_strlen(($del|0))|0);
 $4 = (($del) + ($3)|0);
 $5 = ($max|0)==(0);
 if ($5) {
  $size$1 = 0;
  STACKTOP = sp;return ($size$1|0);
 } else {
  $$012 = $out;$$04 = $str;$size$03 = 0;
 }
 while(1) {
  ;HEAP8[$$byval_copy+0>>0]=HEAP8[$0+0>>0]|0;
  $6 = (__ZNSt3__113find_first_ofIPcPKcNS_10__equal_toIccEEEET_S6_S6_T0_S7_T1_($$04,$2,$del,$4,$$byval_copy)|0);
  HEAP8[$6>>0] = 0;
  HEAP32[$$012>>2] = $$04;
  $7 = (($size$03) + 1)|0;
  $8 = ($6|0)==($2|0);
  if ($8) {
   $size$1 = $7;
   label = 4;
   break;
  }
  $9 = (($$012) + 4|0);
  $10 = (($6) + 1|0);
  $11 = ($7>>>0)<($max>>>0);
  if ($11) {
   $$012 = $9;$$04 = $10;$size$03 = $7;
  } else {
   $size$1 = $7;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($size$1|0);
 }
 return 0|0;
}
function __ZN5MeCab12StringBufferlsEPKc($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12StringBuffer5writeEPKc($this,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12StringBufferlsEc($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12StringBuffer5writeEc($this,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNK5MeCab12StringBuffer3strEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 17|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($this) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4;
 } else {
  $5 = 0;
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayIcED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPcNS_9allocatorIS1_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIPcNS_9allocatorIS1_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 3;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 2;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 3;
 __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEEC1EjjS6_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = $__x;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = $28;
  $37 = $36;
  HEAP32[$37>>2] = $32;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
 }
 $40 = HEAP32[$27>>2]|0;
 $41 = (($40) + 8|0);
 HEAP32[$27>>2] = $41;
 __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEEC1EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<3)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -8|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 3;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 536870911;
}
function __ZNSt3__114__split_bufferINS_4pairIPcS2_EERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 3;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<3)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<3)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__113find_first_ofIPcPKcNS_10__equal_toIccEEEET_S6_S6_T0_S7_T1_($__first1,$__last1,$__first2,$__last2,$__pred) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 var $$0 = 0, $$015 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__j$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__first1|0)==($__last1|0);
 L1: do {
  if ($0) {
   $$0 = $__last1;
  } else {
   $1 = ($__first2|0)==($__last2|0);
   $$015 = $__first1;
   while(1) {
    if (!($1)) {
     $2 = HEAP8[$$015>>0]|0;
     $__j$02 = $__first2;
     while(1) {
      $5 = HEAP8[$__j$02>>0]|0;
      $6 = ($2<<24>>24)==($5<<24>>24);
      $3 = (($__j$02) + 1|0);
      if ($6) {
       $$0 = $$015;
       break L1;
      }
      $4 = ($3|0)==($__last2|0);
      if ($4) {
       break;
      } else {
       $__j$02 = $3;
      }
     }
    }
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__last1|0);
    if ($8) {
     $$0 = $__last1;
     break;
    } else {
     $$015 = $7;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEEC1EjjS4_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v);
 __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEEC1EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1073741823;
}
function __ZNSt3__114__split_bufferIPcRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<($__sz>>>0);
 if ($6) {
  $7 = (($__sz) - ($5))|0;
  __ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEj($this,$7);
  STACKTOP = sp;return;
 }
 $8 = ($5>>>0)>($__sz>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($2) + ($__sz)|0);
 $10 = ($1|0)==($9|0);
 if ($10) {
  STACKTOP = sp;return;
 } else {
  $12 = $1;
 }
 while(1) {
  $11 = (($12) + -1|0);
  $13 = ($11|0)==($9|0);
  if ($13) {
   break;
  } else {
   $12 = $11;
  }
 }
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)<($__n>>>0);
 if (!($7)) {
  __ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $8 = (($this) + 8|0);
 $9 = HEAP32[$this>>2]|0;
 $10 = $9;
 $11 = (($5) - ($10))|0;
 $12 = (($11) + ($__n))|0;
 $13 = (__ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($this)|0);
 $14 = ($13>>>0)<($12>>>0);
 if ($14) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $15 = (($this) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = (($17) - ($10))|0;
 $19 = $13 >>> 1;
 $20 = ($18>>>0)<($19>>>0);
 if ($20) {
  $21 = $18 << 1;
  $22 = ($21>>>0)<($12>>>0);
  $23 = $22 ? $12 : $21;
  $$0$i = $23;
 } else {
  $$0$i = $13;
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = HEAP32[$this>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEEC1EjjS3_($__v,$$0$i,$28,$8);
 __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($this,$__v);
 __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pr = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pr;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAP8[$1>>0] = 0;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$0>>2] = $4;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEEC1EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEEC2EjjS3_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pr = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pr;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAP8[$1>>0] = 0;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$0>>2] = $4;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (0 - ($6))|0;
 $9 = (($7) + ($8)|0);
 HEAP32[$3>>2] = $9;
 _memcpy(($9|0),($0|0),($6|0))|0;
 $10 = HEAP32[$this>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $11;
 HEAP32[$3>>2] = $10;
 $12 = (($__v) + 8|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$12>>2]|0;
 HEAP32[$1>>2] = $14;
 HEAP32[$12>>2] = $13;
 $15 = (($this) + 8|0);
 $16 = (($__v) + 12|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $19;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -1|0);
   $7 = ($5|0)==($1|0);
   if ($7) {
    break;
   } else {
    $6 = $5;
   }
  }
  HEAP32[$2>>2] = $5;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNSt3__114__split_bufferIcRNS_9allocatorIcEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $4 = 0;
 } else {
  $3 = (__Znwj($__cap)|0);
  $4 = $3;
 }
 HEAP32[$this>>2] = $4;
 $5 = (($4) + ($__start)|0);
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = HEAP32[$this>>2]|0;
 $9 = (($8) + ($__cap)|0);
 $10 = (($this) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_14NBestGeneratorEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEE5resetEPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab14NBestGeneratorC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab14NBestGeneratorC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab14NBestGeneratorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((432 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 20|0);
 __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEEC1Ej($3,512);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEEC1Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEEC2Ej($this,$_size);
 STACKTOP = sp;return;
}
function __ZNSt3__114priority_queueIPN5MeCab14NBestGenerator12QueueElementENS_6vectorIS4_NS_9allocatorIS4_EEEENS2_16QueueElementCompEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114priority_queueIPN5MeCab14NBestGenerator12QueueElementENS_6vectorIS4_NS_9allocatorIS4_EEEENS2_16QueueElementCompEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab14NBestGeneratorD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab14NBestGeneratorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab14NBestGeneratorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab14NBestGeneratorD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab14NBestGeneratorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((432 + 8|0));
 $0 = (($this) + 20|0);
 __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED1Ev($0);
 $1 = (($this) + 4|0);
 __ZNSt3__114priority_queueIPN5MeCab14NBestGenerator12QueueElementENS_6vectorIS4_NS_9allocatorIS4_EEEENS2_16QueueElementCompEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((488 + 8|0));
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 4|0);
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED1Ev($1);
  STACKTOP = sp;return;
 } else {
  $7 = $4;$storemerge1 = 0;
 }
 while(1) {
  $6 = (($7) + ($storemerge1<<2)|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = $12;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 2;
  $18 = ($11>>>0)<($17>>>0);
  if ($18) {
   $7 = $13;$storemerge1 = $11;
  } else {
   break;
  }
 }
 __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNSt3__114priority_queueIPN5MeCab14NBestGenerator12QueueElementENS_6vectorIS4_NS_9allocatorIS4_EEEENS2_16QueueElementCompEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEED1Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEEC2Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((488 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (($this) + 24|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 HEAP32[$1>>2] = $_size;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_17connectILb0EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos,$rnode,$end_node_list,$connector) {
 $pos = $pos|0;
 $rnode = $rnode|0;
 $end_node_list = $end_node_list|0;
 $connector = $connector|0;
 var $$0 = 0, $$016 = 0, $$best_cost$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $best_cost$03 = 0, $best_node$02 = 0, $lnode$0 = 0, $lnode$0$best_node$0 = 0, $lnode$01 = 0, $lnode$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rnode|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($end_node_list) + ($pos<<2)|0);
 $$016 = $rnode;
 while(1) {
  $lnode$01 = HEAP32[$1>>2]|0;
  $2 = ($lnode$01|0)==(0|0);
  if ($2) {
   $$0 = 0;
   label = 7;
   break;
  } else {
   $best_cost$03 = 2147483647;$best_node$02 = 0;$lnode$04 = $lnode$01;
  }
  while(1) {
   $3 = (__ZNK5MeCab9Connector4costEPK12mecab_node_tS3_($connector,$lnode$04,$$016)|0);
   $4 = (($lnode$04) + 68|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($3))|0;
   $7 = ($6|0)<($best_cost$03|0);
   $lnode$0$best_node$0 = $7 ? $lnode$04 : $best_node$02;
   $$best_cost$0 = $7 ? $6 : $best_cost$03;
   $8 = (($lnode$04) + 8|0);
   $lnode$0 = HEAP32[$8>>2]|0;
   $9 = ($lnode$0|0)==(0|0);
   if ($9) {
    break;
   } else {
    $best_cost$03 = $$best_cost$0;$best_node$02 = $lnode$0$best_node$0;$lnode$04 = $lnode$0;
   }
  }
  $10 = ($lnode$0$best_node$0|0)==(0|0);
  if ($10) {
   $$0 = 0;
   label = 7;
   break;
  }
  HEAP32[$$016>>2] = $lnode$0$best_node$0;
  $11 = (($$016) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($$016) + 68|0);
  HEAP32[$12>>2] = $$best_cost$0;
  $13 = (($$016) + 38|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = (($15) + ($pos))|0;
  $17 = (($end_node_list) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($$016) + 8|0);
  HEAP32[$19>>2] = $18;
  HEAP32[$17>>2] = $$016;
  $20 = (($$016) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   label = 7;
   break;
  } else {
   $$016 = $21;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNK5MeCab9Connector4costEPK12mecab_node_tS3_($this,$lNode,$rNode) {
 $this = $this|0;
 $lNode = $lNode|0;
 $rNode = $rNode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($lNode) + 40|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($this) + 16|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($rNode) + 42|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = Math_imul($8, $5)|0;
 $10 = (($9) + ($2))|0;
 $11 = (($this) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (($rNode) + 64|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + ($15))|0;
 STACKTOP = sp;return ($19|0);
}
function __ZN5MeCab12_GLOBAL__N_17connectILb1EEEbjP12mecab_node_tPS3_S4_PKNS_9ConnectorEPNS_9AllocatorIS2_12mecab_path_tEE($pos,$rnode,$end_node_list,$connector,$allocator) {
 $pos = $pos|0;
 $rnode = $rnode|0;
 $end_node_list = $end_node_list|0;
 $connector = $connector|0;
 $allocator = $allocator|0;
 var $$0 = 0, $$016 = 0, $$best_cost$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $best_cost$03 = 0, $best_node$02 = 0, $lnode$0 = 0, $lnode$0$best_node$0 = 0, $lnode$01 = 0;
 var $lnode$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rnode|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($end_node_list) + ($pos<<2)|0);
 $$016 = $rnode;
 while(1) {
  $lnode$01 = HEAP32[$1>>2]|0;
  $2 = ($lnode$01|0)==(0|0);
  if ($2) {
   $$0 = 0;
   label = 8;
   break;
  }
  $3 = (($$016) + 20|0);
  $best_cost$03 = 2147483647;$best_node$02 = 0;$lnode$04 = $lnode$01;
  while(1) {
   $4 = (__ZNK5MeCab9Connector4costEPK12mecab_node_tS3_($connector,$lnode$04,$$016)|0);
   $5 = (($lnode$04) + 68|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($4))|0;
   $8 = ($7|0)<($best_cost$03|0);
   $lnode$0$best_node$0 = $8 ? $lnode$04 : $best_node$02;
   $$best_cost$0 = $8 ? $7 : $best_cost$03;
   $9 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newPathEv($allocator)|0);
   $10 = (($9) + 16|0);
   HEAP32[$10>>2] = $4;
   HEAP32[$9>>2] = $$016;
   $11 = (($9) + 8|0);
   HEAP32[$11>>2] = $lnode$04;
   $12 = HEAP32[$3>>2]|0;
   $13 = (($9) + 12|0);
   HEAP32[$13>>2] = $12;
   HEAP32[$3>>2] = $9;
   $14 = (($lnode$04) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($9) + 4|0);
   HEAP32[$16>>2] = $15;
   HEAP32[$14>>2] = $9;
   $17 = (($lnode$04) + 8|0);
   $lnode$0 = HEAP32[$17>>2]|0;
   $18 = ($lnode$0|0)==(0|0);
   if ($18) {
    break;
   } else {
    $best_cost$03 = $$best_cost$0;$best_node$02 = $lnode$0$best_node$0;$lnode$04 = $lnode$0;
   }
  }
  $19 = ($lnode$0$best_node$0|0)==(0|0);
  if ($19) {
   $$0 = 0;
   label = 8;
   break;
  }
  HEAP32[$$016>>2] = $lnode$0$best_node$0;
  $20 = (($$016) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$016) + 68|0);
  HEAP32[$21>>2] = $$best_cost$0;
  $22 = (($$016) + 38|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (($24) + ($pos))|0;
  $26 = (($end_node_list) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($$016) + 8|0);
  HEAP32[$28>>2] = $27;
  HEAP32[$26>>2] = $$016;
  $29 = (($$016) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0|0);
  if ($31) {
   $$0 = 1;
   label = 8;
   break;
  } else {
   $$016 = $30;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newPathEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEE3getEv($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (__Znwj(28)|0);
  __ZN5MeCab8FreeListI12mecab_path_tEC1Ej($3,2048);
  __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEE5resetEPS3_($0,$3);
 }
 $4 = (__ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEEptEv($0)|0);
 $5 = (__ZN5MeCab8FreeListI12mecab_path_tE5allocEv($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEE5resetEPS3_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_path_tEC1Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI12mecab_path_tEC2Ej($this,$_size);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab8FreeListI12mecab_path_tE5allocEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $6 = (($this) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  HEAP32[$1>>2] = 0;
 }
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 4|0);
 $12 = (($this) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($10|0)==($18|0);
 do {
  if ($19) {
   $20 = HEAP32[$3>>2]|0;
   $$arith = ($20*24)|0;
   $$overflow = ($20>>>0)>(178956970);
   $21 = $$overflow ? -1 : $$arith;
   $22 = (__Znaj($21)|0);
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($this) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23>>>0)<($25>>>0);
   if (!($26)) {
    __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($11,$0);
    break;
   }
   $27 = ($23|0)==(0|0);
   if (!($27)) {
    HEAP32[$23>>2] = $22;
   }
   $28 = HEAP32[$12>>2]|0;
   $29 = (($28) + 4|0);
   HEAP32[$12>>2] = $29;
  }
 } while(0);
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$11>>2]|0;
 $32 = (($31) + ($30<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[$1>>2] = $35;
 $36 = (($33) + (($34*24)|0)|0);
 STACKTOP = sp;return ($36|0);
}
function __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEEC1EjjS5_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v);
 __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEEC1EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1073741823;
}
function __ZNSt3__114__split_bufferIP12mecab_path_tRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_path_tEC2Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((592 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (($this) + 24|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 HEAP32[$1>>2] = $_size;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_path_tED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI12mecab_path_tED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_path_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI12mecab_path_tED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_path_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((592 + 8|0));
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 4|0);
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEED1Ev($1);
  STACKTOP = sp;return;
 } else {
  $7 = $4;$storemerge1 = 0;
 }
 while(1) {
  $6 = (($7) + ($storemerge1<<2)|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = $12;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 2;
  $18 = ($11>>>0)<($17>>>0);
  if ($18) {
   $7 = $13;$storemerge1 = $11;
  } else {
   break;
  }
 }
 __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_path_tNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIP12mecab_path_tNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIP12mecab_path_tNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIiEC1EPi($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIiEC2EPi($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrIiEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrIiED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIiED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112lexical_castIiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($arg) {
 $arg = $arg|0;
 var $$0 = 0, $$sum = 0, $$sum$i$i$i = 0, $$sum1 = 0, $$sum1$i$i$i = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $interpreter = 0, $r = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 160|0;
 $interpreter = sp + 16|0;
 $result = sp + 8|0;
 $r = sp;
 $1 = (($interpreter) + 64|0);
 $2 = (($interpreter) + 8|0);
 HEAP32[$2>>2] = ((656 + 32|0));
 $3 = (($interpreter) + 12|0);
 HEAP32[$interpreter>>2] = ((912 + 12|0));
 $4 = (($interpreter) + 64|0);
 HEAP32[$4>>2] = ((912 + 32|0));
 $5 = (($interpreter) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$interpreter>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($interpreter) + ($8)|0);
 __ZNSt3__18ios_base4initEPv($9,$3);
 $$sum$i$i$i = (($8) + 72)|0;
 $10 = (($interpreter) + ($$sum$i$i$i)|0);
 HEAP32[$10>>2] = 0;
 $$sum1$i$i$i = (($8) + 76)|0;
 $11 = (($interpreter) + ($$sum1$i$i$i)|0);
 HEAP32[$11>>2] = -1;
 HEAP32[$interpreter>>2] = ((656 + 12|0));
 HEAP32[$1>>2] = ((656 + 52|0));
 HEAP32[$2>>2] = ((656 + 32|0));
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($3);
 HEAP32[$3>>2] = ((992 + 8|0));
 $12 = (($interpreter) + 44|0);
 $13 = (($interpreter) + 60|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 HEAP32[$13>>2] = 24;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $14 = (($interpreter) + 8|0);
 $15 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($14,$arg)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $$sum = (($18) + 16)|0;
 $19 = (($15) + ($$sum)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 5;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = (__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($interpreter,$result)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -12|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum1 = (($26) + 16)|0;
  $27 = (($23) + ($$sum1)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 5;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = (__ZNSt3__12wsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_($interpreter)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + -12|0);
   $34 = HEAP32[$33>>2]|0;
   $$sum2 = (($34) + 16)|0;
   $35 = (($31) + ($$sum2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 2;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $42 = HEAP32[$result>>2]|0;
    $$0 = $42;
    __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $39 = (__Znwj(4)|0);
 HEAP32[$39>>2] = 0;
 __ZN5MeCab10scoped_ptrIiEC1EPi($r,$39);
 $40 = (__ZNK5MeCab10scoped_ptrIiEdeEv($r)|0);
 $41 = HEAP32[$40>>2]|0;
 __ZN5MeCab10scoped_ptrIiED1Ev($r);
 $$0 = $41;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $$sum = 0, $$sum$i$i = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 16|0;
 $__s = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s,$__os);
 $2 = HEAP8[$__s>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
  STACKTOP = sp;return ($__os|0);
 }
 $4 = HEAP8[$__str>>0]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $9 = $4&255;
  $10 = $9 >>> 1;
  $37 = $10;
 } else {
  $7 = (($__str) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $37 = $8;
 }
 $11 = HEAP32[$__os>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $$sum$i$i = (($13) + 24)|0;
 $14 = (($__os) + ($$sum$i$i)|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$0>>2] = $15;
 $16 = HEAP8[$__str>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $21 = (($__str) + 1|0);
  $61 = $21;
 } else {
  $19 = (($__str) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $61 = $20;
 }
 $22 = HEAP32[$__os>>2]|0;
 $23 = (($22) + -12|0);
 $24 = HEAP32[$23>>2]|0;
 $$sum = (($24) + 4)|0;
 $25 = (($__os) + ($$sum)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 176;
 $28 = ($27|0)==(32);
 $29 = HEAP8[$__str>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $34 = (($__str) + 1|0);
  $36 = $34;
 } else {
  $32 = (($__str) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $36 = $33;
 }
 if ($28) {
  $35 = (($36) + ($37)|0);
  $62 = $35;
 } else {
  $62 = $36;
 }
 $38 = HEAP8[$__str>>0]|0;
 $39 = $38 & 1;
 $40 = ($39<<24>>24)==(0);
 if ($40) {
  $43 = (($__str) + 1|0);
  $60 = $43;
 } else {
  $41 = (($__str) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $60 = $42;
 }
 $44 = HEAP32[$__os>>2]|0;
 $45 = (($44) + -12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($__os) + ($46)|0);
 $$sum3 = (($46) + 76)|0;
 $48 = (($__os) + ($$sum3)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(-1);
 if ($50) {
  __ZNKSt3__18ios_base6getlocEv($$byval_copy,$47);
  $51 = (__ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy,409576)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_iii[$54 & 31]($51,32)|0);
  __ZNSt3__16localeD2Ev($$byval_copy);
  $56 = $55 << 24 >> 24;
  HEAP32[$48>>2] = $56;
 }
 $57 = HEAP32[$48>>2]|0;
 $58 = $57&255;
 $59 = (($60) + ($37)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$61,$62,$59,$47,$58);
 $63 = HEAP32[$1>>2]|0;
 $64 = ($63|0)==(0|0);
 if (!($64)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
  STACKTOP = sp;return ($__os|0);
 }
 $65 = HEAP32[$__os>>2]|0;
 $66 = (($65) + -12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($__os) + ($67)|0);
 $$sum4 = (($67) + 16)|0;
 $69 = (($__os) + ($$sum4)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 | 5;
 __ZNSt3__18ios_base5clearEj($68,$71);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
 STACKTOP = sp;return ($__os|0);
}
function __ZNSt3__12wsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_($__is) {
 $__is = $__is|0;
 var $$0$i14 = 0, $$sum = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__sen = 0, $isascii1$i = 0;
 var $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sen = sp + 4|0;
 $0 = sp;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b($__sen,$__is,1);
 $1 = HEAP8[$__sen>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return ($__is|0);
 }
 $3 = HEAP32[$__is>>2]|0;
 $4 = (($3) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($__is) + ($5)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$6);
 $7 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 __ZNSt3__16localeD2Ev($0);
 $8 = (($7) + 8|0);
 while(1) {
  $9 = HEAP32[$__is>>2]|0;
  $10 = (($9) + -12|0);
  $11 = HEAP32[$10>>2]|0;
  $$sum = (($11) + 24)|0;
  $12 = (($__is) + ($$sum)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)==($17|0);
  if ($18) {
   $19 = HEAP32[$13>>2]|0;
   $20 = (($19) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_ii[$21 & 127]($13)|0);
   $23 = ($22|0)==(-1);
   if ($23) {
    label = 6;
    break;
   } else {
    $$0$i14 = $22;
   }
  } else {
   $24 = HEAP8[$15>>0]|0;
   $25 = $24&255;
   $$0$i14 = $25;
  }
  $33 = $$0$i14&255;
  $isascii1$i = ($33<<24>>24)>(-1);
  if (!($isascii1$i)) {
   label = 7;
   break;
  }
  $sext = $$0$i14 << 24;
  $34 = $sext >> 24;
  $35 = HEAP32[$8>>2]|0;
  $36 = (($35) + ($34<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 & 8192;
  $39 = ($38<<16>>16)==(0);
  if ($39) {
   label = 7;
   break;
  }
  $40 = HEAP32[$__is>>2]|0;
  $41 = (($40) + -12|0);
  $42 = HEAP32[$41>>2]|0;
  $$sum5 = (($42) + 24)|0;
  $43 = (($__is) + ($$sum5)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($46|0)==($48|0);
  if ($49) {
   $50 = HEAP32[$44>>2]|0;
   $51 = (($50) + 40|0);
   $52 = HEAP32[$51>>2]|0;
   (FUNCTION_TABLE_ii[$52 & 127]($44)|0);
   continue;
  } else {
   $53 = (($46) + 1|0);
   HEAP32[$45>>2] = $53;
   continue;
  }
 }
 if ((label|0) == 6) {
  $26 = HEAP32[$__is>>2]|0;
  $27 = (($26) + -12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($__is) + ($28)|0);
  $$sum6 = (($28) + 16)|0;
  $30 = (($__is) + ($$sum6)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 | 2;
  __ZNSt3__18ios_base5clearEj($29,$32);
  STACKTOP = sp;return ($__is|0);
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($__is|0);
 }
 return 0|0;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,720);
 $0 = (($this) + 64|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vtt>>2]|0;
 HEAP32[$this>>2] = $0;
 $1 = (($vtt) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + ($4)|0);
 HEAP32[$5>>2] = $2;
 $6 = (($vtt) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (($this) + 12|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((992 + 8|0));
 $0 = (($this) + 32|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($this) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  HEAP32[$2>>2] = $5;
 }
 $7 = $__wch & 24;
 do {
  if ((($7|0) == 24)) {
   if ((($__way|0) == 2)) {
    label = 11;
    break;
   } else if ((($__way|0) == 0)) {
    $68 = 0;$69 = 0;
    break;
   } else if (!((($__way|0) == 1))) {
    label = 15;
    break;
   }
   $17 = $agg$result;
   $18 = $17;
   HEAP32[$18>>2] = 0;
   $19 = (($17) + 4)|0;
   $20 = $19;
   HEAP32[$20>>2] = 0;
   $21 = (($agg$result) + 8|0);
   $22 = $21;
   $23 = $22;
   HEAP32[$23>>2] = -1;
   $24 = (($22) + 4)|0;
   $25 = $24;
   HEAP32[$25>>2] = -1;
   STACKTOP = sp;return;
  } else if ((($7|0) == 0)) {
   $8 = $agg$result;
   $9 = $8;
   HEAP32[$9>>2] = 0;
   $10 = (($8) + 4)|0;
   $11 = $10;
   HEAP32[$11>>2] = 0;
   $12 = (($agg$result) + 8|0);
   $13 = $12;
   $14 = $13;
   HEAP32[$14>>2] = -1;
   $15 = (($13) + 4)|0;
   $16 = $15;
   HEAP32[$16>>2] = -1;
   STACKTOP = sp;return;
  } else {
   if ((($__way|0) == 2)) {
    label = 11;
    break;
   } else if ((($__way|0) == 0)) {
    $68 = 0;$69 = 0;
    break;
   } else if (!((($__way|0) == 1))) {
    label = 15;
    break;
   }
   $26 = $__wch & 8;
   $27 = ($26|0)==(0);
   if ($27) {
    $37 = HEAP32[$4>>2]|0;
    $38 = (($this) + 20|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $37;
    $41 = $39;
    $42 = (($40) - ($41))|0;
    $43 = ($42|0)<(0);
    $44 = $43 << 31 >> 31;
    $68 = $42;$69 = $44;
    break;
   } else {
    $28 = (($this) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($this) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $29;
    $33 = $31;
    $34 = (($32) - ($33))|0;
    $35 = ($34|0)<(0);
    $36 = $35 << 31 >> 31;
    $68 = $34;$69 = $36;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $59 = $agg$result;
  $60 = $59;
  HEAP32[$60>>2] = 0;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = 0;
  $63 = (($agg$result) + 8|0);
  $64 = $63;
  $65 = $64;
  HEAP32[$65>>2] = -1;
  $66 = (($64) + 4)|0;
  $67 = $66;
  HEAP32[$67>>2] = -1;
  STACKTOP = sp;return;
 }
 if ((label|0) == 11) {
  $45 = HEAP32[$2>>2]|0;
  $46 = (($this) + 32|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 & 1;
  $49 = ($48<<24>>24)==(0);
  if ($49) {
   $52 = (($46) + 1|0);
   $54 = $52;
  } else {
   $50 = (($this) + 40|0);
   $51 = HEAP32[$50>>2]|0;
   $54 = $51;
  }
  $53 = $45;
  $55 = $54;
  $56 = (($53) - ($55))|0;
  $57 = ($56|0)<(0);
  $58 = $57 << 31 >> 31;
  $68 = $56;$69 = $58;
 }
 $70 = (_i64Add(($68|0),($69|0),($0|0),($1|0))|0);
 $71 = tempRet0;
 $72 = ($71|0)<(0);
 if (!($72)) {
  $73 = HEAP32[$2>>2]|0;
  $74 = (($this) + 32|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75 & 1;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $80 = (($74) + 1|0);
   $82 = $80;
  } else {
   $78 = (($this) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $82 = $79;
  }
  $81 = $73;
  $83 = $82;
  $84 = (($81) - ($83))|0;
  $85 = ($84|0)<(0);
  $86 = $85 << 31 >> 31;
  $87 = ($86|0)<($71|0);
  $88 = ($86|0)==($71|0);
  $89 = ($84>>>0)<($70>>>0);
  $90 = $88 & $89;
  $91 = $87 | $90;
  if (!($91)) {
   $101 = ($70|0)==(0);
   $102 = ($71|0)==(0);
   $103 = $101 & $102;
   if (!($103)) {
    $104 = $__wch & 8;
    $105 = ($104|0)==(0);
    if (!($105)) {
     $106 = (($this) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==(0|0);
     if ($108) {
      $109 = $agg$result;
      $110 = $109;
      HEAP32[$110>>2] = 0;
      $111 = (($109) + 4)|0;
      $112 = $111;
      HEAP32[$112>>2] = 0;
      $113 = (($agg$result) + 8|0);
      $114 = $113;
      $115 = $114;
      HEAP32[$115>>2] = -1;
      $116 = (($114) + 4)|0;
      $117 = $116;
      HEAP32[$117>>2] = -1;
      STACKTOP = sp;return;
     }
    }
    $118 = $__wch & 16;
    $119 = ($118|0)==(0);
    if (!($119)) {
     $120 = HEAP32[$4>>2]|0;
     $121 = ($120|0)==(0|0);
     if ($121) {
      $122 = $agg$result;
      $123 = $122;
      HEAP32[$123>>2] = 0;
      $124 = (($122) + 4)|0;
      $125 = $124;
      HEAP32[$125>>2] = 0;
      $126 = (($agg$result) + 8|0);
      $127 = $126;
      $128 = $127;
      HEAP32[$128>>2] = -1;
      $129 = (($127) + 4)|0;
      $130 = $129;
      HEAP32[$130>>2] = -1;
      STACKTOP = sp;return;
     }
    }
   }
   $131 = $__wch & 8;
   $132 = ($131|0)==(0);
   if (!($132)) {
    $133 = (($this) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + ($70)|0);
    $136 = HEAP32[$2>>2]|0;
    $137 = (($this) + 12|0);
    HEAP32[$137>>2] = $135;
    $138 = (($this) + 16|0);
    HEAP32[$138>>2] = $136;
   }
   $139 = $__wch & 16;
   $140 = ($139|0)==(0);
   if (!($140)) {
    $141 = (($this) + 20|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + ($70)|0);
    HEAP32[$4>>2] = $143;
   }
   $144 = $agg$result;
   $145 = $144;
   HEAP32[$145>>2] = 0;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = 0;
   $148 = (($agg$result) + 8|0);
   $149 = $148;
   $150 = $149;
   HEAP32[$150>>2] = $70;
   $151 = (($149) + 4)|0;
   $152 = $151;
   HEAP32[$152>>2] = $71;
   STACKTOP = sp;return;
  }
 }
 $92 = $agg$result;
 $93 = $92;
 HEAP32[$93>>2] = 0;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = 0;
 $96 = (($agg$result) + 8|0);
 $97 = $96;
 $98 = $97;
 HEAP32[$98>>2] = -1;
 $99 = (($97) + 4)|0;
 $100 = $99;
 HEAP32[$100>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__sp) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiiii[$2 & 31]($agg$result,$this,$6,$9,0,$__wch);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  HEAP32[$0>>2] = $3;
 }
 $5 = (($this) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($this) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = ($10>>>0)<($11>>>0);
 if ($12) {
  HEAP32[$9>>2] = $11;
 }
 $13 = (($this) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$9>>2]|0;
 $16 = ($14>>>0)<($15>>>0);
 if (!($16)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP8[$14>>0]|0;
 $18 = $17&255;
 $$0 = $18;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  HEAP32[$0>>2] = $3;
 }
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($this) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if (!($9)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($__c|0)==(-1);
 if ($10) {
  $11 = (($8) + -1|0);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$5>>2] = $6;
  HEAP32[$7>>2] = $11;
  $13 = (($this) + 16|0);
  HEAP32[$13>>2] = $12;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($this) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 16;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $__c&255;
  $19 = (($8) + -1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($18<<24>>24)==($20<<24>>24);
  if (!($21)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = HEAP32[$7>>2]|0;
 $23 = (($22) + -1|0);
 $24 = HEAP32[$0>>2]|0;
 HEAP32[$7>>2] = $23;
 $25 = (($this) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = $__c&255;
 $27 = HEAP32[$7>>2]|0;
 HEAP8[$27>>0] = $26;
 $$0 = $__c;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($this) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($this) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $13 = (($this) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 16;
  $16 = ($15|0)==(0);
  if ($16) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = (($this) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $9;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = (($this) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
  $25 = (($24) - ($20))|0;
  $26 = (($this) + 32|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($26,0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 & 1;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   $32 = 10;
  } else {
   $30 = HEAP32[$26>>2]|0;
   $31 = $30 & -2;
   $phitmp$i = (($31) + -1)|0;
   $32 = $phitmp$i;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($26,$32,0);
  $33 = HEAP8[$26>>0]|0;
  $34 = $33 & 1;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   $38 = (($26) + 1|0);
   $47 = $38;
  } else {
   $36 = (($this) + 40|0);
   $37 = HEAP32[$36>>2]|0;
   $47 = $37;
  }
  $39 = HEAP8[$26>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $44 = $39&255;
   $45 = $44 >>> 1;
   $48 = $45;
  } else {
   $42 = (($this) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $48 = $43;
  }
  $46 = (($47) + ($48)|0);
  HEAP32[$8>>2] = $47;
  HEAP32[$17>>2] = $47;
  HEAP32[$10>>2] = $46;
  $49 = HEAP32[$8>>2]|0;
  $50 = (($49) + ($21)|0);
  HEAP32[$8>>2] = $50;
  $51 = HEAP32[$17>>2]|0;
  $52 = (($51) + ($25)|0);
  HEAP32[$22>>2] = $52;
 }
 $53 = HEAP32[$8>>2]|0;
 $54 = (($53) + 1|0);
 $55 = (($this) + 44|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($54>>>0)<($56>>>0);
 $58 = $57 ? $56 : $54;
 HEAP32[$55>>2] = $58;
 $59 = (($this) + 48|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 8;
 $62 = ($61|0)==(0);
 if (!($62)) {
  $63 = (($this) + 32|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $69 = (($63) + 1|0);
   $71 = $69;
  } else {
   $67 = (($this) + 40|0);
   $68 = HEAP32[$67>>2]|0;
   $71 = $68;
  }
  $70 = (($71) + ($7)|0);
  $72 = HEAP32[$55>>2]|0;
  HEAP32[$3>>2] = $71;
  HEAP32[$1>>2] = $70;
  $73 = (($this) + 16|0);
  HEAP32[$73>>2] = $72;
 }
 $74 = HEAP32[$8>>2]|0;
 $75 = HEAP32[$10>>2]|0;
 $76 = ($74|0)==($75|0);
 if ($76) {
  $77 = HEAP32[$this>>2]|0;
  $78 = (($77) + 52|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $__c & 255;
  $81 = (FUNCTION_TABLE_iii[$79 & 31]($this,$80)|0);
  $$0 = $81;
  STACKTOP = sp;return ($$0|0);
 } else {
  $82 = $__c&255;
  $83 = (($74) + 1|0);
  HEAP32[$8>>2] = $83;
  HEAP8[$74>>0] = $82;
  $84 = $__c & 255;
  $$0 = $84;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = $0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($3))|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 63]($0,$__ob,$10)|0);
  $16 = ($15|0)==($10|0);
  if (!($16)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $17 = ($__ns$0|0)>(0);
 do {
  if ($17) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $18 = HEAP32[$__s>>2]|0;
   $19 = HEAP8[$__sp>>0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $24 = (($__sp) + 1|0);
    $28 = $24;
   } else {
    $22 = (($__sp) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $28 = $23;
   }
   $25 = HEAP32[$18>>2]|0;
   $26 = (($25) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$27 & 63]($18,$28,$__ns$0)|0);
   $30 = ($29|0)==($__ns$0|0);
   if ($30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $31 = (($2) - ($9))|0;
 $32 = ($31|0)>(0);
 if ($32) {
  $33 = HEAP32[$__s>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 48|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_iiii[$36 & 63]($33,$__op,$31)|0);
  $38 = ($37|0)==($31|0);
  if (!($38)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 $39 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$result>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$__s)|0);
 $1 = (($this) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP8[$0>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $11 = (($0) + 1|0);
   $20 = $11;
  } else {
   $9 = (($this) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $20 = $10;
  }
  $12 = HEAP8[$0>>0]|0;
  $13 = $12 & 1;
  $14 = ($13<<24>>24)==(0);
  if ($14) {
   $17 = $12&255;
   $18 = $17 >>> 1;
   $21 = $18;
  } else {
   $15 = (($this) + 36|0);
   $16 = HEAP32[$15>>2]|0;
   $21 = $16;
  }
  $19 = (($20) + ($21)|0);
  HEAP32[$1>>2] = $19;
  $22 = HEAP8[$0>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = (($0) + 1|0);
   $36 = $27;
  } else {
   $25 = (($this) + 40|0);
   $26 = HEAP32[$25>>2]|0;
   $36 = $26;
  }
  $28 = HEAP8[$0>>0]|0;
  $29 = $28 & 1;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $33 = (($0) + 1|0);
   $38 = $33;
  } else {
   $31 = (($this) + 40|0);
   $32 = HEAP32[$31>>2]|0;
   $38 = $32;
  }
  $34 = HEAP32[$1>>2]|0;
  $35 = (($this) + 8|0);
  HEAP32[$35>>2] = $36;
  $37 = (($this) + 12|0);
  HEAP32[$37>>2] = $38;
  $39 = (($this) + 16|0);
  HEAP32[$39>>2] = $34;
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = $40 & 16;
 $42 = ($41|0)==(0);
 if ($42) {
  STACKTOP = sp;return;
 }
 $43 = HEAP8[$0>>0]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $58 = $49;
 } else {
  $46 = (($this) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $58 = $47;
 }
 $50 = HEAP8[$0>>0]|0;
 $51 = $50 & 1;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  $55 = (($0) + 1|0);
  $57 = $55;
 } else {
  $53 = (($this) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  $57 = $54;
 }
 $56 = (($57) + ($58)|0);
 HEAP32[$1>>2] = $56;
 $59 = HEAP8[$0>>0]|0;
 $60 = $59 & 1;
 $61 = ($60<<24>>24)==(0);
 if ($61) {
  $64 = 10;
 } else {
  $62 = HEAP32[$0>>2]|0;
  $63 = $62 & -2;
  $phitmp$i = (($63) + -1)|0;
  $64 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$64,0);
 $65 = HEAP8[$0>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $70 = (($0) + 1|0);
  $88 = $70;
 } else {
  $68 = (($this) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  $88 = $69;
 }
 $71 = HEAP8[$0>>0]|0;
 $72 = $71 & 1;
 $73 = ($72<<24>>24)==(0);
 if ($73) {
  $76 = (($0) + 1|0);
  $85 = $76;
 } else {
  $74 = (($this) + 40|0);
  $75 = HEAP32[$74>>2]|0;
  $85 = $75;
 }
 $77 = HEAP8[$0>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if ($79) {
  $82 = $77&255;
  $83 = $82 >>> 1;
  $86 = $83;
 } else {
  $80 = (($this) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $86 = $81;
 }
 $84 = (($85) + ($86)|0);
 $87 = (($this) + 24|0);
 HEAP32[$87>>2] = $88;
 $89 = (($this) + 20|0);
 HEAP32[$89>>2] = $88;
 $90 = (($this) + 28|0);
 HEAP32[$90>>2] = $84;
 $91 = HEAP32[$2>>2]|0;
 $92 = $91 & 3;
 $93 = ($92|0)==(0);
 if ($93) {
  STACKTOP = sp;return;
 }
 $94 = HEAP32[$87>>2]|0;
 $95 = (($94) + ($58)|0);
 HEAP32[$87>>2] = $95;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIiED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1144 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIiED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIiED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIiEC2EPi($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1144 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $$$$i$i$i$i = 0, $$$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p = sp;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($__p,$this,$__v,$1,$2);
 $3 = HEAP32[$__p>>2]|0;
 $4 = ($3|0)==($2|0);
 if (!($4)) {
  $5 = (($3) + 16|0);
  $6 = HEAP8[$__v>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $11 = $6&255;
   $12 = $11 >>> 1;
   $34 = $12;
  } else {
   $9 = (($__v) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $34 = $10;
  }
  $13 = HEAP8[$5>>0]|0;
  $14 = $13 & 1;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $18 = $13&255;
   $19 = $18 >>> 1;
   $32 = $19;
  } else {
   $16 = (($3) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $32 = $17;
  }
  $20 = HEAP8[$__v>>0]|0;
  $21 = $20 & 1;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $25 = (($__v) + 1|0);
   $36 = $25;
  } else {
   $23 = (($__v) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $36 = $24;
  }
  $26 = HEAP8[$5>>0]|0;
  $27 = $26 & 1;
  $28 = ($27<<24>>24)==(0);
  if ($28) {
   $31 = (($5) + 1|0);
   $37 = $31;
  } else {
   $29 = (($3) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $37 = $30;
  }
  $33 = ($32>>>0)<($34>>>0);
  $35 = $33 ? $32 : $34;
  $38 = (_memcmp($36,$37,$35)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = ($34>>>0)<($32>>>0);
   $$$i$i$i$i = $33&1;
   $$$$i$i$i$i = $40 ? -1 : $$$i$i$i$i;
   $41 = $$$$i$i$i$i;
  } else {
   $41 = $38;
  }
  $42 = ($41|0)<(0);
  if (!($42)) {
   $43 = HEAP32[$__p>>2]|0;
   HEAP32[$agg$result>>2] = $43;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$agg$result>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $$$$i$i$i$i = 0, $$$i$i$i$i = 0, $$0$ph5 = 0, $$0$ph7 = 0, $$01$ph6 = 0, $$013 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__root|0)==(0|0);
 if ($0) {
  $$0$ph5 = $__result;
  HEAP32[$agg$result>>2] = $$0$ph5;
  STACKTOP = sp;return;
 }
 $1 = HEAP8[$__v>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = $1&255;
 $5 = $4 >>> 1;
 $6 = $1 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = (($__v) + 1|0);
 $9 = (($__v) + 8|0);
 $10 = (($__v) + 4|0);
 $$0$ph7 = $__result;$$01$ph6 = $__root;
 L4: while(1) {
  $$013 = $$01$ph6;
  while(1) {
   $11 = (($$013) + 16|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 & 1;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $17 = $12&255;
    $18 = $17 >>> 1;
    $29 = $18;
   } else {
    $15 = (($$013) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $29 = $16;
   }
   if ($3) {
    $27 = $5;
   } else {
    $19 = HEAP32[$10>>2]|0;
    $27 = $19;
   }
   $20 = HEAP8[$11>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($11) + 1|0);
    $31 = $25;
   } else {
    $23 = (($$013) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $31 = $24;
   }
   if ($7) {
    $32 = $8;
   } else {
    $26 = HEAP32[$9>>2]|0;
    $32 = $26;
   }
   $28 = ($27>>>0)<($29>>>0);
   $30 = $28 ? $27 : $29;
   $33 = (_memcmp($31,$32,$30)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = ($29>>>0)<($27>>>0);
    $$$i$i$i$i = $28&1;
    $$$$i$i$i$i = $35 ? -1 : $$$i$i$i$i;
    $36 = $$$$i$i$i$i;
   } else {
    $36 = $33;
   }
   $37 = ($36|0)<(0);
   if (!($37)) {
    break;
   }
   $40 = (($$013) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    $$0$ph5 = $$0$ph7;
    label = 19;
    break L4;
   } else {
    $$013 = $41;
   }
  }
  $38 = HEAP32[$$013>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$0$ph5 = $$013;
   label = 19;
   break;
  } else {
   $$0$ph7 = $$013;$$01$ph6 = $38;
  }
 }
 if ((label|0) == 19) {
  HEAP32[$agg$result>>2] = $$0$ph5;
  STACKTOP = sp;return;
 }
}
function __ZN5MeCab7whatlog3strEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 136|0);
 $2 = (($this) + 4|0);
 __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0,$2);
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $9 = (($1) + 1|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$1>>0] = 0;
 } else {
  $6 = (($this) + 144|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP8[$7>>0] = 0;
  $8 = (($this) + 140|0);
  HEAP32[$8>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1,0);
 ;HEAP32[$1+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $10 = HEAP8[$1>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = (($1) + 1|0);
  $16 = $15;
  STACKTOP = sp;return ($16|0);
 } else {
  $13 = (($this) + 144|0);
  $14 = HEAP32[$13>>2]|0;
  $16 = $14;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 16;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (($this) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($this) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5>>>0)<($7>>>0);
  if ($8) {
   HEAP32[$4>>2] = $7;
  }
  $9 = (($this) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($agg$result,$10,$11);
  STACKTOP = sp;return;
 }
 $12 = $1 & 8;
 $13 = ($12|0)==(0);
 if ($13) {
  ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
  STACKTOP = sp;return;
 } else {
  $14 = (($this) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($this) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($agg$result,$15,$17);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $15 = (0 - ($0))|0;
 $scevgep = (($__last) + ($15)|0);
 $scevgep3 = $scevgep;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $16 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $16;
  $17 = (($$02) + 1|0);
  $18 = (($__p$01) + 1|0);
  $19 = ($17|0)==($__last|0);
  if ($19) {
   break;
  } else {
   $$02 = $17;$__p$01 = $18;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($scevgep3)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9ConnectorEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1192 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9ConnectorEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9ConnectorEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1256 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9ConnectorEEC2EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1192 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEEC2EPS4_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1256 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1352 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdaPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayIcED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayIcEC2EPc($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1352 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPcNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPcS2_EENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseINS_4pairIPcS2_EENS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_4pairIPcS2_EENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -8|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 3;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZN5MeCab12StringBufferC2EPcj($this,$_s,$_l) {
 $this = $this|0;
 $_s = $_s|0;
 $_l = $_l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((402864 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = $_l;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = $_s;
 $3 = (($this) + 16|0);
 HEAP8[$3>>0] = 0;
 $4 = (($this) + 17|0);
 HEAP8[$4>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab9logsumexpEddb($x,$y,$flg) {
 $x = +$x;
 $y = +$y;
 $flg = $flg|0;
 var $$0 = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($flg) {
  $$0 = $y;
 } else {
  $0 = $y < $x;
  $1 = $0 ? $y : $x;
  $2 = $x < $y;
  $3 = $2 ? $y : $x;
  $4 = $1 + 50.0;
  $5 = $3 > $4;
  if ($5) {
   $$0 = $3;
  } else {
   $6 = $1 - $3;
   $7 = (+Math_exp((+$6)));
   $8 = $7 + 1.0;
   $9 = (+Math_log((+$8)));
   $10 = $3 + $9;
   $$0 = $10;
  }
 }
 STACKTOP = sp;return (+$$0);
}
function __ZN5MeCab9ConnectorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1408 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (__Znwj(180)|0);
 __ZN5MeCab4MmapIsEC1Ev($1);
 __ZN5MeCab10scoped_ptrINS_4MmapIsEEEC1EPS2_($0,$1);
 $2 = (($this) + 12|0);
 $3 = (($this) + 20|0);
 $4 = $2;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 __ZN5MeCab7whatlogC1Ev($3);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIsEEEC1EPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_4MmapIsEEEC2EPS2_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIsEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab4MmapIsEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIsEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_4MmapIsEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9ConnectorD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9ConnectorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9ConnectorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9ConnectorD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9ConnectorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1408 + 8|0));
 __ZN5MeCab9Connector5closeEv($this);
 $0 = (($this) + 20|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 4|0);
 __ZN5MeCab10scoped_ptrINS_4MmapIsEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIsEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1456 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIsEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_4MmapIsEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIsEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1520 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 12|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = (($this) + 24|0);
 __ZN5MeCab7whatlogC1Ev($2);
 $3 = (($this) + 172|0);
 HEAP32[$3>>2] = -1;
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIsED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab4MmapIsED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIsED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab4MmapIsED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIsED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1520 + 8|0));
 __ZN5MeCab4MmapIsE5closeEv($this);
 $0 = (($this) + 24|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIsE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($this) + 172|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (_close(($1|0))|0);
  HEAP32[$0>>2] = -1;
 }
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = 0;
  STACKTOP = sp;return;
 }
 $6 = (($this) + 176|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  $9 = (($this) + 12|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 & 1;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   $15 = (($9) + 1|0);
   $16 = $15;
  } else {
   $13 = (($this) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $16 = $14;
  }
  $17 = (_open(($16|0),2,($vararg_buffer|0))|0);
  $18 = ($17|0)>(-1);
  if ($18) {
   $19 = HEAP32[$3>>2]|0;
   $20 = (($this) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   (_write(($17|0),($19|0),($21|0))|0);
   (_close(($17|0))|0);
  }
 }
 $22 = HEAP32[$3>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  HEAP32[$3>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdaPv($22);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIsEEEC2EPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1456 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab4wlogC2EPNS_7whatlogE($this,$what) {
 $this = $this|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $what;
 $0 = HEAP32[$what>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($what) + ($2)|0);
 __ZNSt3__18ios_base5clearEj($3,0);
 STACKTOP = sp;return;
}
function __ZN5MeCab7whatlogD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 136|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,1608);
 $0 = (($this) + 56|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vtt>>2]|0;
 HEAP32[$this>>2] = $0;
 $1 = (($vtt) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + ($4)|0);
 HEAP32[$5>>2] = $2;
 $6 = (($this) + 4|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZN5MeCab7whatlogC2Ev($this) {
 $this = $this|0;
 var $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 56|0);
 $2 = (($this) + 4|0);
 HEAP32[$this>>2] = ((1712 + 12|0));
 $3 = (($this) + 56|0);
 HEAP32[$3>>2] = ((1712 + 32|0));
 $4 = HEAP32[$this>>2]|0;
 $5 = (($4) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($this) + ($6)|0);
 __ZNSt3__18ios_base4initEPv($7,$2);
 $$sum$i$i = (($6) + 72)|0;
 $8 = (($this) + ($$sum$i$i)|0);
 HEAP32[$8>>2] = 0;
 $$sum1$i$i = (($6) + 76)|0;
 $9 = (($this) + ($$sum1$i$i)|0);
 HEAP32[$9>>2] = -1;
 HEAP32[$this>>2] = ((1568 + 12|0));
 HEAP32[$1>>2] = ((1568 + 32|0));
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($2);
 HEAP32[$2>>2] = ((992 + 8|0));
 $10 = (($this) + 36|0);
 $11 = (($this) + 52|0);
 ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 HEAP32[$11>>2] = 16;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($2,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $12 = (($this) + 136|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN5MeCab12getLastErrorEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z14getGlobalErrorv()|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab10scoped_ptrINS_6TaggerEEC1EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_6TaggerEEC2EPS1_($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_6TaggerEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrINS_6TaggerEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_6TaggerEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab5ParamC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5ParamC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Param4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 64|0);
 $1 = (__ZN5MeCab7whatlog3strEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab5Param3getIbEET_PKc($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $it = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $it = sp + 36|0;
 $0 = sp + 24|0;
 $r = sp + 16|0;
 $1 = sp;
 $2 = (_strlen(($key|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$key,$2);
 $3 = (($this) + 4|0);
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($it,$3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $4 = (($this) + 8|0);
 $5 = HEAP32[$it>>2]|0;
 $6 = ($5|0)==($4|0);
 if ($6) {
  $7 = (__Znwj(1)|0);
  HEAP8[$7>>0] = 0;
  __ZN5MeCab10scoped_ptrIbEC1EPb($r,$7);
  $8 = (__ZNK5MeCab10scoped_ptrIbEdeEv($r)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  __ZN5MeCab10scoped_ptrIbED1Ev($r);
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $11 = (($5) + 28|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($1,$11);
  $12 = (__ZN12_GLOBAL__N_112lexical_castIbNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($1)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNK5MeCab5Param4helpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($0) + 1|0);
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 } else {
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZNK5MeCab5Param7versionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($0) + 1|0);
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 } else {
  $4 = (($this) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZNK5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_19ModelImpl4openERKNS_5ParamE($this,$param) {
 $this = $this|0;
 $param = $param|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (($this) + 8|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_6WriterEEptEv($0)|0);
 $2 = (__ZN5MeCab6Writer4openERKNS_5ParamE($1,$param)|0);
 if ($2) {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (__ZN5MeCab7Viterbi4openERKNS_5ParamE($4,$param)|0);
  if ($5) {
   $28 = (__ZN5MeCab17load_request_typeERKNS_5ParamE($param)|0);
   $29 = (($this) + 16|0);
   HEAP32[$29>>2] = $28;
   $30 = (+__ZNK5MeCab5Param3getIdEET_PKc($param,3768));
   $31 = (($this) + 24|0);
   HEAPF64[$31>>3] = $30;
   $32 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12is_availableEv($this)|0);
   $$0 = $32;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $6 = (($this) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN5MeCab7Viterbi4whatEv($7)|0);
 $9 = (_strlen(($8|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($error,$8,$9);
 $10 = HEAP8[$error>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $17 = $16;
 } else {
  $13 = (($error) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $18 = ($17|0)==(0);
 if (!($18)) {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($error,3760)|0);
 }
 $19 = (__ZNK5MeCab10scoped_ptrINS_6WriterEEptEv($0)|0);
 $20 = (__ZN5MeCab6Writer4whatEv($19)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($error,$20)|0);
 $21 = HEAP8[$error>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $26 = (($error) + 1|0);
  $27 = $26;
 } else {
  $24 = (($error) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $27 = $25;
 }
 __Z14setGlobalErrorPKc($27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($agg$result,$this,$key) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $it = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $it = sp + 36|0;
 $0 = sp + 24|0;
 $r = sp + 16|0;
 $1 = sp;
 $2 = (_strlen(($key|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$key,$2);
 $3 = (($this) + 4|0);
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($it,$3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $4 = (($this) + 8|0);
 $5 = HEAP32[$it>>2]|0;
 $6 = ($5|0)==($4|0);
 if ($6) {
  $7 = (__Znwj(12)|0);
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC1EPS7_($r,$7);
  $8 = (__ZNK5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEdeEv($r)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$8);
  __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED1Ev($r);
  STACKTOP = sp;return;
 } else {
  $9 = (($5) + 28|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($1,$9);
  __ZN12_GLOBAL__N_112lexical_castINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_EET_T0_($agg$result,$1);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZN5MeCab15ostream_wrapperC1EPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab15ostream_wrapperC2EPKc($this,$filename);
 STACKTOP = sp;return;
}
function __ZNK5MeCab15ostream_wrapperdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab5Param9rest_argsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1ERKS8_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($this,$__x);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_6TaggerEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab15istream_wrapperC1EPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab15istream_wrapperC2EPKc($this,$filename);
 STACKTOP = sp;return;
}
function __ZNK5MeCab15istream_wrapperdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab15istream_wrapperptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab18scoped_fixed_arrayIcLi8192EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab18scoped_fixed_arrayIcLi8192EEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab15istream_wrapperD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab15istream_wrapperD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab15ostream_wrapperD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab15ostream_wrapperD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab5ParamD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5ParamD2Ev($this);
 STACKTOP = sp;return;
}
function _mecab_do2($args) {
 $args = $args|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$233 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$off = 0, $$sum = 0, $$sum216 = 0, $$sum217 = 0, $$sum218 = 0, $$sum219 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d$0221 = 0, $ibuf_data = 0, $ifs = 0;
 var $line = 0, $model = 0, $ofilename = 0, $ofs = 0, $param = 0, $rest = 0, $sentence = 0, $tagger = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $0 = sp + 324|0;
 $param = sp + 112|0;
 $model = sp + 104|0;
 $ofilename = sp + 88|0;
 $ofs = sp + 80|0;
 $rest = sp + 64|0;
 $1 = sp + 52|0;
 $2 = sp + 48|0;
 $ibuf_data = sp + 40|0;
 $tagger = sp + 32|0;
 $ifs = sp + 24|0;
 $sentence = sp + 12|0;
 $line = sp;
 __ZN5MeCab5ParamC1Ev($param);
 $3 = (__ZN5MeCab5Param4openEPKcPKNS_6OptionE($param,$args,1752)|0);
 if (!($3)) {
  $4 = (__ZN5MeCab5Param4whatEv($param)|0);
  $5 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,$4)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + -12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($5) + ($8)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$9);
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iii[$13 & 31]($10,10)|0);
  __ZNSt3__16localeD2Ev($0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($5,$14)|0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($5)|0);
  $$5 = 1;
  __ZN5MeCab5ParamD1Ev($param);
  STACKTOP = sp;return ($$5|0);
 }
 $15 = (__ZNK5MeCab5Param3getIbEET_PKc($param,2272)|0);
 if ($15) {
  $16 = (__ZNK5MeCab5Param4helpEv($param)|0);
  $17 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,$16)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + -12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($17) + ($20)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$21);
  $22 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (FUNCTION_TABLE_iii[$25 & 31]($22,10)|0);
  __ZNSt3__16localeD2Ev($0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($17,$26)|0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($17)|0);
  $$5 = 0;
  __ZN5MeCab5ParamD1Ev($param);
  STACKTOP = sp;return ($$5|0);
 }
 $27 = (__ZNK5MeCab5Param3getIbEET_PKc($param,2280)|0);
 if ($27) {
  $28 = (__ZNK5MeCab5Param7versionEv($param)|0);
  $29 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,$28)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$33);
  $34 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iii[$37 & 31]($34,10)|0);
  __ZNSt3__16localeD2Ev($0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($29,$38)|0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($29)|0);
  $$5 = 0;
  __ZN5MeCab5ParamD1Ev($param);
  STACKTOP = sp;return ($$5|0);
 }
 $39 = (__ZN5MeCab24load_dictionary_resourceEPNS_5ParamE($param)|0);
 if (!($39)) {
  $40 = (__ZN5MeCab5Param4whatEv($param)|0);
  $41 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,$40)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + -12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($41) + ($44)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$45);
  $46 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iii[$49 & 31]($46,10)|0);
  __ZNSt3__16localeD2Ev($0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($41,$50)|0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($41)|0);
  $$5 = 0;
  __ZN5MeCab5ParamD1Ev($param);
  STACKTOP = sp;return ($$5|0);
 }
 $51 = (__ZNK5MeCab5Param3getIiEET_PKc($param,2288)|0);
 $52 = ($51|0)>(0);
 if ($52) {
  $53 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405088,2304)|0);
  $54 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($53,2336)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + -12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($54) + ($57)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$58);
  $59 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 28|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (FUNCTION_TABLE_iii[$62 & 31]($59,10)|0);
  __ZNSt3__16localeD2Ev($0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($54,$63)|0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($54)|0);
 }
 $64 = (__Znwj(40)|0);
 __ZN5MeCab12_GLOBAL__N_19ModelImplC2Ev($64);
 __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEEC2EPS2_($model,$64);
 $65 = (__ZNK5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEEptEv($model)|0);
 $66 = (__ZN5MeCab12_GLOBAL__N_19ModelImpl4openERKNS_5ParamE($65,$param)|0);
 if ($66) {
  __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($ofilename,$param,2368);
  $78 = HEAP8[$ofilename>>0]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $83 = $78&255;
   $84 = $83 >>> 1;
   $85 = $84;
  } else {
   $81 = (($ofilename) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $85 = $82;
  }
  $86 = ($85|0)==(0);
  if ($86) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($ofilename,2376)|0);
  }
  $87 = (__ZNK5MeCab5Param3getIiEET_PKc($param,2384)|0);
  $$off = (($87) + -1)|0;
  $88 = ($$off>>>0)>(511);
  if ($88) {
   $89 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,2392)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + -12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($89) + ($92)|0);
   __ZNKSt3__18ios_base6getlocEv($0,$93);
   $94 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 28|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_iii[$97 & 31]($94,10)|0);
   __ZNSt3__16localeD2Ev($0);
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($89,$98)|0);
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($89)|0);
   $$3 = 1;
  } else {
   $99 = HEAP8[$ofilename>>0]|0;
   $100 = $99 & 1;
   $101 = ($100<<24>>24)==(0);
   if ($101) {
    $104 = (($ofilename) + 1|0);
    $105 = $104;
   } else {
    $102 = (($ofilename) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    $105 = $103;
   }
   __ZN5MeCab15ostream_wrapperC1EPKc($ofs,$105);
   $106 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) + -12|0);
   $109 = HEAP32[$108>>2]|0;
   $$sum = (($109) + 16)|0;
   $110 = (($106) + ($$sum)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 & 5;
   $113 = ($112|0)==(0);
   L36: do {
    if ($113) {
     $125 = (__ZNK5MeCab5Param3getIbEET_PKc($param,2440)|0);
     if ($125) {
      $126 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
      __ZNK5MeCab5Param11dump_configEPNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE($param,$126);
      $$2 = 1;
      break;
     }
     $127 = (__ZNK5MeCab5Param3getIbEET_PKc($param,2456)|0);
     if ($127) {
      $128 = (__ZNK5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEEptEv($model)|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_ii[$130 & 127]($128)|0);
      $132 = ($131|0)==(0|0);
      if ($132) {
       $$2 = 1;
       break;
      }
      $d$0221 = $131;
      while(1) {
       $133 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $134 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($133,2472)|0);
       $135 = HEAP32[$d$0221>>2]|0;
       $136 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($134,$135)|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = (($137) + -12|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = (($136) + ($139)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$140);
       $141 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = (($142) + 28|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = (FUNCTION_TABLE_iii[$144 & 31]($141,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($136,$145)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($136)|0);
       $146 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $147 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($146,2488)|0);
       $148 = (($d$0221) + 24|0);
       $149 = HEAP16[$148>>1]|0;
       $150 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEt($147,$149)|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (($151) + -12|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (($150) + ($153)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$154);
       $155 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = (($156) + 28|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = (FUNCTION_TABLE_iii[$158 & 31]($155,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($150,$159)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($150)|0);
       $160 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $161 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($160,2504)|0);
       $162 = (($d$0221) + 4|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($161,$163)|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($165) + -12|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = (($164) + ($167)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$168);
       $169 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = (($170) + 28|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = (FUNCTION_TABLE_iii[$172 & 31]($169,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($164,$173)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($164)|0);
       $174 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $175 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($174,2520)|0);
       $176 = (($d$0221) + 12|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($175,$177)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = (($179) + -12|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = (($178) + ($181)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$182);
       $183 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (($184) + 28|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = (FUNCTION_TABLE_iii[$186 & 31]($183,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($178,$187)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($178)|0);
       $188 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $189 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($188,2528)|0);
       $190 = (($d$0221) + 8|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($189,$191)|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = (($193) + -12|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = (($192) + ($195)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$196);
       $197 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = (($198) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = (FUNCTION_TABLE_iii[$200 & 31]($197,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($192,$201)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($192)|0);
       $202 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $203 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($202,2536)|0);
       $204 = (($d$0221) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($203,$205)|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = (($207) + -12|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = (($206) + ($209)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$210);
       $211 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = (($212) + 28|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = (FUNCTION_TABLE_iii[$214 & 31]($211,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($206,$215)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($206)|0);
       $216 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $217 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($216,2552)|0);
       $218 = (($d$0221) + 20|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($217,$219)|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (($221) + -12|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($220) + ($223)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$224);
       $225 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = (($226) + 28|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (FUNCTION_TABLE_iii[$228 & 31]($225,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($220,$229)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($220)|0);
       $230 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($231) + -12|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = (($230) + ($233)|0);
       __ZNKSt3__18ios_base6getlocEv($0,$234);
       $235 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
       $236 = HEAP32[$235>>2]|0;
       $237 = (($236) + 28|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = (FUNCTION_TABLE_iii[$238 & 31]($235,10)|0);
       __ZNSt3__16localeD2Ev($0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($230,$239)|0);
       (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($230)|0);
       $240 = (($d$0221) + 28|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = ($241|0)==(0|0);
       if ($242) {
        $$2 = 1;
        break L36;
       } else {
        $d$0221 = $241;
       }
      }
     }
     $243 = (__ZNK5MeCab5Param9rest_argsEv($param)|0);
     __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1ERKS8_($rest,$243);
     $244 = HEAP32[$rest>>2]|0;
     $245 = (($rest) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = ($244|0)==($246|0);
     if ($247) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,2376,1);
      $248 = HEAP32[$245>>2]|0;
      $249 = (($rest) + 8|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = ($248>>>0)<($250>>>0);
      if ($251) {
       $252 = ($248|0)==(0|0);
       if (!($252)) {
        ;HEAP32[$248+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$248+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$248+8>>2]=HEAP32[$1+8>>2]|0;
        ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
       }
       $253 = HEAP32[$245>>2]|0;
       $254 = (($253) + 12|0);
       HEAP32[$245>>2] = $254;
      } else {
       __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($rest,$1);
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     }
     HEAP32[$2>>2] = 5242880;
     $255 = (__ZNK5MeCab5Param3getIiEET_PKc($param,2568)|0);
     $256 = ($255|0)<(8192);
     $257 = $256 ? 8192 : $255;
     $258 = HEAP32[$2>>2]|0;
     $259 = ($257|0)<($258|0);
     $260 = $259 ? $257 : $258;
     $261 = (__ZNK5MeCab5Param3getIbEET_PKc($param,2592)|0);
     $262 = $260 << 3;
     $$ = $261 ? $262 : $260;
     $263 = (__Znaj($$)|0);
     __ZN5MeCab12scoped_arrayIcEC1EPc($ibuf_data,$263);
     $264 = (__ZNK5MeCab12scoped_arrayIcE3getEv($ibuf_data)|0);
     $265 = (__ZNK5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEEptEv($model)|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = (($266) + 12|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = (FUNCTION_TABLE_ii[$268 & 127]($265)|0);
     __ZN5MeCab10scoped_ptrINS_6TaggerEEC1EPS1_($tagger,$269);
     $270 = (__ZNK5MeCab10scoped_ptrINS_6TaggerEE3getEv($tagger)|0);
     $271 = ($270|0)==(0|0);
     if ($271) {
      $272 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,2600)|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = (($273) + -12|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = (($272) + ($275)|0);
      __ZNKSt3__18ios_base6getlocEv($0,$276);
      $277 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = (($278) + 28|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = (FUNCTION_TABLE_iii[$280 & 31]($277,10)|0);
      __ZNSt3__16localeD2Ev($0);
      (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($272,$281)|0);
      (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($272)|0);
      $$1 = 1;
     } else {
      $282 = HEAP32[$245>>2]|0;
      $283 = HEAP32[$rest>>2]|0;
      $284 = ($282|0)==($283|0);
      if ($284) {
       $$1 = 0;
      } else {
       $285 = HEAP8[$283>>0]|0;
       $286 = $285 & 1;
       $287 = ($286<<24>>24)==(0);
       if ($287) {
        $290 = (($283) + 1|0);
        $291 = $290;
       } else {
        $288 = (($283) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $291 = $289;
       }
       __ZN5MeCab15istream_wrapperC1EPKc($ifs,$291);
       $292 = (__ZNK5MeCab15istream_wrapperdeEv($ifs)|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = (($293) + -12|0);
       $295 = HEAP32[$294>>2]|0;
       $$sum216 = (($295) + 16)|0;
       $296 = (($292) + ($$sum216)|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = $297 & 5;
       $299 = ($298|0)==(0);
       L65: do {
        if ($299) {
         $300 = (($sentence) + 1|0);
         $301 = (($sentence) + 8|0);
         $302 = ($87|0)>(1);
         while(1) {
          if ($261) {
           ;HEAP32[$sentence+0>>2]=0|0;HEAP32[$sentence+4>>2]=0|0;HEAP32[$sentence+8>>2]=0|0;
           __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC1Ev($line);
           while(1) {
            $325 = (__ZNK5MeCab15istream_wrapperptEv($ifs)|0);
            $326 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($line)|0);
            $327 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE4sizeEv($line)|0);
            $328 = HEAP32[$325>>2]|0;
            $329 = (($328) + -12|0);
            $330 = HEAP32[$329>>2]|0;
            $331 = (($325) + ($330)|0);
            __ZNKSt3__18ios_base6getlocEv($0,$331);
            $332 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
            $333 = HEAP32[$332>>2]|0;
            $334 = (($333) + 28|0);
            $335 = HEAP32[$334>>2]|0;
            $336 = (FUNCTION_TABLE_iii[$335 & 31]($332,10)|0);
            __ZNSt3__16localeD2Ev($0);
            $337 = (__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic($325,$326,$327,$336)|0);
            $338 = HEAP32[$337>>2]|0;
            $339 = (($338) + -12|0);
            $340 = HEAP32[$339>>2]|0;
            $$sum219 = (($340) + 16)|0;
            $341 = (($337) + ($$sum219)|0);
            $342 = HEAP32[$341>>2]|0;
            $343 = $342 & 5;
            $344 = ($343|0)==(0);
            if (!($344)) {
             label = 51;
             break;
            }
            $350 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($line)|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($sentence,$350)|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($sentence,10);
            $351 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($line)|0);
            $352 = (_strcmp($351,2624)|0);
            $353 = ($352|0)==(0);
            if ($353) {
             break;
            }
            $354 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EEixEj($line,0)|0);
            $355 = HEAP8[$354>>0]|0;
            $356 = ($355<<24>>24)==(0);
            if ($356) {
             break;
            }
           }
           if ((label|0) == 51) {
            label = 0;
            $345 = (__ZNK5MeCab15istream_wrapperptEv($ifs)|0);
            $346 = HEAP32[$345>>2]|0;
            $347 = (($346) + -12|0);
            $348 = HEAP32[$347>>2]|0;
            $349 = (($345) + ($348)|0);
            __ZNSt3__18ios_base5clearEj($349,3);
           }
           $357 = HEAP8[$sentence>>0]|0;
           $358 = $357 & 1;
           $359 = ($358<<24>>24)==(0);
           $360 = HEAP32[$301>>2]|0;
           $$233 = $359 ? $300 : $360;
           (_strncpy(($264|0),($$233|0),($$|0))|0);
           __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($line);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($sentence);
          } else {
           $315 = (__ZNK5MeCab15istream_wrapperptEv($ifs)|0);
           $316 = HEAP32[$315>>2]|0;
           $317 = (($316) + -12|0);
           $318 = HEAP32[$317>>2]|0;
           $319 = (($315) + ($318)|0);
           __ZNKSt3__18ios_base6getlocEv($0,$319);
           $320 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
           $321 = HEAP32[$320>>2]|0;
           $322 = (($321) + 28|0);
           $323 = HEAP32[$322>>2]|0;
           $324 = (FUNCTION_TABLE_iii[$323 & 31]($320,10)|0);
           __ZNSt3__16localeD2Ev($0);
           (__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic($315,$264,$$,$324)|0);
          }
          $361 = (__ZNK5MeCab15istream_wrapperptEv($ifs)|0);
          $362 = HEAP32[$361>>2]|0;
          $363 = (($362) + -12|0);
          $364 = HEAP32[$363>>2]|0;
          $$sum217 = (($364) + 16)|0;
          $365 = (($361) + ($$sum217)|0);
          $366 = HEAP32[$365>>2]|0;
          $367 = $366 & 2;
          $368 = ($367|0)==(0);
          if (!($368)) {
           $369 = HEAP8[$264>>0]|0;
           $370 = ($369<<24>>24)==(0);
           if ($370) {
            $$0 = 0;
            break L65;
           }
          }
          $371 = (__ZNK5MeCab15istream_wrapperptEv($ifs)|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = (($372) + -12|0);
          $374 = HEAP32[$373>>2]|0;
          $$sum218 = (($374) + 16)|0;
          $375 = (($371) + ($$sum218)|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = $376 & 5;
          $378 = ($377|0)==(0);
          if (!($378)) {
           $379 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405088,2632)|0);
           $380 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($379,2656)|0);
           $381 = HEAP32[$380>>2]|0;
           $382 = (($381) + -12|0);
           $383 = HEAP32[$382>>2]|0;
           $384 = (($380) + ($383)|0);
           __ZNKSt3__18ios_base6getlocEv($0,$384);
           $385 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
           $386 = HEAP32[$385>>2]|0;
           $387 = (($386) + 28|0);
           $388 = HEAP32[$387>>2]|0;
           $389 = (FUNCTION_TABLE_iii[$388 & 31]($385,10)|0);
           __ZNSt3__16localeD2Ev($0);
           (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($380,$389)|0);
           (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($380)|0);
           $390 = (__ZNK5MeCab15istream_wrapperptEv($ifs)|0);
           $391 = HEAP32[$390>>2]|0;
           $392 = (($391) + -12|0);
           $393 = HEAP32[$392>>2]|0;
           $394 = (($390) + ($393)|0);
           __ZNSt3__18ios_base5clearEj($394,0);
          }
          $395 = (__ZNK5MeCab10scoped_ptrINS_6TaggerEEptEv($tagger)|0);
          if ($302) {
           $396 = HEAP32[$395>>2]|0;
           $397 = (($396) + 12|0);
           $398 = HEAP32[$397>>2]|0;
           $399 = (FUNCTION_TABLE_iiii[$398 & 63]($395,$87,$264)|0);
           $404 = $399;
          } else {
           $400 = HEAP32[$395>>2]|0;
           $401 = (($400) + 4|0);
           $402 = HEAP32[$401>>2]|0;
           $403 = (FUNCTION_TABLE_iii[$402 & 31]($395,$264)|0);
           $404 = $403;
          }
          $405 = ($404|0)==(0|0);
          if ($405) {
           break;
          }
          $421 = (__ZNK5MeCab15ostream_wrapperdeEv($ofs)|0);
          $422 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($421,$404)|0);
          (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($422)|0);
         }
         $406 = (__ZNK5MeCab10scoped_ptrINS_6TaggerEEptEv($tagger)|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = (($407) + 108|0);
         $409 = HEAP32[$408>>2]|0;
         $410 = (FUNCTION_TABLE_ii[$409 & 127]($406)|0);
         $411 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,$410)|0);
         $412 = HEAP32[$411>>2]|0;
         $413 = (($412) + -12|0);
         $414 = HEAP32[$413>>2]|0;
         $415 = (($411) + ($414)|0);
         __ZNKSt3__18ios_base6getlocEv($0,$415);
         $416 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = (($417) + 28|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = (FUNCTION_TABLE_iii[$419 & 31]($416,10)|0);
         __ZNSt3__16localeD2Ev($0);
         (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($411,$420)|0);
         (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($411)|0);
         $$0 = 1;
        } else {
         $303 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,2408)|0);
         $304 = HEAP32[$rest>>2]|0;
         $305 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($303,$304)|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = (($306) + -12|0);
         $308 = HEAP32[$307>>2]|0;
         $309 = (($305) + ($308)|0);
         __ZNKSt3__18ios_base6getlocEv($0,$309);
         $310 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
         $311 = HEAP32[$310>>2]|0;
         $312 = (($311) + 28|0);
         $313 = HEAP32[$312>>2]|0;
         $314 = (FUNCTION_TABLE_iii[$313 & 31]($310,10)|0);
         __ZNSt3__16localeD2Ev($0);
         (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($305,$314)|0);
         (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($305)|0);
         $$0 = 1;
        }
       } while(0);
       __ZN5MeCab15istream_wrapperD1Ev($ifs);
       $$1 = $$0;
      }
     }
     __ZN5MeCab10scoped_ptrINS_6TaggerEED1Ev($tagger);
     __ZN5MeCab12scoped_arrayIcED1Ev($ibuf_data);
     __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($rest);
     $$2 = $$1;
    } else {
     $114 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,2408)|0);
     $115 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($114,$ofilename)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + -12|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (($115) + ($118)|0);
     __ZNKSt3__18ios_base6getlocEv($0,$119);
     $120 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($121) + 28|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (FUNCTION_TABLE_iii[$123 & 31]($120,10)|0);
     __ZNSt3__16localeD2Ev($0);
     (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($115,$124)|0);
     (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($115)|0);
     $$2 = 1;
    }
   } while(0);
   __ZN5MeCab15ostream_wrapperD1Ev($ofs);
   $$3 = $$2;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ofilename);
  $$4 = $$3;
 } else {
  $67 = (__ZN5MeCab12getLastErrorEv()|0);
  $68 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405000,$67)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + -12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($68) + ($71)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$72);
  $73 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 28|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (FUNCTION_TABLE_iii[$76 & 31]($73,10)|0);
  __ZNSt3__16localeD2Ev($0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($68,$77)|0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($68)|0);
  $$4 = 1;
 }
 __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEED2Ev($model);
 $$5 = $$4;
 __ZN5MeCab5ParamD1Ev($param);
 STACKTOP = sp;return ($$5|0);
}
function __ZN5MeCab18scoped_fixed_arrayIcLi8192EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdaPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIcLi8192EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (__Znaj(8192)|0);
 HEAP32[$0>>2] = $1;
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 8192;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($__x) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$__x>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $4;
 $7 = $3;
 $8 = (($7) - ($6))|0;
 $9 = (($8|0) / 12)&-1;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($this,$9);
 $10 = HEAP32[$__x>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($this,$10,$11);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this)|0);
 $1 = ($0>>>0)<($__n>>>0);
 if ($1) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 } else {
  $2 = ($__n*12)|0;
  $3 = (__Znwj($2)|0);
  $4 = (($this) + 4|0);
  HEAP32[$4>>2] = $3;
  HEAP32[$this>>2] = $3;
  $5 = (($3) + (($__n*12)|0)|0);
  $6 = (($this) + 8|0);
  HEAP32[$6>>2] = $5;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__first|0)==($__last|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($this) + 4|0);
 $$pr = HEAP32[$1>>2]|0;
 $$01 = $__first;$2 = $$pr;
 while(1) {
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($2,$$01);
  }
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + 12|0);
  HEAP32[$1>>2] = $5;
  $6 = (($$01) + 12|0);
  $7 = ($6|0)==($__last|0);
  if ($7) {
   break;
  } else {
   $$01 = $6;$2 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -12|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($0|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 357913941;
}
function __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC1EPS7_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC2EPS7_($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112lexical_castINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_EET_T0_($agg$result,$arg) {
 $agg$result = $agg$result|0;
 $arg = $arg|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$arg+8>>2]|0;
 ;HEAP32[$arg+0>>2]=0|0;HEAP32[$arg+4>>2]=0|0;HEAP32[$arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2760 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC2EPS7_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2760 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIbEC1EPb($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIbEC2EPb($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrIbEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrIbED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIbED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112lexical_castIbNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($arg) {
 $arg = $arg|0;
 var $$0 = 0, $$0$in = 0, $$sum = 0, $$sum$i$i$i = 0, $$sum1 = 0, $$sum1$i$i$i = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $interpreter = 0, $r = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 152|0;
 $interpreter = sp + 8|0;
 $result = sp + 164|0;
 $r = sp;
 $1 = (($interpreter) + 64|0);
 $2 = (($interpreter) + 8|0);
 HEAP32[$2>>2] = ((656 + 32|0));
 $3 = (($interpreter) + 12|0);
 HEAP32[$interpreter>>2] = ((912 + 12|0));
 $4 = (($interpreter) + 64|0);
 HEAP32[$4>>2] = ((912 + 32|0));
 $5 = (($interpreter) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$interpreter>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($interpreter) + ($8)|0);
 __ZNSt3__18ios_base4initEPv($9,$3);
 $$sum$i$i$i = (($8) + 72)|0;
 $10 = (($interpreter) + ($$sum$i$i$i)|0);
 HEAP32[$10>>2] = 0;
 $$sum1$i$i$i = (($8) + 76)|0;
 $11 = (($interpreter) + ($$sum1$i$i$i)|0);
 HEAP32[$11>>2] = -1;
 HEAP32[$interpreter>>2] = ((656 + 12|0));
 HEAP32[$1>>2] = ((656 + 52|0));
 HEAP32[$2>>2] = ((656 + 32|0));
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($3);
 HEAP32[$3>>2] = ((992 + 8|0));
 $12 = (($interpreter) + 44|0);
 $13 = (($interpreter) + 60|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 HEAP32[$13>>2] = 24;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $14 = (($interpreter) + 8|0);
 $15 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($14,$arg)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $$sum = (($18) + 16)|0;
 $19 = (($15) + ($$sum)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 5;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = (__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERb($interpreter,$result)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -12|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum1 = (($26) + 16)|0;
  $27 = (($23) + ($$sum1)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 5;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = (__ZNSt3__12wsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_($interpreter)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + -12|0);
   $34 = HEAP32[$33>>2]|0;
   $$sum2 = (($34) + 16)|0;
   $35 = (($31) + ($$sum2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 2;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $42 = HEAP8[$result>>0]|0;
    $$0$in = $42;
    $$0 = ($$0$in<<24>>24)!=(0);
    __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $39 = (__Znwj(1)|0);
 HEAP8[$39>>0] = 0;
 __ZN5MeCab10scoped_ptrIbEC1EPb($r,$39);
 $40 = (__ZNK5MeCab10scoped_ptrIbEdeEv($r)|0);
 $41 = HEAP8[$40>>0]|0;
 __ZN5MeCab10scoped_ptrIbED1Ev($r);
 $$0$in = $41;
 $$0 = ($$0$in<<24>>24)!=(0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab10scoped_ptrIbED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2872 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIbED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIbED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIbEC2EPb($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2872 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_6TaggerEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2920 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_6TaggerEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_6TaggerEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_6TaggerEEC2EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2920 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 12)&-1;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = (($14|0) / 12)&-1;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $15 << 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 12)&-1;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC1EjjS8_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  ;HEAP32[$28+0>>2]=HEAP32[$__x+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$__x+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$__x+8>>2]|0;
  ;HEAP32[$__x+0>>2]=0|0;HEAP32[$__x+4>>2]=0|0;HEAP32[$__x+8>>2]=0|0;
 }
 $30 = HEAP32[$27>>2]|0;
 $31 = (($30) + 12|0);
 HEAP32[$27>>2] = $31;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v);
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC1EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = ($2|0)==($0|0);
 if (!($4)) {
  $$01$i = $2;
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + -12|0);
   $7 = (($$01$i) + -12|0);
   ;HEAP32[$6+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   $8 = HEAP32[$3>>2]|0;
   $9 = (($8) + -12|0);
   HEAP32[$3>>2] = $9;
   $10 = ($7|0)==($0|0);
   if ($10) {
    break;
   } else {
    $$01$i = $7;
   }
  }
 }
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -12|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($1|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = ($__cap*12)|0;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + (($__start*12)|0)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + (($__cap*12)|0)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2984 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEEC2EPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2984 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab5ParamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3064 + 8|0));
 $0 = (($this) + 64|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 52|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 $2 = (($this) + 40|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = (($this) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 $4 = (($this) + 16|0);
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($4);
 $5 = (($this) + 4|0);
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab5ParamD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5ParamD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED1Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__nd|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $1 = HEAP32[$__nd>>2]|0;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$1);
  $2 = (($__nd) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$3);
  $4 = (($__nd) + 16|0);
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($4);
  __ZdlPv($__nd);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab15ostream_wrapperD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3104 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(405000|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab15ostream_wrapperD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab15ostream_wrapperD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab15istream_wrapperD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3160 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(404912|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab15istream_wrapperD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab15istream_wrapperD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab15istream_wrapperC2EPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $$sum$i = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3160 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (_strcmp($filename,2376)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $storemerge = 404912;
  HEAP32[$0>>2] = $storemerge;
  STACKTOP = sp;return;
 }
 $3 = (__Znwj(188)|0);
 $4 = (($3) + 108|0);
 $5 = (($3) + 8|0);
 HEAP32[$3>>2] = ((3336 + 12|0));
 $6 = (($3) + 108|0);
 HEAP32[$6>>2] = ((3336 + 32|0));
 $7 = (($3) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + -12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + ($10)|0);
 __ZNSt3__18ios_base4initEPv($11,$5);
 $$sum$i$i = (($10) + 72)|0;
 $12 = (($3) + ($$sum$i$i)|0);
 HEAP32[$12>>2] = 0;
 $$sum1$i$i = (($10) + 76)|0;
 $13 = (($3) + ($$sum1$i$i)|0);
 HEAP32[$13>>2] = -1;
 HEAP32[$3>>2] = ((3216 + 12|0));
 HEAP32[$4>>2] = ((3216 + 32|0));
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($5);
 $14 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($5,$filename,8)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) + -12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($3) + ($18)|0);
  $$sum$i = (($18) + 16)|0;
  $20 = (($3) + ($$sum$i)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 | 4;
  __ZNSt3__18ios_base5clearEj($19,$22);
 }
 $storemerge = $3;
 HEAP32[$0>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr$0 = 0, $__rt$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = $__mode & -3;
   do {
    switch ($3|0) {
    case 52: case 20:  {
     $__mdstr$0 = 3552;
     break;
    }
    case 5: case 21:  {
     $__mdstr$0 = 3560;
     break;
    }
    case 48: case 16:  {
     $__mdstr$0 = 3504;
     break;
    }
    case 12:  {
     $__mdstr$0 = 3568;
     break;
    }
    case 28:  {
     $__mdstr$0 = 3576;
     break;
    }
    case 8:  {
     $__mdstr$0 = 3520;
     break;
    }
    case 1: case 17:  {
     $__mdstr$0 = 3512;
     break;
    }
    case 56:  {
     $__mdstr$0 = 3536;
     break;
    }
    case 9: case 25:  {
     $__mdstr$0 = 3544;
     break;
    }
    case 60:  {
     $__mdstr$0 = 3584;
     break;
    }
    case 13: case 29:  {
     $__mdstr$0 = 3592;
     break;
    }
    case 24:  {
     $__mdstr$0 = 3528;
     break;
    }
    default: {
     $__rt$1 = 0;
     break L1;
    }
    }
   } while(0);
   $4 = ($this|0)==(0|0);
   if ($4) {
    $__rt$1 = 0;
   } else {
    $5 = (_fopen(($__s|0),($__mdstr$0|0))|0);
    HEAP32[$0>>2] = $5;
    $6 = ($5|0)==(0|0);
    if ($6) {
     $__rt$1 = 0;
    } else {
     $7 = (($this) + 88|0);
     HEAP32[$7>>2] = $__mode;
     $8 = $__mode & 2;
     $9 = ($8|0)==(0);
     if ($9) {
      $__rt$1 = $this;
     } else {
      $10 = HEAP32[$0>>2]|0;
      $11 = (_fseek(($10|0),0,2)|0);
      $12 = ($11|0)==(0);
      if ($12) {
       $__rt$1 = $this;
      } else {
       $13 = HEAP32[$0>>2]|0;
       (_fclose(($13|0))|0);
       HEAP32[$0>>2] = 0;
       $__rt$1 = 0;
      }
     }
    }
   }
  } else {
   $__rt$1 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($__rt$1|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,3256);
 $0 = (($this) + 108|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vtt>>2]|0;
 HEAP32[$this>>2] = $0;
 $1 = (($vtt) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + ($4)|0);
 HEAP32[$5>>2] = $2;
 $6 = (($this) + 8|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3376 + 8|0));
 (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this)|0);
 $0 = (($this) + 96|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   __ZdaPv($4);
  }
 }
 $6 = (($this) + 97|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = (($this) + 56|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   __ZdaPv($10);
  }
 }
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__rt$2 = 0, $this$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $__rt$2 = 0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_ii[$5 & 127]($this)|0);
  $7 = (_fclose(($1|0))|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ($6|0)==(0);
   $this$ = $9 ? $this : 0;
   HEAP32[$0>>2] = 0;
   $__rt$2 = $this$;
  } else {
   $__rt$2 = 0;
  }
 }
 STACKTOP = sp;return ($__rt$2|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409640)|0);
 $4 = (($this) + 68|0);
 HEAP32[$4>>2] = $3;
 $5 = (($this) + 98|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($3)|0);
 $11 = $10&1;
 HEAP8[$5>>0] = $11;
 $12 = $6&255;
 $13 = $10&1;
 $14 = ($12|0)==($13|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (($this) + 8|0);
 ;HEAP32[$15+0>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;HEAP32[$15+16>>2]=0|0;HEAP32[$15+20>>2]=0|0;
 $16 = HEAP8[$5>>0]|0;
 $17 = ($16<<24>>24)==(0);
 $18 = (($this) + 96|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)!=(0);
 if (!($17)) {
  if ($20) {
   $21 = (($this) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    __ZdaPv($22);
   }
  }
  $24 = (($this) + 97|0);
  $25 = HEAP8[$24>>0]|0;
  HEAP8[$18>>0] = $25;
  $26 = (($this) + 60|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($this) + 52|0);
  HEAP32[$28>>2] = $27;
  $29 = (($this) + 56|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($this) + 32|0);
  HEAP32[$31>>2] = $30;
  HEAP32[$26>>2] = 0;
  HEAP32[$29>>2] = 0;
  HEAP8[$24>>0] = 0;
  STACKTOP = sp;return;
 }
 if (!($20)) {
  $32 = (($this) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($this) + 44|0);
  $35 = ($33|0)==($34|0);
  if (!($35)) {
   $36 = (($this) + 52|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + 60|0);
   HEAP32[$38>>2] = $37;
   $39 = HEAP32[$32>>2]|0;
   $40 = (($this) + 56|0);
   HEAP32[$40>>2] = $39;
   $41 = (($this) + 97|0);
   HEAP8[$41>>0] = 0;
   $42 = HEAP32[$36>>2]|0;
   $43 = (__Znaj($42)|0);
   HEAP32[$32>>2] = $43;
   HEAP8[$18>>0] = 1;
   STACKTOP = sp;return;
  }
 }
 $44 = (($this) + 52|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($this) + 60|0);
 HEAP32[$46>>2] = $45;
 $47 = (__Znaj($45)|0);
 $48 = (($this) + 56|0);
 HEAP32[$48>>2] = $47;
 $49 = (($this) + 97|0);
 HEAP8[$49>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = (($this) + 96|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 $7 = (($this) + 97|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $10 = (($this) + 56|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __ZdaPv($11);
  }
 }
 $13 = (($this) + 52|0);
 HEAP32[$13>>2] = $__n;
 $14 = ($__n>>>0)>(8);
 do {
  if ($14) {
   $15 = (($this) + 98|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)==(0);
   $18 = ($__s|0)==(0|0);
   $or$cond = $17 | $18;
   if ($or$cond) {
    $20 = (__Znaj($__n)|0);
    $21 = (($this) + 32|0);
    HEAP32[$21>>2] = $20;
    HEAP8[$1>>0] = 1;
    break;
   } else {
    $19 = (($this) + 32|0);
    HEAP32[$19>>2] = $__s;
    HEAP8[$1>>0] = 0;
    break;
   }
  } else {
   $22 = (($this) + 44|0);
   $23 = (($this) + 32|0);
   HEAP32[$23>>2] = $22;
   HEAP32[$13>>2] = 8;
   HEAP8[$1>>0] = 0;
  }
 } while(0);
 $24 = (($this) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25<<24>>24)==(0);
 if (!($26)) {
  $35 = (($this) + 60|0);
  HEAP32[$35>>2] = 0;
  $36 = (($this) + 56|0);
  HEAP32[$36>>2] = 0;
  HEAP8[$7>>0] = 0;
  STACKTOP = sp;return ($this|0);
 }
 $27 = ($__n|0)<(8);
 $28 = $27 ? 8 : $__n;
 $29 = (($this) + 60|0);
 HEAP32[$29>>2] = $28;
 $30 = ($__s|0)!=(0|0);
 $31 = ($28>>>0)>(7);
 $or$cond1 = $30 & $31;
 if ($or$cond1) {
  $32 = (($this) + 56|0);
  HEAP32[$32>>2] = $__s;
  HEAP8[$7>>0] = 0;
  STACKTOP = sp;return ($this|0);
 } else {
  $33 = (__Znaj($28)|0);
  $34 = (($this) + 56|0);
  HEAP32[$34>>2] = $33;
  HEAP8[$7>>0] = 1;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($this) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($6);
  ___cxa_throw(($6|0),(418352|0),(235|0));
  // unreachable;
 }
 $7 = HEAP32[$4>>2]|0;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($4)|0);
 $11 = (($this) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = ($10|0)>(0);
  $15 = ($0|0)==(0);
  $16 = ($1|0)==(0);
  $17 = $15 & $16;
  $or$cond = $14 | $17;
  if ($or$cond) {
   $18 = HEAP32[$this>>2]|0;
   $19 = (($18) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_ii[$20 & 127]($this)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $switch = ($__way>>>0)<(3);
    if (!($switch)) {
     $32 = $agg$result;
     $33 = $32;
     HEAP32[$33>>2] = 0;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = 0;
     $36 = (($agg$result) + 8|0);
     $37 = $36;
     $38 = $37;
     HEAP32[$38>>2] = -1;
     $39 = (($37) + 4)|0;
     $40 = $39;
     HEAP32[$40>>2] = -1;
     STACKTOP = sp;return;
    }
    $41 = HEAP32[$11>>2]|0;
    $42 = ($10|0)>(0);
    if ($42) {
     $43 = ($10|0)<(0);
     $44 = $43 << 31 >> 31;
     $45 = (___muldi3(($10|0),($44|0),($0|0),($1|0))|0);
     $46 = tempRet0;
     $$off0 = $45;
    } else {
     $$off0 = 0;
    }
    $47 = (_fseeko(($41|0),($$off0|0),($__way|0))|0);
    $48 = ($47|0)==(0);
    if ($48) {
     $58 = HEAP32[$11>>2]|0;
     $59 = (_ftello(($58|0))|0);
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = (($this) + 72|0);
     $63 = $62;
     $64 = $63;
     $65 = HEAP32[$64>>2]|0;
     $66 = (($63) + 4)|0;
     $67 = $66;
     $68 = HEAP32[$67>>2]|0;
     $69 = $agg$result;
     $70 = $69;
     HEAP32[$70>>2] = $65;
     $71 = (($69) + 4)|0;
     $72 = $71;
     HEAP32[$72>>2] = $68;
     $73 = (($agg$result) + 8|0);
     $74 = $73;
     $75 = $74;
     HEAP32[$75>>2] = $59;
     $76 = (($74) + 4)|0;
     $77 = $76;
     HEAP32[$77>>2] = $61;
     STACKTOP = sp;return;
    } else {
     $49 = $agg$result;
     $50 = $49;
     HEAP32[$50>>2] = 0;
     $51 = (($49) + 4)|0;
     $52 = $51;
     HEAP32[$52>>2] = 0;
     $53 = (($agg$result) + 8|0);
     $54 = $53;
     $55 = $54;
     HEAP32[$55>>2] = -1;
     $56 = (($54) + 4)|0;
     $57 = $56;
     HEAP32[$57>>2] = -1;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $23 = $agg$result;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $27 = (($agg$result) + 8|0);
 $28 = $27;
 $29 = $28;
 HEAP32[$29>>2] = -1;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$this>>2]|0;
  $5 = (($4) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_ii[$6 & 127]($this)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $18 = HEAP32[$1>>2]|0;
   $19 = (($__sp) + 8|0);
   $20 = $19;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (_fseeko(($18|0),($22|0),0)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $37 = (($this) + 72|0);
    $38 = $__sp;
    $39 = $38;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($38) + 4)|0;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = $37;
    $45 = $44;
    HEAP32[$45>>2] = $40;
    $46 = (($44) + 4)|0;
    $47 = $46;
    HEAP32[$47>>2] = $43;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__sp+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   } else {
    $28 = $agg$result;
    $29 = $28;
    HEAP32[$29>>2] = 0;
    $30 = (($28) + 4)|0;
    $31 = $30;
    HEAP32[$31>>2] = 0;
    $32 = (($agg$result) + 8|0);
    $33 = $32;
    $34 = $33;
    HEAP32[$34>>2] = -1;
    $35 = (($33) + 4)|0;
    $36 = $35;
    HEAP32[$36>>2] = -1;
    STACKTOP = sp;return;
   }
  }
 }
 $9 = $agg$result;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($agg$result) + 8|0);
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = -1;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__extbe = 0, $__state = 0, $__update_st$0$off0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbe = sp + 8|0;
 $__state = sp;
 $0 = (($this) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($this) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($6);
  ___cxa_throw(($6|0),(418352|0),(235|0));
  // unreachable;
 }
 $7 = (($this) + 92|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 16;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $43 = $8 & 8;
   $44 = ($43|0)==(0);
   if (!($44)) {
    $45 = (($this) + 80|0);
    $46 = $45;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (($46) + 4)|0;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = $__state;
    $53 = $52;
    HEAP32[$53>>2] = $48;
    $54 = (($52) + 4)|0;
    $55 = $54;
    HEAP32[$55>>2] = $51;
    $56 = (($this) + 98|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ($57<<24>>24)==(0);
    do {
     if ($58) {
      $66 = HEAP32[$3>>2]|0;
      $67 = HEAP32[$66>>2]|0;
      $68 = (($67) + 24|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (FUNCTION_TABLE_ii[$69 & 127]($66)|0);
      $71 = (($this) + 40|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($this) + 36|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $72;
      $76 = $74;
      $77 = (($75) - ($76))|0;
      $78 = ($70|0)>(0);
      if ($78) {
       $79 = (($this) + 16|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($this) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $80;
       $84 = $82;
       $85 = (($83) - ($84))|0;
       $86 = Math_imul($85, $70)|0;
       $87 = (($86) + ($77))|0;
       $__c$0 = $87;$__update_st$0$off0 = 0;
       break;
      }
      $88 = (($this) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (($this) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      if ($92) {
       $__c$0 = $77;$__update_st$0$off0 = 0;
      } else {
       $93 = HEAP32[$3>>2]|0;
       $94 = (($this) + 32|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($this) + 8|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = $89;
       $99 = $97;
       $100 = (($98) - ($99))|0;
       $101 = HEAP32[$93>>2]|0;
       $102 = (($101) + 32|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_iiiiii[$103 & 15]($93,$__state,$95,$74,$100)|0);
       $105 = HEAP32[$73>>2]|0;
       $106 = HEAP32[$94>>2]|0;
       $107 = $105;
       $108 = $106;
       $109 = (($77) - ($104))|0;
       $110 = (($109) + ($107))|0;
       $111 = (($110) - ($108))|0;
       $__c$0 = $111;$__update_st$0$off0 = 1;
      }
     } else {
      $59 = (($this) + 16|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = (($this) + 12|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = $60;
      $64 = $62;
      $65 = (($63) - ($64))|0;
      $__c$0 = $65;$__update_st$0$off0 = 0;
     }
    } while(0);
    $112 = HEAP32[$0>>2]|0;
    $113 = (0 - ($__c$0))|0;
    $114 = (_fseeko(($112|0),($113|0),1)|0);
    $115 = ($114|0)==(0);
    if (!($115)) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    if ($__update_st$0$off0) {
     $116 = (($this) + 72|0);
     $117 = $__state;
     $118 = $117;
     $119 = HEAP32[$118>>2]|0;
     $120 = (($117) + 4)|0;
     $121 = $120;
     $122 = HEAP32[$121>>2]|0;
     $123 = $116;
     $124 = $123;
     HEAP32[$124>>2] = $119;
     $125 = (($123) + 4)|0;
     $126 = $125;
     HEAP32[$126>>2] = $122;
    }
    $127 = (($this) + 32|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (($this) + 40|0);
    HEAP32[$129>>2] = $128;
    $130 = (($this) + 36|0);
    HEAP32[$130>>2] = $128;
    $131 = (($this) + 8|0);
    HEAP32[$131>>2] = 0;
    $132 = (($this) + 12|0);
    HEAP32[$132>>2] = 0;
    $133 = (($this) + 16|0);
    HEAP32[$133>>2] = 0;
    HEAP32[$7>>2] = 0;
   }
  } else {
   $11 = (($this) + 24|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if (!($15)) {
    $16 = HEAP32[$this>>2]|0;
    $17 = (($16) + 52|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iii[$18 & 31]($this,-1)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $21 = (($this) + 72|0);
   $22 = (($this) + 32|0);
   $23 = (($this) + 52|0);
   while(1) {
    $24 = HEAP32[$3>>2]|0;
    $25 = HEAP32[$22>>2]|0;
    $26 = HEAP32[$23>>2]|0;
    $27 = (($25) + ($26)|0);
    $28 = HEAP32[$24>>2]|0;
    $29 = (($28) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (FUNCTION_TABLE_iiiiii[$30 & 15]($24,$21,$25,$27,$__extbe)|0);
    $32 = HEAP32[$__extbe>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = $32;
    $35 = $33;
    $36 = (($34) - ($35))|0;
    $37 = HEAP32[$0>>2]|0;
    $38 = (_fwrite(($33|0),1,($36|0),($37|0))|0);
    $39 = ($38|0)==($36|0);
    if (!($39)) {
     $$0 = -1;
     label = 23;
     break;
    }
    if ((($31|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($31|0) == 1))) {
     label = 10;
     break;
    }
   }
   if ((label|0) == 10) {
    $40 = HEAP32[$0>>2]|0;
    $41 = (_fflush(($40|0))|0);
    $42 = ($41|0)==(0);
    if ($42) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c$0 = 0, $__inext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__1buf = sp + 4|0;
 $__inext = sp;
 $0 = (($this) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this)|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (($__1buf) + 1|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $__1buf;
  HEAP32[$4>>2] = $7;
  $9 = (($this) + 16|0);
  HEAP32[$9>>2] = $7;
 }
 if ($3) {
  $25 = 0;
 } else {
  $10 = (($this) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $17 = (($16|0) / 2)&-1;
  $18 = ($17>>>0)>(4);
  $19 = $18 ? 4 : $17;
  $25 = $19;
 }
 $20 = HEAP32[$4>>2]|0;
 $21 = (($this) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)==($22|0);
 do {
  if ($23) {
   $24 = (0 - ($25))|0;
   $26 = (($this) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($22) + ($24)|0);
   _memmove(($27|0),($28|0),($25|0))|0;
   $29 = (($this) + 98|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if (!($31)) {
    $32 = HEAP32[$21>>2]|0;
    $33 = HEAP32[$26>>2]|0;
    $34 = $32;
    $35 = $33;
    $36 = (($34) - ($25))|0;
    $37 = (($36) - ($35))|0;
    $38 = (($33) + ($25)|0);
    $39 = HEAP32[$0>>2]|0;
    $40 = (_fread(($38|0),1,($37|0),($39|0))|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $__c$0 = -1;
     break;
    }
    $42 = HEAP32[$26>>2]|0;
    $43 = (($42) + ($25)|0);
    $$sum = (($40) + ($25))|0;
    $44 = (($42) + ($$sum)|0);
    HEAP32[$4>>2] = $43;
    HEAP32[$21>>2] = $44;
    $45 = HEAP32[$4>>2]|0;
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $__c$0 = $47;
    break;
   }
   $48 = (($this) + 32|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($this) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($this) + 40|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $53;
   $55 = $51;
   $56 = (($54) - ($55))|0;
   _memmove(($49|0),($51|0),($56|0))|0;
   $57 = HEAP32[$48>>2]|0;
   $58 = HEAP32[$52>>2]|0;
   $59 = HEAP32[$50>>2]|0;
   $60 = $58;
   $61 = $59;
   $62 = (($60) - ($61))|0;
   $63 = (($57) + ($62)|0);
   HEAP32[$50>>2] = $63;
   $64 = HEAP32[$48>>2]|0;
   $65 = (($this) + 44|0);
   $66 = ($64|0)==($65|0);
   if ($66) {
    $70 = 8;
   } else {
    $67 = (($this) + 52|0);
    $68 = HEAP32[$67>>2]|0;
    $70 = $68;
   }
   $69 = (($64) + ($70)|0);
   HEAP32[$52>>2] = $69;
   $71 = (($this) + 60|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) - ($25))|0;
   $74 = HEAP32[$50>>2]|0;
   $75 = $69;
   $76 = $74;
   $77 = (($75) - ($76))|0;
   $78 = ($77>>>0)<($73>>>0);
   $79 = $78 ? $77 : $73;
   $80 = (($this) + 80|0);
   $81 = (($this) + 72|0);
   $82 = $81;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = $80;
   $89 = $88;
   HEAP32[$89>>2] = $84;
   $90 = (($88) + 4)|0;
   $91 = $90;
   HEAP32[$91>>2] = $87;
   $92 = HEAP32[$50>>2]|0;
   $93 = HEAP32[$0>>2]|0;
   $94 = (_fread(($92|0),1,($79|0),($93|0))|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $__c$0 = -1;
   } else {
    $96 = (($this) + 68|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $99 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($99);
     ___cxa_throw(($99|0),(418352|0),(235|0));
     // unreachable;
    }
    $100 = HEAP32[$50>>2]|0;
    $101 = (($100) + ($94)|0);
    HEAP32[$52>>2] = $101;
    $102 = HEAP32[$96>>2]|0;
    $103 = HEAP32[$48>>2]|0;
    $104 = HEAP32[$26>>2]|0;
    $105 = (($104) + ($25)|0);
    $106 = HEAP32[$71>>2]|0;
    $107 = (($104) + ($106)|0);
    $108 = HEAP32[$102>>2]|0;
    $109 = (($108) + 16|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (FUNCTION_TABLE_iiiiiiiii[$110 & 15]($102,$81,$103,$101,$50,$105,$107,$__inext)|0);
    $112 = ($111|0)==(3);
    if ($112) {
     $113 = HEAP32[$48>>2]|0;
     $114 = HEAP32[$52>>2]|0;
     HEAP32[$26>>2] = $113;
     HEAP32[$4>>2] = $113;
     HEAP32[$21>>2] = $114;
     $115 = HEAP32[$4>>2]|0;
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&255;
     $__c$0 = $117;
     break;
    }
    $118 = HEAP32[$__inext>>2]|0;
    $119 = HEAP32[$26>>2]|0;
    $120 = (($119) + ($25)|0);
    $121 = ($118|0)==($120|0);
    if ($121) {
     $__c$0 = -1;
    } else {
     HEAP32[$26>>2] = $119;
     HEAP32[$4>>2] = $120;
     HEAP32[$21>>2] = $118;
     $122 = HEAP32[$4>>2]|0;
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $__c$0 = $124;
    }
   }
  } else {
   $125 = HEAP8[$20>>0]|0;
   $126 = $125&255;
   $__c$0 = $126;
  }
 } while(0);
 $127 = (($this) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($128|0)==($__1buf|0);
 if (!($129)) {
  $$0 = $__c$0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$127>>2] = 0;
 HEAP32[$4>>2] = 0;
 HEAP32[$21>>2] = 0;
 $$0 = $__c$0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0 = -1;
  } else {
   $3 = (($this) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($this) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   if ($7) {
    $8 = ($__c|0)==(-1);
    if ($8) {
     $9 = (($6) + -1|0);
     HEAP32[$5>>2] = $9;
     $$0 = 0;
     break;
    }
    $10 = (($this) + 88|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 16;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = $__c&255;
     $15 = (($6) + -1|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($14<<24>>24)==($16<<24>>24);
     if (!($17)) {
      $$0 = -1;
      break;
     }
    }
    $18 = HEAP32[$5>>2]|0;
    $19 = (($18) + -1|0);
    HEAP32[$5>>2] = $19;
    $20 = $__c&255;
    HEAP8[$19>>0] = $20;
    $$0 = $__c;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = (($this) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this);
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($__c|0)==(-1);
 if (!($7)) {
  $8 = (($this) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $11 = (($__1buf) + 1|0);
   HEAP32[$8>>2] = $__1buf;
   HEAP32[$3>>2] = $__1buf;
   HEAP32[$5>>2] = $11;
  }
  $12 = $__c&255;
  $13 = HEAP32[$8>>2]|0;
  HEAP8[$13>>0] = $12;
  $14 = HEAP32[$8>>2]|0;
  $15 = (($14) + 1|0);
  HEAP32[$8>>2] = $15;
 }
 $16 = (($this) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$3>>2]|0;
 $19 = ($17|0)==($18|0);
 if (!($19)) {
  $20 = (($this) + 98|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  L12: do {
   if ($22) {
    $29 = (($this) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$__extbe>>2] = $30;
    $31 = (($this) + 68|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $36 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($36);
     ___cxa_throw(($36|0),(418352|0),(235|0));
     // unreachable;
    }
    $34 = (($this) + 72|0);
    $35 = (($this) + 52|0);
    $43 = $32;
    while(1) {
     $37 = HEAP32[$3>>2]|0;
     $38 = HEAP32[$16>>2]|0;
     $39 = HEAP32[$29>>2]|0;
     $40 = HEAP32[$35>>2]|0;
     $41 = (($39) + ($40)|0);
     $42 = HEAP32[$43>>2]|0;
     $44 = (($42) + 12|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (FUNCTION_TABLE_iiiiiiiii[$45 & 15]($43,$34,$37,$38,$__e,$39,$41,$__extbe)|0);
     $47 = HEAP32[$__e>>2]|0;
     $48 = HEAP32[$3>>2]|0;
     $49 = ($47|0)==($48|0);
     if ($49) {
      $$0 = -1;
      label = 21;
      break;
     }
     $50 = ($46|0)==(3);
     if ($50) {
      label = 14;
      break;
     }
     $58 = ($46>>>0)<(2);
     if (!($58)) {
      $$0 = -1;
      label = 21;
      break;
     }
     $59 = HEAP32[$__extbe>>2]|0;
     $60 = HEAP32[$29>>2]|0;
     $61 = $59;
     $62 = $60;
     $63 = (($61) - ($62))|0;
     $64 = HEAP32[$0>>2]|0;
     $65 = (_fwrite(($60|0),1,($63|0),($64|0))|0);
     $66 = ($65|0)==($63|0);
     if (!($66)) {
      $$0 = -1;
      label = 21;
      break;
     }
     $cond = ($46|0)==(1);
     if (!($cond)) {
      break L12;
     }
     $67 = HEAP32[$__e>>2]|0;
     $68 = HEAP32[$16>>2]|0;
     HEAP32[$16>>2] = $67;
     HEAP32[$3>>2] = $67;
     HEAP32[$5>>2] = $68;
     $69 = HEAP32[$3>>2]|0;
     $70 = $68;
     $71 = $69;
     $72 = (($70) - ($71))|0;
     $73 = HEAP32[$16>>2]|0;
     $74 = (($73) + ($72)|0);
     HEAP32[$16>>2] = $74;
     $75 = HEAP32[$31>>2]|0;
     $76 = ($75|0)==(0|0);
     if ($76) {
      label = 11;
      break;
     } else {
      $43 = $75;
     }
    }
    if ((label|0) == 11) {
     $36 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($36);
     ___cxa_throw(($36|0),(418352|0),(235|0));
     // unreachable;
    }
    else if ((label|0) == 14) {
     $51 = HEAP32[$16>>2]|0;
     $52 = $51;
     $53 = $48;
     $54 = (($52) - ($53))|0;
     $55 = HEAP32[$0>>2]|0;
     $56 = (_fwrite(($48|0),1,($54|0),($55|0))|0);
     $57 = ($56|0)==($54|0);
     if ($57) {
      break;
     } else {
      $$0 = -1;
     }
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 21) {
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $23 = $17;
    $24 = $18;
    $25 = (($23) - ($24))|0;
    $26 = HEAP32[$0>>2]|0;
    $27 = (_fwrite(($18|0),1,($25|0),($26|0))|0);
    $28 = ($27|0)==($25|0);
    if (!($28)) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  HEAP32[$16>>2] = $4;
  HEAP32[$3>>2] = $4;
  HEAP32[$5>>2] = $6;
 }
 $$__c$i = $7 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 16;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($this) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)>(8);
 do {
  if ($9) {
   $10 = (($this) + 98|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $20 = (($this) + 56|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($this) + 60|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + -1)|0;
    $25 = (($21) + ($24)|0);
    $26 = (($this) + 24|0);
    HEAP32[$26>>2] = $21;
    $27 = (($this) + 20|0);
    HEAP32[$27>>2] = $21;
    $28 = (($this) + 28|0);
    HEAP32[$28>>2] = $25;
    break;
   } else {
    $13 = (($this) + 32|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($8) + -1)|0;
    $16 = (($14) + ($15)|0);
    $17 = (($this) + 24|0);
    HEAP32[$17>>2] = $14;
    $18 = (($this) + 20|0);
    HEAP32[$18>>2] = $14;
    $19 = (($this) + 28|0);
    HEAP32[$19>>2] = $16;
    break;
   }
  } else {
   $29 = (($this) + 24|0);
   HEAP32[$29>>2] = 0;
   $30 = (($this) + 20|0);
   HEAP32[$30>>2] = 0;
   $31 = (($this) + 28|0);
   HEAP32[$31>>2] = 0;
  }
 } while(0);
 HEAP32[$0>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 8;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($this) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 98|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $18 = (($this) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($this) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + ($21)|0);
  $23 = (($this) + 8|0);
  HEAP32[$23>>2] = $19;
  $24 = (($this) + 12|0);
  HEAP32[$24>>2] = $22;
  $25 = (($this) + 16|0);
  HEAP32[$25>>2] = $22;
 } else {
  $10 = (($this) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($this) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + ($13)|0);
  $15 = (($this) + 8|0);
  HEAP32[$15>>2] = $11;
  $16 = (($this) + 12|0);
  HEAP32[$16>>2] = $14;
  $17 = (($this) + 16|0);
  HEAP32[$17>>2] = $14;
 }
 HEAP32[$0>>2] = 8;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((3376 + 8|0));
 $2 = (($this) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 36|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 52|0);
 $6 = (($this) + 68|0);
 $7 = (($this) + 98|0);
 $8 = (($this) + 4|0);
 dest=$5+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$5+44>>1]=0|0;HEAP8[$5+46>>0]=0|0;
 __ZNSt3__16localeC2ERKS0_($0,$8);
 $9 = (__ZNKSt3__16locale9has_facetERNS0_2idE($0,409640)|0);
 __ZNSt3__16localeD2Ev($0);
 if (!($9)) {
  $17 = HEAP32[$this>>2]|0;
  $18 = (($17) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  (FUNCTION_TABLE_iiii[$19 & 63]($this,0,4096)|0);
  STACKTOP = sp;return;
 }
 __ZNSt3__16localeC2ERKS0_($1,$8);
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,409640)|0);
 HEAP32[$6>>2] = $10;
 __ZNSt3__16localeD2Ev($1);
 $11 = HEAP32[$6>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($11)|0);
 $16 = $15&1;
 HEAP8[$7>>0] = $16;
 $17 = HEAP32[$this>>2]|0;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iiii[$19 & 63]($this,0,4096)|0);
 STACKTOP = sp;return;
}
function __ZN5MeCab15ostream_wrapperC2EPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $$sum$i = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3104 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (_strcmp($filename,2376)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $storemerge = 405000;
  HEAP32[$0>>2] = $storemerge;
  STACKTOP = sp;return;
 }
 $3 = (__Znwj(184)|0);
 $4 = (($3) + 104|0);
 $5 = (($3) + 4|0);
 HEAP32[$3>>2] = ((3720 + 12|0));
 $6 = (($3) + 104|0);
 HEAP32[$6>>2] = ((3720 + 32|0));
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($3) + ($9)|0);
 __ZNSt3__18ios_base4initEPv($10,$5);
 $$sum$i$i = (($9) + 72)|0;
 $11 = (($3) + ($$sum$i$i)|0);
 HEAP32[$11>>2] = 0;
 $$sum1$i$i = (($9) + 76)|0;
 $12 = (($3) + ($$sum1$i$i)|0);
 HEAP32[$12>>2] = -1;
 HEAP32[$3>>2] = ((3600 + 12|0));
 HEAP32[$4>>2] = ((3600 + 32|0));
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($5);
 $13 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($5,$filename,16)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($3) + ($17)|0);
  $$sum$i = (($17) + 16)|0;
  $19 = (($3) + ($$sum$i)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 | 4;
  __ZNSt3__18ios_base5clearEj($18,$21);
 }
 $storemerge = $3;
 HEAP32[$0>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED2Ev($this,3640);
 $0 = (($this) + 104|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vtt>>2]|0;
 HEAP32[$this>>2] = $0;
 $1 = (($vtt) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + ($4)|0);
 HEAP32[$5>>2] = $2;
 $6 = (($this) + 4|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($6);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_6WriterEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab7Viterbi4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = (__ZN5MeCab7whatlog3strEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab6Writer4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = (__ZN5MeCab7whatlog3strEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab5Param3getIdEET_PKc($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $it = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $it = sp + 36|0;
 $0 = sp + 24|0;
 $r = sp + 16|0;
 $1 = sp;
 $2 = (_strlen(($key|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$key,$2);
 $3 = (($this) + 4|0);
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($it,$3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $4 = (($this) + 8|0);
 $5 = HEAP32[$it>>2]|0;
 $6 = ($5|0)==($4|0);
 if ($6) {
  $7 = (__Znwj(8)|0);
  HEAPF64[$7>>3] = 0.0;
  __ZN5MeCab10scoped_ptrIdEC1EPd($r,$7);
  $8 = (__ZNK5MeCab10scoped_ptrIdEdeEv($r)|0);
  $9 = +HEAPF64[$8>>3];
  __ZN5MeCab10scoped_ptrIdED1Ev($r);
  $$0 = $9;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($5) + 28|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($1,$10);
  $11 = (+__ZN12_GLOBAL__N_112lexical_castIdNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($1));
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $$0 = $11;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl12is_availableEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $6 = 0;
  STACKTOP = sp;return ($6|0);
 }
 $3 = (($this) + 8|0);
 $4 = (__ZNK5MeCab10scoped_ptrINS_6WriterEE3getEv($3)|0);
 $5 = ($4|0)!=(0|0);
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function __ZNK5MeCab10scoped_ptrINS_6WriterEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrIdEC1EPd($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIdEC2EPd($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrIdEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrIdED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIdED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112lexical_castIdNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($arg) {
 $arg = $arg|0;
 var $$0 = 0.0, $$sum = 0, $$sum$i$i$i = 0, $$sum1 = 0, $$sum1$i$i$i = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $interpreter = 0, $r = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 160|0;
 $interpreter = sp + 16|0;
 $result = sp;
 $r = sp + 8|0;
 $1 = (($interpreter) + 64|0);
 $2 = (($interpreter) + 8|0);
 HEAP32[$2>>2] = ((656 + 32|0));
 $3 = (($interpreter) + 12|0);
 HEAP32[$interpreter>>2] = ((912 + 12|0));
 $4 = (($interpreter) + 64|0);
 HEAP32[$4>>2] = ((912 + 32|0));
 $5 = (($interpreter) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$interpreter>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($interpreter) + ($8)|0);
 __ZNSt3__18ios_base4initEPv($9,$3);
 $$sum$i$i$i = (($8) + 72)|0;
 $10 = (($interpreter) + ($$sum$i$i$i)|0);
 HEAP32[$10>>2] = 0;
 $$sum1$i$i$i = (($8) + 76)|0;
 $11 = (($interpreter) + ($$sum1$i$i$i)|0);
 HEAP32[$11>>2] = -1;
 HEAP32[$interpreter>>2] = ((656 + 12|0));
 HEAP32[$1>>2] = ((656 + 52|0));
 HEAP32[$2>>2] = ((656 + 32|0));
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($3);
 HEAP32[$3>>2] = ((992 + 8|0));
 $12 = (($interpreter) + 44|0);
 $13 = (($interpreter) + 60|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 HEAP32[$13>>2] = 24;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $14 = (($interpreter) + 8|0);
 $15 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($14,$arg)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $$sum = (($18) + 16)|0;
 $19 = (($15) + ($$sum)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 5;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = (__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERd($interpreter,$result)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -12|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum1 = (($26) + 16)|0;
  $27 = (($23) + ($$sum1)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 5;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = (__ZNSt3__12wsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_($interpreter)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + -12|0);
   $34 = HEAP32[$33>>2]|0;
   $$sum2 = (($34) + 16)|0;
   $35 = (($31) + ($$sum2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 2;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $42 = +HEAPF64[$result>>3];
    $$0 = $42;
    __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
    STACKTOP = sp;return (+$$0);
   }
  }
 }
 $39 = (__Znwj(8)|0);
 HEAPF64[$39>>3] = 0.0;
 __ZN5MeCab10scoped_ptrIdEC1EPd($r,$39);
 $40 = (__ZNK5MeCab10scoped_ptrIdEdeEv($r)|0);
 $41 = +HEAPF64[$40>>3];
 __ZN5MeCab10scoped_ptrIdED1Ev($r);
 $$0 = $41;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
 STACKTOP = sp;return (+$$0);
}
function __ZN5MeCab10scoped_ptrIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3776 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIdED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIdED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIdEC2EPd($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3776 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab5ParamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((3064 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC1ERKSC_($1,$0);
 $2 = (($this) + 16|0);
 $3 = (($this) + 64|0);
 dest=$2+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZN5MeCab7whatlogC1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC1ERKSC_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_($this,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 4|0);
 HEAP32[$this>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImplC2EPKNS_6WriterE($this,$writer) {
 $this = $this|0;
 $writer = $writer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN5MeCab7LatticeC2Ev($this);
 HEAP32[$this>>2] = ((5208 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 16|0);
 HEAPF64[$2>>3] = 0.75;
 $3 = (($this) + 24|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = (($this) + 32|0);
 HEAP32[$4>>2] = 1;
 $5 = (($this) + 36|0);
 $6 = (($this) + 48|0);
 $7 = (($this) + 60|0);
 $8 = (($this) + 96|0);
 dest=$5+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$8>>2] = $writer;
 $9 = (($this) + 100|0);
 __ZN5MeCab10scoped_ptrINS_12StringBufferEEC1EPS1_($9,0);
 $10 = (($this) + 108|0);
 $11 = (__Znwj(60)|0);
 __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tEC1Ev($11);
 __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEEC1EPS4_($10,$11);
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE7reserveEj($7,8192);
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE7reserveEj($6,8192);
 STACKTOP = sp;return;
}
function __ZN5MeCab7LatticeC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6512 + 8|0));
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12StringBufferEEC1EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_12StringBufferEEC2EPS1_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEEC1EPS4_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEEC2EPS4_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__n>>>0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 8|0);
 $9 = (($this) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = (($11) - ($4))|0;
 $13 = $12 >> 2;
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEEC1EjjS5_($__v,$__n,$13,$8);
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v);
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12StringBufferEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_12StringBufferEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i10 = 0, $__new_last2$i$i$i3 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i2 = 0, $scevgep$i$i$i9 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i14 = 0, $scevgep4$i$i$i7 = 0, $uglygep$i$i$i = 0, $uglygep$i$i$i12 = 0, $uglygep$i$i$i5 = 0, $uglygep3$i$i$i = 0, $uglygep3$i$i$i13 = 0, $uglygep3$i$i$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 108|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEEptEv($0)|0);
 __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE4freeEv($1);
 $2 = (($this) + 100|0);
 $3 = (__ZNK5MeCab10scoped_ptrINS_12StringBufferEE3getEv($2)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (__ZNK5MeCab10scoped_ptrINS_12StringBufferEEptEv($2)|0);
  __ZN5MeCab12StringBuffer5clearEv($5);
 }
 $6 = (($this) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($7|0);
 if (!($10)) {
  $scevgep$i$i$i = (($9) + -4|0);
  $__new_last2$i$i$i = $7;
  $11 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($11)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $12 = $uglygep3$i$i$i >>> 2;
  $13 = $12 ^ -1;
  $scevgep4$i$i$i = (($9) + ($13<<2)|0);
  HEAP32[$8>>2] = $scevgep4$i$i$i;
 }
 $14 = (($this) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==($15|0);
 if (!($18)) {
  $scevgep$i$i$i9 = (($17) + -4|0);
  $__new_last2$i$i$i10 = $15;
  $19 = (0 - ($__new_last2$i$i$i10))|0;
  $uglygep$i$i$i12 = (($scevgep$i$i$i9) + ($19)|0);
  $uglygep3$i$i$i13 = $uglygep$i$i$i12;
  $20 = $uglygep3$i$i$i13 >>> 2;
  $21 = $20 ^ -1;
  $scevgep4$i$i$i14 = (($17) + ($21<<2)|0);
  HEAP32[$16>>2] = $scevgep4$i$i$i14;
 }
 $22 = (($this) + 72|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($this) + 76|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==($23|0);
 if (!($26)) {
  $scevgep$i$i$i2 = (($25) + -4|0);
  $__new_last2$i$i$i3 = $23;
  $27 = (0 - ($__new_last2$i$i$i3))|0;
  $uglygep$i$i$i5 = (($scevgep$i$i$i2) + ($27)|0);
  $uglygep3$i$i$i6 = $uglygep$i$i$i5;
  $28 = $uglygep3$i$i$i6 >>> 2;
  $29 = $28 ^ -1;
  $scevgep4$i$i$i7 = (($25) + ($29<<2)|0);
  HEAP32[$24>>2] = $scevgep4$i$i$i7;
 }
 $30 = (($this) + 84|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($this) + 88|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==($31|0);
 if ($34) {
  $38 = (($this) + 8|0);
  HEAP32[$38>>2] = 0;
  $39 = (($this) + 16|0);
  HEAPF64[$39>>3] = 0.75;
  $40 = (($this) + 24|0);
  HEAPF64[$40>>3] = 0.0;
  $41 = (($this) + 4|0);
  HEAP32[$41>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $36 = $33;
 }
 while(1) {
  $35 = (($36) + -1|0);
  $37 = ($35|0)==($31|0);
  if ($37) {
   break;
  } else {
   $36 = $35;
  }
 }
 HEAP32[$32>>2] = $35;
 $38 = (($this) + 8|0);
 HEAP32[$38>>2] = 0;
 $39 = (($this) + 16|0);
 HEAPF64[$39>>3] = 0.75;
 $40 = (($this) + 24|0);
 HEAPF64[$40>>3] = 0.0;
 $41 = (($this) + 4|0);
 HEAP32[$41>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl12is_availableEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $3 = (($this) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $8 = (($this) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($this) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)!=($11|0);
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl8bos_nodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl8eos_nodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = (($this) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl11begin_nodesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl9end_nodesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl9end_nodesEj($this,$pos) {
 $this = $this|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($pos<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl11begin_nodesEj($this,$pos) {
 $this = $this|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($pos<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl8sentenceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl12set_sentenceEPKc($this,$sentence) {
 $this = $this|0;
 $sentence = $sentence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen(($sentence|0))|0);
 FUNCTION_TABLE_viii[$2 & 7]($this,$sentence,$3);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl12set_sentenceEPKcj($this,$sentence,$len) {
 $this = $this|0;
 $sentence = $sentence|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vi[$1 & 511]($this);
 $2 = (($this) + 48|0);
 $3 = (($len) + 4)|0;
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE6resizeEj($2,$3);
 $4 = (($this) + 60|0);
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE6resizeEj($4,$3);
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 31]($this,64)|0);
 if (!($8)) {
  $9 = HEAP32[$this>>2]|0;
  $10 = (($9) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_iii[$11 & 31]($this,4)|0);
  if (!($12)) {
   $19 = (($this) + 4|0);
   HEAP32[$19>>2] = $sentence;
   $20 = (($this) + 8|0);
   HEAP32[$20>>2] = $len;
   $21 = HEAP32[$2>>2]|0;
   $22 = $3 << 2;
   _memset(($21|0),0,($22|0))|0;
   $23 = HEAP32[$4>>2]|0;
   _memset(($23|0),0,($22|0))|0;
   STACKTOP = sp;return;
  }
 }
 $13 = HEAP32[$this>>2]|0;
 $14 = (($13) + 88|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 127]($this)|0);
 $17 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE6strdupEPKcj($16,$sentence,$len)|0);
 $18 = (($this) + 4|0);
 HEAP32[$18>>2] = $17;
 $20 = (($this) + 8|0);
 HEAP32[$20>>2] = $len;
 $21 = HEAP32[$2>>2]|0;
 $22 = $3 << 2;
 _memset(($21|0),0,($22|0))|0;
 $23 = HEAP32[$4>>2]|0;
 _memset(($23|0),0,($22|0))|0;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl5set_ZEd($this,$Z) {
 $this = $this|0;
 $Z = +$Z;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAPF64[$0>>3] = $Z;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl1ZEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$1);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl9set_thetaEf($this,$theta) {
 $this = $this|0;
 $theta = +$theta;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $theta;
 $1 = (($this) + 16|0);
 HEAPF64[$1>>3] = $0;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl5thetaEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = +HEAPF64[$0>>3];
 $2 = $1;
 STACKTOP = sp;return (+$2);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl4nextEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 31]($this,2)|0);
 if (!($3)) {
  $4 = HEAP32[$this>>2]|0;
  $5 = (($4) + 148|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vii[$6 & 63]($this,5736);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$this>>2]|0;
 $8 = (($7) + 88|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($this)|0);
 $11 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE15nbest_generatorEv($10)|0);
 $12 = (__ZN5MeCab14NBestGenerator4nextEv($11)|0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (__ZN5MeCab7Viterbi19buildResultForNBestEPNS_7LatticeE($this)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl12request_typeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl16has_request_typeEi($this,$request_type) {
 $this = $this|0;
 $request_type = $request_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & $request_type;
 $3 = ($2|0)!=(0);
 STACKTOP = sp;return ($3|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl16set_request_typeEi($this,$request_type) {
 $this = $this|0;
 $request_type = $request_type|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 HEAP32[$0>>2] = $request_type;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl16add_request_typeEi($this,$request_type) {
 $this = $this|0;
 $request_type = $request_type|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | $request_type;
 HEAP32[$0>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl19remove_request_typeEi($this,$request_type) {
 $this = $this|0;
 $request_type = $request_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $request_type ^ -1;
 $1 = (($this) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & $0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl9allocatorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 108|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEE3getEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl7newNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 108|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEEptEv($0)|0);
 $2 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl6streamEv($this)|0);
 $1 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl16toStringInternalEPNS_12StringBufferE($this,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEPK12mecab_node_t($this,$node) {
 $this = $this|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl6streamEv($this)|0);
 $1 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl16toStringInternalEPK12mecab_node_tPNS_12StringBufferE($this,$node,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl17enumNBestAsStringEj($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl6streamEv($this)|0);
 $1 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl25enumNBestAsStringInternalEjPNS_12StringBufferE($this,$N,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEPcj($this,$buf,$size) {
 $this = $this|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $os = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $os = sp;
 __ZN5MeCab12StringBufferC1EPcj($os,$buf,$size);
 $0 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl16toStringInternalEPNS_12StringBufferE($this,$os)|0);
 __ZN5MeCab12StringBufferD2Ev($os);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEPK12mecab_node_tPcj($this,$node,$buf,$size) {
 $this = $this|0;
 $node = $node|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $os = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $os = sp;
 __ZN5MeCab12StringBufferC1EPcj($os,$buf,$size);
 $0 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl16toStringInternalEPK12mecab_node_tPNS_12StringBufferE($this,$node,$os)|0);
 __ZN5MeCab12StringBufferD2Ev($os);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl17enumNBestAsStringEjPcj($this,$N,$buf,$size) {
 $this = $this|0;
 $N = $N|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $os = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $os = sp;
 __ZN5MeCab12StringBufferC1EPcj($os,$buf,$size);
 $0 = (__ZN5MeCab12_GLOBAL__N_111LatticeImpl25enumNBestAsStringInternalEjPNS_12StringBufferE($this,$N,$os)|0);
 __ZN5MeCab12StringBufferD2Ev($os);
 STACKTOP = sp;return ($0|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl14has_constraintEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)!=($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl19boundary_constraintEj($this,$pos) {
 $this = $this|0;
 $pos = $pos|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($1) + ($pos)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl18feature_constraintEj($this,$begin_pos) {
 $this = $this|0;
 $begin_pos = $begin_pos|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($1) + ($begin_pos<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl23set_boundary_constraintEji($this,$pos,$boundary_constraint_type) {
 $this = $this|0;
 $pos = $pos|0;
 $boundary_constraint_type = $boundary_constraint_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_ii[$8 & 127]($this)|0);
  $10 = (($9) + 4)|0;
  HEAP8[$0>>0] = 0;
  __ZNSt3__16vectorIhNS_9allocatorIhEEE6resizeEjRKh($1,$10,$0);
 }
 $11 = $boundary_constraint_type&255;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + ($pos)|0);
 HEAP8[$13>>0] = $11;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl22set_feature_constraintEjjPKc($this,$begin_pos,$end_pos,$feature) {
 $this = $this|0;
 $begin_pos = $begin_pos|0;
 $end_pos = $end_pos|0;
 $feature = $feature|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0 = 0, $i$01 = 0, $i$02 = 0, $or$cond = 0;
 var $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = ($begin_pos>>>0)>=($end_pos>>>0);
 $2 = ($feature|0)==(0|0);
 $or$cond = $1 | $2;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = HEAP32[$this>>2]|0;
  $9 = (($8) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
  $12 = (($11) + 4)|0;
  HEAP32[$0>>2] = 0;
  __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE6resizeEjRKS2_($3,$12,$0);
 }
 $13 = HEAP32[$this>>2]|0;
 $14 = (($13) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 127]($this)|0);
 $17 = ($16>>>0)<($end_pos>>>0);
 $18 = $17 ? $16 : $end_pos;
 $19 = HEAP32[$this>>2]|0;
 $20 = (($19) + 132|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$21 & 7]($this,$begin_pos,1);
 $22 = HEAP32[$this>>2]|0;
 $23 = (($22) + 132|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_viii[$24 & 7]($this,$18,1);
 $i$01 = (($begin_pos) + 1)|0;
 $25 = ($i$01>>>0)<($18>>>0);
 if ($25) {
  $26 = $16 ^ -1;
  $27 = $end_pos ^ -1;
  $28 = ($26>>>0)>($27>>>0);
  $umax = $28 ? $26 : $27;
  $29 = $umax ^ -1;
  $i$02 = $i$01;
  while(1) {
   $30 = HEAP32[$this>>2]|0;
   $31 = (($30) + 132|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_viii[$32 & 7]($this,$i$02,2);
   $i$0 = (($i$02) + 1)|0;
   $exitcond = ($i$0|0)==($29|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $i$0;
   }
  }
 }
 $33 = HEAP32[$3>>2]|0;
 $34 = (($33) + ($begin_pos<<2)|0);
 HEAP32[$34>>2] = $feature;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl10set_resultEPKc($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cols = 0, $features = 0, $i$022 = 0, $i1$018 = 0, $lines = 0, $offset$016 = 0;
 var $prev$0$lcssa = 0, $prev$017 = 0, $sentence = 0, $surfaces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy = sp + 84|0;
 $lines = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 89|0;
 $sentence = sp + 56|0;
 $surfaces = sp + 44|0;
 $features = sp + 32|0;
 $cols = sp + 24|0;
 $2 = sp + 12|0;
 $3 = sp;
 $4 = sp + 88|0;
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($this)|0);
 $9 = (_strlen(($result|0))|0);
 $10 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE6strdupEPKcj($8,$result,$9)|0);
 HEAP32[$lines>>2] = 0;
 $11 = (($lines) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = (($lines) + 8|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$0>>2] = $lines;
 $13 = (_strlen(($result|0))|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $14 = (__ZN5MeCab8tokenizeINSt3__120back_insert_iteratorINS1_6vectorIPcNS1_9allocatorIS4_EEEEEEEEjS4_PKcT_j($10,5464,$$byval_copy,$13)|0);
 $15 = HEAP32[$11>>2]|0;
 $16 = HEAP32[$lines>>2]|0;
 $17 = $15;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($14|0)==($20|0);
 if (!($21)) {
  $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405088,5472)|0);
  $23 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($22,5488)|0);
  $24 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($23,804)|0);
  $25 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($24,5496)|0);
  $26 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25,5504)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($26,5528)|0);
  __ZN5MeCab3dieD1Ev($1);
  // unreachable;
 }
 ;HEAP32[$sentence+0>>2]=0|0;HEAP32[$sentence+4>>2]=0|0;HEAP32[$sentence+8>>2]=0|0;
 HEAP32[$surfaces>>2] = 0;
 $27 = (($surfaces) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = (($surfaces) + 8|0);
 HEAP32[$28>>2] = 0;
 HEAP32[$features>>2] = 0;
 $29 = (($features) + 4|0);
 HEAP32[$29>>2] = 0;
 $30 = (($features) + 8|0);
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$11>>2]|0;
 $32 = HEAP32[$lines>>2]|0;
 $33 = ($31|0)==($32|0);
 L4: do {
  if (!($33)) {
   $34 = (($cols) + 4|0);
   $36 = $32;$i$022 = 0;
   while(1) {
    $35 = (($36) + ($i$022<<2)|0);
    $37 = HEAP32[$35>>2]|0;
    $38 = (_strcmp(2624,$37)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     break L4;
    }
    $40 = (__ZN5MeCab8tokenizeIPPcEEjS1_PKcT_j($37,5536,$cols,2)|0);
    $41 = ($40|0)==(2);
    if (!($41)) {
     break L4;
    }
    $42 = HEAP32[$cols>>2]|0;
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($sentence,$42)|0);
    $43 = HEAP32[$cols>>2]|0;
    $44 = (_strlen(($43|0))|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,$43,$44);
    $45 = HEAP32[$27>>2]|0;
    $46 = HEAP32[$28>>2]|0;
    $47 = ($45>>>0)<($46>>>0);
    if ($47) {
     $48 = ($45|0)==(0|0);
     if (!($48)) {
      ;HEAP32[$45+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$45+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
     }
     $49 = HEAP32[$27>>2]|0;
     $50 = (($49) + 12|0);
     HEAP32[$27>>2] = $50;
    } else {
     __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($surfaces,$2);
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
    $51 = HEAP32[$34>>2]|0;
    $52 = (_strlen(($51|0))|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,$51,$52);
    $53 = HEAP32[$29>>2]|0;
    $54 = HEAP32[$30>>2]|0;
    $55 = ($53>>>0)<($54>>>0);
    if ($55) {
     $56 = ($53|0)==(0|0);
     if (!($56)) {
      ;HEAP32[$53+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$3+8>>2]|0;
      ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     }
     $57 = HEAP32[$29>>2]|0;
     $58 = (($57) + 12|0);
     HEAP32[$29>>2] = $58;
    } else {
     __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($features,$3);
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
    $59 = (($i$022) + 1)|0;
    $60 = HEAP32[$11>>2]|0;
    $61 = HEAP32[$lines>>2]|0;
    $62 = $60;
    $63 = $61;
    $64 = (($62) - ($63))|0;
    $65 = $64 >> 2;
    $66 = ($59>>>0)<($65>>>0);
    if ($66) {
     $36 = $61;$i$022 = $59;
    } else {
     break;
    }
   }
  }
 } while(0);
 $67 = HEAP32[$29>>2]|0;
 $68 = HEAP32[$features>>2]|0;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = HEAP32[$27>>2]|0;
 $73 = HEAP32[$surfaces>>2]|0;
 $74 = $72;
 $75 = $73;
 $76 = (($74) - ($75))|0;
 $77 = ($71|0)==($76|0);
 if (!($77)) {
  $78 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405088,5472)|0);
  $79 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($78,5488)|0);
  $80 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($79,821)|0);
  $81 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($80,5496)|0);
  $82 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($81,5544)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($82,5528)|0);
  __ZN5MeCab3dieD1Ev($4);
  // unreachable;
 }
 $83 = HEAP32[$this>>2]|0;
 $84 = (($83) + 36|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = HEAP32[$this>>2]|0;
 $87 = (($86) + 88|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (FUNCTION_TABLE_ii[$88 & 127]($this)|0);
 $90 = HEAP8[$sentence>>0]|0;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  $95 = (($sentence) + 1|0);
  $103 = $95;
 } else {
  $93 = (($sentence) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $103 = $94;
 }
 $96 = HEAP8[$sentence>>0]|0;
 $97 = $96 & 1;
 $98 = ($97<<24>>24)==(0);
 if ($98) {
  $101 = $96&255;
  $102 = $101 >>> 1;
  $104 = $102;
 } else {
  $99 = (($sentence) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $104 = $100;
 }
 $105 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE6strdupEPKcj($89,$103,$104)|0);
 FUNCTION_TABLE_vii[$85 & 63]($this,$105);
 $106 = HEAP32[$this>>2]|0;
 $107 = (($106) + 88|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (FUNCTION_TABLE_ii[$108 & 127]($this)|0);
 $110 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($109)|0);
 $111 = (($110) + 24|0);
 HEAP32[$111>>2] = 5584;
 $112 = (($110) + 28|0);
 HEAP32[$112>>2] = 5584;
 $113 = (($110) + 48|0);
 HEAP8[$113>>0] = 1;
 $114 = (($110) + 47|0);
 HEAP8[$114>>0] = 2;
 $115 = HEAP32[$this>>2]|0;
 $116 = (($115) + 88|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (FUNCTION_TABLE_ii[$117 & 127]($this)|0);
 $119 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($118)|0);
 $120 = (($119) + 24|0);
 HEAP32[$120>>2] = 5584;
 $121 = (($119) + 28|0);
 HEAP32[$121>>2] = 5584;
 $122 = (($119) + 48|0);
 HEAP8[$122>>0] = 1;
 $123 = (($119) + 47|0);
 HEAP8[$123>>0] = 3;
 $124 = (($this) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 HEAP32[$111>>2] = $125;
 $126 = (($this) + 48|0);
 $127 = HEAP32[$126>>2]|0;
 HEAP32[$127>>2] = $110;
 $128 = HEAP32[$27>>2]|0;
 $129 = HEAP32[$surfaces>>2]|0;
 $130 = ($128|0)==($129|0);
 if ($130) {
  $prev$0$lcssa = $110;
  $212 = (($prev$0$lcssa) + 4|0);
  HEAP32[$212>>2] = $119;
  HEAP32[$119>>2] = $prev$0$lcssa;
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($features);
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($surfaces);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($sentence);
  __ZNSt3__16vectorIPcNS_9allocatorIS1_EEED1Ev($lines);
  STACKTOP = sp;return;
 }
 $131 = (($this) + 60|0);
 $i1$018 = 0;$offset$016 = 0;$prev$017 = $110;
 while(1) {
  $132 = HEAP32[$this>>2]|0;
  $133 = (($132) + 88|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (FUNCTION_TABLE_ii[$134 & 127]($this)|0);
  $136 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($135)|0);
  HEAP32[$136>>2] = $prev$017;
  $137 = (($prev$017) + 4|0);
  HEAP32[$137>>2] = $136;
  $138 = HEAP32[$124>>2]|0;
  $139 = (($138) + ($offset$016)|0);
  $140 = (($136) + 24|0);
  HEAP32[$140>>2] = $139;
  $141 = HEAP32[$surfaces>>2]|0;
  $142 = (($141) + (($i1$018*12)|0)|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   $148 = $143&255;
   $149 = $148 >>> 1;
   $151 = $149;
  } else {
   $146 = ((($141) + (($i1$018*12)|0)|0) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $151 = $147;
  }
  $150 = $151&65535;
  $152 = (($136) + 36|0);
  HEAP16[$152>>1] = $150;
  $153 = HEAP32[$surfaces>>2]|0;
  $154 = (($153) + (($i1$018*12)|0)|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = $155 & 1;
  $157 = ($156<<24>>24)==(0);
  if ($157) {
   $160 = $155&255;
   $161 = $160 >>> 1;
   $163 = $161;
  } else {
   $158 = ((($153) + (($i1$018*12)|0)|0) + 4|0);
   $159 = HEAP32[$158>>2]|0;
   $163 = $159;
  }
  $162 = $163&65535;
  $164 = (($136) + 38|0);
  HEAP16[$164>>1] = $162;
  $165 = (($136) + 48|0);
  HEAP8[$165>>0] = 1;
  $166 = (($136) + 47|0);
  HEAP8[$166>>0] = 0;
  $167 = (($136) + 64|0);
  HEAP16[$167>>1] = 0;
  $168 = (($136) + 68|0);
  HEAP32[$168>>2] = 0;
  $169 = HEAP32[$this>>2]|0;
  $170 = (($169) + 88|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (FUNCTION_TABLE_ii[$171 & 127]($this)|0);
  $173 = HEAP32[$features>>2]|0;
  $174 = (($173) + (($i1$018*12)|0)|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175 & 1;
  $177 = ($176<<24>>24)==(0);
  if ($177) {
   $180 = (($174) + 1|0);
   $190 = $180;
  } else {
   $178 = ((($173) + (($i1$018*12)|0)|0) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $190 = $179;
  }
  $181 = HEAP32[$features>>2]|0;
  $182 = (($181) + (($i1$018*12)|0)|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183 & 1;
  $185 = ($184<<24>>24)==(0);
  if ($185) {
   $188 = $183&255;
   $189 = $188 >>> 1;
   $191 = $189;
  } else {
   $186 = ((($181) + (($i1$018*12)|0)|0) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $191 = $187;
  }
  $192 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE6strdupEPKcj($172,$190,$191)|0);
  $193 = (($136) + 28|0);
  HEAP32[$193>>2] = $192;
  $194 = HEAP32[$131>>2]|0;
  $195 = (($194) + ($offset$016<<2)|0);
  HEAP32[$195>>2] = $136;
  $196 = HEAP16[$152>>1]|0;
  $197 = $196&65535;
  $198 = (($197) + ($offset$016))|0;
  $199 = HEAP32[$126>>2]|0;
  $200 = (($199) + ($198<<2)|0);
  HEAP32[$200>>2] = $136;
  $201 = HEAP16[$152>>1]|0;
  $202 = $201&65535;
  $203 = (($202) + ($offset$016))|0;
  $204 = (($i1$018) + 1)|0;
  $205 = HEAP32[$27>>2]|0;
  $206 = HEAP32[$surfaces>>2]|0;
  $207 = $205;
  $208 = $206;
  $209 = (($207) - ($208))|0;
  $210 = (($209|0) / 12)&-1;
  $211 = ($204>>>0)<($210>>>0);
  if ($211) {
   $i1$018 = $204;$offset$016 = $203;$prev$017 = $136;
  } else {
   $prev$0$lcssa = $136;
   break;
  }
 }
 $212 = (($prev$0$lcssa) + 4|0);
 HEAP32[$212>>2] = $119;
 HEAP32[$119>>2] = $prev$0$lcssa;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($features);
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev($surfaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($sentence);
 __ZNSt3__16vectorIPcNS_9allocatorIS1_EEED1Ev($lines);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_111LatticeImpl4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($0) + 1|0);
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 } else {
  $4 = (($this) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl8set_whatEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$str)|0);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImplD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12_GLOBAL__N_111LatticeImplD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImplD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5208 + 8|0));
 $0 = (($this) + 108|0);
 __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED1Ev($0);
 $1 = (($this) + 100|0);
 __ZN5MeCab10scoped_ptrINS_12StringBufferEED1Ev($1);
 $2 = (($this) + 84|0);
 __ZNSt3__16vectorIhNS_9allocatorIhEEED1Ev($2);
 $3 = (($this) + 72|0);
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED1Ev($3);
 $4 = (($this) + 60|0);
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEED1Ev($4);
 $5 = (($this) + 48|0);
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEED1Ev($5);
 $6 = (($this) + 36|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 STACKTOP = sp;return;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE6strdupEPKcj($this,$str,$size) {
 $this = $this|0;
 $str = $str|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($size) + 1)|0;
 $1 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE5allocEj($this,$0)|0);
 (_strncpy(($1|0),($str|0),($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab3dieD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab3dieD2Ev(0);
 // unreachable;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEEptEv($0)|0);
 $2 = (__ZN5MeCab8FreeListI12mecab_node_tE5allocEv($1)|0);
 dest=$2+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = (($2) + 32|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return ($2|0);
}
function __ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab8FreeListI12mecab_node_tE5allocEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $6 = (($this) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  HEAP32[$1>>2] = 0;
 }
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 4|0);
 $12 = (($this) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($10|0)==($18|0);
 do {
  if ($19) {
   $20 = HEAP32[$3>>2]|0;
   $$arith = ($20*72)|0;
   $$overflow = ($20>>>0)>(59652323);
   $21 = $$overflow ? -1 : $$arith;
   $22 = (__Znaj($21)|0);
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($this) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23>>>0)<($25>>>0);
   if (!($26)) {
    __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($11,$0);
    break;
   }
   $27 = ($23|0)==(0|0);
   if (!($27)) {
    HEAP32[$23>>2] = $22;
   }
   $28 = HEAP32[$12>>2]|0;
   $29 = (($28) + 4|0);
   HEAP32[$12>>2] = $29;
  }
 } while(0);
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$11>>2]|0;
 $32 = (($31) + ($30<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[$1>>2] = $35;
 $36 = (($33) + (($34*72)|0)|0);
 STACKTOP = sp;return ($36|0);
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEEC1EjjS5_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v);
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEEC1EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1073741823;
}
function __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN5MeCab3dieD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[405088>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (405088 + ($3)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$4);
 $5 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 31]($5,10)|0);
 __ZNSt3__16localeD2Ev($0);
 (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(405088,$9)|0);
 (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(405088)|0);
 _exit(-1);
 // unreachable;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE5allocEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_13ChunkFreeListIcEEE3getEv($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (__Znwj(28)|0);
  __ZN5MeCab13ChunkFreeListIcEC1Ej($3,8192);
  __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEE5resetEPS2_($0,$3);
 }
 $4 = (__ZNK5MeCab10scoped_ptrINS_13ChunkFreeListIcEEEptEv($0)|0);
 $5 = (($size) + 1)|0;
 $6 = (__ZN5MeCab13ChunkFreeListIcE5allocEj($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK5MeCab10scoped_ptrINS_13ChunkFreeListIcEEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEE5resetEPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab13ChunkFreeListIcEC1Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab13ChunkFreeListIcEC2Ej($this,$_size);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_13ChunkFreeListIcEEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab13ChunkFreeListIcE5allocEj($this,$req) {
 $this = $this|0;
 $req = $req|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 4|0);
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 3;
 $11 = ($2>>>0)<($10>>>0);
 L1: do {
  if ($11) {
   $12 = (($this) + 16|0);
   $16 = $6;$17 = $2;
   while(1) {
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + ($req))|0;
    $15 = (($16) + ($17<<3)|0);
    $18 = HEAP32[$15>>2]|0;
    $19 = ($14>>>0)<($18>>>0);
    if ($19) {
     break;
    }
    $23 = (($17) + 1)|0;
    HEAP32[$1>>2] = $23;
    HEAP32[$12>>2] = 0;
    $24 = HEAP32[$1>>2]|0;
    $25 = HEAP32[$4>>2]|0;
    $26 = HEAP32[$3>>2]|0;
    $27 = $25;
    $28 = $26;
    $29 = (($27) - ($28))|0;
    $30 = $29 >> 3;
    $31 = ($24>>>0)<($30>>>0);
    if ($31) {
     $16 = $26;$17 = $24;
    } else {
     break L1;
    }
   }
   $20 = ((($16) + ($17<<3)|0) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($13)|0);
   HEAP32[$12>>2] = $14;
   $$0 = $22;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $32 = (($this) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33>>>0)>($req>>>0);
 $35 = $34 ? $33 : $req;
 $36 = (__Znaj($35)|0);
 HEAP32[$0>>2] = $35;
 $37 = (($0) + 4|0);
 HEAP32[$37>>2] = $36;
 $38 = HEAP32[$4>>2]|0;
 $39 = (($this) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($38>>>0)<($40>>>0);
 if ($41) {
  $42 = ($38|0)==(0|0);
  if (!($42)) {
   $43 = $0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = $38;
   $50 = $49;
   HEAP32[$50>>2] = $45;
   $51 = (($49) + 4)|0;
   $52 = $51;
   HEAP32[$52>>2] = $48;
  }
  $53 = HEAP32[$4>>2]|0;
  $54 = (($53) + 8|0);
  HEAP32[$4>>2] = $54;
 } else {
  __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($3,$0);
 }
 $55 = HEAP32[$4>>2]|0;
 $56 = HEAP32[$3>>2]|0;
 $57 = $55;
 $58 = $56;
 $59 = (($57) - ($58))|0;
 $60 = $59 >> 3;
 $61 = (($60) + -1)|0;
 HEAP32[$1>>2] = $61;
 $62 = (($this) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($req))|0;
 HEAP32[$62>>2] = $64;
 $65 = HEAP32[$1>>2]|0;
 $66 = HEAP32[$3>>2]|0;
 $67 = ((($66) + ($65<<3)|0) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $$0 = $68;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 3;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 2;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 3;
 __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEEC1EjjS6_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = $__x;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = $28;
  $37 = $36;
  HEAP32[$37>>2] = $32;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
 }
 $40 = HEAP32[$27>>2]|0;
 $41 = (($40) + 8|0);
 HEAP32[$27>>2] = $41;
 __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEEC1EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<3)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -8|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 3;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 536870911;
}
function __ZNSt3__114__split_bufferINS_4pairIjPcEERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 3;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<3)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<3)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN5MeCab13ChunkFreeListIcEC2Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5592 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (($this) + 24|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 HEAP32[$1>>2] = $_size;
 STACKTOP = sp;return;
}
function __ZN5MeCab13ChunkFreeListIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab13ChunkFreeListIcED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab13ChunkFreeListIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab13ChunkFreeListIcED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab13ChunkFreeListIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5592 + 8|0));
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 4|0);
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEED1Ev($1);
  STACKTOP = sp;return;
 } else {
  $7 = $4;$storemerge1 = 0;
 }
 while(1) {
  $6 = ((($7) + ($storemerge1<<3)|0) + 4|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = $12;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 3;
  $18 = ($11>>>0)<($17>>>0);
  if ($18) {
   $7 = $13;$storemerge1 = $11;
  } else {
   break;
  }
 }
 __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIjPcEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseINS_4pairIjPcEENS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_4pairIjPcEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -8|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 3;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE6resizeEjRKS2_($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE8__appendEjRKS2_($this,$8,$__x);
  STACKTOP = sp;return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $scevgep$i$i = (($1) + -4|0);
 $__new_last2$i$i = $10;
 $12 = (0 - ($__new_last2$i$i))|0;
 $uglygep$i$i = (($scevgep$i$i) + ($12)|0);
 $uglygep3$i$i = $uglygep$i$i;
 $13 = $uglygep3$i$i >>> 2;
 $14 = $13 ^ -1;
 $scevgep4$i$i = (($1) + ($14<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE8__appendEjRKS2_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  $$0$i = $__n;$9 = $3;
  while(1) {
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = HEAP32[$__x>>2]|0;
    HEAP32[$9>>2] = $11;
   }
   $12 = HEAP32[$2>>2]|0;
   $13 = (($12) + 4|0);
   HEAP32[$2>>2] = $13;
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$9 = $13;
   }
  }
  STACKTOP = sp;return;
 }
 $16 = (($this) + 8|0);
 $17 = HEAP32[$this>>2]|0;
 $18 = $17;
 $19 = (($5) - ($18))|0;
 $20 = $19 >> 2;
 $21 = (($20) + ($__n))|0;
 $22 = (__ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv($this)|0);
 $23 = ($22>>>0)<($21>>>0);
 if ($23) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $24 = (($this) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25;
 $27 = (($26) - ($18))|0;
 $28 = $27 >> 2;
 $29 = $22 >>> 1;
 $30 = ($28>>>0)<($29>>>0);
 if ($30) {
  $31 = $27 >> 1;
  $32 = ($31>>>0)<($21>>>0);
  $33 = $32 ? $21 : $31;
  $$0$i1 = $33;
 } else {
  $$0$i1 = $22;
 }
 $34 = HEAP32[$2>>2]|0;
 $35 = HEAP32[$this>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = $38 >> 2;
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC1EjjS5_($__v,$$0$i1,$39,$16);
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEE18__construct_at_endEjRKS2_($__v,$__n,$__x);
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v);
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC1EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEE18__construct_at_endEjRKS2_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pr = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pr;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = HEAP32[$__x>>2]|0;
   HEAP32[$1>>2] = $3;
  }
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 4|0);
  HEAP32[$0>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$1 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1073741823;
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE6resizeEjRKh($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<($__sz>>>0);
 if ($6) {
  $7 = (($__sz) - ($5))|0;
  __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($this,$7,$__x);
  STACKTOP = sp;return;
 }
 $8 = ($5>>>0)>($__sz>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($2) + ($__sz)|0);
 $10 = ($1|0)==($9|0);
 if ($10) {
  STACKTOP = sp;return;
 } else {
  $12 = $1;
 }
 while(1) {
  $11 = (($12) + -1|0);
  $13 = ($11|0)==($9|0);
  if ($13) {
   break;
  } else {
   $12 = $11;
  }
 }
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)<($__n>>>0);
 if (!($7)) {
  $$0$i = $__n;$8 = $3;
  while(1) {
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $10 = HEAP8[$__x>>0]|0;
    HEAP8[$8>>0] = $10;
   }
   $11 = HEAP32[$2>>2]|0;
   $12 = (($11) + 1|0);
   HEAP32[$2>>2] = $12;
   $13 = (($$0$i) + -1)|0;
   $14 = ($13|0)==(0);
   if ($14) {
    break;
   } else {
    $$0$i = $13;$8 = $12;
   }
  }
  STACKTOP = sp;return;
 }
 $15 = (($this) + 8|0);
 $16 = HEAP32[$this>>2]|0;
 $17 = $16;
 $18 = (($5) - ($17))|0;
 $19 = (($18) + ($__n))|0;
 $20 = (__ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($this)|0);
 $21 = ($20>>>0)<($19>>>0);
 if ($21) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $22 = (($this) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23;
 $25 = (($24) - ($17))|0;
 $26 = $20 >>> 1;
 $27 = ($25>>>0)<($26>>>0);
 if ($27) {
  $28 = $25 << 1;
  $29 = ($28>>>0)<($19>>>0);
  $30 = $29 ? $19 : $28;
  $$0$i1 = $30;
 } else {
  $$0$i1 = $20;
 }
 $31 = HEAP32[$2>>2]|0;
 $32 = HEAP32[$this>>2]|0;
 $33 = $31;
 $34 = $32;
 $35 = (($33) - ($34))|0;
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC1EjjS3_($__v,$$0$i1,$35,$15);
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEjRKh($__v,$__n,$__x);
 __ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($this,$__v);
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC1EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEjRKh($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pr = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pr;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = HEAP8[$__x>>0]|0;
   HEAP8[$1>>0] = $3;
  }
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$1 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (0 - ($6))|0;
 $9 = (($7) + ($8)|0);
 HEAP32[$3>>2] = $9;
 _memcpy(($9|0),($0|0),($6|0))|0;
 $10 = HEAP32[$this>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $11;
 HEAP32[$3>>2] = $10;
 $12 = (($__v) + 8|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$12>>2]|0;
 HEAP32[$1>>2] = $14;
 HEAP32[$12>>2] = $13;
 $15 = (($this) + 8|0);
 $16 = (($__v) + 12|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $19;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -1|0);
   $7 = ($5|0)==($1|0);
   if ($7) {
    break;
   } else {
    $6 = $5;
   }
  }
  HEAP32[$2>>2] = $5;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $4 = 0;
 } else {
  $3 = (__Znwj($__cap)|0);
  $4 = $3;
 }
 HEAP32[$this>>2] = $4;
 $5 = (($4) + ($__start)|0);
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = HEAP32[$this>>2]|0;
 $9 = (($8) + ($__cap)|0);
 $10 = (($this) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl25enumNBestAsStringInternalEjPNS_12StringBufferE($this,$N,$os) {
 $this = $this|0;
 $N = $N|0;
 $os = $os|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eon_node = 0;
 var $i$03 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $eon_node = sp;
 __ZN5MeCab12StringBuffer5clearEv($os);
 $0 = ($N|0)==(0);
 $1 = ($N>>>0)>(512);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $4 = HEAP32[$this>>2]|0;
  $5 = (($4) + 148|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vii[$6 & 63]($this,5648);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = ($N|0)==(0);
 L5: do {
  if (!($2)) {
   $3 = (($this) + 96|0);
   $i$03 = 0;
   while(1) {
    $7 = HEAP32[$this>>2]|0;
    $8 = (($7) + 64|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($this)|0);
    if (!($10)) {
     break L5;
    }
    $11 = HEAP32[$3>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     __ZN5MeCab12_GLOBAL__N_112_GLOBAL__N_112writeLatticeEPNS_7LatticeEPNS_12StringBufferE($this,$os);
    } else {
     $13 = (__ZNK5MeCab6Writer5writeEPNS_7LatticeEPNS_12StringBufferE($11,$this,$os)|0);
     if (!($13)) {
      $$1 = 0;
      break;
     }
    }
    $14 = (($i$03) + 1)|0;
    $15 = ($14>>>0)<($N>>>0);
    if ($15) {
     $i$03 = $14;
    } else {
     break L5;
    }
   }
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $16 = (($this) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  dest=$eon_node+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $19 = (($eon_node) + 47|0);
  HEAP8[$19>>0] = 4;
  $20 = (($eon_node) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = HEAP32[$this>>2]|0;
  $22 = (($21) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_ii[$23 & 127]($this)|0);
  $25 = HEAP32[$this>>2]|0;
  $26 = (($25) + 44|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_ii[$27 & 127]($this)|0);
  $29 = (($24) + ($28)|0);
  $30 = (($eon_node) + 24|0);
  HEAP32[$30>>2] = $29;
  $31 = HEAP32[$16>>2]|0;
  $32 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPK12mecab_node_tPNS_12StringBufferE($31,$this,$eon_node,$os)|0);
  if (!($32)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 }
 (__ZN5MeCab12StringBufferlsEc($os,0)|0);
 $33 = (__ZNK5MeCab12StringBuffer3strEv($os)|0);
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  $$1 = $33;
  STACKTOP = sp;return ($$1|0);
 }
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + 148|0);
 $37 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_vii[$37 & 63]($this,5688);
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function __ZN5MeCab12StringBuffer5clearEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_112_GLOBAL__N_112writeLatticeEPNS_7LatticeEPNS_12StringBufferE($lattice,$os) {
 $lattice = $lattice|0;
 $os = $os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $node$0 = 0, $node$01 = 0, $node$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = (($3) + 4|0);
 $node$01 = HEAP32[$4>>2]|0;
 $5 = (($node$01) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  (__ZN5MeCab12StringBufferlsEPKc($os,5712)|0);
  STACKTOP = sp;return;
 } else {
  $16 = $5;$node$02 = $node$01;
 }
 while(1) {
  $8 = (($node$02) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($node$02) + 36|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  (__ZN5MeCab12StringBuffer5writeEPKcj($os,$9,$12)|0);
  $13 = (__ZN5MeCab12StringBufferlsEc($os,9)|0);
  $14 = (($node$02) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  (__ZN5MeCab12StringBufferlsEPKc($13,$15)|0);
  (__ZN5MeCab12StringBufferlsEc($os,10)|0);
  $node$0 = HEAP32[$16>>2]|0;
  $17 = (($node$0) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   break;
  } else {
   $16 = $17;$node$02 = $node$0;
  }
 }
 (__ZN5MeCab12StringBufferlsEPKc($os,5712)|0);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl16toStringInternalEPK12mecab_node_tPNS_12StringBufferE($this,$node,$os) {
 $this = $this|0;
 $node = $node|0;
 $os = $os|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12StringBuffer5clearEv($os);
 $0 = ($node|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$this>>2]|0;
  $2 = (($1) + 148|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vii[$3 & 63]($this,5720);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($this) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $8 = (($node) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($node) + 36|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  (__ZN5MeCab12StringBuffer5writeEPKcj($os,$9,$12)|0);
  $13 = (__ZN5MeCab12StringBufferlsEc($os,9)|0);
  $14 = (($node) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  (__ZN5MeCab12StringBufferlsEPKc($13,$15)|0);
 } else {
  $7 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPK12mecab_node_tPNS_12StringBufferE($5,$this,$node,$os)|0);
  if (!($7)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 (__ZN5MeCab12StringBufferlsEc($os,0)|0);
 $16 = (__ZNK5MeCab12StringBuffer3strEv($os)|0);
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$this>>2]|0;
 $19 = (($18) + 148|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vii[$20 & 63]($this,5688);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl16toStringInternalEPNS_12StringBufferE($this,$os) {
 $this = $this|0;
 $os = $os|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12StringBuffer5clearEv($os);
 $0 = (($this) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZN5MeCab12_GLOBAL__N_112_GLOBAL__N_112writeLatticeEPNS_7LatticeEPNS_12StringBufferE($this,$os);
 } else {
  $3 = (__ZNK5MeCab6Writer5writeEPNS_7LatticeEPNS_12StringBufferE($1,$this,$os)|0);
  if (!($3)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 (__ZN5MeCab12StringBufferlsEc($os,0)|0);
 $4 = (__ZNK5MeCab12StringBuffer3strEv($os)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = (($6) + 148|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 63]($this,5688);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_111LatticeImpl6streamEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 100|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_12StringBufferEE3getEv($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (__Znwj(20)|0);
  __ZN5MeCab12StringBufferC1Ev($3);
  __ZN5MeCab10scoped_ptrINS_12StringBufferEE5resetEPS1_($0,$3);
 }
 $4 = (__ZNK5MeCab10scoped_ptrINS_12StringBufferEE3getEv($0)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK5MeCab10scoped_ptrINS_12StringBufferEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrINS_12StringBufferEE5resetEPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab12StringBufferC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12StringBufferC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12StringBufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((402864 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 16|0);
 HEAP8[$3>>0] = 1;
 $4 = (($this) + 17|0);
 HEAP8[$4>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE8__appendEj($this,$8);
  STACKTOP = sp;return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $scevgep$i$i = (($1) + -4|0);
 $__new_last2$i$i = $10;
 $12 = (0 - ($__new_last2$i$i))|0;
 $uglygep$i$i = (($scevgep$i$i) + ($12)|0);
 $uglygep3$i$i = $uglygep$i$i;
 $13 = $uglygep3$i$i >>> 2;
 $14 = $13 ^ -1;
 $scevgep4$i$i = (($1) + ($14<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 8|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 2;
 $14 = (($13) + ($__n))|0;
 $15 = (__ZNKSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE8max_sizeEv($this)|0);
 $16 = ($15>>>0)<($14>>>0);
 if ($16) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $17 = (($this) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = (($19) - ($11))|0;
 $21 = $20 >> 2;
 $22 = $15 >>> 1;
 $23 = ($21>>>0)<($22>>>0);
 if ($23) {
  $24 = $20 >> 1;
  $25 = ($24>>>0)<($14>>>0);
  $26 = $25 ? $14 : $24;
  $$0$i = $26;
 } else {
  $$0$i = $15;
 }
 $27 = HEAP32[$2>>2]|0;
 $28 = HEAP32[$this>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = $31 >> 2;
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEEC1EjjS5_($__v,$$0$i,$32,$9);
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v);
 __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pr = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pr;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAP32[$1>>2] = 0;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 4|0);
  HEAP32[$0>>2] = $4;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP12mecab_node_tRNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pr = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pr;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAP32[$1>>2] = 0;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 4|0);
  HEAP32[$0>>2] = $4;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE4freeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 $2 = (__ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEEptEv($1)|0);
 __ZN5MeCab8FreeListI12mecab_node_tE4freeEv($2);
 $3 = (($this) + 16|0);
 $4 = (__ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEE3getEv($3)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (__ZNK5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEEptEv($3)|0);
  __ZN5MeCab8FreeListI12mecab_path_tE4freeEv($6);
 }
 $7 = (($this) + 24|0);
 $8 = (__ZNK5MeCab10scoped_ptrINS_13ChunkFreeListIcEEE3getEv($7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (__ZNK5MeCab10scoped_ptrINS_13ChunkFreeListIcEEEptEv($7)|0);
 __ZN5MeCab13ChunkFreeListIcE4freeEv($10);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_12StringBufferEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab8FreeListI12mecab_node_tE4freeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_path_tE4freeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab13ChunkFreeListIcE4freeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIP12mecab_node_tNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIP12mecab_node_tNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIPKcNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPKcNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -1|0);
   $7 = ($5|0)==($0|0);
   if ($7) {
    break;
   } else {
    $6 = $5;
   }
  }
  HEAP32[$2>>2] = $5;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12StringBufferEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5776 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12StringBufferEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_12StringBufferEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5848 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5944 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 $2 = (__Znwj(28)|0);
 __ZN5MeCab8FreeListI12mecab_node_tEC1Ej($2,512);
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEEC1EPS3_($1,$2);
 $3 = (($this) + 16|0);
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEEC1EPS3_($3,0);
 $4 = (($this) + 24|0);
 __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEEC1EPS2_($4,0);
 $5 = (($this) + 32|0);
 __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEEC1EPS1_($5,0);
 $6 = (($this) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 44|0);
 HEAP32[$7>>2] = 0;
 $8 = (($this) + 48|0);
 HEAP32[$8>>2] = 0;
 $9 = (__Znaj(4096)|0);
 $10 = (($this) + 52|0);
 __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEEC1EPS6_($10,$9);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEEC1EPS3_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEEC2EPS3_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_node_tEC1Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI12mecab_node_tEC2Ej($this,$_size);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEEC1EPS3_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEEC2EPS3_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEEC1EPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEEC2EPS2_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEEC1EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEEC2EPS1_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEEC1EPS6_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEEC2EPS6_($this,$p);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5944 + 8|0));
 $0 = (($this) + 52|0);
 __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED1Ev($0);
 $1 = (($this) + 40|0);
 __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($1);
 $2 = (($this) + 32|0);
 __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED1Ev($2);
 $3 = (($this) + 24|0);
 __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED1Ev($3);
 $4 = (($this) + 16|0);
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED1Ev($4);
 $5 = (($this) + 8|0);
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6024 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdaPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6144 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6224 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6304 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6376 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + -1|0);
   $7 = ($5|0)==($0|0);
   if ($7) {
    break;
   } else {
    $6 = $5;
   }
  }
  HEAP32[$2>>2] = $5;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEEC2EPS6_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6024 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_14NBestGeneratorEEC2EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6376 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEEC2EPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6304 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEEC2EPS3_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6224 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_node_tEC2Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6448 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (($this) + 24|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 HEAP32[$1>>2] = $_size;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_node_tED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI12mecab_node_tED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_node_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI12mecab_node_tED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI12mecab_node_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6448 + 8|0));
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 4|0);
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEED1Ev($1);
  STACKTOP = sp;return;
 } else {
  $7 = $4;$storemerge1 = 0;
 }
 while(1) {
  $6 = (($7) + ($storemerge1<<2)|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = $12;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 2;
  $18 = ($11>>>0)<($17>>>0);
  if ($18) {
   $7 = $13;$storemerge1 = $11;
  } else {
   break;
  }
 }
 __ZNSt3__16vectorIP12mecab_node_tNS_9allocatorIS2_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEEC2EPS3_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6144 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEEC2EPS4_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5848 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_12StringBufferEEC2EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((5776 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab7LatticeD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN5MeCab7LatticeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_19ModelImplC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5ModelC2Ev($this);
 HEAP32[$this>>2] = ((6680 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (__Znwj(172)|0);
 __ZN5MeCab7ViterbiC2Ev($1);
 HEAP32[$0>>2] = $1;
 $2 = (($this) + 8|0);
 $3 = (__Znwj(200)|0);
 __ZN5MeCab6WriterC2Ev($3);
 __ZN5MeCab10scoped_ptrINS_6WriterEEC1EPS1_($2,$3);
 $4 = (($this) + 16|0);
 HEAP32[$4>>2] = 1;
 $5 = (($this) + 24|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = (($this) + 32|0);
 __ZN5MeCab16read_write_mutexC1Ev($6);
 STACKTOP = sp;return;
}
function __ZN5MeCab5ModelC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7040 + 8|0));
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_6WriterEEC1EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_6WriterEEC2EPS1_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab16read_write_mutexC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab16read_write_mutexC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_6WriterEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_6WriterEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl15dictionary_infoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK5MeCab7Viterbi9tokenizerEv($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZNK5MeCab7Viterbi9tokenizerEv($4)|0);
 $6 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE15dictionary_infoEv($5)|0);
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl15transition_costEtt($this,$rcAttr,$lcAttr) {
 $this = $this|0;
 $rcAttr = $rcAttr|0;
 $lcAttr = $lcAttr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK5MeCab7Viterbi9connectorEv($1)|0);
 $3 = (__ZNK5MeCab9Connector15transition_costEtt($2,$rcAttr,$lcAttr)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl6lookupEPKcS3_PNS_7LatticeE($this,$begin,$end,$lattice) {
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 $lattice = $lattice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK5MeCab7Viterbi9tokenizerEv($1)|0);
 $3 = HEAP32[$lattice>>2]|0;
 $4 = (($3) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($lattice)|0);
 $7 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE6lookupILb0EEEPS1_PKcS7_PNS_9AllocatorIS1_S2_EEPNS_7LatticeE($2,$begin,$end,$6,$lattice)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl12createTaggerEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12is_availableEv($this)|0);
 if (!($0)) {
  __Z14setGlobalErrorPKc(6952);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (__Znwj(56)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImplC2Ev($1);
 $2 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl4openERKNS0_9ModelImplE($1,$this)|0);
 if ($2) {
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 96|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($this) + 24|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $15;
  FUNCTION_TABLE_vid[$13 & 3]($1,$16);
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + 64|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($this) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 63]($1,$21);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($1)|0);
 __Z14setGlobalErrorPKc($6);
 $7 = ($1|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 116|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($1);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl13createLatticeEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12is_availableEv($this)|0);
 if ($0) {
  $1 = (__Znwj(120)|0);
  $2 = (($this) + 8|0);
  $3 = (__ZNK5MeCab10scoped_ptrINS_6WriterEE3getEv($2)|0);
  __ZN5MeCab12_GLOBAL__N_111LatticeImplC2EPKNS_6WriterE($1,$3);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 } else {
  __Z14setGlobalErrorPKc(6952);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab12_GLOBAL__N_19ModelImpl4swapEPNS_5ModelE($this,$model) {
 $this = $this|0;
 $model = $model|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $model_data = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $model_data = sp + 8|0;
 $l = sp;
 __ZN5MeCab10scoped_ptrINS_5ModelEEC1EPS1_($model_data,$model);
 $0 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12is_availableEv($this)|0);
 do {
  if ($0) {
   $1 = (__ZNK5MeCab10scoped_ptrINS_5ModelEE3getEv($model_data)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    __Z14setGlobalErrorPKc(6832);
    $$0 = 0;
    break;
   }
   $3 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12is_availableEv($1)|0);
   if (!($3)) {
    __Z14setGlobalErrorPKc(6856);
    $$0 = 0;
    break;
   }
   $4 = (($this) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl5mutexEv($this)|0);
   __ZN5MeCab18scoped_writer_lockC1EPNS_16read_write_mutexE($l,$6);
   $7 = (__ZN5MeCab12_GLOBAL__N_19ModelImpl12take_viterbiEv($1)|0);
   HEAP32[$4>>2] = $7;
   $8 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12request_typeEv($1)|0);
   $9 = (($this) + 16|0);
   HEAP32[$9>>2] = $8;
   $10 = (+__ZNK5MeCab12_GLOBAL__N_19ModelImpl5thetaEv($1));
   $11 = (($this) + 24|0);
   HEAPF64[$11>>3] = $10;
   __ZN5MeCab18scoped_writer_lockD1Ev($l);
   $12 = ($5|0)==(0|0);
   if ($12) {
    $$0 = 1;
   } else {
    $13 = HEAP32[$5>>2]|0;
    $14 = (($13) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vi[$15 & 511]($5);
    $$0 = 1;
   }
  } else {
   __Z14setGlobalErrorPKc(6800);
   $$0 = 0;
  }
 } while(0);
 __ZN5MeCab10scoped_ptrINS_5ModelEED1Ev($model_data);
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_19ModelImplD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12_GLOBAL__N_19ModelImplD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_19ModelImplD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6680 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = 0;
 $6 = (($this) + 8|0);
 __ZN5MeCab10scoped_ptrINS_6WriterEED1Ev($6);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_5ModelEEC1EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_5ModelEEC2EPS1_($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_5ModelEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab18scoped_writer_lockC1EPNS_16read_write_mutexE($this,$mutex) {
 $this = $this|0;
 $mutex = $mutex|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_writer_lockC2EPNS_16read_write_mutexE($this,$mutex);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl5mutexEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12_GLOBAL__N_19ModelImpl12take_viterbiEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl12request_typeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl5thetaEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$1);
}
function __ZN5MeCab18scoped_writer_lockD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_writer_lockD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_5ModelEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_5ModelEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_5ModelEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6888 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_5ModelEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_5ModelEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_writer_lockD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __ZN5MeCab16read_write_mutex12write_unlockEv($0);
 STACKTOP = sp;return;
}
function __ZN5MeCab16read_write_mutex12write_unlockEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;HEAP32[$this>>2] = (($0+-1)|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_writer_lockC2EPNS_16read_write_mutexE($this,$mutex) {
 $this = $this|0;
 $mutex = $mutex|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $mutex;
 __ZN5MeCab16read_write_mutex10write_lockEv($mutex);
 STACKTOP = sp;return;
}
function __ZN5MeCab16read_write_mutex10write_lockEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 $2 = HEAP32[$this>>2]|0;if (($2|0) == 0) HEAP32[$this>>2] = 1;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 while(1) {
  (_sched_yield()|0);
  $4 = HEAP32[$this>>2]|0;if (($4|0) == 0) HEAP32[$this>>2] = 1;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_5ModelEEC2EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6888 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl4openERKNS0_9ModelImplE($this,$model) {
 $this = $this|0;
 $model = $model|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12is_availableEv($model)|0);
 if (!($0)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($this) + 8|0);
 __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEE5resetEPS2_($1,0);
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $model;
 $3 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl12request_typeEv($model)|0);
 $4 = (($this) + 24|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$2>>2]|0;
 $6 = (+__ZNK5MeCab12_GLOBAL__N_19ModelImpl5thetaEv($5));
 $7 = (($this) + 32|0);
 HEAPF64[$7>>3] = $6;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEE5resetEPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZNK5MeCab9Connector15transition_costEtt($this,$rcAttr,$lcAttr) {
 $this = $this|0;
 $rcAttr = $rcAttr|0;
 $lcAttr = $lcAttr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $rcAttr&65535;
 $1 = (($this) + 16|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $lcAttr&65535;
 $5 = Math_imul($3, $4)|0;
 $6 = (($5) + ($0))|0;
 $7 = (($this) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 STACKTOP = sp;return ($11|0);
}
function __ZN5MeCab10scoped_ptrINS_6WriterEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6976 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_6WriterEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_6WriterEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab16read_write_mutexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_6WriterEEC2EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6976 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab5ModelD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN5MeCab5ModelD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl5modelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImplC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab6TaggerC2Ev($this);
 HEAP32[$this>>2] = ((7080 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEEC2EPS2_($1,0);
 $2 = (($this) + 16|0);
 __ZN5MeCab10scoped_ptrINS_7LatticeEEC1EPS1_($2,0);
 $3 = (($this) + 24|0);
 HEAP32[$3>>2] = 1;
 $4 = (($this) + 32|0);
 HEAPF64[$4>>3] = 0.75;
 $5 = (($this) + 40|0);
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN5MeCab6TaggerC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7368 + 8|0));
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_7LatticeEEC1EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_7LatticeEEC2EPS1_($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl5parseEPNS_7LatticeE($this,$lattice) {
 $this = $this|0;
 $lattice = $lattice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $l = sp;
 $0 = (__ZNK5MeCab12_GLOBAL__N_110TaggerImpl5modelEv($this)|0);
 $1 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl5mutexEv($0)|0);
 __ZN5MeCab18scoped_reader_lockC1EPNS_16read_write_mutexE($l,$1);
 $2 = (__ZNK5MeCab12_GLOBAL__N_110TaggerImpl5modelEv($this)|0);
 $3 = (__ZNK5MeCab12_GLOBAL__N_19ModelImpl7viterbiEv($2)|0);
 $4 = (__ZNK5MeCab7Viterbi7analyzeEPNS_7LatticeE($3,$lattice)|0);
 __ZN5MeCab18scoped_reader_lockD1Ev($l);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl5parseEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen(($str|0))|0);
 $4 = (FUNCTION_TABLE_iiii[$2 & 63]($this,$str,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl11parseToNodeEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen(($str|0))|0);
 $4 = (FUNCTION_TABLE_iiii[$2 & 63]($this,$str,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl10parseNBestEjPKc($this,$N,$str) {
 $this = $this|0;
 $N = $N|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen(($str|0))|0);
 $4 = (FUNCTION_TABLE_iiiii[$2 & 15]($this,$N,$str,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl14parseNBestInitEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen(($str|0))|0);
 $4 = (FUNCTION_TABLE_iiii[$2 & 63]($this,$str,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl8nextNodeEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($0)|0);
 if ($4) {
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_ii[$10 & 127]($0)|0);
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 } else {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 148|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vii[$7 & 63]($0,7352);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl4nextEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($0)|0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 148|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vii[$7 & 63]($0,7352);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 96|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($0)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 127]($0)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$16);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl10formatNodeEPK12mecab_node_t($this,$node) {
 $this = $this|0;
 $node = $node|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iii[$3 & 31]($0,$node)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 144|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($6)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$10);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl5parseEPKcjPcj($this,$str,$len,$out,$len2) {
 $this = $this|0;
 $str = $str|0;
 $len = $len|0;
 $out = $out|0;
 $len2 = $len2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$str,$len);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl15initRequestTypeEv($this);
 $4 = HEAP32[$this>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 31]($this,$0)|0);
 if (!($6)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
  __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$10);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 108|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 63]($0,$out,$len2)|0);
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($0)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$19);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl5parseEPKcj($this,$str,$len) {
 $this = $this|0;
 $str = $str|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$str,$len);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl15initRequestTypeEv($this);
 $4 = HEAP32[$this>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 31]($this,$0)|0);
 $7 = HEAP32[$0>>2]|0;
 if (!($6)) {
  $8 = (($7) + 144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
  __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$10);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($7) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($0)|0);
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 144|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 127]($0)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$18);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl11parseToNodeEPKcj($this,$str,$len) {
 $this = $this|0;
 $str = $str|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$str,$len);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl15initRequestTypeEv($this);
 $4 = HEAP32[$this>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 31]($this,$0)|0);
 if ($6) {
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 } else {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
  __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$10);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl10parseNBestEjPKcj($this,$N,$str,$len) {
 $this = $this|0;
 $N = $N|0;
 $str = $str|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$str,$len);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl15initRequestTypeEv($this);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$6 & 63]($0,2);
 $7 = HEAP32[$this>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 31]($this,$0)|0);
 if (!($9)) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 144|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_ii[$12 & 127]($0)|0);
  __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$13);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 104|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iii[$16 & 31]($0,$N)|0);
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 144|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 127]($0)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$22);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl14parseNBestInitEPKcj($this,$str,$len) {
 $this = $this|0;
 $str = $str|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$str,$len);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl15initRequestTypeEv($this);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$6 & 63]($0,2);
 $7 = HEAP32[$this>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 31]($this,$0)|0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($0)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$13);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl4nextEPcj($this,$out,$len2) {
 $this = $this|0;
 $out = $out|0;
 $len2 = $len2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($0)|0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 148|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vii[$7 & 63]($0,7352);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iiii[$10 & 63]($0,$out,$len2)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 127]($0)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$16);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl10parseNBestEjPKcjPcj($this,$N,$str,$len,$out,$len2) {
 $this = $this|0;
 $N = $N|0;
 $str = $str|0;
 $len = $len|0;
 $out = $out|0;
 $len2 = $len2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$str,$len);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl15initRequestTypeEv($this);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$6 & 63]($0,2);
 $7 = HEAP32[$this>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 31]($this,$0)|0);
 if (!($9)) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 144|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_ii[$12 & 127]($0)|0);
  __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$13);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 116|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iiiii[$16 & 15]($0,$N,$out,$len2)|0);
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 144|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 127]($0)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$22);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl10formatNodeEPK12mecab_node_tPcj($this,$node,$out,$len) {
 $this = $this|0;
 $node = $node|0;
 $out = $out|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 15]($0,$node,$out,$len)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 144|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($6)|0);
 __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$10);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl16set_request_typeEi($this,$request_type) {
 $this = $this|0;
 $request_type = $request_type|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $request_type;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl12request_typeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl7partialEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)!=(0);
 STACKTOP = sp;return ($3|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl11set_partialEb($this,$partial) {
 $this = $this|0;
 $partial = $partial|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -5;
 $3 = $1 | 4;
 $storemerge = $partial ? $3 : $2;
 HEAP32[$0>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl13lattice_levelEv($this) {
 $this = $this|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 8;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $1 >>> 1;
  $$lobit = $4 & 1;
  $$0 = $$lobit;
 } else {
  $$0 = 2;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl17set_lattice_levelEi($this,$level) {
 $this = $this|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($level|0) == 2)) {
  $6 = (($this) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 | 8;
  HEAP32[$6>>2] = $8;
 } else if ((($level|0) == 0)) {
  $0 = (($this) + 24|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = $1 | 1;
  HEAP32[$0>>2] = $2;
 } else if ((($level|0) == 1)) {
  $3 = (($this) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 | 2;
  HEAP32[$3>>2] = $5;
 }
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl10all_morphsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 32;
 $3 = ($2|0)!=(0);
 STACKTOP = sp;return ($3|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl14set_all_morphsEb($this,$all_morphs) {
 $this = $this|0;
 $all_morphs = $all_morphs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -33;
 $3 = $1 | 32;
 $storemerge = $all_morphs ? $3 : $2;
 HEAP32[$0>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl9set_thetaEf($this,$theta) {
 $this = $this|0;
 $theta = +$theta;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $theta;
 $1 = (($this) + 32|0);
 HEAPF64[$1>>3] = $0;
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl5thetaEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = +HEAPF64[$0>>3];
 $2 = $1;
 STACKTOP = sp;return (+$2);
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl15dictionary_infoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK5MeCab12_GLOBAL__N_110TaggerImpl5modelEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($0)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK5MeCab12_GLOBAL__N_110TaggerImpl4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($0) + 1|0);
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 } else {
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImplD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12_GLOBAL__N_110TaggerImplD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImplD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7080 + 8|0));
 $0 = (($this) + 40|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $1 = (($this) + 16|0);
 __ZN5MeCab10scoped_ptrINS_7LatticeEED1Ev($1);
 $2 = (($this) + 8|0);
 __ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_7LatticeEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_7LatticeEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_7LatticeEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7288 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 156|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_7LatticeEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_7LatticeEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_7LatticeEE3getEv($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (__ZNK5MeCab12_GLOBAL__N_110TaggerImpl5modelEv($this)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_ii[$6 & 127]($3)|0);
  __ZN5MeCab10scoped_ptrINS_7LatticeEE5resetEPS1_($0,$7);
 }
 $8 = (__ZNK5MeCab10scoped_ptrINS_7LatticeEE3getEv($0)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl8set_whatEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$str)|0);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrINS_7LatticeEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrINS_7LatticeEE5resetEPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 156|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_110TaggerImpl15initRequestTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vii[$3 & 63]($0,$5);
 $6 = (__ZN5MeCab12_GLOBAL__N_110TaggerImpl15mutable_latticeEv($this)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($this) + 32|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11;
 FUNCTION_TABLE_vid[$9 & 3]($6,$12);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_reader_lockC1EPNS_16read_write_mutexE($this,$mutex) {
 $this = $this|0;
 $mutex = $mutex|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_reader_lockC2EPNS_16read_write_mutexE($this,$mutex);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12_GLOBAL__N_19ModelImpl7viterbiEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab18scoped_reader_lockD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_reader_lockD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_reader_lockD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __ZN5MeCab16read_write_mutex11read_unlockEv($0);
 STACKTOP = sp;return;
}
function __ZN5MeCab16read_write_mutex11read_unlockEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;HEAP32[$this>>2] = (($0+-2)|0);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_reader_lockC2EPNS_16read_write_mutexE($this,$mutex) {
 $this = $this|0;
 $mutex = $mutex|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $mutex;
 __ZN5MeCab16read_write_mutex9read_lockEv($mutex);
 STACKTOP = sp;return;
}
function __ZN5MeCab16read_write_mutex9read_lockEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  while(1) {
   (_sched_yield()|0);
   $3 = HEAP32[$0>>2]|0;
   $4 = ($3|0)>(0);
   if (!($4)) {
    break;
   }
  }
 }
 $5 = HEAP32[$this>>2]|0;HEAP32[$this>>2] = (($5+2)|0);
 $6 = HEAP32[$this>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 while(1) {
  (_sched_yield()|0);
  $9 = HEAP32[$this>>2]|0;
  $10 = $9 & 1;
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_7LatticeEEC2EPS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7288 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab6TaggerD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN5MeCab6TaggerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab14decode_charsetEPKc($charset) {
 $charset = $charset|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 $0 = (_strlen(($charset|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($tmp,$charset,$0);
 (__ZN5MeCab7toLowerEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($tmp)|0);
 $1 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7496)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 1;
 } else {
  $3 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7504)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7520)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$0 = 1;
   } else {
    $7 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7536)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     $$0 = 1;
    } else {
     $9 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7544)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7552)|0);
      $12 = ($11|0)==(0);
      if ($12) {
       $$0 = 0;
      } else {
       $13 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7560)|0);
       $14 = ($13|0)==(0);
       if ($14) {
        $$0 = 0;
       } else {
        $15 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7568)|0);
        $16 = ($15|0)==(0);
        if ($16) {
         $$0 = 2;
        } else {
         $17 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7576)|0);
         $18 = ($17|0)==(0);
         if ($18) {
          $$0 = 2;
         } else {
          $19 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7584)|0);
          $20 = ($19|0)==(0);
          if ($20) {
           $$0 = 2;
          } else {
           $21 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7592)|0);
           $22 = ($21|0)==(0);
           if ($22) {
            $$0 = 3;
           } else {
            $23 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7600)|0);
            $24 = ($23|0)==(0);
            if ($24) {
             $$0 = 3;
            } else {
             $25 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7608)|0);
             $26 = ($25|0)==(0);
             if ($26) {
              $$0 = 3;
             } else {
              $27 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7616)|0);
              $28 = ($27|0)==(0);
              if ($28) {
               $$0 = 5;
              } else {
               $29 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7624)|0);
               $30 = ($29|0)==(0);
               if ($30) {
                $$0 = 5;
               } else {
                $31 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7640)|0);
                $32 = ($31|0)==(0);
                if ($32) {
                 $$0 = 5;
                } else {
                 $33 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7656)|0);
                 $34 = ($33|0)==(0);
                 if ($34) {
                  $$0 = 4;
                 } else {
                  $35 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7664)|0);
                  $36 = ($35|0)==(0);
                  if ($36) {
                   $$0 = 4;
                  } else {
                   $37 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7680)|0);
                   $38 = ($37|0)==(0);
                   if ($38) {
                    $$0 = 4;
                   } else {
                    $39 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($tmp,7696)|0);
                    $40 = ($39|0)==(0);
                    $$ = $40 ? 6 : 2;
                    $$0 = $$;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($tmp);
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab7toLowerEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($s) {
 $s = $s|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 1|0);
 $1 = (($s) + 1|0);
 $2 = (($s) + 8|0);
 $3 = (($s) + 8|0);
 $4 = (($s) + 4|0);
 $i$0 = 0;
 while(1) {
  $5 = HEAP8[$s>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $9 = $5&255;
   $10 = $9 >>> 1;
   $12 = $10;
  } else {
   $8 = HEAP32[$4>>2]|0;
   $12 = $8;
  }
  $11 = ($i$0>>>0)<($12>>>0);
  if (!($11)) {
   break;
  }
  $13 = HEAP8[$s>>0]|0;
  $14 = $13 & 1;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $18 = $0;
  } else {
   $16 = HEAP32[$3>>2]|0;
   $18 = $16;
  }
  $17 = (($18) + ($i$0)|0);
  $19 = HEAP8[$17>>0]|0;
  $$off = (($19) + -65)<<24>>24;
  $20 = ($$off&255)<(26);
  if ($20) {
   $21 = $19&255;
   $22 = (($21) + 32)|0;
   $23 = $22&255;
   $24 = HEAP8[$s>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $1;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $29 = $27;
   }
   $28 = (($29) + ($i$0)|0);
   HEAP8[$28>>0] = $23;
  }
  $30 = (($i$0) + 1)|0;
  $i$0 = $30;
 }
 STACKTOP = sp;return 1;
}
function __ZN5MeCab15create_filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($agg$result,$path,$file) {
 $agg$result = $agg$result|0;
 $path = $path|0;
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$path);
 $0 = HEAP8[$agg$result>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($agg$result) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = HEAP8[$agg$result>>0]|0;
  $10 = $9 & 1;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $14 = $9&255;
   $15 = $14 >>> 1;
   $17 = $15;
  } else {
   $12 = (($agg$result) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $17 = $13;
  }
  $16 = (($17) + -1)|0;
  $18 = HEAP8[$agg$result>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $23 = (($agg$result) + 1|0);
   $25 = $23;
  } else {
   $21 = (($agg$result) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $25 = $22;
  }
  $24 = (($25) + ($16)|0);
  $26 = HEAP8[$24>>0]|0;
  $27 = ($26<<24>>24)==(47);
  if (!($27)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,47);
  }
 }
 $28 = HEAP8[$file>>0]|0;
 $29 = $28 & 1;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $33 = (($file) + 1|0);
  $41 = $33;
 } else {
  $31 = (($file) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $41 = $32;
 }
 $34 = HEAP8[$file>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $39 = $34&255;
  $40 = $39 >>> 1;
  $42 = $40;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg$result,$41,$42)|0);
  STACKTOP = sp;return;
 } else {
  $37 = (($file) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $42 = $38;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg$result,$41,$42)|0);
  STACKTOP = sp;return;
 }
}
function __ZN5MeCab15remove_filenameEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len$0 = 0, $len$0$in = 0, $len$0$in$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP8[$s>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = $1&255;
  $7 = $6 >>> 1;
  $len$0$in$ph = $7;
 } else {
  $4 = (($s) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $len$0$in$ph = $5;
 }
 $8 = (($s) + 1|0);
 $9 = (($s) + 8|0);
 $len$0$in = $len$0$in$ph;
 while(1) {
  $len$0 = (($len$0$in) + -1)|0;
  $10 = ($len$0$in|0)>(0);
  if (!($10)) {
   label = 13;
   break;
  }
  $11 = HEAP8[$s>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $16 = $8;
  } else {
   $14 = HEAP32[$9>>2]|0;
   $16 = $14;
  }
  $15 = (($16) + ($len$0)|0);
  $17 = HEAP8[$15>>0]|0;
  $18 = ($17<<24>>24)==(47);
  if ($18) {
   break;
  } else {
   $len$0$in = $len$0;
  }
 }
 if ((label|0) == 13) {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($s,7704)|0);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_($0,$s,0,$len$0,$s);
 $19 = HEAP8[$s>>0]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $25 = (($s) + 1|0);
  HEAP8[$25>>0] = 0;
  HEAP8[$s>>0] = 0;
 } else {
  $22 = (($s) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP8[$23>>0] = 0;
  $24 = (($s) + 4|0);
  HEAP32[$24>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($s,0);
 ;HEAP32[$s+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$s+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$s+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZN5MeCab14replace_stringEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKS6_S9_($s,$src,$dst) {
 $s = $s|0;
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$src>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($src) + 1|0);
  $13 = $5;
 } else {
  $3 = (($src) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $13 = $4;
 }
 $6 = HEAP8[$src>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($src) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $15 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj($s,$13,0,$14)|0);
 $16 = ($15|0)==(-1);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = HEAP8[$src>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = $17&255;
  $23 = $22 >>> 1;
  $37 = $23;
 } else {
  $20 = (($src) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $37 = $21;
 }
 $24 = HEAP8[$dst>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $29 = (($dst) + 1|0);
  $38 = $29;
 } else {
  $27 = (($dst) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $38 = $28;
 }
 $30 = HEAP8[$dst>>0]|0;
 $31 = $30 & 1;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $35 = $30&255;
  $36 = $35 >>> 1;
  $39 = $36;
 } else {
  $33 = (($dst) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $39 = $34;
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj($s,$15,$37,$38,$39)|0);
 STACKTOP = sp;return;
}
function __ZN5MeCab17load_request_typeERKNS_5ParamE($param) {
 $param = $param|0;
 var $$ = 0, $$request_type$1 = 0, $$request_type$3 = 0, $$request_type$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $request_type$1 = 0, $request_type$3 = 0;
 var $request_type$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK5MeCab5Param3getIbEET_PKc($param,7712)|0);
 $$ = $0 ? 65 : 1;
 $1 = (__ZNK5MeCab5Param3getIbEET_PKc($param,7736)|0);
 $2 = $$ | 4;
 $request_type$1 = $1 ? $2 : $$;
 $3 = (__ZNK5MeCab5Param3getIbEET_PKc($param,7744)|0);
 $4 = $request_type$1 | 32;
 $$request_type$1 = $3 ? $4 : $request_type$1;
 $5 = (__ZNK5MeCab5Param3getIbEET_PKc($param,7760)|0);
 $6 = $$request_type$1 | 8;
 $request_type$3 = $5 ? $6 : $$request_type$1;
 $7 = (__ZNK5MeCab5Param3getIiEET_PKc($param,7776)|0);
 $8 = ($7|0)>(1);
 $9 = $request_type$3 | 2;
 $$request_type$3 = $8 ? $9 : $request_type$3;
 $10 = (__ZNK5MeCab5Param3getIiEET_PKc($param,7784)|0);
 $11 = ($10|0)>(0);
 $request_type$5 = $11 ? $9 : $$request_type$3;
 $12 = ($10|0)>(1);
 $13 = $request_type$5 | 8;
 $$request_type$5 = $12 ? $13 : $request_type$5;
 STACKTOP = sp;return ($$request_type$5|0);
}
function __ZN5MeCab24load_dictionary_resourceEPNS_5ParamE($param) {
 $param = $param|0;
 var $$1 = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dicdir = 0, $ifs = 0, $rcfile = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $rcfile = sp + 272|0;
 $s = sp + 260|0;
 $0 = sp + 248|0;
 $1 = sp + 236|0;
 $ifs = sp + 48|0;
 $dicdir = sp + 36|0;
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($rcfile,$param,7800);
 $5 = HEAP8[$rcfile>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $12 = $11;
 } else {
  $8 = (($rcfile) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = (_getenv((7808|0))|0);
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = (_strlen(($14|0))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$14,$16);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,7816,8);
   __ZN5MeCab15create_filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($s,$0,$1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
   $17 = HEAP8[$s>>0]|0;
   $18 = $17 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = (($s) + 1|0);
    $33 = $22;
   } else {
    $20 = (($s) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $33 = $21;
   }
   $23 = (($ifs) + 108|0);
   $24 = (($ifs) + 8|0);
   HEAP32[$ifs>>2] = ((3336 + 12|0));
   $25 = (($ifs) + 108|0);
   HEAP32[$25>>2] = ((3336 + 32|0));
   $26 = (($ifs) + 4|0);
   HEAP32[$26>>2] = 0;
   $27 = HEAP32[$ifs>>2]|0;
   $28 = (($27) + -12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($ifs) + ($29)|0);
   __ZNSt3__18ios_base4initEPv($30,$24);
   $$sum$i$i = (($29) + 72)|0;
   $31 = (($ifs) + ($$sum$i$i)|0);
   HEAP32[$31>>2] = 0;
   $$sum1$i$i = (($29) + 76)|0;
   $32 = (($ifs) + ($$sum1$i$i)|0);
   HEAP32[$32>>2] = -1;
   HEAP32[$ifs>>2] = ((3216 + 12|0));
   HEAP32[$23>>2] = ((3216 + 32|0));
   __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($24);
   $34 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($24,$33,8)|0);
   $35 = ($34|0)==(0|0);
   if ($35) {
    $36 = HEAP32[$ifs>>2]|0;
    $37 = (($36) + -12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($ifs) + ($38)|0);
    $$sum$i = (($38) + 16)|0;
    $40 = (($ifs) + ($$sum$i)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41 | 4;
    __ZNSt3__18ios_base5clearEj($39,$42);
   }
   $43 = HEAP32[$ifs>>2]|0;
   $44 = (($43) + -12|0);
   $45 = HEAP32[$44>>2]|0;
   $$sum = (($45) + 16)|0;
   $46 = (($ifs) + ($$sum)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & 5;
   $49 = ($48|0)==(0);
   if ($49) {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($rcfile,$s)|0);
   }
   __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($ifs);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($s);
  }
 }
 $50 = HEAP8[$rcfile>>0]|0;
 $51 = $50 & 1;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  $55 = $50&255;
  $56 = $55 >>> 1;
  $57 = $56;
 } else {
  $53 = (($rcfile) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $57 = $54;
 }
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = (_getenv((7832|0))|0);
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($rcfile,$59)|0);
  }
 }
 $61 = HEAP8[$rcfile>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if ($63) {
  $66 = $61&255;
  $67 = $66 >>> 1;
  $68 = $67;
 } else {
  $64 = (($rcfile) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $68 = $65;
 }
 $69 = ($68|0)==(0);
 if ($69) {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($rcfile,7840)|0);
 }
 $70 = HEAP8[$rcfile>>0]|0;
 $71 = $70 & 1;
 $72 = ($71<<24>>24)==(0);
 if ($72) {
  $75 = (($rcfile) + 1|0);
  $76 = $75;
 } else {
  $73 = (($rcfile) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $76 = $74;
 }
 $77 = (__ZN5MeCab5Param4loadEPKc($param,$76)|0);
 if (!($77)) {
  $$1 = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($rcfile);
  STACKTOP = sp;return ($$1|0);
 }
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($dicdir,$param,7864);
 $78 = HEAP8[$dicdir>>0]|0;
 $79 = $78 & 1;
 $80 = ($79<<24>>24)==(0);
 if ($80) {
  $83 = $78&255;
  $84 = $83 >>> 1;
  $85 = $84;
 } else {
  $81 = (($dicdir) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $85 = $82;
 }
 $86 = ($85|0)==(0);
 if ($86) {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($dicdir,7704)|0);
 }
 __ZN5MeCab15remove_filenameEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($rcfile);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,7872,9);
 __ZN5MeCab14replace_stringEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKS6_S9_($dicdir,$2,$rcfile);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($param,7864,$dicdir,1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($4,7888,5);
 __ZN5MeCab15create_filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($3,$dicdir,$4);
 $87 = HEAP8[$dicdir>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $93 = (($dicdir) + 1|0);
  HEAP8[$93>>0] = 0;
  HEAP8[$dicdir>>0] = 0;
 } else {
  $90 = (($dicdir) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  HEAP8[$91>>0] = 0;
  $92 = (($dicdir) + 4|0);
  HEAP32[$92>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($dicdir,0);
 ;HEAP32[$dicdir+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$dicdir+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$dicdir+8>>2]=HEAP32[$3+8>>2]|0;
 ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 $94 = HEAP8[$dicdir>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = (($dicdir) + 1|0);
  $100 = $99;
 } else {
  $97 = (($dicdir) + 8|0);
  $98 = HEAP32[$97>>2]|0;
  $100 = $98;
 }
 $101 = (__ZN5MeCab5Param4loadEPKc($param,$100)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($dicdir);
 $$1 = $101;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($rcfile);
 STACKTOP = sp;return ($$1|0);
}
function __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($this,$key,$value,$rewrite) {
 $this = $this|0;
 $key = $key|0;
 $value = $value|0;
 $rewrite = $rewrite|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $key2 = sp + 28|0;
 $0 = sp + 24|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (_strlen(($key|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($key2,$key,$3);
 if (!($rewrite)) {
  $4 = (($this) + 4|0);
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($0,$4,$key2);
  $5 = (($this) + 8|0);
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==($5|0);
  if (!($7)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($key2);
   STACKTOP = sp;return;
  }
 }
 $8 = (($this) + 4|0);
 $9 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSA_($8,$key2)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($2,$value);
 __ZN12_GLOBAL__N_112lexical_castINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_EET_T0_184($1,$2);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $16 = (($9) + 1|0);
  HEAP8[$16>>0] = 0;
  HEAP8[$9>>0] = 0;
 } else {
  $13 = (($9) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP8[$14>>0] = 0;
  $15 = (($9) + 4|0);
  HEAP32[$15>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($9,0);
 ;HEAP32[$9+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($key2);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSA_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__h = 0, $__parent = 0, $__r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__parent = sp + 12|0;
 $__h = sp;
 $0 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($this,$__parent,$__k)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $__r$0 = $1;
  $6 = (($__r$0) + 28|0);
  STACKTOP = sp;return ($6|0);
 }
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSA_($__h,$this,$__k);
 $3 = HEAP32[$__parent>>2]|0;
 $4 = HEAP32[$__h>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSI_SI_($this,$3,$0,$4);
 $5 = HEAP32[$__h>>2]|0;
 HEAP32[$__h>>2] = 0;
 $__r$0 = $5;
 $6 = (($__r$0) + 28|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12_GLOBAL__N_112lexical_castINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_EET_T0_184($agg$result,$arg) {
 $agg$result = $agg$result|0;
 $arg = $arg|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$arg+8>>2]|0;
 ;HEAP32[$arg+0>>2]=0|0;HEAP32[$arg+4>>2]=0|0;HEAP32[$arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $$$$i$i$i = 0, $$$$i$i$i5 = 0, $$$i$i$i = 0, $$$i$i$i4 = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__nd$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $82 = (($this) + 4|0);
  HEAP32[$__parent>>2] = $82;
  $$0 = $82;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP8[$__k>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 $6 = $3&255;
 $7 = $6 >>> 1;
 $8 = $3 & 1;
 $9 = ($8<<24>>24)==(0);
 $10 = (($__k) + 1|0);
 $11 = (($__k) + 1|0);
 $12 = (($__k) + 8|0);
 $13 = (($__k) + 4|0);
 $14 = (($__k) + 8|0);
 $15 = (($__k) + 4|0);
 $__nd$0$in = $1;
 while(1) {
  $16 = (($__nd$0$in) + 16|0);
  if ($5) {
   $34 = $7;
  } else {
   $17 = HEAP32[$15>>2]|0;
   $34 = $17;
  }
  $18 = HEAP8[$16>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $23 = $18&255;
   $24 = $23 >>> 1;
   $32 = $24;
  } else {
   $21 = (($__nd$0$in) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $32 = $22;
  }
  if ($9) {
   $36 = $10;
  } else {
   $25 = HEAP32[$14>>2]|0;
   $36 = $25;
  }
  $26 = HEAP8[$16>>0]|0;
  $27 = $26 & 1;
  $28 = ($27<<24>>24)==(0);
  if ($28) {
   $31 = (($16) + 1|0);
   $37 = $31;
  } else {
   $29 = (($__nd$0$in) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $37 = $30;
  }
  $33 = ($32>>>0)<($34>>>0);
  $35 = $33 ? $32 : $34;
  $38 = (_memcmp($36,$37,$35)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = ($34>>>0)<($32>>>0);
   $$$i$i$i4 = $33&1;
   $$$$i$i$i5 = $40 ? -1 : $$$i$i$i4;
   $41 = $$$$i$i$i5;
  } else {
   $41 = $38;
  }
  $42 = ($41|0)<(0);
  if ($42) {
   $43 = HEAP32[$__nd$0$in>>2]|0;
   $44 = ($43|0)==(0|0);
   if ($44) {
    label = 17;
    break;
   } else {
    $__nd$0$in = $43;
    continue;
   }
  }
  $45 = HEAP8[$16>>0]|0;
  $46 = $45 & 1;
  $47 = ($46<<24>>24)==(0);
  if ($47) {
   $50 = $45&255;
   $51 = $50 >>> 1;
   $70 = $51;
  } else {
   $48 = (($__nd$0$in) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $70 = $49;
  }
  $52 = HEAP8[$__k>>0]|0;
  $53 = $52 & 1;
  $54 = ($53<<24>>24)==(0);
  if ($54) {
   $56 = $52&255;
   $57 = $56 >>> 1;
   $68 = $57;
  } else {
   $55 = HEAP32[$13>>2]|0;
   $68 = $55;
  }
  $58 = HEAP8[$16>>0]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $63 = (($16) + 1|0);
   $72 = $63;
  } else {
   $61 = (($__nd$0$in) + 24|0);
   $62 = HEAP32[$61>>2]|0;
   $72 = $62;
  }
  $64 = HEAP8[$__k>>0]|0;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $73 = $11;
  } else {
   $67 = HEAP32[$12>>2]|0;
   $73 = $67;
  }
  $69 = ($68>>>0)<($70>>>0);
  $71 = $69 ? $68 : $70;
  $74 = (_memcmp($72,$73,$71)|0);
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = ($70>>>0)<($68>>>0);
   $$$i$i$i = $69&1;
   $$$$i$i$i = $76 ? -1 : $$$i$i$i;
   $77 = $$$$i$i$i;
  } else {
   $77 = $74;
  }
  $78 = ($77|0)<(0);
  if (!($78)) {
   label = 34;
   break;
  }
  $79 = (($__nd$0$in) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)==(0|0);
  if ($81) {
   label = 33;
   break;
  } else {
   $__nd$0$in = $80;
  }
 }
 if ((label|0) == 17) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__nd$0$in;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 33) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $79;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 34) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__parent;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSA_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(40)|0);
 $1 = (($0) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($1,$__k);
 $2 = (($this) + 4|0);
 $3 = $2;
 $4 = (($0) + 28|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 HEAP32[$agg$result>>2] = $0;
 $5 = (($agg$result) + 4|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 257;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSI_SI_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__new_node>>2] = 0;
 $0 = (($__new_node) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($__new_node) + 8|0);
 HEAP32[$1>>2] = $__parent;
 HEAP32[$__child>>2] = $__new_node;
 $2 = HEAP32[$this>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  HEAP32[$this>>2] = $3;
 }
 $5 = (($this) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$__child>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($6,$7);
 $8 = (($this) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $$0$be = 0, $$04 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__x|0)==($__root|0);
 $1 = (($__x) + 12|0);
 $2 = $0&1;
 HEAP8[$1>>0] = $2;
 $3 = ($__x|0)==($__root|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $$04 = $__x;
 }
 while(1) {
  $4 = (($$04) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   label = 17;
   break;
  }
  $9 = (($5) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==($5|0);
  if ($12) {
   $13 = (($10) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    label = 7;
    break;
   }
   $16 = (($14) + 12|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if (!($18)) {
    label = 7;
    break;
   }
   HEAP8[$6>>0] = 1;
   $19 = HEAP32[$9>>2]|0;
   $20 = ($19|0)==($__root|0);
   $21 = (($19) + 12|0);
   $22 = $20&1;
   HEAP8[$21>>0] = $22;
   HEAP8[$16>>0] = 1;
   $$0$be = $19;
  } else {
   $32 = ($11|0)==(0|0);
   if ($32) {
    label = 14;
    break;
   }
   $33 = (($11) + 12|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ($34<<24>>24)==(0);
   if (!($35)) {
    label = 14;
    break;
   }
   HEAP8[$6>>0] = 1;
   $36 = HEAP32[$9>>2]|0;
   $37 = ($36|0)==($__root|0);
   $38 = (($36) + 12|0);
   $39 = $37&1;
   HEAP8[$38>>0] = $39;
   HEAP8[$33>>0] = 1;
   $$0$be = $36;
  }
  $40 = ($$0$be|0)==($__root|0);
  if ($40) {
   label = 17;
   break;
  } else {
   $$04 = $$0$be;
  }
 }
 if ((label|0) == 7) {
  $23 = HEAP32[$4>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==($$04|0);
  if ($25) {
   $$1 = $$04;
  } else {
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($23);
   $$1 = $23;
  }
  $26 = (($$1) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 12|0);
  HEAP8[$28>>0] = 1;
  $29 = (($27) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 12|0);
  HEAP8[$31>>0] = 0;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($30);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $41 = HEAP32[$4>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==($$04|0);
  if ($43) {
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($41);
   $$2 = $41;
  } else {
   $$2 = $$04;
  }
  $44 = (($$2) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 12|0);
  HEAP8[$46>>0] = 1;
  $47 = (($45) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 12|0);
  HEAP8[$49>>0] = 0;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($48);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__x) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (($2) + 8|0);
  HEAP32[$4>>2] = $__x;
 }
 $5 = (($__x) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$5>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($__x|0);
 if ($10) {
  HEAP32[$8>>2] = $1;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $1;
  STACKTOP = sp;return;
 } else {
  $11 = (($8) + 4|0);
  HEAP32[$11>>2] = $1;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $1;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__x>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$__x>>2] = $2;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (($2) + 8|0);
  HEAP32[$4>>2] = $__x;
 }
 $5 = (($__x) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$5>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($__x|0);
 if ($10) {
  HEAP32[$8>>2] = $0;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $0;
  STACKTOP = sp;return;
 } else {
  $11 = (($8) + 4|0);
  HEAP32[$11>>2] = $0;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $$$$i$i$i$i = 0, $$$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p = sp;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($__p,$this,$__v,$1,$2);
 $3 = HEAP32[$__p>>2]|0;
 $4 = ($3|0)==($2|0);
 if (!($4)) {
  $5 = (($3) + 16|0);
  $6 = HEAP8[$__v>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $11 = $6&255;
   $12 = $11 >>> 1;
   $34 = $12;
  } else {
   $9 = (($__v) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $34 = $10;
  }
  $13 = HEAP8[$5>>0]|0;
  $14 = $13 & 1;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $18 = $13&255;
   $19 = $18 >>> 1;
   $32 = $19;
  } else {
   $16 = (($3) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $32 = $17;
  }
  $20 = HEAP8[$__v>>0]|0;
  $21 = $20 & 1;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $25 = (($__v) + 1|0);
   $36 = $25;
  } else {
   $23 = (($__v) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $36 = $24;
  }
  $26 = HEAP8[$5>>0]|0;
  $27 = $26 & 1;
  $28 = ($27<<24>>24)==(0);
  if ($28) {
   $31 = (($5) + 1|0);
   $37 = $31;
  } else {
   $29 = (($3) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $37 = $30;
  }
  $33 = ($32>>>0)<($34>>>0);
  $35 = $33 ? $32 : $34;
  $38 = (_memcmp($36,$37,$35)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = ($34>>>0)<($32>>>0);
   $$$i$i$i$i = $33&1;
   $$$$i$i$i$i = $40 ? -1 : $$$i$i$i$i;
   $41 = $$$$i$i$i$i;
  } else {
   $41 = $38;
  }
  $42 = ($41|0)<(0);
  if (!($42)) {
   $43 = HEAP32[$__p>>2]|0;
   HEAP32[$agg$result>>2] = $43;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$agg$result>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $$$$i$i$i$i = 0, $$$i$i$i$i = 0, $$0$ph5 = 0, $$0$ph7 = 0, $$01$ph6 = 0, $$013 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__root|0)==(0|0);
 if ($0) {
  $$0$ph5 = $__result;
  HEAP32[$agg$result>>2] = $$0$ph5;
  STACKTOP = sp;return;
 }
 $1 = HEAP8[$__v>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = $1&255;
 $5 = $4 >>> 1;
 $6 = $1 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = (($__v) + 1|0);
 $9 = (($__v) + 8|0);
 $10 = (($__v) + 4|0);
 $$0$ph7 = $__result;$$01$ph6 = $__root;
 L4: while(1) {
  $$013 = $$01$ph6;
  while(1) {
   $11 = (($$013) + 16|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 & 1;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $17 = $12&255;
    $18 = $17 >>> 1;
    $29 = $18;
   } else {
    $15 = (($$013) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $29 = $16;
   }
   if ($3) {
    $27 = $5;
   } else {
    $19 = HEAP32[$10>>2]|0;
    $27 = $19;
   }
   $20 = HEAP8[$11>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($11) + 1|0);
    $31 = $25;
   } else {
    $23 = (($$013) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $31 = $24;
   }
   if ($7) {
    $32 = $8;
   } else {
    $26 = HEAP32[$9>>2]|0;
    $32 = $26;
   }
   $28 = ($27>>>0)<($29>>>0);
   $30 = $28 ? $27 : $29;
   $33 = (_memcmp($31,$32,$30)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = ($29>>>0)<($27>>>0);
    $$$i$i$i$i = $28&1;
    $$$$i$i$i$i = $35 ? -1 : $$$i$i$i$i;
    $36 = $$$$i$i$i$i;
   } else {
    $36 = $33;
   }
   $37 = ($36|0)<(0);
   if (!($37)) {
    break;
   }
   $40 = (($$013) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    $$0$ph5 = $$0$ph7;
    label = 19;
    break L4;
   } else {
    $$013 = $41;
   }
  }
  $38 = HEAP32[$$013>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$0$ph5 = $$013;
   label = 19;
   break;
  } else {
   $$0$ph7 = $$013;$$01$ph6 = $38;
  }
 }
 if ((label|0) == 19) {
  HEAP32[$agg$result>>2] = $$0$ph5;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18__searchIRNS_11__traits_eqINS_11char_traitsIcEEEEPKcS7_EET0_S8_S8_T1_S9_T_NS_26random_access_iterator_tagESB_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01$be = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__m1$0 = 0, $__m2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $__last2;
 $3 = $__first2;
 $4 = (($2) - ($3))|0;
 $5 = ($__last2|0)==($__first2|0);
 L1: do {
  if ($5) {
   $$0 = $__first1;
  } else {
   $6 = $__last1;
   $7 = $__first1;
   $8 = (($6) - ($7))|0;
   $9 = ($8|0)<($4|0);
   if ($9) {
    $$0 = $__last1;
   } else {
    $10 = (1 - ($4))|0;
    $11 = (($__last1) + ($10)|0);
    $12 = ($11|0)==($__first1|0);
    if ($12) {
     $$0 = $__last1;
    } else {
     $13 = HEAP8[$__first2>>0]|0;
     $$014 = $__first1;
     while(1) {
      $14 = HEAP8[$$014>>0]|0;
      $15 = ($14<<24>>24)==($13<<24>>24);
      if ($15) {
       $__m1$0 = $$014;$__m2$0 = $__first2;
       while(1) {
        $17 = (($__m2$0) + 1|0);
        $18 = ($17|0)==($__last2|0);
        if ($18) {
         $$0 = $$014;
         break L1;
        }
        $19 = (($__m1$0) + 1|0);
        $20 = HEAP8[$19>>0]|0;
        $21 = HEAP8[$17>>0]|0;
        $22 = ($20<<24>>24)==($21<<24>>24);
        if ($22) {
         $__m1$0 = $19;$__m2$0 = $17;
        } else {
         break;
        }
       }
      }
      $$01$be = (($$014) + 1|0);
      $16 = ($$01$be|0)==($11|0);
      if ($16) {
       $$0 = $__last1;
       break;
      } else {
       $$014 = $$01$be;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi8192EEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIPcLi8192EEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab18scoped_fixed_arrayIPcLi8192EEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN5MeCab11tokenizeCSVIPPcEEjS1_T_j($str,$out,$max) {
 $str = $str|0;
 $out = $out|0;
 $max = $max|0;
 var $$01$i = 0, $$01$i4 = 0, $$0115 = 0, $$016 = 0, $$0214 = 0, $$1 = 0, $$28 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $end$0$lcssa = 0, $end$09 = 0, $end$1 = 0, $n$017 = 0, $n$1 = 0, $start$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($str|0))|0);
 $1 = (($str) + ($0)|0);
 $2 = ($0|0)>(0);
 if ($2) {
  $$0115 = $max;$$016 = $str;$$0214 = $out;$n$017 = 0;
 } else {
  $n$1 = 0;
  STACKTOP = sp;return ($n$1|0);
 }
 while(1) {
  $$1 = $$016;
  while(1) {
   $3 = HEAP8[$$1>>0]|0;
   if ((($3<<24>>24) == 34)) {
    label = 5;
    break;
   } else if (!((($3<<24>>24) == 9) | (($3<<24>>24) == 32))) {
    label = 12;
    break;
   }
   $4 = (($$1) + 1|0);
   $$1 = $4;
  }
  L8: do {
   if ((label|0) == 5) {
    label = 0;
    $5 = (($$1) + 1|0);
    $6 = ($5>>>0)<($1>>>0);
    L14: do {
     if ($6) {
      $$28 = $5;$end$09 = $5;
      while(1) {
       $7 = HEAP8[$$28>>0]|0;
       $8 = ($7<<24>>24)==(34);
       if ($8) {
        $9 = (($$28) + 1|0);
        $10 = HEAP8[$9>>0]|0;
        $11 = ($10<<24>>24)==(34);
        if ($11) {
         $$3 = $9;
        } else {
         $$4 = $9;$end$0$lcssa = $end$09;
         break L14;
        }
       } else {
        $$3 = $$28;
       }
       $12 = HEAP8[$$3>>0]|0;
       $13 = (($end$09) + 1|0);
       HEAP8[$end$09>>0] = $12;
       $14 = (($$3) + 1|0);
       $15 = ($14>>>0)<($1>>>0);
       if ($15) {
        $$28 = $14;$end$09 = $13;
       } else {
        $$4 = $14;$end$0$lcssa = $13;
        break;
       }
      }
     } else {
      $$4 = $5;$end$0$lcssa = $5;
     }
    } while(0);
    $16 = ($$4|0)==($1|0);
    if ($16) {
     $$5 = $$4;$end$1 = $end$0$lcssa;$start$0 = $5;
    } else {
     $$01$i = $$4;
     while(1) {
      $19 = HEAP8[$$01$i>>0]|0;
      $20 = ($19<<24>>24)==(44);
      $17 = (($$01$i) + 1|0);
      if ($20) {
       $$5 = $$01$i;$end$1 = $end$0$lcssa;$start$0 = $5;
       break L8;
      }
      $18 = ($17|0)==($1|0);
      if ($18) {
       $$5 = $17;$end$1 = $end$0$lcssa;$start$0 = $5;
       break;
      } else {
       $$01$i = $17;
      }
     }
    }
   }
   else if ((label|0) == 12) {
    label = 0;
    $21 = ($$1|0)==($1|0);
    if ($21) {
     $$5 = $$1;$end$1 = $$1;$start$0 = $$1;
    } else {
     $$01$i4 = $$1;
     while(1) {
      $24 = HEAP8[$$01$i4>>0]|0;
      $25 = ($24<<24>>24)==(44);
      $22 = (($$01$i4) + 1|0);
      if ($25) {
       $$5 = $$01$i4;$end$1 = $$01$i4;$start$0 = $$1;
       break L8;
      }
      $23 = ($22|0)==($1|0);
      if ($23) {
       $$5 = $22;$end$1 = $22;$start$0 = $$1;
       break;
      } else {
       $$01$i4 = $22;
      }
     }
    }
   }
  } while(0);
  $26 = (($$0115) + -1)|0;
  $27 = ($$0115>>>0)>(1);
  if ($27) {
   HEAP8[$end$1>>0] = 0;
  }
  HEAP32[$$0214>>2] = $start$0;
  $28 = (($n$017) + 1)|0;
  $29 = ($26|0)==(0);
  if ($29) {
   $n$1 = $28;
   label = 19;
   break;
  }
  $30 = (($$0214) + 4|0);
  $31 = (($$5) + 1|0);
  $32 = ($31>>>0)<($1>>>0);
  if ($32) {
   $$0115 = $26;$$016 = $31;$$0214 = $30;$n$017 = $28;
  } else {
   $n$1 = $28;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($n$1|0);
 }
 return 0|0;
}
function __ZNK5MeCab18scoped_fixed_arrayIPcLi8192EE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab18scoped_fixed_arrayIPcLi8192EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7896 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdaPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi8192EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7896 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (__Znaj(32768)|0);
 HEAP32[$0>>2] = $1;
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 8192;
 STACKTOP = sp;return;
}
function __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($__is,$__str,$__dlm) {
 $__is = $__is|0;
 $__str = $__str|0;
 $__dlm = $__dlm|0;
 var $$0$i1 = 0, $$__err$0 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__err$0 = 0, $__extr$0 = 0, $__extr$1 = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sen = sp;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b($__sen,$__is,1);
 $0 = HEAP8[$__sen>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return ($__is|0);
 }
 $2 = HEAP8[$__str>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $8 = (($__str) + 1|0);
  HEAP8[$8>>0] = 0;
  HEAP8[$__str>>0] = 0;
 } else {
  $5 = (($__str) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP8[$6>>0] = 0;
  $7 = (($__str) + 4|0);
  HEAP32[$7>>2] = 0;
 }
 $9 = (($__str) + 4|0);
 $__extr$0 = 0;
 while(1) {
  $10 = HEAP32[$__is>>2]|0;
  $11 = (($10) + -12|0);
  $12 = HEAP32[$11>>2]|0;
  $$sum = (($12) + 24)|0;
  $13 = (($__is) + ($$sum)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $20 = HEAP32[$14>>2]|0;
   $21 = (($20) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (FUNCTION_TABLE_ii[$22 & 127]($14)|0);
   $24 = ($23|0)==(-1);
   if ($24) {
    $__err$0 = 2;$__extr$1 = $__extr$0;
    break;
   } else {
    $$0$i1 = $23;
   }
  } else {
   $25 = (($16) + 1|0);
   HEAP32[$15>>2] = $25;
   $26 = HEAP8[$16>>0]|0;
   $27 = $26&255;
   $$0$i1 = $27;
  }
  $28 = (($__extr$0) + 1)|0;
  $29 = $$0$i1&255;
  $30 = ($29<<24>>24)==($__dlm<<24>>24);
  if ($30) {
   $__err$0 = 0;$__extr$1 = $28;
   break;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__str,$29);
  $31 = HEAP8[$__str>>0]|0;
  $32 = $31 & 1;
  $33 = ($32<<24>>24)==(0);
  if ($33) {
   $__extr$0 = $28;
   continue;
  }
  $34 = HEAP32[$9>>2]|0;
  $35 = ($34|0)==(-17);
  if ($35) {
   $__err$0 = 4;$__extr$1 = $28;
   break;
  } else {
   $__extr$0 = $28;
  }
 }
 $36 = ($__extr$1|0)==(0);
 $37 = $__err$0 | 4;
 $$__err$0 = $36 ? $37 : $__err$0;
 $38 = HEAP32[$__is>>2]|0;
 $39 = (($38) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($__is) + ($40)|0);
 $$sum2 = (($40) + 16)|0;
 $42 = (($__is) + ($$sum2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 | $$__err$0;
 __ZNSt3__18ios_base5clearEj($41,$44);
 STACKTOP = sp;return ($__is|0);
}
function __ZN5MeCab4MmapIcEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab4MmapIcEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIcE4openEPKcS3_($this,$filename,$mode) {
 $this = $this|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $st = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $st = sp + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 __ZN5MeCab4MmapIcE5closeEv($this);
 dest=$st+0|0; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = (($this) + 12|0);
 $6 = (_strlen(($filename|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$filename,$6);
 $7 = HEAP8[$5>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $13 = (($5) + 1|0);
  HEAP8[$13>>0] = 0;
  HEAP8[$5>>0] = 0;
 } else {
  $10 = (($this) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP8[$11>>0] = 0;
  $12 = (($this) + 16|0);
  HEAP32[$12>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
 ;HEAP32[$5+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $14 = (_strcmp($mode,7960)|0);
 $15 = ($14|0)==(0);
 do {
  if ($15) {
   $16 = (($this) + 176|0);
   HEAP32[$16>>2] = 0;
  } else {
   $17 = (_strcmp($mode,7992)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = (($this) + 176|0);
    HEAP32[$19>>2] = 2;
    break;
   }
   $20 = (($this) + 24|0);
   __ZN5MeCab4wlogC1EPNS_7whatlogE($1,$20);
   $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,8000)|0);
   $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21,7968)|0);
   $23 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($22,150)|0);
   $24 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($23,7976)|0);
   $25 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($24,8016)|0);
   $26 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25,7984)|0);
   $27 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($26,8024)|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($27,$filename)|0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $28 = (($this) + 176|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_open(($filename|0),($29|0),($vararg_buffer|0))|0);
 $31 = (($this) + 172|0);
 HEAP32[$31>>2] = $30;
 $32 = ($30|0)>(-1);
 if (!($32)) {
  $33 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$33);
  $34 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($33,8000)|0);
  $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,7968)|0);
  $36 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($35,152)|0);
  $37 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,7976)|0);
  $38 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($37,8048)|0);
  $39 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($38,7984)|0);
  $40 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($39,8096)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($40,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = (_fstat(($30|0),($st|0))|0);
 $42 = ($41|0)>(-1);
 if (!($42)) {
  $43 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($3,$43);
  $44 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($43,8000)|0);
  $45 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($44,7968)|0);
  $46 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($45,155)|0);
  $47 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($46,7976)|0);
  $48 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($47,8112)|0);
  $49 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($48,7984)|0);
  $50 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($49,8136)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($50,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = (($st) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($this) + 8|0);
 HEAP32[$53>>2] = $52;
 $54 = (__Znaj($52)|0);
 $55 = (($this) + 4|0);
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$31>>2]|0;
 $57 = HEAP32[$53>>2]|0;
 $58 = (_read(($56|0),($54|0),($57|0))|0);
 $59 = ($58|0)>(-1);
 if ($59) {
  $68 = HEAP32[$31>>2]|0;
  (_close(($68|0))|0);
  HEAP32[$31>>2] = -1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $60 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($4,$60);
  $61 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($60,8000)|0);
  $62 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($61,7968)|0);
  $63 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($62,172)|0);
  $64 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($63,7976)|0);
  $65 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($64,8168)|0);
  $66 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($65,7984)|0);
  $67 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($66,8200)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($67,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab4MmapIcE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab4MmapIcE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab4MmapIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab4MmapIcED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIcE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($this) + 172|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (_close(($1|0))|0);
  HEAP32[$0>>2] = -1;
 }
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = 0;
  STACKTOP = sp;return;
 }
 $6 = (($this) + 176|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  $9 = (($this) + 12|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 & 1;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   $15 = (($9) + 1|0);
   $16 = $15;
  } else {
   $13 = (($this) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $16 = $14;
  }
  $17 = (_open(($16|0),2,($vararg_buffer|0))|0);
  $18 = ($17|0)>(-1);
  if ($18) {
   $19 = HEAP32[$3>>2]|0;
   $20 = (($this) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   (_write(($17|0),($19|0),($21|0))|0);
   (_close(($17|0))|0);
  }
 }
 $22 = HEAP32[$3>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  HEAP32[$3>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdaPv($22);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8216 + 8|0));
 __ZN5MeCab4MmapIcE5closeEv($this);
 $0 = (($this) + 24|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab4MmapIcED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIcEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8216 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 12|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = (($this) + 24|0);
 __ZN5MeCab7whatlogC1Ev($2);
 $3 = (($this) + 172|0);
 HEAP32[$3>>2] = -1;
 STACKTOP = sp;return;
}
function __ZN5MeCab10DictionaryC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10DictionaryC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10Dictionary7charsetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10DictionaryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10DictionaryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12CharPropertyC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12CharPropertyC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12CharPropertyD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12CharPropertyD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12CharPropertyD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8264 + 8|0));
 __ZN5MeCab12CharProperty5closeEv($this);
 $0 = (($this) + 32|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 12|0);
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED1Ev($1);
 $2 = (($this) + 4|0);
 __ZN5MeCab10scoped_ptrINS_4MmapIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_4MmapIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12CharPropertyD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12CharPropertyD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8312 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_4MmapIcEEED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__x) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = $__x;
  while(1) {
   $5 = (($$0) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==($$0|0);
   if ($8) {
    $$01 = $6;
    break;
   } else {
    $$0 = $6;
   }
  }
  STACKTOP = sp;return ($$01|0);
 } else {
  $$0$i = $1;
  while(1) {
   $3 = HEAP32[$$0$i>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$01 = $$0$i;
    break;
   } else {
    $$0$i = $3;
   }
  }
  STACKTOP = sp;return ($$01|0);
 }
 return 0|0;
}
function __ZNK5MeCab12CharProperty11getCharInfoEPKcS2_Pj($agg$result,$this,$begin,$end,$mblen) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = (__ZN5MeCab11euc_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
  $t$0 = $2;
  break;
 }
 case 2:  {
  $4 = (__ZN5MeCab12utf8_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
  $t$0 = $4;
  break;
 }
 case 1:  {
  $3 = (__ZN5MeCab13cp932_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
  $t$0 = $3;
  break;
 }
 case 4:  {
  $6 = (__ZN5MeCab15utf16le_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
  $t$0 = $6;
  break;
 }
 case 6:  {
  $8 = (__ZN5MeCab13ascii_to_ucs2EPKcS1_Pj($begin,0,$mblen)|0);
  $t$0 = $8;
  break;
 }
 case 5:  {
  $7 = (__ZN5MeCab15utf16be_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
  $t$0 = $7;
  break;
 }
 case 3:  {
  $5 = (__ZN5MeCab13utf16_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
  $t$0 = $5;
  break;
 }
 default: {
  $9 = (__ZN5MeCab12utf8_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
  $t$0 = $9;
 }
 }
 $10 = $t$0&65535;
 $11 = (($this) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$agg$result>>2] = $14;
 STACKTOP = sp;return;
}
function __ZN5MeCab11euc_to_ucs2EPKcS1_Pj($begin,$end,$mblen) {
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $end;
 $1 = $begin;
 $2 = (($0) - ($1))|0;
 $3 = HEAP8[$begin>>0]|0;
 $4 = ($3<<24>>24)==(-113);
 $5 = ($2>>>0)>(2);
 $or$cond = $4 & $5;
 if ($or$cond) {
  $6 = (($begin) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $8 << 8;
  $10 = (($begin) + 2|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $9 | $12;
  $14 = ($13>>>0)<(41120);
  if ($14) {
   HEAP32[$mblen>>2] = 1;
   $15 = HEAP8[$begin>>0]|0;
   $16 = $15&255;
   $$0 = $16;
   STACKTOP = sp;return ($$0|0);
  } else {
   HEAP32[$mblen>>2] = 3;
   $17 = (($13) + -41120)|0;
   $18 = (139448 + ($17<<1)|0);
   $19 = HEAP16[$18>>1]|0;
   $$0 = $19;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $20 = ($3<<24>>24)<(0);
  $21 = ($2>>>0)>(1);
  $or$cond1 = $20 & $21;
  if ($or$cond1) {
   HEAP32[$mblen>>2] = 2;
   $22 = HEAP8[$begin>>0]|0;
   $23 = $22&255;
   $24 = $23 << 8;
   $25 = (($begin) + 1|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $24 | $27;
   $29 = (270520 + ($28<<1)|0);
   $30 = HEAP16[$29>>1]|0;
   $$0 = $30;
   STACKTOP = sp;return ($$0|0);
  } else {
   HEAP32[$mblen>>2] = 1;
   $31 = HEAP8[$begin>>0]|0;
   $32 = $31&255;
   $$0 = $32;
   STACKTOP = sp;return ($$0|0);
  }
 }
 return 0|0;
}
function __ZN5MeCab13cp932_to_ucs2EPKcS1_Pj($begin,$end,$mblen) {
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$begin>>0]|0;
 $$off = (($0) + 95)<<24>>24;
 $1 = ($$off&255)<(63);
 if ($1) {
  HEAP32[$mblen>>2] = 1;
  $2 = HEAP8[$begin>>0]|0;
  $3 = $2&255;
  $4 = (8376 + ($3<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $begin;
 $7 = $end;
 $8 = (($7) - ($6))|0;
 $9 = ($0<<24>>24)<(0);
 $10 = ($8>>>0)>(1);
 $or$cond1 = $9 & $10;
 if ($or$cond1) {
  HEAP32[$mblen>>2] = 2;
  $11 = HEAP8[$begin>>0]|0;
  $12 = $11&255;
  $13 = $12 << 8;
  $14 = (($begin) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $13 | $16;
  $18 = (8376 + ($17<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$mblen>>2] = 1;
  $20 = HEAP8[$begin>>0]|0;
  $21 = $20&255;
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab12utf8_to_ucs2EPKcS1_Pj($begin,$end,$mblen) {
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $end;
 $1 = $begin;
 $2 = (($0) - ($1))|0;
 $3 = HEAP8[$begin>>0]|0;
 $4 = ($3<<24>>24)>(-1);
 if ($4) {
  HEAP32[$mblen>>2] = 1;
  $5 = HEAP8[$begin>>0]|0;
  $6 = $5&255;
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ($2>>>0)>(1);
 if ($7) {
  $8 = $3 & -32;
  $9 = ($8<<24>>24)==(-64);
  if ($9) {
   HEAP32[$mblen>>2] = 2;
   $10 = HEAP8[$begin>>0]|0;
   $11 = $10&255;
   $12 = $11 << 6;
   $13 = $12 & 1984;
   $14 = (($begin) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 & 63;
   $18 = $13 | $17;
   $19 = $18&65535;
   $$0 = $19;
   STACKTOP = sp;return ($$0|0);
  }
  $20 = ($2>>>0)>(2);
  if ($20) {
   $21 = HEAP8[$begin>>0]|0;
   $22 = $21 & -16;
   $23 = ($22<<24>>24)==(-32);
   if ($23) {
    HEAP32[$mblen>>2] = 3;
    $24 = HEAP8[$begin>>0]|0;
    $25 = $24&255;
    $26 = $25 << 12;
    $27 = (($begin) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = $29 << 6;
    $31 = $30 & 4032;
    $32 = $31 | $26;
    $33 = (($begin) + 2|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $35 & 63;
    $37 = $32 | $36;
    $38 = $37&65535;
    $$0 = $38;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = ($2>>>0)>(3);
   if ($39) {
    $40 = HEAP8[$begin>>0]|0;
    $41 = $40 & -8;
    $42 = ($41<<24>>24)==(-16);
    if ($42) {
     HEAP32[$mblen>>2] = 4;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $43 = ($2>>>0)>(4);
    if ($43) {
     $44 = HEAP8[$begin>>0]|0;
     $45 = $44 & -4;
     $46 = ($45<<24>>24)==(-8);
     if ($46) {
      HEAP32[$mblen>>2] = 5;
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $47 = ($2>>>0)>(5);
     if ($47) {
      $48 = HEAP8[$begin>>0]|0;
      $49 = $48 & -2;
      $50 = ($49<<24>>24)==(-4);
      if ($50) {
       HEAP32[$mblen>>2] = 6;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 }
 HEAP32[$mblen>>2] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab13utf16_to_ucs2EPKcS1_Pj($begin,$end,$mblen) {
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab15utf16le_to_ucs2EPKcS1_Pj($begin,$end,$mblen)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab15utf16le_to_ucs2EPKcS1_Pj($begin,$end,$mblen) {
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $end;
 $1 = $begin;
 $2 = (($0) - ($1))|0;
 $3 = ($2>>>0)<(2);
 if ($3) {
  HEAP32[$mblen>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$mblen>>2] = 2;
  $4 = HEAP8[$begin>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = $5 << 8;
  $7 = (($begin) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = $6 | $9;
  $11 = $10&65535;
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab15utf16be_to_ucs2EPKcS1_Pj($begin,$end,$mblen) {
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $end;
 $1 = $begin;
 $2 = (($0) - ($1))|0;
 $3 = ($2>>>0)<(2);
 if ($3) {
  HEAP32[$mblen>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$mblen>>2] = 2;
  $4 = (($begin) + 1|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = $6 << 8;
  $8 = HEAP8[$begin>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = $7 | $9;
  $11 = $10&65535;
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab13ascii_to_ucs2EPKcS1_Pj($begin,$end,$mblen) {
 $begin = $begin|0;
 $end = $end|0;
 $mblen = $mblen|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$mblen>>2] = 1;
 $0 = HEAP8[$begin>>0]|0;
 $1 = $0&255;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12CharPropertyC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8264 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (__Znwj(180)|0);
 __ZN5MeCab4MmapIcEC1Ev($1);
 __ZN5MeCab10scoped_ptrINS_4MmapIcEEEC1EPS2_($0,$1);
 $2 = (($this) + 12|0);
 $3 = (($this) + 32|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 __ZN5MeCab7whatlogC1Ev($3);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIcEEEC1EPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrINS_4MmapIcEEEC2EPS2_($this,$p);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrINS_4MmapIcEEEC2EPS2_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8312 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab10DictionaryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((401592 + 8|0));
 __ZN5MeCab10Dictionary5closeEv($this);
 $0 = (($this) + 204|0);
 __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEED1Ev($0);
 $1 = (($this) + 56|0);
 __ZN5MeCab7whatlogD1Ev($1);
 $2 = (($this) + 44|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = (($this) + 4|0);
 __ZN5MeCab10scoped_ptrINS_4MmapIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10DictionaryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10DictionaryD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE5clearEv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   __ZdaPv($3);
  }
 }
 $5 = (($this) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  __ZdaPv($6);
 }
 HEAP8[$0>>0] = 0;
 ;HEAP32[$this+0>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;HEAP32[$this+12>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN5MeCab10DictionaryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((401592 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (__Znwj(180)|0);
 __ZN5MeCab4MmapIcEC1Ev($1);
 __ZN5MeCab10scoped_ptrINS_4MmapIcEEEC1EPS2_($0,$1);
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 44|0);
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $6 = (($this) + 56|0);
 __ZN5MeCab7whatlogC1Ev($6);
 $7 = (($this) + 204|0);
 __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEEC1Ev($7);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 HEAP8[$0>>0] = 0;
 $1 = (($this) + 44|0);
 HEAP32[$1>>2] = 0;
 ;HEAP32[$this+0>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;HEAP32[$this+12>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN5MeCab5Param3setIiEEvPKcRKT_b($this,$key,$value,$rewrite) {
 $this = $this|0;
 $key = $key|0;
 $value = $value|0;
 $rewrite = $rewrite|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $key2 = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($key|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($key2,$key,$2);
 if (!($rewrite)) {
  $3 = (($this) + 4|0);
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($0,$3,$key2);
  $4 = (($this) + 8|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = ($5|0)==($4|0);
  if (!($6)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($key2);
   STACKTOP = sp;return;
  }
 }
 $7 = (($this) + 4|0);
 $8 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSA_($7,$key2)|0);
 $9 = HEAP32[$value>>2]|0;
 __ZN12_GLOBAL__N_112lexical_castINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiEET_T0_($1,$9);
 $10 = HEAP8[$8>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $16 = (($8) + 1|0);
  HEAP8[$16>>0] = 0;
  HEAP8[$8>>0] = 0;
 } else {
  $13 = (($8) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP8[$14>>0] = 0;
  $15 = (($8) + 4|0);
  HEAP32[$15>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
 ;HEAP32[$8+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($key2);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112lexical_castINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiEET_T0_($agg$result,$arg) {
 $agg$result = $agg$result|0;
 $arg = $arg|0;
 var $$sum = 0, $$sum$i$i$i = 0, $$sum1$i$i$i = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $interpreter = 0, $r = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $0 = sp + 168|0;
 $interpreter = sp + 24|0;
 $result = sp + 8|0;
 $r = sp;
 $1 = (($interpreter) + 64|0);
 $2 = (($interpreter) + 8|0);
 HEAP32[$2>>2] = ((656 + 32|0));
 $3 = (($interpreter) + 12|0);
 HEAP32[$interpreter>>2] = ((912 + 12|0));
 $4 = (($interpreter) + 64|0);
 HEAP32[$4>>2] = ((912 + 32|0));
 $5 = (($interpreter) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$interpreter>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($interpreter) + ($8)|0);
 __ZNSt3__18ios_base4initEPv($9,$3);
 $$sum$i$i$i = (($8) + 72)|0;
 $10 = (($interpreter) + ($$sum$i$i$i)|0);
 HEAP32[$10>>2] = 0;
 $$sum1$i$i$i = (($8) + 76)|0;
 $11 = (($interpreter) + ($$sum1$i$i$i)|0);
 HEAP32[$11>>2] = -1;
 HEAP32[$interpreter>>2] = ((656 + 12|0));
 HEAP32[$1>>2] = ((656 + 52|0));
 HEAP32[$2>>2] = ((656 + 32|0));
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($3);
 HEAP32[$3>>2] = ((992 + 8|0));
 $12 = (($interpreter) + 44|0);
 $13 = (($interpreter) + 60|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 HEAP32[$13>>2] = 24;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 ;HEAP32[$result+0>>2]=0|0;HEAP32[$result+4>>2]=0|0;HEAP32[$result+8>>2]=0|0;
 $14 = (($interpreter) + 8|0);
 $15 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($14,$arg)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $$sum = (($18) + 16)|0;
 $19 = (($15) + ($$sum)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 5;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = (__ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE($interpreter,$result)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -12|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum3 = (($26) + 16)|0;
  $27 = (($23) + ($$sum3)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 5;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = (__ZNSt3__12wsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_($interpreter)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + -12|0);
   $34 = HEAP32[$33>>2]|0;
   $$sum4 = (($34) + 16)|0;
   $35 = (($31) + ($$sum4)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 2;
   $38 = ($37|0)==(0);
   if (!($38)) {
    ;HEAP32[$agg$result+0>>2]=HEAP32[$result+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$result+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$result+8>>2]|0;
    ;HEAP32[$result+0>>2]=0|0;HEAP32[$result+4>>2]=0|0;HEAP32[$result+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($result);
    __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
    STACKTOP = sp;return;
   }
  }
 }
 $39 = (__Znwj(12)|0);
 ;HEAP32[$39+0>>2]=0|0;HEAP32[$39+4>>2]=0|0;HEAP32[$39+8>>2]=0|0;
 __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC1EPS7_($r,$39);
 $40 = (__ZNK5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEdeEv($r)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$40);
 __ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED1Ev($r);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($result);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
 STACKTOP = sp;return;
}
function __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE($__is,$__str) {
 $__is = $__is|0;
 $__str = $__str|0;
 var $$ = 0, $$0$i36 = 0, $$__err$0 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__c$0$lcssa = 0, $__c$013 = 0, $__err$0 = 0, $__sen = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sen = sp + 4|0;
 $0 = sp;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b($__sen,$__is,0);
 $1 = HEAP8[$__sen>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $76 = HEAP32[$__is>>2]|0;
  $77 = (($76) + -12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($__is) + ($78)|0);
  $$sum = (($78) + 16)|0;
  $80 = (($__is) + ($$sum)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 | 4;
  __ZNSt3__18ios_base5clearEj($79,$82);
  STACKTOP = sp;return ($__is|0);
 }
 $3 = HEAP8[$__str>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $9 = (($__str) + 1|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$__str>>0] = 0;
 } else {
  $6 = (($__str) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP8[$7>>0] = 0;
  $8 = (($__str) + 4|0);
  HEAP32[$8>>2] = 0;
 }
 $10 = HEAP32[$__is>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum7 = (($12) + 12)|0;
 $13 = (($__is) + ($$sum7)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<(1);
 $$ = $15 ? 2147483647 : $14;
 $16 = HEAP32[$__is>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($__is) + ($18)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$19);
 $20 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 __ZNSt3__16localeD2Ev($0);
 $21 = ($$|0)>(0);
 L9: do {
  if ($21) {
   $22 = (($20) + 8|0);
   $__c$013 = 0;
   while(1) {
    $23 = HEAP32[$__is>>2]|0;
    $24 = (($23) + -12|0);
    $25 = HEAP32[$24>>2]|0;
    $$sum10 = (($25) + 24)|0;
    $26 = (($__is) + ($$sum10)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($29|0)==($31|0);
    if ($32) {
     $33 = HEAP32[$27>>2]|0;
     $34 = (($33) + 36|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (FUNCTION_TABLE_ii[$35 & 127]($27)|0);
     $37 = ($36|0)==(-1);
     if ($37) {
      $__c$0$lcssa = $__c$013;$__err$0 = 2;
      break L9;
     } else {
      $$0$i36 = $36;
     }
    } else {
     $38 = HEAP8[$29>>0]|0;
     $39 = $38&255;
     $$0$i36 = $39;
    }
    $40 = $$0$i36&255;
    $isascii1$i = ($40<<24>>24)>(-1);
    if ($isascii1$i) {
     $sext = $$0$i36 << 24;
     $41 = $sext >> 24;
     $42 = HEAP32[$22>>2]|0;
     $43 = (($42) + ($41<<1)|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = $44 & 8192;
     $46 = ($45<<16>>16)==(0);
     if (!($46)) {
      $__c$0$lcssa = $__c$013;$__err$0 = 0;
      break L9;
     }
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__str,$40);
    $47 = HEAP32[$__is>>2]|0;
    $48 = (($47) + -12|0);
    $49 = HEAP32[$48>>2]|0;
    $$sum11 = (($49) + 24)|0;
    $50 = (($__is) + ($$sum11)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($__c$013) + 1)|0;
    $53 = (($51) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($51) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54|0)==($56|0);
    if ($57) {
     $58 = HEAP32[$51>>2]|0;
     $59 = (($58) + 40|0);
     $60 = HEAP32[$59>>2]|0;
     (FUNCTION_TABLE_ii[$60 & 127]($51)|0);
    } else {
     $62 = (($54) + 1|0);
     HEAP32[$53>>2] = $62;
    }
    $61 = ($52|0)<($$|0);
    if ($61) {
     $__c$013 = $52;
    } else {
     $__c$0$lcssa = $52;$__err$0 = 0;
     break;
    }
   }
  } else {
   $__c$0$lcssa = 0;$__err$0 = 0;
  }
 } while(0);
 $63 = HEAP32[$__is>>2]|0;
 $64 = (($63) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $$sum8 = (($65) + 12)|0;
 $66 = (($__is) + ($$sum8)|0);
 HEAP32[$66>>2] = 0;
 $67 = ($__c$0$lcssa|0)==(0);
 $68 = $__err$0 | 4;
 $$__err$0 = $67 ? $68 : $__err$0;
 $69 = HEAP32[$__is>>2]|0;
 $70 = (($69) + -12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($__is) + ($71)|0);
 $$sum9 = (($71) + 16)|0;
 $73 = (($__is) + ($$sum9)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 | $$__err$0;
 __ZNSt3__18ios_base5clearEj($72,$75);
 STACKTOP = sp;return ($__is|0);
}
function __ZN5MeCab9Connector4openERKNS_5ParamE($this,$param) {
 $this = $this|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $filename = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $filename = sp + 24|0;
 $0 = sp + 12|0;
 $1 = sp;
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($0,$param,401640);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,401648,10);
 __ZN5MeCab15create_filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($filename,$0,$1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $2 = HEAP8[$filename>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($filename) + 1|0);
  $8 = $7;
 } else {
  $5 = (($filename) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
 }
 $9 = (__ZN5MeCab9Connector4openEPKcS2_($this,$8,401664)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($filename);
 STACKTOP = sp;return ($9|0);
}
function __ZN5MeCab9Connector4openEPKcS2_($this,$filename,$mode) {
 $this = $this|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (($this) + 4|0);
 $5 = (__ZNK5MeCab10scoped_ptrINS_4MmapIsEEEptEv($4)|0);
 $6 = (__ZN5MeCab4MmapIsE4openEPKcS3_($5,$filename,$mode)|0);
 if (!($6)) {
  $7 = (($this) + 20|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($0,$7);
  $8 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($7,401672)|0);
  $9 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($8,401688)|0);
  $10 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($9,24)|0);
  $11 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($10,401696)|0);
  $12 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($11,401704)|0);
  $13 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($12,401736)|0);
  $14 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($13,401744)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($14,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (__ZNK5MeCab10scoped_ptrINS_4MmapIsEEEptEv($4)|0);
 $16 = (__ZN5MeCab4MmapIsE5beginEv($15)|0);
 $17 = (($this) + 12|0);
 HEAP32[$17>>2] = $16;
 $18 = ($16|0)==(0|0);
 if ($18) {
  $19 = (($this) + 20|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($1,$19);
  $20 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($19,401672)|0);
  $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,401688)|0);
  $22 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($21,29)|0);
  $23 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($22,401696)|0);
  $24 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($23,401760)|0);
  $25 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($24,401736)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25,401768)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (__ZNK5MeCab10scoped_ptrINS_4MmapIsEEEptEv($4)|0);
 $27 = (__ZN5MeCab4MmapIsE4sizeEv($26)|0);
 $28 = ($27>>>0)>(1);
 if (!($28)) {
  $29 = (($this) + 20|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$29);
  $30 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($29,401672)|0);
  $31 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($30,401688)|0);
  $32 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($31,30)|0);
  $33 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($32,401696)|0);
  $34 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($33,401784)|0);
  $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,401736)|0);
  $36 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($35,401808)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (__ZNK5MeCab10scoped_ptrINS_4MmapIsEEEdeEv($4)|0);
 $38 = (__ZN5MeCab4MmapIsEixEj($37,0)|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = (($this) + 16|0);
 HEAP16[$40>>1] = $39;
 $41 = (__ZNK5MeCab10scoped_ptrINS_4MmapIsEEEdeEv($4)|0);
 $42 = (__ZN5MeCab4MmapIsEixEj($41,1)|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = (($this) + 18|0);
 HEAP16[$44>>1] = $43;
 $45 = HEAP16[$40>>1]|0;
 $46 = $45&65535;
 $47 = $43&65535;
 $48 = Math_imul($46, $47)|0;
 $49 = (($48) + 2)|0;
 $50 = (__ZNK5MeCab10scoped_ptrINS_4MmapIsEEEptEv($4)|0);
 $51 = (__ZN5MeCab4MmapIsE4sizeEv($50)|0);
 $52 = ($49|0)==($51|0);
 if ($52) {
  $61 = (__ZN5MeCab4MmapIsE5beginEv($50)|0);
  $62 = (($61) + 4|0);
  HEAP32[$17>>2] = $62;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $53 = (($this) + 20|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($3,$53);
  $54 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($53,401672)|0);
  $55 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($54,401688)|0);
  $56 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($55,37)|0);
  $57 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($56,401696)|0);
  $58 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($57,401832)|0);
  $59 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($58,401736)|0);
  $60 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($59,401808)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($60,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNK5MeCab10scoped_ptrINS_4MmapIsEEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab4MmapIsE4openEPKcS3_($this,$filename,$mode) {
 $this = $this|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $st = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $st = sp + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 __ZN5MeCab4MmapIsE5closeEv($this);
 dest=$st+0|0; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = (($this) + 12|0);
 $6 = (_strlen(($filename|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$filename,$6);
 $7 = HEAP8[$5>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $13 = (($5) + 1|0);
  HEAP8[$13>>0] = 0;
  HEAP8[$5>>0] = 0;
 } else {
  $10 = (($this) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP8[$11>>0] = 0;
  $12 = (($this) + 16|0);
  HEAP32[$12>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
 ;HEAP32[$5+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $14 = (_strcmp($mode,401664)|0);
 $15 = ($14|0)==(0);
 do {
  if ($15) {
   $16 = (($this) + 176|0);
   HEAP32[$16>>2] = 0;
  } else {
   $17 = (_strcmp($mode,401896)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = (($this) + 176|0);
    HEAP32[$19>>2] = 2;
    break;
   }
   $20 = (($this) + 24|0);
   __ZN5MeCab4wlogC1EPNS_7whatlogE($1,$20);
   $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,401904)|0);
   $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21,401688)|0);
   $23 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($22,150)|0);
   $24 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($23,401696)|0);
   $25 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($24,401920)|0);
   $26 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25,401736)|0);
   $27 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($26,401928)|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($27,$filename)|0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $28 = (($this) + 176|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_open(($filename|0),($29|0),($vararg_buffer|0))|0);
 $31 = (($this) + 172|0);
 HEAP32[$31>>2] = $30;
 $32 = ($30|0)>(-1);
 if (!($32)) {
  $33 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$33);
  $34 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($33,401904)|0);
  $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,401688)|0);
  $36 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($35,152)|0);
  $37 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,401696)|0);
  $38 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($37,401952)|0);
  $39 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($38,401736)|0);
  $40 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($39,402000)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($40,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = (_fstat(($30|0),($st|0))|0);
 $42 = ($41|0)>(-1);
 if (!($42)) {
  $43 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($3,$43);
  $44 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($43,401904)|0);
  $45 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($44,401688)|0);
  $46 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($45,155)|0);
  $47 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($46,401696)|0);
  $48 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($47,402016)|0);
  $49 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($48,401736)|0);
  $50 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($49,402040)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($50,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = (($st) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($this) + 8|0);
 HEAP32[$53>>2] = $52;
 $$arith = $52<<1;
 $$overflow = ($52>>>0)>(2147483647);
 $54 = $$overflow ? -1 : $$arith;
 $55 = (__Znaj($54)|0);
 $56 = (($this) + 4|0);
 HEAP32[$56>>2] = $55;
 $57 = HEAP32[$31>>2]|0;
 $58 = HEAP32[$53>>2]|0;
 $59 = (_read(($57|0),($55|0),($58|0))|0);
 $60 = ($59|0)>(-1);
 if ($60) {
  $69 = HEAP32[$31>>2]|0;
  (_close(($69|0))|0);
  HEAP32[$31>>2] = -1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $61 = (($this) + 24|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($4,$61);
  $62 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($61,401904)|0);
  $63 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($62,401688)|0);
  $64 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($63,172)|0);
  $65 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($64,401696)|0);
  $66 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($65,402072)|0);
  $67 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($66,401736)|0);
  $68 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($67,402104)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($68,$filename)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab4MmapIsE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab4MmapIsE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 1;
 STACKTOP = sp;return ($2|0);
}
function __ZNK5MeCab10scoped_ptrINS_4MmapIsEEEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab4MmapIsEixEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($n<<1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN5MeCab9Connector5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_4MmapIsEEEptEv($0)|0);
 __ZN5MeCab4MmapIsE5closeEv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab14NBestGenerator3setEPNS_7LatticeE($this,$lattice) {
 $this = $this|0;
 $lattice = $lattice|0;
 var $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i = 0, $eos = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, $uglygep$i$i$i$i = 0;
 var $uglygep3$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy3 = sp + 20|0;
 $$byval_copy2 = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp;
 $eos = sp + 4|0;
 $3 = (($this) + 20|0);
 __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEE4freeEv($3);
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $11 = $5;$9 = $7;
  while(1) {
   $10 = $9;
   $12 = $11;
   $13 = (($10) - ($12))|0;
   $14 = ($13|0)>(4);
   if ($14) {
    $15 = $13 >> 2;
    $16 = (($9) + -4|0);
    $17 = HEAP32[$11>>2]|0;
    $18 = HEAP32[$16>>2]|0;
    HEAP32[$11>>2] = $18;
    HEAP32[$16>>2] = $17;
    HEAP32[$0>>2] = $11;
    HEAP32[$1>>2] = $16;
    $19 = (($15) + -1)|0;
    ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$0+0>>2]|0;
    ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__117__push_heap_frontIRN5MeCab14NBestGenerator16QueueElementCompENS_11__wrap_iterIPPNS2_12QueueElementEEEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($$byval_copy2,$$byval_copy3,0,$19);
   }
   $20 = HEAP32[$6>>2]|0;
   $21 = (($20) + -4|0);
   $scevgep$i$i$i$i = (($20) + -4|0);
   $__new_last2$i$i$i$i = $21;
   $22 = (0 - ($__new_last2$i$i$i$i))|0;
   $uglygep$i$i$i$i = (($scevgep$i$i$i$i) + ($22)|0);
   $uglygep3$i$i$i$i = $uglygep$i$i$i$i;
   $23 = $uglygep3$i$i$i$i >>> 2;
   $24 = $23 ^ -1;
   $scevgep4$i$i$i$i = (($20) + ($24<<2)|0);
   HEAP32[$6>>2] = $scevgep4$i$i$i$i;
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==($scevgep4$i$i$i$i|0);
   if ($26) {
    break;
   } else {
    $11 = $25;$9 = $scevgep4$i$i$i$i;
   }
  }
 }
 $27 = (__ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEE5allocEv($3)|0);
 HEAP32[$eos>>2] = $27;
 $28 = HEAP32[$lattice>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_ii[$30 & 127]($lattice)|0);
 $32 = HEAP32[$eos>>2]|0;
 HEAP32[$32>>2] = $31;
 $33 = HEAP32[$eos>>2]|0;
 $34 = (($33) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$eos>>2]|0;
 $36 = (($35) + 12|0);
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$eos>>2]|0;
 $38 = (($37) + 8|0);
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$6>>2]|0;
 $40 = (($this) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($39|0)==($41|0);
 if ($42) {
  __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($4,$eos);
  $47 = HEAP32[$4>>2]|0;
  $48 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $47;
  HEAP32[$1>>2] = $48;
  $49 = $48;
  $50 = $47;
  $51 = (($49) - ($50))|0;
  $52 = $51 >> 2;
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$0+0>>2]|0;
  ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__push_heap_backIRN5MeCab14NBestGenerator16QueueElementCompENS_11__wrap_iterIPPNS2_12QueueElementEEEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($$byval_copy2,$$byval_copy3,$2,$52);
  STACKTOP = sp;return 1;
 }
 $43 = ($39|0)==(0|0);
 if (!($43)) {
  $44 = HEAP32[$eos>>2]|0;
  HEAP32[$39>>2] = $44;
 }
 $45 = HEAP32[$6>>2]|0;
 $46 = (($45) + 4|0);
 HEAP32[$6>>2] = $46;
 $47 = HEAP32[$4>>2]|0;
 $48 = HEAP32[$6>>2]|0;
 HEAP32[$0>>2] = $47;
 HEAP32[$1>>2] = $48;
 $49 = $48;
 $50 = $47;
 $51 = (($49) - ($50))|0;
 $52 = $51 >> 2;
 ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__push_heap_backIRN5MeCab14NBestGenerator16QueueElementCompENS_11__wrap_iterIPPNS2_12QueueElementEEEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($$byval_copy2,$$byval_copy3,$2,$52);
 STACKTOP = sp;return 1;
}
function __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEE4freeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEE5allocEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $6 = (($this) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  HEAP32[$1>>2] = 0;
 }
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 4|0);
 $12 = (($this) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($10|0)==($18|0);
 do {
  if ($19) {
   $20 = HEAP32[$3>>2]|0;
   $$arith = $20<<4;
   $$overflow = ($20>>>0)>(268435455);
   $21 = $$overflow ? -1 : $$arith;
   $22 = (__Znaj($21)|0);
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($this) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23>>>0)<($25>>>0);
   if (!($26)) {
    __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($11,$0);
    break;
   }
   $27 = ($23|0)==(0|0);
   if (!($27)) {
    HEAP32[$23>>2] = $22;
   }
   $28 = HEAP32[$12>>2]|0;
   $29 = (($28) + 4|0);
   HEAP32[$12>>2] = $29;
  }
 } while(0);
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$11>>2]|0;
 $32 = (($31) + ($30<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[$1>>2] = $35;
 $36 = (($33) + ($34<<4)|0);
 STACKTOP = sp;return ($36|0);
}
function __ZN5MeCab14NBestGenerator4nextEv($this) {
 $this = $this|0;
 var $$0 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $__new_last2$i$i$i$i = 0, $n$01 = 0, $n1 = 0, $path$0 = 0, $path$03 = 0, $path$04 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, $uglygep$i$i$i$i = 0, $uglygep3$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy3 = sp + 20|0;
 $$byval_copy2 = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp;
 $n1 = sp + 4|0;
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($this) + 20|0);
 $9 = (($this) + 12|0);
 $14 = $4;$15 = $6;
 while(1) {
  $13 = HEAP32[$14>>2]|0;
  $16 = $15;
  $17 = $14;
  $18 = (($16) - ($17))|0;
  $19 = ($18|0)>(4);
  if ($19) {
   $20 = $18 >> 2;
   $21 = (($15) + -4|0);
   $22 = HEAP32[$14>>2]|0;
   $23 = HEAP32[$21>>2]|0;
   HEAP32[$14>>2] = $23;
   HEAP32[$21>>2] = $22;
   HEAP32[$0>>2] = $14;
   HEAP32[$1>>2] = $21;
   $24 = (($20) + -1)|0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$0+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$1+0>>2]|0;
   __ZNSt3__117__push_heap_frontIRN5MeCab14NBestGenerator16QueueElementCompENS_11__wrap_iterIPPNS2_12QueueElementEEEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($$byval_copy2,$$byval_copy3,0,$24);
  }
  $25 = HEAP32[$5>>2]|0;
  $26 = (($25) + -4|0);
  $scevgep$i$i$i$i = (($25) + -4|0);
  $__new_last2$i$i$i$i = $26;
  $27 = (0 - ($__new_last2$i$i$i$i))|0;
  $uglygep$i$i$i$i = (($scevgep$i$i$i$i) + ($27)|0);
  $uglygep3$i$i$i$i = $uglygep$i$i$i$i;
  $28 = $uglygep3$i$i$i$i >>> 2;
  $29 = $28 ^ -1;
  $scevgep4$i$i$i$i = (($25) + ($29<<2)|0);
  HEAP32[$5>>2] = $scevgep4$i$i$i$i;
  $30 = HEAP32[$13>>2]|0;
  $31 = (($30) + 47|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)==(2);
  if ($33) {
   break;
  }
  $49 = (($30) + 20|0);
  $path$03 = HEAP32[$49>>2]|0;
  $50 = ($path$03|0)==(0|0);
  if (!($50)) {
   $51 = (($13) + 12|0);
   $path$04 = $path$03;
   while(1) {
    $52 = (__ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEE5allocEv($8)|0);
    HEAP32[$n1>>2] = $52;
    $53 = (($path$04) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    HEAP32[$52>>2] = $54;
    $55 = (($path$04) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$51>>2]|0;
    $58 = (($57) + ($56))|0;
    $59 = HEAP32[$n1>>2]|0;
    $60 = (($59) + 12|0);
    HEAP32[$60>>2] = $58;
    $61 = HEAP32[$53>>2]|0;
    $62 = (($61) + 68|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$55>>2]|0;
    $65 = (($64) + ($63))|0;
    $66 = HEAP32[$51>>2]|0;
    $67 = (($65) + ($66))|0;
    $68 = HEAP32[$n1>>2]|0;
    $69 = (($68) + 8|0);
    HEAP32[$69>>2] = $67;
    $70 = HEAP32[$n1>>2]|0;
    $71 = (($70) + 4|0);
    HEAP32[$71>>2] = $13;
    $72 = HEAP32[$5>>2]|0;
    $73 = HEAP32[$9>>2]|0;
    $74 = ($72|0)==($73|0);
    if ($74) {
     __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($3,$n1);
    } else {
     $75 = ($72|0)==(0|0);
     if (!($75)) {
      $76 = HEAP32[$n1>>2]|0;
      HEAP32[$72>>2] = $76;
     }
     $77 = HEAP32[$5>>2]|0;
     $78 = (($77) + 4|0);
     HEAP32[$5>>2] = $78;
    }
    $79 = HEAP32[$3>>2]|0;
    $80 = HEAP32[$5>>2]|0;
    HEAP32[$0>>2] = $79;
    HEAP32[$1>>2] = $80;
    $81 = $80;
    $82 = $79;
    $83 = (($81) - ($82))|0;
    $84 = $83 >> 2;
    ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$0+0>>2]|0;
    ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__116__push_heap_backIRN5MeCab14NBestGenerator16QueueElementCompENS_11__wrap_iterIPPNS2_12QueueElementEEEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($$byval_copy2,$$byval_copy3,$2,$84);
    $85 = (($path$04) + 12|0);
    $path$0 = HEAP32[$85>>2]|0;
    $86 = ($path$0|0)==(0|0);
    if ($86) {
     break;
    } else {
     $path$04 = $path$0;
    }
   }
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = ($10|0)==($11|0);
  if ($12) {
   $$0 = 0;
   label = 17;
   break;
  } else {
   $14 = $10;$15 = $11;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($13) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $38 = $35;$43 = $34;$n$01 = $13;
 }
 while(1) {
  $37 = HEAP32[$38>>2]|0;
  $39 = HEAP32[$n$01>>2]|0;
  $40 = (($39) + 4|0);
  HEAP32[$40>>2] = $37;
  $41 = HEAP32[$n$01>>2]|0;
  $42 = HEAP32[$43>>2]|0;
  $44 = HEAP32[$42>>2]|0;
  HEAP32[$44>>2] = $41;
  $45 = HEAP32[$43>>2]|0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if ($48) {
   $$0 = 1;
   break;
  } else {
   $38 = $47;$43 = $46;$n$01 = $45;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__116__push_heap_backIRN5MeCab14NBestGenerator16QueueElementCompENS_11__wrap_iterIPPNS2_12QueueElementEEEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($__first,$__last,$__comp,$__len) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 $__len = $__len|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $13$phi = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__len|0)>(1);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (($__len) + -2)|0;
 $2 = (($1|0) / 2)&-1;
 $3 = HEAP32[$__first>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$__last>>2]|0;
 $7 = (($6) + -4|0);
 HEAP32[$__last>>2] = $7;
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN5MeCab14NBestGenerator16QueueElementCompclEPNS0_12QueueElementES3_(0,$5,$8)|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$__first>>2]|0;
 $$promoted = HEAP32[$__last>>2]|0;
 $$0 = $2;$12 = $4;$13 = $$promoted;
 while(1) {
  $11 = HEAP32[$12>>2]|0;
  HEAP32[$13>>2] = $11;
  $14 = ($$0|0)==(0);
  if ($14) {
   break;
  }
  $15 = (($$0) + -1)|0;
  $16 = (($15|0) / 2)&-1;
  $17 = (($10) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZN5MeCab14NBestGenerator16QueueElementCompclEPNS0_12QueueElementES3_(0,$18,$8)|0);
  if ($19) {
   $13$phi = $12;$$0 = $16;$12 = $17;$13 = $13$phi;
  } else {
   break;
  }
 }
 HEAP32[$__last>>2] = $12;
 HEAP32[$12>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN5MeCab14NBestGenerator16QueueElementCompclEPNS0_12QueueElementES3_($this,$q1,$q2) {
 $this = $this|0;
 $q1 = $q1|0;
 $q2 = $q2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($q1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($q2) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)>($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEEC1EjjS7_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v);
 __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEEC1EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1073741823;
}
function __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEEC1EjjS7_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIPN5MeCab14NBestGenerator12QueueElementENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v);
 __ZNSt3__114__split_bufferIPN5MeCab14NBestGenerator12QueueElementERNS_9allocatorIS4_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__117__push_heap_frontIRN5MeCab14NBestGenerator16QueueElementCompENS_11__wrap_iterIPPNS2_12QueueElementEEEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($__first,$0,$__comp,$__len) {
 $__first = $__first|0;
 $0 = $0|0;
 $__comp = $__comp|0;
 $__len = $__len|0;
 var $$sum3 = 0, $$sum4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $16$phi = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$0 = 0, $__c$1 = 0, $__c$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__len|0)>(1);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$__first>>2]|0;
 $3 = (($2) + 8|0);
 $4 = ($__len|0)==(2);
 if ($4) {
  label = 4;
 } else {
  $5 = HEAP32[$3>>2]|0;
  $6 = (($2) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (__ZN5MeCab14NBestGenerator16QueueElementCompclEPNS0_12QueueElementES3_(0,$5,$7)|0);
  if ($8) {
   label = 4;
  } else {
   $12 = $3;$__c$0 = 2;
  }
 }
 if ((label|0) == 4) {
  $9 = (($2) + 4|0);
  $12 = $9;$__c$0 = 1;
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$12>>2]|0;
 $13 = (__ZN5MeCab14NBestGenerator16QueueElementCompclEPNS0_12QueueElementES3_(0,$10,$11)|0);
 if ($13) {
  $15 = $12;$16 = $2;$__c$1 = $__c$0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $14 = HEAP32[$15>>2]|0;
  HEAP32[$16>>2] = $14;
  $17 = $__c$1 << 1;
  $18 = (($17) + 2)|0;
  $19 = ($18|0)>($__len|0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$__first>>2]|0;
  $21 = (($20) + ($18<<2)|0);
  $22 = ($18|0)==($__len|0);
  if ($22) {
   label = 9;
  } else {
   $23 = HEAP32[$21>>2]|0;
   $$sum3 = $17 | 1;
   $24 = (($20) + ($$sum3<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (__ZN5MeCab14NBestGenerator16QueueElementCompclEPNS0_12QueueElementES3_(0,$23,$25)|0);
   if ($26) {
    label = 9;
   } else {
    $30 = $21;$__c$2 = $18;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $27 = $17 | 1;
   $$sum4 = $17 | 1;
   $28 = (($20) + ($$sum4<<2)|0);
   $30 = $28;$__c$2 = $27;
  }
  $29 = HEAP32[$30>>2]|0;
  $31 = (__ZN5MeCab14NBestGenerator16QueueElementCompclEPNS0_12QueueElementES3_(0,$10,$29)|0);
  if ($31) {
   $16$phi = $15;$15 = $30;$__c$1 = $__c$2;$16 = $16$phi;
  } else {
   break;
  }
 }
 HEAP32[$15>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN5MeCab6WriterC2Ev($this) {
 $this = $this|0;
 var $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((402120 + 8|0));
 $0 = (($this) + 4|0);
 __ZN5MeCab13scoped_stringC1Ev($0);
 $1 = (($this) + 12|0);
 __ZN5MeCab13scoped_stringC1Ev($1);
 $2 = (($this) + 20|0);
 __ZN5MeCab13scoped_stringC1Ev($2);
 $3 = (($this) + 28|0);
 __ZN5MeCab13scoped_stringC1Ev($3);
 $4 = (($this) + 36|0);
 __ZN5MeCab13scoped_stringC1Ev($4);
 $5 = (($this) + 44|0);
 __ZN5MeCab7whatlogC1Ev($5);
 $6 = (($this) + 192|0);
 HEAP8[$6>>0]=(32)&255;HEAP8[$6+1>>0]=((32)>>8)&255;HEAP8[$6+2>>0]=((32)>>16)&255;HEAP8[$6+3>>0]=(32)>>24;
 $$index1 = (($6) + 4|0);
 HEAP8[$$index1>>0]=0&255;HEAP8[$$index1+1>>0]=(0>>8)&255;HEAP8[$$index1+2>>0]=(0>>16)&255;HEAP8[$$index1+3>>0]=0>>24;
 STACKTOP = sp;return;
}
function __ZN5MeCab13scoped_stringC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab13scoped_stringC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab6Writer12writeLatticeEPNS_7LatticeEPNS_12StringBufferE($this,$lattice,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $os = $os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $node$0 = 0, $node$01 = 0, $node$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = (($3) + 4|0);
 $node$01 = HEAP32[$4>>2]|0;
 $5 = (($node$01) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  (__ZN5MeCab12StringBufferlsEPKc($os,402400)|0);
  STACKTOP = sp;return 1;
 } else {
  $16 = $5;$node$02 = $node$01;
 }
 while(1) {
  $8 = (($node$02) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($node$02) + 36|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  (__ZN5MeCab12StringBuffer5writeEPKcj($os,$9,$12)|0);
  $13 = (__ZN5MeCab12StringBufferlsEc($os,9)|0);
  $14 = (($node$02) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  (__ZN5MeCab12StringBufferlsEPKc($13,$15)|0);
  (__ZN5MeCab12StringBufferlsEc($os,10)|0);
  $node$0 = HEAP32[$16>>2]|0;
  $17 = (($node$0) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   break;
  } else {
   $16 = $17;$node$02 = $node$0;
  }
 }
 (__ZN5MeCab12StringBufferlsEPKc($os,402400)|0);
 STACKTOP = sp;return 1;
}
function __ZN5MeCab13scoped_stringD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab13scoped_stringD2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab6WriterD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab6WriterD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab6WriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((402120 + 8|0));
 $0 = (($this) + 44|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 36|0);
 __ZN5MeCab13scoped_stringD1Ev($1);
 $2 = (($this) + 28|0);
 __ZN5MeCab13scoped_stringD1Ev($2);
 $3 = (($this) + 20|0);
 __ZN5MeCab13scoped_stringD1Ev($3);
 $4 = (($this) + 12|0);
 __ZN5MeCab13scoped_stringD1Ev($4);
 $5 = (($this) + 4|0);
 __ZN5MeCab13scoped_stringD1Ev($5);
 STACKTOP = sp;return;
}
function __ZN5MeCab6Writer4openERKNS_5ParamE($this,$param) {
 $this = $this|0;
 $param = $param|0;
 var $$323 = 0, $$index1 = 0, $$index11 = 0, $$index3 = 0, $$index5 = 0, $$index7 = 0, $$index9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$03$i$i = 0, $__lhs_sz$03$i$i100 = 0, $__lhs_sz$03$i$i112 = 0, $__lhs_sz$03$i$i124 = 0, $__lhs_sz$03$i$i136 = 0, $__lhs_sz$03$i$i148 = 0, $__lhs_sz$03$i$i160 = 0, $__lhs_sz$03$i$i64 = 0, $__lhs_sz$03$i$i76 = 0;
 var $__lhs_sz$03$i$i88 = 0, $__lp$04$i$i = 0, $__lp$04$i$i111 = 0, $__lp$04$i$i123 = 0, $__lp$04$i$i135 = 0, $__lp$04$i$i147 = 0, $__lp$04$i$i159 = 0, $__lp$04$i$i63 = 0, $__lp$04$i$i75 = 0, $__lp$04$i$i87 = 0, $__lp$04$i$i99 = 0, $__rp$05$i$i = 0, $__rp$05$i$i110 = 0, $__rp$05$i$i122 = 0, $__rp$05$i$i134 = 0, $__rp$05$i$i146 = 0, $__rp$05$i$i158 = 0, $__rp$05$i$i62 = 0, $__rp$05$i$i74 = 0, $__rp$05$i$i86 = 0;
 var $__rp$05$i$i98 = 0, $bos_format = 0, $bos_format2 = 0, $bos_format_key = 0, $eon_format = 0, $eon_format2 = 0, $eon_format_key = 0, $eos_format = 0, $eos_format2 = 0, $eos_format_key = 0, $node_format = 0, $node_format2 = 0, $node_format_key = 0, $ostyle = 0, $phitmp$i = 0, $phitmp$i109 = 0, $phitmp$i121 = 0, $phitmp$i133 = 0, $phitmp$i145 = 0, $phitmp$i157 = 0;
 var $phitmp$i61 = 0, $phitmp$i73 = 0, $phitmp$i85 = 0, $phitmp$i97 = 0, $tmp = 0, $unk_format = 0, $unk_format2 = 0, $unk_format_key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $ostyle = sp + 196|0;
 $node_format = sp + 184|0;
 $unk_format = sp + 172|0;
 $bos_format = sp + 160|0;
 $eos_format = sp + 148|0;
 $eon_format = sp + 136|0;
 $node_format_key = sp + 124|0;
 $bos_format_key = sp + 112|0;
 $eos_format_key = sp + 100|0;
 $unk_format_key = sp + 88|0;
 $eon_format_key = sp + 76|0;
 $tmp = sp + 64|0;
 $0 = sp + 60|0;
 $node_format2 = sp + 48|0;
 $bos_format2 = sp + 36|0;
 $eos_format2 = sp + 24|0;
 $unk_format2 = sp + 12|0;
 $eon_format2 = sp;
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($ostyle,$param,402136);
 $1 = (($this) + 192|0);
 HEAP8[$1>>0]=(32)&255;HEAP8[$1+1>>0]=((32)>>8)&255;HEAP8[$1+2>>0]=((32)>>16)&255;HEAP8[$1+3>>0]=(32)>>24;
 $$index1 = (($1) + 4|0);
 HEAP8[$$index1>>0]=0&255;HEAP8[$$index1+1>>0]=(0>>8)&255;HEAP8[$$index1+2>>0]=(0>>16)&255;HEAP8[$$index1+3>>0]=0>>24;
 $2 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($ostyle,402160)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP8[$1>>0]=(33)&255;HEAP8[$1+1>>0]=((33)>>8)&255;HEAP8[$1+2>>0]=((33)>>16)&255;HEAP8[$1+3>>0]=(33)>>24;
  $$index3 = (($1) + 4|0);
  HEAP8[$$index3>>0]=0&255;HEAP8[$$index3+1>>0]=(0>>8)&255;HEAP8[$$index3+2>>0]=(0>>16)&255;HEAP8[$$index3+3>>0]=0>>24;
  $$323 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ostyle);
  STACKTOP = sp;return ($$323|0);
 }
 $4 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($ostyle,402168)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP8[$1>>0]=(34)&255;HEAP8[$1+1>>0]=((34)>>8)&255;HEAP8[$1+2>>0]=((34)>>16)&255;HEAP8[$1+3>>0]=(34)>>24;
  $$index5 = (($1) + 4|0);
  HEAP8[$$index5>>0]=0&255;HEAP8[$$index5+1>>0]=(0>>8)&255;HEAP8[$$index5+2>>0]=(0>>16)&255;HEAP8[$$index5+3>>0]=0>>24;
  $$323 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ostyle);
  STACKTOP = sp;return ($$323|0);
 }
 $6 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($ostyle,402176)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP8[$1>>0]=(35)&255;HEAP8[$1+1>>0]=((35)>>8)&255;HEAP8[$1+2>>0]=((35)>>16)&255;HEAP8[$1+3>>0]=(35)>>24;
  $$index7 = (($1) + 4|0);
  HEAP8[$$index7>>0]=0&255;HEAP8[$$index7+1>>0]=(0>>8)&255;HEAP8[$$index7+2>>0]=(0>>16)&255;HEAP8[$$index7+3>>0]=0>>24;
  $$323 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ostyle);
  STACKTOP = sp;return ($$323|0);
 }
 $8 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($ostyle,402184)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP8[$1>>0]=(36)&255;HEAP8[$1+1>>0]=((36)>>8)&255;HEAP8[$1+2>>0]=((36)>>16)&255;HEAP8[$1+3>>0]=(36)>>24;
  $$index9 = (($1) + 4|0);
  HEAP8[$$index9>>0]=0&255;HEAP8[$$index9+1>>0]=(0>>8)&255;HEAP8[$$index9+2>>0]=(0>>16)&255;HEAP8[$$index9+3>>0]=0>>24;
  $$323 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ostyle);
  STACKTOP = sp;return ($$323|0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($node_format,402192,8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($unk_format,402192,8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($bos_format,402208,0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($eos_format,402216,5);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($eon_format,402208,0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($node_format_key,402224,11);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($bos_format_key,402240,10);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($eos_format_key,402256,10);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($unk_format_key,402272,10);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($eon_format_key,402288,10);
 $10 = HEAP8[$ostyle>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $17 = $16;
 } else {
  $13 = (($ostyle) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $18 = ($17|0)==(0);
 do {
  if (!($18)) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($node_format_key,402304)|0);
   $19 = HEAP8[$ostyle>>0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $24 = (($ostyle) + 1|0);
    $32 = $24;
   } else {
    $22 = (($ostyle) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $32 = $23;
   }
   $25 = HEAP8[$ostyle>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $30 = $25&255;
    $31 = $30 >>> 1;
    $33 = $31;
   } else {
    $28 = (($ostyle) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $33 = $29;
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($node_format_key,$32,$33)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($bos_format_key,402304)|0);
   $34 = HEAP8[$ostyle>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $39 = (($ostyle) + 1|0);
    $47 = $39;
   } else {
    $37 = (($ostyle) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $47 = $38;
   }
   $40 = HEAP8[$ostyle>>0]|0;
   $41 = $40 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $40&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = (($ostyle) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($bos_format_key,$47,$48)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($eos_format_key,402304)|0);
   $49 = HEAP8[$ostyle>>0]|0;
   $50 = $49 & 1;
   $51 = ($50<<24>>24)==(0);
   if ($51) {
    $54 = (($ostyle) + 1|0);
    $62 = $54;
   } else {
    $52 = (($ostyle) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $62 = $53;
   }
   $55 = HEAP8[$ostyle>>0]|0;
   $56 = $55 & 1;
   $57 = ($56<<24>>24)==(0);
   if ($57) {
    $60 = $55&255;
    $61 = $60 >>> 1;
    $63 = $61;
   } else {
    $58 = (($ostyle) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $63 = $59;
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($eos_format_key,$62,$63)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($unk_format_key,402304)|0);
   $64 = HEAP8[$ostyle>>0]|0;
   $65 = $64 & 1;
   $66 = ($65<<24>>24)==(0);
   if ($66) {
    $69 = (($ostyle) + 1|0);
    $77 = $69;
   } else {
    $67 = (($ostyle) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $77 = $68;
   }
   $70 = HEAP8[$ostyle>>0]|0;
   $71 = $70 & 1;
   $72 = ($71<<24>>24)==(0);
   if ($72) {
    $75 = $70&255;
    $76 = $75 >>> 1;
    $78 = $76;
   } else {
    $73 = (($ostyle) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $78 = $74;
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($unk_format_key,$77,$78)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($eon_format_key,402304)|0);
   $79 = HEAP8[$ostyle>>0]|0;
   $80 = $79 & 1;
   $81 = ($80<<24>>24)==(0);
   if ($81) {
    $84 = (($ostyle) + 1|0);
    $92 = $84;
   } else {
    $82 = (($ostyle) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $92 = $83;
   }
   $85 = HEAP8[$ostyle>>0]|0;
   $86 = $85 & 1;
   $87 = ($86<<24>>24)==(0);
   if ($87) {
    $90 = $85&255;
    $91 = $90 >>> 1;
    $93 = $91;
   } else {
    $88 = (($ostyle) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $93 = $89;
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($eon_format_key,$92,$93)|0);
   $94 = HEAP8[$node_format_key>>0]|0;
   $95 = $94 & 1;
   $96 = ($95<<24>>24)==(0);
   if ($96) {
    $99 = (($node_format_key) + 1|0);
    $100 = $99;
   } else {
    $97 = (($node_format_key) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $100 = $98;
   }
   __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($tmp,$param,$100);
   $101 = HEAP8[$tmp>>0]|0;
   $102 = $101 & 1;
   $103 = ($102<<24>>24)==(0);
   if ($103) {
    $106 = $101&255;
    $107 = $106 >>> 1;
    $108 = $107;
   } else {
    $104 = (($tmp) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $108 = $105;
   }
   $109 = ($108|0)==(0);
   if (!($109)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($tmp);
    break;
   }
   $110 = (($this) + 44|0);
   __ZN5MeCab4wlogC1EPNS_7whatlogE($0,$110);
   $111 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($110,402312)|0);
   $112 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($111,402328)|0);
   $113 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($112,63)|0);
   $114 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($113,402336)|0);
   $115 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($114,402344)|0);
   $116 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($115,402360)|0);
   $117 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($116,402368)|0);
   $118 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($117,$ostyle)|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($118,402392)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($tmp);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eon_format_key);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($unk_format_key);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eos_format_key);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($bos_format_key);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($node_format_key);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eon_format);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eos_format);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($bos_format);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($unk_format);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($node_format);
   $$323 = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ostyle);
   STACKTOP = sp;return ($$323|0);
  }
 } while(0);
 $119 = HEAP8[$node_format_key>>0]|0;
 $120 = $119 & 1;
 $121 = ($120<<24>>24)==(0);
 if ($121) {
  $124 = (($node_format_key) + 1|0);
  $125 = $124;
 } else {
  $122 = (($node_format_key) + 8|0);
  $123 = HEAP32[$122>>2]|0;
  $125 = $123;
 }
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($node_format2,$param,$125);
 $126 = HEAP8[$bos_format_key>>0]|0;
 $127 = $126 & 1;
 $128 = ($127<<24>>24)==(0);
 if ($128) {
  $131 = (($bos_format_key) + 1|0);
  $132 = $131;
 } else {
  $129 = (($bos_format_key) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  $132 = $130;
 }
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($bos_format2,$param,$132);
 $133 = HEAP8[$eos_format_key>>0]|0;
 $134 = $133 & 1;
 $135 = ($134<<24>>24)==(0);
 if ($135) {
  $138 = (($eos_format_key) + 1|0);
  $139 = $138;
 } else {
  $136 = (($eos_format_key) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $139 = $137;
 }
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($eos_format2,$param,$139);
 $140 = HEAP8[$unk_format_key>>0]|0;
 $141 = $140 & 1;
 $142 = ($141<<24>>24)==(0);
 if ($142) {
  $145 = (($unk_format_key) + 1|0);
  $146 = $145;
 } else {
  $143 = (($unk_format_key) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $146 = $144;
 }
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($unk_format2,$param,$146);
 $147 = HEAP8[$eon_format_key>>0]|0;
 $148 = $147 & 1;
 $149 = ($148<<24>>24)==(0);
 if ($149) {
  $152 = (($eon_format_key) + 1|0);
  $153 = $152;
 } else {
  $150 = (($eon_format_key) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $153 = $151;
 }
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($eon_format2,$param,$153);
 $154 = HEAP8[$node_format>>0]|0;
 $155 = $154 & 1;
 $156 = ($155<<24>>24)==(0);
 if ($156) {
  $159 = $154&255;
  $160 = $159 >>> 1;
  $168 = $160;
 } else {
  $157 = (($node_format) + 4|0);
  $158 = HEAP32[$157>>2]|0;
  $168 = $158;
 }
 $161 = HEAP8[$node_format2>>0]|0;
 $162 = $161 & 1;
 $163 = ($162<<24>>24)==(0);
 if ($163) {
  $166 = $161&255;
  $167 = $166 >>> 1;
  $170 = $167;
 } else {
  $164 = (($node_format2) + 4|0);
  $165 = HEAP32[$164>>2]|0;
  $170 = $165;
 }
 $169 = ($168|0)==($170|0);
 L104: do {
  if ($169) {
   $171 = HEAP8[$node_format>>0]|0;
   $172 = $171 & 1;
   $173 = ($172<<24>>24)==(0);
   if ($173) {
    $176 = (($node_format) + 1|0);
    $194 = $176;
   } else {
    $174 = (($node_format) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $194 = $175;
   }
   $177 = HEAP8[$node_format2>>0]|0;
   $178 = $177 & 1;
   $179 = ($178<<24>>24)==(0);
   if ($179) {
    $182 = (($node_format2) + 1|0);
    $195 = $182;
   } else {
    $180 = (($node_format2) + 8|0);
    $181 = HEAP32[$180>>2]|0;
    $195 = $181;
   }
   $183 = HEAP8[$node_format>>0]|0;
   $184 = $183 & 1;
   $185 = ($184<<24>>24)==(0);
   if ($185) {
    $186 = ($168|0)==(0);
    if (!($186)) {
     $__lhs_sz$03$i$i = $168;$__lp$04$i$i = $194;$__rp$05$i$i = $195;
     while(1) {
      $187 = HEAP8[$__lp$04$i$i>>0]|0;
      $188 = HEAP8[$__rp$05$i$i>>0]|0;
      $189 = ($187<<24>>24)==($188<<24>>24);
      if (!($189)) {
       label = 139;
       break L104;
      }
      $190 = (($__lhs_sz$03$i$i) + -1)|0;
      $191 = (($__lp$04$i$i) + 1|0);
      $192 = (($__rp$05$i$i) + 1|0);
      $193 = ($190|0)==(0);
      if ($193) {
       break;
      } else {
       $__lhs_sz$03$i$i = $190;$__lp$04$i$i = $191;$__rp$05$i$i = $192;
      }
     }
    }
   } else {
    $196 = (_memcmp($194,$195,$168)|0);
    $phitmp$i = ($196|0)==(0);
    if (!($phitmp$i)) {
     label = 139;
     break;
    }
   }
   $197 = HEAP8[$bos_format>>0]|0;
   $198 = $197 & 1;
   $199 = ($198<<24>>24)==(0);
   if ($199) {
    $202 = $197&255;
    $203 = $202 >>> 1;
    $211 = $203;
   } else {
    $200 = (($bos_format) + 4|0);
    $201 = HEAP32[$200>>2]|0;
    $211 = $201;
   }
   $204 = HEAP8[$bos_format2>>0]|0;
   $205 = $204 & 1;
   $206 = ($205<<24>>24)==(0);
   if ($206) {
    $209 = $204&255;
    $210 = $209 >>> 1;
    $213 = $210;
   } else {
    $207 = (($bos_format2) + 4|0);
    $208 = HEAP32[$207>>2]|0;
    $213 = $208;
   }
   $212 = ($211|0)==($213|0);
   if (!($212)) {
    label = 139;
    break;
   }
   $214 = HEAP8[$bos_format>>0]|0;
   $215 = $214 & 1;
   $216 = ($215<<24>>24)==(0);
   if ($216) {
    $219 = (($bos_format) + 1|0);
    $237 = $219;
   } else {
    $217 = (($bos_format) + 8|0);
    $218 = HEAP32[$217>>2]|0;
    $237 = $218;
   }
   $220 = HEAP8[$bos_format2>>0]|0;
   $221 = $220 & 1;
   $222 = ($221<<24>>24)==(0);
   if ($222) {
    $225 = (($bos_format2) + 1|0);
    $238 = $225;
   } else {
    $223 = (($bos_format2) + 8|0);
    $224 = HEAP32[$223>>2]|0;
    $238 = $224;
   }
   $226 = HEAP8[$bos_format>>0]|0;
   $227 = $226 & 1;
   $228 = ($227<<24>>24)==(0);
   do {
    if ($228) {
     $229 = ($211|0)==(0);
     if ($229) {
      break;
     } else {
      $__lhs_sz$03$i$i64 = $211;$__lp$04$i$i63 = $237;$__rp$05$i$i62 = $238;
     }
     while(1) {
      $230 = HEAP8[$__lp$04$i$i63>>0]|0;
      $231 = HEAP8[$__rp$05$i$i62>>0]|0;
      $232 = ($230<<24>>24)==($231<<24>>24);
      if (!($232)) {
       label = 139;
       break L104;
      }
      $233 = (($__lhs_sz$03$i$i64) + -1)|0;
      $234 = (($__lp$04$i$i63) + 1|0);
      $235 = (($__rp$05$i$i62) + 1|0);
      $236 = ($233|0)==(0);
      if ($236) {
       break;
      } else {
       $__lhs_sz$03$i$i64 = $233;$__lp$04$i$i63 = $234;$__rp$05$i$i62 = $235;
      }
     }
    } else {
     $239 = (_memcmp($237,$238,$211)|0);
     $phitmp$i61 = ($239|0)==(0);
     if (!($phitmp$i61)) {
      label = 139;
      break L104;
     }
    }
   } while(0);
   $240 = HEAP8[$eos_format>>0]|0;
   $241 = $240 & 1;
   $242 = ($241<<24>>24)==(0);
   if ($242) {
    $245 = $240&255;
    $246 = $245 >>> 1;
    $254 = $246;
   } else {
    $243 = (($eos_format) + 4|0);
    $244 = HEAP32[$243>>2]|0;
    $254 = $244;
   }
   $247 = HEAP8[$eos_format2>>0]|0;
   $248 = $247 & 1;
   $249 = ($248<<24>>24)==(0);
   if ($249) {
    $252 = $247&255;
    $253 = $252 >>> 1;
    $256 = $253;
   } else {
    $250 = (($eos_format2) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    $256 = $251;
   }
   $255 = ($254|0)==($256|0);
   if (!($255)) {
    label = 139;
    break;
   }
   $257 = HEAP8[$eos_format>>0]|0;
   $258 = $257 & 1;
   $259 = ($258<<24>>24)==(0);
   if ($259) {
    $262 = (($eos_format) + 1|0);
    $280 = $262;
   } else {
    $260 = (($eos_format) + 8|0);
    $261 = HEAP32[$260>>2]|0;
    $280 = $261;
   }
   $263 = HEAP8[$eos_format2>>0]|0;
   $264 = $263 & 1;
   $265 = ($264<<24>>24)==(0);
   if ($265) {
    $268 = (($eos_format2) + 1|0);
    $281 = $268;
   } else {
    $266 = (($eos_format2) + 8|0);
    $267 = HEAP32[$266>>2]|0;
    $281 = $267;
   }
   $269 = HEAP8[$eos_format>>0]|0;
   $270 = $269 & 1;
   $271 = ($270<<24>>24)==(0);
   do {
    if ($271) {
     $272 = ($254|0)==(0);
     if ($272) {
      break;
     } else {
      $__lhs_sz$03$i$i76 = $254;$__lp$04$i$i75 = $280;$__rp$05$i$i74 = $281;
     }
     while(1) {
      $273 = HEAP8[$__lp$04$i$i75>>0]|0;
      $274 = HEAP8[$__rp$05$i$i74>>0]|0;
      $275 = ($273<<24>>24)==($274<<24>>24);
      if (!($275)) {
       label = 139;
       break L104;
      }
      $276 = (($__lhs_sz$03$i$i76) + -1)|0;
      $277 = (($__lp$04$i$i75) + 1|0);
      $278 = (($__rp$05$i$i74) + 1|0);
      $279 = ($276|0)==(0);
      if ($279) {
       break;
      } else {
       $__lhs_sz$03$i$i76 = $276;$__lp$04$i$i75 = $277;$__rp$05$i$i74 = $278;
      }
     }
    } else {
     $282 = (_memcmp($280,$281,$254)|0);
     $phitmp$i73 = ($282|0)==(0);
     if (!($phitmp$i73)) {
      label = 139;
      break L104;
     }
    }
   } while(0);
   $283 = HEAP8[$unk_format>>0]|0;
   $284 = $283 & 1;
   $285 = ($284<<24>>24)==(0);
   if ($285) {
    $288 = $283&255;
    $289 = $288 >>> 1;
    $297 = $289;
   } else {
    $286 = (($unk_format) + 4|0);
    $287 = HEAP32[$286>>2]|0;
    $297 = $287;
   }
   $290 = HEAP8[$unk_format2>>0]|0;
   $291 = $290 & 1;
   $292 = ($291<<24>>24)==(0);
   if ($292) {
    $295 = $290&255;
    $296 = $295 >>> 1;
    $299 = $296;
   } else {
    $293 = (($unk_format2) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $299 = $294;
   }
   $298 = ($297|0)==($299|0);
   if (!($298)) {
    label = 139;
    break;
   }
   $300 = HEAP8[$unk_format>>0]|0;
   $301 = $300 & 1;
   $302 = ($301<<24>>24)==(0);
   if ($302) {
    $305 = (($unk_format) + 1|0);
    $323 = $305;
   } else {
    $303 = (($unk_format) + 8|0);
    $304 = HEAP32[$303>>2]|0;
    $323 = $304;
   }
   $306 = HEAP8[$unk_format2>>0]|0;
   $307 = $306 & 1;
   $308 = ($307<<24>>24)==(0);
   if ($308) {
    $311 = (($unk_format2) + 1|0);
    $324 = $311;
   } else {
    $309 = (($unk_format2) + 8|0);
    $310 = HEAP32[$309>>2]|0;
    $324 = $310;
   }
   $312 = HEAP8[$unk_format>>0]|0;
   $313 = $312 & 1;
   $314 = ($313<<24>>24)==(0);
   if (!($314)) {
    $325 = (_memcmp($323,$324,$297)|0);
    $phitmp$i85 = ($325|0)==(0);
    if ($phitmp$i85) {
     break;
    } else {
     label = 139;
     break;
    }
   }
   $315 = ($297|0)==(0);
   if ($315) {
    break;
   } else {
    $__lhs_sz$03$i$i88 = $297;$__lp$04$i$i87 = $323;$__rp$05$i$i86 = $324;
   }
   while(1) {
    $316 = HEAP8[$__lp$04$i$i87>>0]|0;
    $317 = HEAP8[$__rp$05$i$i86>>0]|0;
    $318 = ($316<<24>>24)==($317<<24>>24);
    if (!($318)) {
     label = 139;
     break L104;
    }
    $319 = (($__lhs_sz$03$i$i88) + -1)|0;
    $320 = (($__lp$04$i$i87) + 1|0);
    $321 = (($__rp$05$i$i86) + 1|0);
    $322 = ($319|0)==(0);
    if ($322) {
     break;
    } else {
     $__lhs_sz$03$i$i88 = $319;$__lp$04$i$i87 = $320;$__rp$05$i$i86 = $321;
    }
   }
  } else {
   label = 139;
  }
 } while(0);
 if ((label|0) == 139) {
  HEAP8[$1>>0]=(37)&255;HEAP8[$1+1>>0]=((37)>>8)&255;HEAP8[$1+2>>0]=((37)>>16)&255;HEAP8[$1+3>>0]=(37)>>24;
  $$index11 = (($1) + 4|0);
  HEAP8[$$index11>>0]=0&255;HEAP8[$$index11+1>>0]=(0>>8)&255;HEAP8[$$index11+2>>0]=(0>>16)&255;HEAP8[$$index11+3>>0]=0>>24;
  $326 = HEAP8[$node_format>>0]|0;
  $327 = $326 & 1;
  $328 = ($327<<24>>24)==(0);
  if ($328) {
   $331 = $326&255;
   $332 = $331 >>> 1;
   $340 = $332;
  } else {
   $329 = (($node_format) + 4|0);
   $330 = HEAP32[$329>>2]|0;
   $340 = $330;
  }
  $333 = HEAP8[$node_format2>>0]|0;
  $334 = $333 & 1;
  $335 = ($334<<24>>24)==(0);
  if ($335) {
   $338 = $333&255;
   $339 = $338 >>> 1;
   $342 = $339;
  } else {
   $336 = (($node_format2) + 4|0);
   $337 = HEAP32[$336>>2]|0;
   $342 = $337;
  }
  $341 = ($340|0)==($342|0);
  L202: do {
   if ($341) {
    $343 = HEAP8[$node_format>>0]|0;
    $344 = $343 & 1;
    $345 = ($344<<24>>24)==(0);
    if ($345) {
     $348 = (($node_format) + 1|0);
     $366 = $348;
    } else {
     $346 = (($node_format) + 8|0);
     $347 = HEAP32[$346>>2]|0;
     $366 = $347;
    }
    $349 = HEAP8[$node_format2>>0]|0;
    $350 = $349 & 1;
    $351 = ($350<<24>>24)==(0);
    if ($351) {
     $354 = (($node_format2) + 1|0);
     $367 = $354;
    } else {
     $352 = (($node_format2) + 8|0);
     $353 = HEAP32[$352>>2]|0;
     $367 = $353;
    }
    $355 = HEAP8[$node_format>>0]|0;
    $356 = $355 & 1;
    $357 = ($356<<24>>24)==(0);
    if (!($357)) {
     $368 = (_memcmp($366,$367,$340)|0);
     $phitmp$i97 = ($368|0)==(0);
     if ($phitmp$i97) {
      break;
     } else {
      label = 157;
      break;
     }
    }
    $358 = ($340|0)==(0);
    if ($358) {
     break;
    } else {
     $__lhs_sz$03$i$i100 = $340;$__lp$04$i$i99 = $366;$__rp$05$i$i98 = $367;
    }
    while(1) {
     $359 = HEAP8[$__lp$04$i$i99>>0]|0;
     $360 = HEAP8[$__rp$05$i$i98>>0]|0;
     $361 = ($359<<24>>24)==($360<<24>>24);
     if (!($361)) {
      label = 157;
      break L202;
     }
     $362 = (($__lhs_sz$03$i$i100) + -1)|0;
     $363 = (($__lp$04$i$i99) + 1|0);
     $364 = (($__rp$05$i$i98) + 1|0);
     $365 = ($362|0)==(0);
     if ($365) {
      break;
     } else {
      $__lhs_sz$03$i$i100 = $362;$__lp$04$i$i99 = $363;$__rp$05$i$i98 = $364;
     }
    }
   } else {
    label = 157;
   }
  } while(0);
  if ((label|0) == 157) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($node_format,$node_format2)|0);
  }
  $369 = HEAP8[$bos_format>>0]|0;
  $370 = $369 & 1;
  $371 = ($370<<24>>24)==(0);
  if ($371) {
   $374 = $369&255;
   $375 = $374 >>> 1;
   $383 = $375;
  } else {
   $372 = (($bos_format) + 4|0);
   $373 = HEAP32[$372>>2]|0;
   $383 = $373;
  }
  $376 = HEAP8[$bos_format2>>0]|0;
  $377 = $376 & 1;
  $378 = ($377<<24>>24)==(0);
  if ($378) {
   $381 = $376&255;
   $382 = $381 >>> 1;
   $385 = $382;
  } else {
   $379 = (($bos_format2) + 4|0);
   $380 = HEAP32[$379>>2]|0;
   $385 = $380;
  }
  $384 = ($383|0)==($385|0);
  L229: do {
   if ($384) {
    $386 = HEAP8[$bos_format>>0]|0;
    $387 = $386 & 1;
    $388 = ($387<<24>>24)==(0);
    if ($388) {
     $391 = (($bos_format) + 1|0);
     $409 = $391;
    } else {
     $389 = (($bos_format) + 8|0);
     $390 = HEAP32[$389>>2]|0;
     $409 = $390;
    }
    $392 = HEAP8[$bos_format2>>0]|0;
    $393 = $392 & 1;
    $394 = ($393<<24>>24)==(0);
    if ($394) {
     $397 = (($bos_format2) + 1|0);
     $410 = $397;
    } else {
     $395 = (($bos_format2) + 8|0);
     $396 = HEAP32[$395>>2]|0;
     $410 = $396;
    }
    $398 = HEAP8[$bos_format>>0]|0;
    $399 = $398 & 1;
    $400 = ($399<<24>>24)==(0);
    if (!($400)) {
     $411 = (_memcmp($409,$410,$383)|0);
     $phitmp$i109 = ($411|0)==(0);
     if ($phitmp$i109) {
      break;
     } else {
      label = 176;
      break;
     }
    }
    $401 = ($383|0)==(0);
    if ($401) {
     break;
    } else {
     $__lhs_sz$03$i$i112 = $383;$__lp$04$i$i111 = $409;$__rp$05$i$i110 = $410;
    }
    while(1) {
     $402 = HEAP8[$__lp$04$i$i111>>0]|0;
     $403 = HEAP8[$__rp$05$i$i110>>0]|0;
     $404 = ($402<<24>>24)==($403<<24>>24);
     if (!($404)) {
      label = 176;
      break L229;
     }
     $405 = (($__lhs_sz$03$i$i112) + -1)|0;
     $406 = (($__lp$04$i$i111) + 1|0);
     $407 = (($__rp$05$i$i110) + 1|0);
     $408 = ($405|0)==(0);
     if ($408) {
      break;
     } else {
      $__lhs_sz$03$i$i112 = $405;$__lp$04$i$i111 = $406;$__rp$05$i$i110 = $407;
     }
    }
   } else {
    label = 176;
   }
  } while(0);
  if ((label|0) == 176) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($bos_format,$bos_format2)|0);
  }
  $412 = HEAP8[$eos_format>>0]|0;
  $413 = $412 & 1;
  $414 = ($413<<24>>24)==(0);
  if ($414) {
   $417 = $412&255;
   $418 = $417 >>> 1;
   $426 = $418;
  } else {
   $415 = (($eos_format) + 4|0);
   $416 = HEAP32[$415>>2]|0;
   $426 = $416;
  }
  $419 = HEAP8[$eos_format2>>0]|0;
  $420 = $419 & 1;
  $421 = ($420<<24>>24)==(0);
  if ($421) {
   $424 = $419&255;
   $425 = $424 >>> 1;
   $428 = $425;
  } else {
   $422 = (($eos_format2) + 4|0);
   $423 = HEAP32[$422>>2]|0;
   $428 = $423;
  }
  $427 = ($426|0)==($428|0);
  L256: do {
   if ($427) {
    $429 = HEAP8[$eos_format>>0]|0;
    $430 = $429 & 1;
    $431 = ($430<<24>>24)==(0);
    if ($431) {
     $434 = (($eos_format) + 1|0);
     $452 = $434;
    } else {
     $432 = (($eos_format) + 8|0);
     $433 = HEAP32[$432>>2]|0;
     $452 = $433;
    }
    $435 = HEAP8[$eos_format2>>0]|0;
    $436 = $435 & 1;
    $437 = ($436<<24>>24)==(0);
    if ($437) {
     $440 = (($eos_format2) + 1|0);
     $453 = $440;
    } else {
     $438 = (($eos_format2) + 8|0);
     $439 = HEAP32[$438>>2]|0;
     $453 = $439;
    }
    $441 = HEAP8[$eos_format>>0]|0;
    $442 = $441 & 1;
    $443 = ($442<<24>>24)==(0);
    if (!($443)) {
     $454 = (_memcmp($452,$453,$426)|0);
     $phitmp$i121 = ($454|0)==(0);
     if ($phitmp$i121) {
      break;
     } else {
      label = 195;
      break;
     }
    }
    $444 = ($426|0)==(0);
    if ($444) {
     break;
    } else {
     $__lhs_sz$03$i$i124 = $426;$__lp$04$i$i123 = $452;$__rp$05$i$i122 = $453;
    }
    while(1) {
     $445 = HEAP8[$__lp$04$i$i123>>0]|0;
     $446 = HEAP8[$__rp$05$i$i122>>0]|0;
     $447 = ($445<<24>>24)==($446<<24>>24);
     if (!($447)) {
      label = 195;
      break L256;
     }
     $448 = (($__lhs_sz$03$i$i124) + -1)|0;
     $449 = (($__lp$04$i$i123) + 1|0);
     $450 = (($__rp$05$i$i122) + 1|0);
     $451 = ($448|0)==(0);
     if ($451) {
      break;
     } else {
      $__lhs_sz$03$i$i124 = $448;$__lp$04$i$i123 = $449;$__rp$05$i$i122 = $450;
     }
    }
   } else {
    label = 195;
   }
  } while(0);
  if ((label|0) == 195) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($eos_format,$eos_format2)|0);
  }
  $455 = HEAP8[$unk_format>>0]|0;
  $456 = $455 & 1;
  $457 = ($456<<24>>24)==(0);
  if ($457) {
   $460 = $455&255;
   $461 = $460 >>> 1;
   $469 = $461;
  } else {
   $458 = (($unk_format) + 4|0);
   $459 = HEAP32[$458>>2]|0;
   $469 = $459;
  }
  $462 = HEAP8[$unk_format2>>0]|0;
  $463 = $462 & 1;
  $464 = ($463<<24>>24)==(0);
  if ($464) {
   $467 = $462&255;
   $468 = $467 >>> 1;
   $471 = $468;
  } else {
   $465 = (($unk_format2) + 4|0);
   $466 = HEAP32[$465>>2]|0;
   $471 = $466;
  }
  $470 = ($469|0)==($471|0);
  L283: do {
   if ($470) {
    $472 = HEAP8[$unk_format>>0]|0;
    $473 = $472 & 1;
    $474 = ($473<<24>>24)==(0);
    if ($474) {
     $477 = (($unk_format) + 1|0);
     $495 = $477;
    } else {
     $475 = (($unk_format) + 8|0);
     $476 = HEAP32[$475>>2]|0;
     $495 = $476;
    }
    $478 = HEAP8[$unk_format2>>0]|0;
    $479 = $478 & 1;
    $480 = ($479<<24>>24)==(0);
    if ($480) {
     $483 = (($unk_format2) + 1|0);
     $496 = $483;
    } else {
     $481 = (($unk_format2) + 8|0);
     $482 = HEAP32[$481>>2]|0;
     $496 = $482;
    }
    $484 = HEAP8[$unk_format>>0]|0;
    $485 = $484 & 1;
    $486 = ($485<<24>>24)==(0);
    do {
     if ($486) {
      $487 = ($469|0)==(0);
      if ($487) {
       break;
      } else {
       $__lhs_sz$03$i$i136 = $469;$__lp$04$i$i135 = $495;$__rp$05$i$i134 = $496;
      }
      while(1) {
       $488 = HEAP8[$__lp$04$i$i135>>0]|0;
       $489 = HEAP8[$__rp$05$i$i134>>0]|0;
       $490 = ($488<<24>>24)==($489<<24>>24);
       if (!($490)) {
        label = 214;
        break L283;
       }
       $491 = (($__lhs_sz$03$i$i136) + -1)|0;
       $492 = (($__lp$04$i$i135) + 1|0);
       $493 = (($__rp$05$i$i134) + 1|0);
       $494 = ($491|0)==(0);
       if ($494) {
        break;
       } else {
        $__lhs_sz$03$i$i136 = $491;$__lp$04$i$i135 = $492;$__rp$05$i$i134 = $493;
       }
      }
     } else {
      $497 = (_memcmp($495,$496,$469)|0);
      $phitmp$i133 = ($497|0)==(0);
      if (!($phitmp$i133)) {
       label = 214;
       break L283;
      }
     }
    } while(0);
    $498 = HEAP8[$node_format>>0]|0;
    $499 = $498 & 1;
    $500 = ($499<<24>>24)==(0);
    if ($500) {
     $503 = $498&255;
     $504 = $503 >>> 1;
     $512 = $504;
    } else {
     $501 = (($node_format) + 4|0);
     $502 = HEAP32[$501>>2]|0;
     $512 = $502;
    }
    $505 = HEAP8[$node_format2>>0]|0;
    $506 = $505 & 1;
    $507 = ($506<<24>>24)==(0);
    if ($507) {
     $510 = $505&255;
     $511 = $510 >>> 1;
     $514 = $511;
    } else {
     $508 = (($node_format2) + 4|0);
     $509 = HEAP32[$508>>2]|0;
     $514 = $509;
    }
    $513 = ($512|0)==($514|0);
    L308: do {
     if ($513) {
      $515 = HEAP8[$node_format>>0]|0;
      $516 = $515 & 1;
      $517 = ($516<<24>>24)==(0);
      if ($517) {
       $520 = (($node_format) + 1|0);
       $538 = $520;
      } else {
       $518 = (($node_format) + 8|0);
       $519 = HEAP32[$518>>2]|0;
       $538 = $519;
      }
      $521 = HEAP8[$node_format2>>0]|0;
      $522 = $521 & 1;
      $523 = ($522<<24>>24)==(0);
      if ($523) {
       $526 = (($node_format2) + 1|0);
       $539 = $526;
      } else {
       $524 = (($node_format2) + 8|0);
       $525 = HEAP32[$524>>2]|0;
       $539 = $525;
      }
      $527 = HEAP8[$node_format>>0]|0;
      $528 = $527 & 1;
      $529 = ($528<<24>>24)==(0);
      do {
       if ($529) {
        $530 = ($512|0)==(0);
        if ($530) {
         break;
        } else {
         $__lhs_sz$03$i$i148 = $512;$__lp$04$i$i147 = $538;$__rp$05$i$i146 = $539;
        }
        while(1) {
         $531 = HEAP8[$__lp$04$i$i147>>0]|0;
         $532 = HEAP8[$__rp$05$i$i146>>0]|0;
         $533 = ($531<<24>>24)==($532<<24>>24);
         if (!($533)) {
          break L308;
         }
         $534 = (($__lhs_sz$03$i$i148) + -1)|0;
         $535 = (($__lp$04$i$i147) + 1|0);
         $536 = (($__rp$05$i$i146) + 1|0);
         $537 = ($534|0)==(0);
         if ($537) {
          break;
         } else {
          $__lhs_sz$03$i$i148 = $534;$__lp$04$i$i147 = $535;$__rp$05$i$i146 = $536;
         }
        }
       } else {
        $540 = (_memcmp($538,$539,$512)|0);
        $phitmp$i145 = ($540|0)==(0);
        if (!($phitmp$i145)) {
         break L308;
        }
       }
      } while(0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($unk_format,$node_format)|0);
      break L283;
     }
    } while(0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($unk_format,$node_format2)|0);
   } else {
    label = 214;
   }
  } while(0);
  if ((label|0) == 214) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($unk_format,$unk_format2)|0);
  }
  $541 = HEAP8[$eon_format>>0]|0;
  $542 = $541 & 1;
  $543 = ($542<<24>>24)==(0);
  if ($543) {
   $546 = $541&255;
   $547 = $546 >>> 1;
   $555 = $547;
  } else {
   $544 = (($eon_format) + 4|0);
   $545 = HEAP32[$544>>2]|0;
   $555 = $545;
  }
  $548 = HEAP8[$eon_format2>>0]|0;
  $549 = $548 & 1;
  $550 = ($549<<24>>24)==(0);
  if ($550) {
   $553 = $548&255;
   $554 = $553 >>> 1;
   $557 = $554;
  } else {
   $551 = (($eon_format2) + 4|0);
   $552 = HEAP32[$551>>2]|0;
   $557 = $552;
  }
  $556 = ($555|0)==($557|0);
  L337: do {
   if ($556) {
    $558 = HEAP8[$eon_format>>0]|0;
    $559 = $558 & 1;
    $560 = ($559<<24>>24)==(0);
    if ($560) {
     $563 = (($eon_format) + 1|0);
     $581 = $563;
    } else {
     $561 = (($eon_format) + 8|0);
     $562 = HEAP32[$561>>2]|0;
     $581 = $562;
    }
    $564 = HEAP8[$eon_format2>>0]|0;
    $565 = $564 & 1;
    $566 = ($565<<24>>24)==(0);
    if ($566) {
     $569 = (($eon_format2) + 1|0);
     $582 = $569;
    } else {
     $567 = (($eon_format2) + 8|0);
     $568 = HEAP32[$567>>2]|0;
     $582 = $568;
    }
    $570 = HEAP8[$eon_format>>0]|0;
    $571 = $570 & 1;
    $572 = ($571<<24>>24)==(0);
    if (!($572)) {
     $583 = (_memcmp($581,$582,$555)|0);
     $phitmp$i157 = ($583|0)==(0);
     if ($phitmp$i157) {
      break;
     } else {
      label = 253;
      break;
     }
    }
    $573 = ($555|0)==(0);
    if ($573) {
     break;
    } else {
     $__lhs_sz$03$i$i160 = $555;$__lp$04$i$i159 = $581;$__rp$05$i$i158 = $582;
    }
    while(1) {
     $574 = HEAP8[$__lp$04$i$i159>>0]|0;
     $575 = HEAP8[$__rp$05$i$i158>>0]|0;
     $576 = ($574<<24>>24)==($575<<24>>24);
     if (!($576)) {
      label = 253;
      break L337;
     }
     $577 = (($__lhs_sz$03$i$i160) + -1)|0;
     $578 = (($__lp$04$i$i159) + 1|0);
     $579 = (($__rp$05$i$i158) + 1|0);
     $580 = ($577|0)==(0);
     if ($580) {
      break;
     } else {
      $__lhs_sz$03$i$i160 = $577;$__lp$04$i$i159 = $578;$__rp$05$i$i158 = $579;
     }
    }
   } else {
    label = 253;
   }
  } while(0);
  if ((label|0) == 253) {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($eon_format,$eon_format2)|0);
  }
  $584 = (($this) + 4|0);
  $585 = HEAP8[$node_format>>0]|0;
  $586 = $585 & 1;
  $587 = ($586<<24>>24)==(0);
  if ($587) {
   $590 = (($node_format) + 1|0);
   $591 = $590;
  } else {
   $588 = (($node_format) + 8|0);
   $589 = HEAP32[$588>>2]|0;
   $591 = $589;
  }
  __ZN5MeCab13scoped_string12reset_stringEPKc($584,$591);
  $592 = (($this) + 12|0);
  $593 = HEAP8[$bos_format>>0]|0;
  $594 = $593 & 1;
  $595 = ($594<<24>>24)==(0);
  if ($595) {
   $598 = (($bos_format) + 1|0);
   $599 = $598;
  } else {
   $596 = (($bos_format) + 8|0);
   $597 = HEAP32[$596>>2]|0;
   $599 = $597;
  }
  __ZN5MeCab13scoped_string12reset_stringEPKc($592,$599);
  $600 = (($this) + 20|0);
  $601 = HEAP8[$eos_format>>0]|0;
  $602 = $601 & 1;
  $603 = ($602<<24>>24)==(0);
  if ($603) {
   $606 = (($eos_format) + 1|0);
   $607 = $606;
  } else {
   $604 = (($eos_format) + 8|0);
   $605 = HEAP32[$604>>2]|0;
   $607 = $605;
  }
  __ZN5MeCab13scoped_string12reset_stringEPKc($600,$607);
  $608 = (($this) + 28|0);
  $609 = HEAP8[$unk_format>>0]|0;
  $610 = $609 & 1;
  $611 = ($610<<24>>24)==(0);
  if ($611) {
   $614 = (($unk_format) + 1|0);
   $615 = $614;
  } else {
   $612 = (($unk_format) + 8|0);
   $613 = HEAP32[$612>>2]|0;
   $615 = $613;
  }
  __ZN5MeCab13scoped_string12reset_stringEPKc($608,$615);
  $616 = (($this) + 36|0);
  $617 = HEAP8[$eon_format>>0]|0;
  $618 = $617 & 1;
  $619 = ($618<<24>>24)==(0);
  if ($619) {
   $622 = (($eon_format) + 1|0);
   $623 = $622;
  } else {
   $620 = (($eon_format) + 8|0);
   $621 = HEAP32[$620>>2]|0;
   $623 = $621;
  }
  __ZN5MeCab13scoped_string12reset_stringEPKc($616,$623);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eon_format2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($unk_format2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eos_format2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($bos_format2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($node_format2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eon_format_key);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($unk_format_key);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eos_format_key);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($bos_format_key);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($node_format_key);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eon_format);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($eos_format);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($bos_format);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($unk_format);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($node_format);
 $$323 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ostyle);
 STACKTOP = sp;return ($$323|0);
}
function __ZNK5MeCab6Writer11writeWakatiEPNS_7LatticeEPNS_12StringBufferE($this,$lattice,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $os = $os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node$0 = 0, $node$01 = 0, $node$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = (($3) + 4|0);
 $node$01 = HEAP32[$4>>2]|0;
 $5 = (($node$01) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  (__ZN5MeCab12StringBufferlsEc($os,10)|0);
  STACKTOP = sp;return 1;
 } else {
  $13 = $5;$node$02 = $node$01;
 }
 while(1) {
  $8 = (($node$02) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($node$02) + 36|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  (__ZN5MeCab12StringBuffer5writeEPKcj($os,$9,$12)|0);
  (__ZN5MeCab12StringBufferlsEc($os,32)|0);
  $node$0 = HEAP32[$13>>2]|0;
  $14 = (($node$0) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   break;
  } else {
   $13 = $14;$node$02 = $node$0;
  }
 }
 (__ZN5MeCab12StringBufferlsEc($os,10)|0);
 STACKTOP = sp;return 1;
}
function __ZNK5MeCab6Writer9writeNoneEPNS_7LatticeEPNS_12StringBufferE($this,$lattice,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $os = $os|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNK5MeCab6Writer9writeDumpEPNS_7LatticeEPNS_12StringBufferE($this,$lattice,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $os = $os|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $node$03 = 0, $path$0 = 0, $path$01 = 0, $path$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = HEAP32[$lattice>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($lattice)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return 1;
 }
 $9 = $3;
 $node$03 = $7;
 while(1) {
  $10 = (($node$03) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (__ZN5MeCab12StringBufferlsEj($os,$11)|0);
  (__ZN5MeCab12StringBufferlsEc($12,32)|0);
  $13 = (($node$03) + 47|0);
  $14 = HEAP8[$13>>0]|0;
  if ((($14<<24>>24) == 2)) {
   (__ZN5MeCab12StringBufferlsEPKc($os,402416)|0);
  } else if ((($14<<24>>24) == 3)) {
   (__ZN5MeCab12StringBufferlsEPKc($os,402424)|0);
  } else {
   $15 = (($node$03) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($node$03) + 36|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   (__ZN5MeCab12StringBuffer5writeEPKcj($os,$16,$19)|0);
  }
  $20 = (__ZN5MeCab12StringBufferlsEc($os,32)|0);
  $21 = (($node$03) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN5MeCab12StringBufferlsEPKc($20,$22)|0);
  $24 = (__ZN5MeCab12StringBufferlsEc($23,32)|0);
  $25 = (($node$03) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26;
  $28 = (($27) - ($9))|0;
  $29 = (__ZN5MeCab12StringBufferlsEi($24,$28)|0);
  $30 = (__ZN5MeCab12StringBufferlsEc($29,32)|0);
  $31 = HEAP32[$25>>2]|0;
  $32 = $31;
  $33 = (($32) - ($9))|0;
  $34 = (($node$03) + 36|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = (($33) + ($36))|0;
  $38 = (__ZN5MeCab12StringBufferlsEi($30,$37)|0);
  $39 = (__ZN5MeCab12StringBufferlsEc($38,32)|0);
  $40 = (($node$03) + 40|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = (__ZN5MeCab12StringBufferlsEt($39,$41)|0);
  $43 = (__ZN5MeCab12StringBufferlsEc($42,32)|0);
  $44 = (($node$03) + 42|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = (__ZN5MeCab12StringBufferlsEt($43,$45)|0);
  $47 = (__ZN5MeCab12StringBufferlsEc($46,32)|0);
  $48 = (($node$03) + 44|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (__ZN5MeCab12StringBufferlsEt($47,$49)|0);
  $51 = (__ZN5MeCab12StringBufferlsEc($50,32)|0);
  $52 = (($node$03) + 46|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (__ZN5MeCab12StringBufferlsEi($51,$54)|0);
  $56 = (__ZN5MeCab12StringBufferlsEc($55,32)|0);
  $57 = HEAP8[$13>>0]|0;
  $58 = $57&255;
  $59 = (__ZN5MeCab12StringBufferlsEi($56,$58)|0);
  $60 = (__ZN5MeCab12StringBufferlsEc($59,32)|0);
  $61 = (($node$03) + 48|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (__ZN5MeCab12StringBufferlsEi($60,$63)|0);
  $65 = (__ZN5MeCab12StringBufferlsEc($64,32)|0);
  $66 = (($node$03) + 52|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $67;
  $69 = (__ZN5MeCab12StringBufferlsEd($65,$68)|0);
  $70 = (__ZN5MeCab12StringBufferlsEc($69,32)|0);
  $71 = (($node$03) + 56|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $72;
  $74 = (__ZN5MeCab12StringBufferlsEd($70,$73)|0);
  $75 = (__ZN5MeCab12StringBufferlsEc($74,32)|0);
  $76 = (($node$03) + 60|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $77;
  $79 = (__ZN5MeCab12StringBufferlsEd($75,$78)|0);
  $80 = (__ZN5MeCab12StringBufferlsEc($79,32)|0);
  $81 = (($node$03) + 68|0);
  $82 = HEAP32[$81>>2]|0;
  (__ZN5MeCab12StringBufferlsEl($80,$82)|0);
  $83 = (($node$03) + 20|0);
  $path$01 = HEAP32[$83>>2]|0;
  $84 = ($path$01|0)==(0|0);
  if (!($84)) {
   $path$02 = $path$01;
   while(1) {
    $85 = (__ZN5MeCab12StringBufferlsEc($os,32)|0);
    $86 = (($path$02) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + 32|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (__ZN5MeCab12StringBufferlsEj($85,$89)|0);
    $91 = (__ZN5MeCab12StringBufferlsEc($90,58)|0);
    $92 = (($path$02) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (__ZN5MeCab12StringBufferlsEi($91,$93)|0);
    $95 = (__ZN5MeCab12StringBufferlsEc($94,58)|0);
    $96 = (($path$02) + 20|0);
    $97 = +HEAPF32[$96>>2];
    $98 = $97;
    (__ZN5MeCab12StringBufferlsEd($95,$98)|0);
    $99 = (($path$02) + 12|0);
    $path$0 = HEAP32[$99>>2]|0;
    $100 = ($path$0|0)==(0|0);
    if ($100) {
     break;
    } else {
     $path$02 = $path$0;
    }
   }
  }
  (__ZN5MeCab12StringBufferlsEc($os,10)|0);
  $101 = (($node$03) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0|0);
  if ($103) {
   break;
  } else {
   $node$03 = $102;
  }
 }
 STACKTOP = sp;return 1;
}
function __ZNK5MeCab6Writer7writeEMEPNS_7LatticeEPNS_12StringBufferE($this,$lattice,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $os = $os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $node$03 = 0, $path$0 = 0, $path$01 = 0, $path$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lattice>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($lattice)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  (__ZN5MeCab12StringBufferlsEPKc($os,402400)|0);
  STACKTOP = sp;return 1;
 } else {
  $node$03 = $3;
 }
 while(1) {
  $5 = (($node$03) + 60|0);
  $6 = +HEAPF32[$5>>2];
  $7 = !($6 >= 9.99999974737875163555E-5);
  if (!($7)) {
   (__ZN5MeCab12StringBufferlsEPKc($os,402408)|0);
   $8 = (($node$03) + 47|0);
   $9 = HEAP8[$8>>0]|0;
   if ((($9<<24>>24) == 2)) {
    (__ZN5MeCab12StringBufferlsEPKc($os,402416)|0);
   } else if ((($9<<24>>24) == 3)) {
    (__ZN5MeCab12StringBufferlsEPKc($os,402424)|0);
   } else {
    $10 = (($node$03) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($node$03) + 36|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13&65535;
    (__ZN5MeCab12StringBuffer5writeEPKcj($os,$11,$14)|0);
   }
   $15 = (__ZN5MeCab12StringBufferlsEc($os,9)|0);
   $16 = (($node$03) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (__ZN5MeCab12StringBufferlsEPKc($15,$17)|0);
   $19 = (__ZN5MeCab12StringBufferlsEc($18,9)|0);
   $20 = +HEAPF32[$5>>2];
   $21 = $20;
   $22 = (__ZN5MeCab12StringBufferlsEd($19,$21)|0);
   (__ZN5MeCab12StringBufferlsEc($22,10)|0);
  }
  $23 = (($node$03) + 20|0);
  $path$01 = HEAP32[$23>>2]|0;
  $24 = ($path$01|0)==(0|0);
  if (!($24)) {
   $25 = (($node$03) + 28|0);
   $path$02 = $path$01;
   while(1) {
    $26 = (($path$02) + 20|0);
    $27 = +HEAPF32[$26>>2];
    $28 = !($27 >= 9.99999974737875163555E-5);
    if (!($28)) {
     $29 = (__ZN5MeCab12StringBufferlsEPKc($os,402432)|0);
     $30 = (($path$02) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) + 28|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (__ZN5MeCab12StringBufferlsEPKc($29,$33)|0);
     $35 = (__ZN5MeCab12StringBufferlsEc($34,9)|0);
     $36 = HEAP32[$25>>2]|0;
     $37 = (__ZN5MeCab12StringBufferlsEPKc($35,$36)|0);
     $38 = (__ZN5MeCab12StringBufferlsEc($37,9)|0);
     $39 = +HEAPF32[$26>>2];
     $40 = $39;
     $41 = (__ZN5MeCab12StringBufferlsEd($38,$40)|0);
     (__ZN5MeCab12StringBufferlsEc($41,10)|0);
    }
    $42 = (($path$02) + 12|0);
    $path$0 = HEAP32[$42>>2]|0;
    $43 = ($path$0|0)==(0|0);
    if ($43) {
     break;
    } else {
     $path$02 = $path$0;
    }
   }
  }
  $44 = (($node$03) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if ($46) {
   break;
  } else {
   $node$03 = $45;
  }
 }
 (__ZN5MeCab12StringBufferlsEPKc($os,402400)|0);
 STACKTOP = sp;return 1;
}
function __ZNK5MeCab6Writer9writeUserEPNS_7LatticeEPNS_12StringBufferE($this,$lattice,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $os = $os|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node$0 = 0, $node$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = (__ZNK5MeCab12scoped_arrayIcE3getEv($0)|0);
 $2 = HEAP32[$lattice>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($lattice)|0);
 $6 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$1,$5,$os)|0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$lattice>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($lattice)|0);
 $11 = (($10) + 4|0);
 $12 = (($this) + 28|0);
 $13 = (($this) + 4|0);
 $node$0$in = $11;
 while(1) {
  $node$0 = HEAP32[$node$0$in>>2]|0;
  $14 = (($node$0) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   break;
  }
  $17 = (($node$0) + 47|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(1);
  if ($19) {
   $20 = (__ZNK5MeCab12scoped_arrayIcE3getEv($12)|0);
   $22 = $20;
  } else {
   $21 = (__ZNK5MeCab12scoped_arrayIcE3getEv($13)|0);
   $22 = $21;
  }
  $23 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$22,$node$0,$os)|0);
  if ($23) {
   $node$0$in = $14;
  } else {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (($this) + 20|0);
 $25 = (__ZNK5MeCab12scoped_arrayIcE3getEv($24)|0);
 $26 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$25,$node$0,$os)|0);
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab13scoped_string12reset_stringEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($str|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (__Znaj($1)|0);
 (_strcpy(($2|0),($str|0))|0);
 __ZN5MeCab12scoped_arrayIcE5resetEPc($this,$2);
 STACKTOP = sp;return;
}
function __ZNK5MeCab6Writer5writeEPNS_7LatticeEPNS_12StringBufferE($this,$lattice,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $os = $os|0;
 var $$0 = 0, $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($lattice|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$lattice>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($lattice)|0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 192|0);
 $$field = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $$index1 = (($5) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $6 = $$field2 >> 1;
 $7 = (($this) + ($6)|0);
 $8 = $$field2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$field;
  $14 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$field)|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 $15 = (FUNCTION_TABLE_iiii[$14 & 63]($7,$lattice,$os)|0);
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12StringBufferlsEd($this,$n) {
 $this = $this|0;
 $n = +$n;
 var $0 = 0, $fbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $fbuf = sp;
 __ZN5MeCab4dtoaEdPc($n,$fbuf);
 $0 = (__ZN5MeCab12StringBuffer5writeEPKc($this,$fbuf)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12StringBufferlsEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $fbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $fbuf = sp;
 __ZN5MeCab5uitoaIjEEvT_Pc($n,$fbuf);
 $0 = (__ZN5MeCab12StringBuffer5writeEPKc($this,$fbuf)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12StringBufferlsEi($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $fbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $fbuf = sp;
 __ZN5MeCab4itoaIiEEvT_Pc($n,$fbuf);
 $0 = (__ZN5MeCab12StringBuffer5writeEPKc($this,$fbuf)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12StringBufferlsEt($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $fbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $fbuf = sp;
 __ZN5MeCab5uitoaItEEvT_Pc($n,$fbuf);
 $0 = (__ZN5MeCab12StringBuffer5writeEPKc($this,$fbuf)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12StringBufferlsEl($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $fbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $fbuf = sp;
 __ZN5MeCab4itoaIlEEvT_Pc($n,$fbuf);
 $0 = (__ZN5MeCab12StringBuffer5writeEPKc($this,$fbuf)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE($this,$lattice,$p,$node,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $p = $p|0;
 $node = $node|0;
 $os = $os|0;
 var $$0 = 0, $$0434 = 0, $$15 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$sum = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $error = 0, $n$0 = 0, $n$1 = 0, $path$019 = 0, $psize$035 = 0, $psize$1 = 0, $psize$2 = 0, $ptr = 0, $sep$0 = 0, $sep1$0$off0 = 0, $sep1$1$off0 = 0, $separator$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $buf = sp + 24|0;
 $ptr = sp + 12|0;
 $error = sp;
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC1Ev($buf);
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EEC1Ev($ptr);
 $0 = HEAP8[$p>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 1;
  __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
  __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($node) + 24|0);
 $3 = (($node) + 36|0);
 $4 = (($node) + 24|0);
 $5 = (($node) + 38|0);
 $6 = (($node) + 36|0);
 $7 = (($node) + 44|0);
 $8 = (($node) + 64|0);
 $9 = (($node) + 28|0);
 $10 = (($node) + 46|0);
 $11 = (($node) + 47|0);
 $12 = (($node) + 60|0);
 $13 = (($node) + 32|0);
 $14 = (($node) + 24|0);
 $15 = (($node) + 38|0);
 $16 = (($node) + 36|0);
 $17 = (($node) + 24|0);
 $18 = (($node) + 24|0);
 $19 = (($node) + 36|0);
 $20 = (($node) + 68|0);
 $21 = (($node) + 64|0);
 $22 = (($node) + 64|0);
 $23 = (($node) + 68|0);
 $24 = (($node) + 68|0);
 $25 = (($node) + 48|0);
 $26 = (($node) + 60|0);
 $27 = (($node) + 52|0);
 $28 = (($node) + 56|0);
 $29 = (($node) + 36|0);
 $30 = (($node) + 38|0);
 $31 = (($node) + 42|0);
 $32 = (($node) + 40|0);
 $33 = (($node) + 20|0);
 $34 = (($node) + 28|0);
 $$0434 = $p;$36 = $0;$psize$035 = 0;
 L4: while(1) {
  $35 = $36 << 24 >> 24;
  L6: do {
   if ((($35|0) == 92)) {
    $37 = (($$0434) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = (__ZN5MeCab14getEscapedCharEc($38)|0);
    (__ZN5MeCab12StringBufferlsEc($os,$39)|0);
    $$4 = $37;$psize$2 = $psize$035;
   } else if ((($35|0) == 37)) {
    $40 = (($$0434) + 1|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 << 24 >> 24;
    do {
     switch ($42|0) {
     case 112:  {
      $86 = (($$0434) + 2|0);
      $87 = HEAP8[$86>>0]|0;
      $88 = $87 << 24 >> 24;
      do {
       switch ($88|0) {
       case 115:  {
        $100 = HEAP32[$17>>2]|0;
        $101 = HEAP32[$lattice>>2]|0;
        $102 = (($101) + 32|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = (FUNCTION_TABLE_ii[$103 & 127]($lattice)|0);
        $105 = $100;
        $106 = $104;
        $107 = (($105) - ($106))|0;
        (__ZN5MeCab12StringBufferlsEi($os,$107)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 101:  {
        $108 = HEAP32[$18>>2]|0;
        $109 = HEAP32[$lattice>>2]|0;
        $110 = (($109) + 32|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = (FUNCTION_TABLE_ii[$111 & 127]($lattice)|0);
        $113 = $108;
        $114 = $112;
        $115 = (($113) - ($114))|0;
        $116 = HEAP16[$19>>1]|0;
        $117 = $116&65535;
        $118 = (($115) + ($117))|0;
        (__ZN5MeCab12StringBufferlsEi($os,$118)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 67:  {
        $119 = HEAP32[$20>>2]|0;
        $120 = HEAP32[$node>>2]|0;
        $121 = (($120) + 68|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (($119) - ($122))|0;
        $124 = HEAP16[$21>>1]|0;
        $125 = $124 << 16 >> 16;
        $126 = (($123) - ($125))|0;
        (__ZN5MeCab12StringBufferlsEl($os,$126)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 119:  {
        $127 = HEAP16[$22>>1]|0;
        (__ZN5MeCab12StringBufferlsEs($os,$127)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 99:  {
        $128 = HEAP32[$23>>2]|0;
        (__ZN5MeCab12StringBufferlsEl($os,$128)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 110:  {
        $129 = HEAP32[$24>>2]|0;
        $130 = HEAP32[$node>>2]|0;
        $131 = (($130) + 68|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = (($129) - ($132))|0;
        (__ZN5MeCab12StringBufferlsEl($os,$133)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 105:  {
        $92 = HEAP32[$13>>2]|0;
        (__ZN5MeCab12StringBufferlsEj($os,$92)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 83:  {
        $93 = HEAP32[$14>>2]|0;
        $94 = HEAP16[$15>>1]|0;
        $95 = $94&65535;
        $96 = HEAP16[$16>>1]|0;
        $97 = $96&65535;
        $$sum = (($97) - ($95))|0;
        $98 = (($93) + ($$sum)|0);
        $99 = (($95) - ($97))|0;
        (__ZN5MeCab12StringBuffer5writeEPKcj($os,$98,$99)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 112:  {
        $153 = (($$0434) + 3|0);
        $154 = HEAP8[$153>>0]|0;
        $155 = (($$0434) + 4|0);
        $156 = HEAP8[$155>>0]|0;
        $157 = ($156<<24>>24)==(92);
        if ($157) {
         $158 = (($$0434) + 5|0);
         $159 = HEAP8[$158>>0]|0;
         $160 = (__ZN5MeCab14getEscapedCharEc($159)|0);
         $$15 = $158;$sep$0 = $160;
        } else {
         $$15 = $155;$sep$0 = $156;
        }
        $161 = HEAP32[$33>>2]|0;
        $162 = ($161|0)==(0|0);
        if ($162) {
         label = 46;
         break L4;
        }
        $163 = $154 << 24 >> 24;
        $path$019 = $161;
        while(1) {
         $167 = HEAP32[$33>>2]|0;
         $168 = ($path$019|0)==($167|0);
         if (!($168)) {
          (__ZN5MeCab12StringBufferlsEc($os,$sep$0)|0);
         }
         if ((($163|0) == 105)) {
          $169 = (($path$019) + 8|0);
          $170 = HEAP32[$169>>2]|0;
          $171 = (($170) + 32|0);
          $172 = HEAP32[$171>>2]|0;
          (__ZN5MeCab12StringBufferlsEj($os,$172)|0);
         } else if ((($163|0) == 99)) {
          $173 = (($path$019) + 16|0);
          $174 = HEAP32[$173>>2]|0;
          (__ZN5MeCab12StringBufferlsEi($os,$174)|0);
         } else if ((($163|0) == 80)) {
          $175 = (($path$019) + 20|0);
          $176 = +HEAPF32[$175>>2];
          $177 = $176;
          (__ZN5MeCab12StringBufferlsEd($os,$177)|0);
         } else {
          label = 53;
          break L4;
         }
         $181 = (($path$019) + 12|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = ($182|0)==(0|0);
         if ($183) {
          $$4 = $$15;$psize$2 = $psize$035;
          break;
         } else {
          $path$019 = $182;
         }
        }
        break;
       }
       case 98:  {
        $134 = HEAP8[$25>>0]|0;
        $135 = ($134<<24>>24)!=(0);
        $136 = $135 ? 42 : 32;
        (__ZN5MeCab12StringBufferlsEc($os,$136)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 80:  {
        $137 = +HEAPF32[$26>>2];
        $138 = $137;
        (__ZN5MeCab12StringBufferlsEd($os,$138)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 65:  {
        $139 = +HEAPF32[$27>>2];
        $140 = $139;
        (__ZN5MeCab12StringBufferlsEd($os,$140)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 66:  {
        $141 = +HEAPF32[$28>>2];
        $142 = $141;
        (__ZN5MeCab12StringBufferlsEd($os,$142)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 108:  {
        $143 = HEAP16[$29>>1]|0;
        (__ZN5MeCab12StringBufferlsEt($os,$143)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 76:  {
        $144 = HEAP16[$30>>1]|0;
        (__ZN5MeCab12StringBufferlsEt($os,$144)|0);
        $$4 = $86;$psize$2 = $psize$035;
        break L6;
        break;
       }
       case 104:  {
        $145 = (($$0434) + 3|0);
        $146 = HEAP8[$145>>0]|0;
        $147 = $146 << 24 >> 24;
        if ((($147|0) == 114)) {
         $152 = HEAP16[$32>>1]|0;
         (__ZN5MeCab12StringBufferlsEt($os,$152)|0);
         $$4 = $145;$psize$2 = $psize$035;
         break L6;
        } else if ((($147|0) == 108)) {
         $151 = HEAP16[$31>>1]|0;
         (__ZN5MeCab12StringBufferlsEt($os,$151)|0);
         $$4 = $145;$psize$2 = $psize$035;
         break L6;
        } else {
         label = 39;
         break L4;
        }
        break;
       }
       default: {
        label = 23;
        break L4;
       }
       }
      } while(0);
      break;
     }
     case 83:  {
      $55 = HEAP32[$lattice>>2]|0;
      $56 = (($55) + 32|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (FUNCTION_TABLE_ii[$57 & 127]($lattice)|0);
      $59 = HEAP32[$lattice>>2]|0;
      $60 = (($59) + 44|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (FUNCTION_TABLE_ii[$61 & 127]($lattice)|0);
      (__ZN5MeCab12StringBuffer5writeEPKcj($os,$58,$62)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 77:  {
      $70 = HEAP32[$4>>2]|0;
      $71 = HEAP16[$5>>1]|0;
      $72 = $71&65535;
      $73 = HEAP16[$6>>1]|0;
      $74 = $73&65535;
      $$sum8 = (($74) - ($72))|0;
      $75 = (($70) + ($$sum8)|0);
      (__ZN5MeCab12StringBuffer5writeEPKcj($os,$75,$72)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 104:  {
      $76 = HEAP16[$7>>1]|0;
      (__ZN5MeCab12StringBufferlsEt($os,$76)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 37:  {
      (__ZN5MeCab12StringBufferlsEc($os,37)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 76:  {
      $63 = HEAP32[$lattice>>2]|0;
      $64 = (($63) + 44|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 127]($lattice)|0);
      (__ZN5MeCab12StringBufferlsEj($os,$66)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 72:  {
      $79 = HEAP32[$9>>2]|0;
      (__ZN5MeCab12StringBufferlsEPKc($os,$79)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 116:  {
      $80 = HEAP8[$10>>0]|0;
      $81 = $80&255;
      (__ZN5MeCab12StringBufferlsEj($os,$81)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 99:  {
      $77 = HEAP16[$8>>1]|0;
      $78 = $77 << 16 >> 16;
      (__ZN5MeCab12StringBufferlsEi($os,$78)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 109:  {
      $67 = HEAP32[$2>>2]|0;
      $68 = HEAP16[$3>>1]|0;
      $69 = $68&65535;
      (__ZN5MeCab12StringBuffer5writeEPKcj($os,$67,$69)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 102: case 70:  {
      $184 = HEAP32[$34>>2]|0;
      $185 = HEAP8[$184>>0]|0;
      $186 = ($185<<24>>24)==(0);
      if ($186) {
       label = 56;
       break L4;
      }
      $190 = ($psize$035|0)==(0);
      if ($190) {
       $191 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf)|0);
       $192 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE4sizeEv($buf)|0);
       (_strncpy(($191|0),($184|0),($192|0))|0);
       $193 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf)|0);
       $194 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EE3getEv($ptr)|0);
       $195 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EE4sizeEv($ptr)|0);
       $196 = (__ZN5MeCab11tokenizeCSVIPPcEEjS1_T_j($193,$194,$195)|0);
       $psize$1 = $196;
      } else {
       $psize$1 = $psize$035;
      }
      $197 = HEAP8[$40>>0]|0;
      $198 = ($197<<24>>24)==(70);
      if ($198) {
       $199 = (($$0434) + 2|0);
       $200 = HEAP8[$199>>0]|0;
       $201 = ($200<<24>>24)==(92);
       if ($201) {
        $202 = (($$0434) + 3|0);
        $203 = HEAP8[$202>>0]|0;
        $204 = (__ZN5MeCab14getEscapedCharEc($203)|0);
        $$2 = $202;$separator$0 = $204;
       } else {
        $$2 = $199;$separator$0 = $200;
       }
      } else {
       $$2 = $40;$separator$0 = 9;
      }
      $205 = (($$2) + 1|0);
      $206 = HEAP8[$205>>0]|0;
      $207 = ($206<<24>>24)==(91);
      if (!($207)) {
       label = 63;
       break L4;
      }
      $211 = (($$2) + 2|0);
      $$3 = $211;$n$0 = 0;$sep1$0$off0 = 0;
      while(1) {
       $212 = HEAP8[$$3>>0]|0;
       $213 = $212 << 24 >> 24;
       switch ($213|0) {
       case 93: case 44:  {
        $219 = ($n$0>>>0)<($psize$1>>>0);
        if (!($219)) {
         label = 68;
         break L4;
        }
        $223 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EEixEj($ptr,$n$0)|0);
        $224 = HEAP32[$223>>2]|0;
        $225 = HEAP8[$224>>0]|0;
        $226 = ($225<<24>>24)!=(42);
        if ($226) {
         if ($sep1$0$off0) {
          (__ZN5MeCab12StringBufferlsEc($os,$separator$0)|0);
         }
         $227 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EEixEj($ptr,$n$0)|0);
         $228 = HEAP32[$227>>2]|0;
         (__ZN5MeCab12StringBufferlsEPKc($os,$228)|0);
        }
        $229 = HEAP8[$$3>>0]|0;
        $230 = ($229<<24>>24)==(93);
        if ($230) {
         $$4 = $$3;$psize$2 = $psize$1;
         break L6;
        } else {
         $n$1 = 0;$sep1$1$off0 = $226;
        }
        break;
       }
       case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
        $214 = ($n$0*10)|0;
        $215 = HEAP8[$$3>>0]|0;
        $216 = $215 << 24 >> 24;
        $217 = (($214) + -48)|0;
        $218 = (($217) + ($216))|0;
        $n$1 = $218;$sep1$1$off0 = $sep1$0$off0;
        break;
       }
       default: {
        label = 74;
        break L4;
       }
       }
       $234 = (($$3) + 1|0);
       $$3 = $234;$n$0 = $n$1;$sep1$0$off0 = $sep1$1$off0;
      }
      break;
     }
     case 115:  {
      $82 = HEAP8[$11>>0]|0;
      $83 = $82&255;
      (__ZN5MeCab12StringBufferlsEj($os,$83)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     case 80:  {
      $84 = +HEAPF32[$12>>2];
      $85 = $84;
      (__ZN5MeCab12StringBufferlsEd($os,$85)|0);
      $$4 = $40;$psize$2 = $psize$035;
      break L6;
      break;
     }
     default: {
      label = 7;
      break L4;
     }
     }
    } while(0);
   } else {
    (__ZN5MeCab12StringBufferlsEc($os,$36)|0);
    $$4 = $$0434;$psize$2 = $psize$035;
   }
  } while(0);
  $235 = (($$4) + 1|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = ($236<<24>>24)==(0);
  if ($237) {
   $$0 = 1;
   label = 77;
   break;
  } else {
   $$0434 = $235;$36 = $236;$psize$035 = $psize$2;
  }
 }
 switch (label|0) {
  case 7: {
   $43 = (402440 + ($42)|0);
   $44 = (_strlen(($43|0))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($error,$43,$44);
   $45 = HEAP32[$lattice>>2]|0;
   $46 = (($45) + 148|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP8[$error>>0]|0;
   $49 = $48 & 1;
   $50 = ($49<<24>>24)==(0);
   if ($50) {
    $53 = (($error) + 1|0);
    $54 = $53;
   } else {
    $51 = (($error) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $54 = $52;
   }
   FUNCTION_TABLE_vii[$47 & 63]($lattice,$54);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 23: {
   $89 = HEAP32[$lattice>>2]|0;
   $90 = (($89) + 148|0);
   $91 = HEAP32[$90>>2]|0;
   FUNCTION_TABLE_vii[$91 & 63]($lattice,402464);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 39: {
   $148 = HEAP32[$lattice>>2]|0;
   $149 = (($148) + 148|0);
   $150 = HEAP32[$149>>2]|0;
   FUNCTION_TABLE_vii[$150 & 63]($lattice,402504);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 46: {
   $164 = HEAP32[$lattice>>2]|0;
   $165 = (($164) + 148|0);
   $166 = HEAP32[$165>>2]|0;
   FUNCTION_TABLE_vii[$166 & 63]($lattice,402536);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 53: {
   $178 = HEAP32[$lattice>>2]|0;
   $179 = (($178) + 148|0);
   $180 = HEAP32[$179>>2]|0;
   FUNCTION_TABLE_vii[$180 & 63]($lattice,402576);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 56: {
   $187 = HEAP32[$lattice>>2]|0;
   $188 = (($187) + 148|0);
   $189 = HEAP32[$188>>2]|0;
   FUNCTION_TABLE_vii[$189 & 63]($lattice,402608);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 63: {
   $208 = HEAP32[$lattice>>2]|0;
   $209 = (($208) + 148|0);
   $210 = HEAP32[$209>>2]|0;
   FUNCTION_TABLE_vii[$210 & 63]($lattice,402648);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 68: {
   $220 = HEAP32[$lattice>>2]|0;
   $221 = (($220) + 148|0);
   $222 = HEAP32[$221>>2]|0;
   FUNCTION_TABLE_vii[$222 & 63]($lattice,402664);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 74: {
   $231 = HEAP32[$lattice>>2]|0;
   $232 = (($231) + 148|0);
   $233 = HEAP32[$232>>2]|0;
   FUNCTION_TABLE_vii[$233 & 63]($lattice,402696);
   $$0 = 0;
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 77: {
   __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($ptr);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   STACKTOP = sp;return ($$0|0);
   break;
  }
 }
 return 0|0;
}
function __ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPK12mecab_node_tPNS_12StringBufferE($this,$lattice,$node,$os) {
 $this = $this|0;
 $lattice = $lattice|0;
 $node = $node|0;
 $os = $os|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($node) + 47|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 switch ($2|0) {
 case 2:  {
  $3 = (($this) + 12|0);
  $4 = (__ZNK5MeCab12scoped_arrayIcE3getEv($3)|0);
  $5 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$4,$node,$os)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $6 = (($this) + 20|0);
  $7 = (__ZNK5MeCab12scoped_arrayIcE3getEv($6)|0);
  $8 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$7,$node,$os)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $9 = (($this) + 28|0);
  $10 = (__ZNK5MeCab12scoped_arrayIcE3getEv($9)|0);
  $11 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$10,$node,$os)|0);
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $15 = (($this) + 36|0);
  $16 = (__ZNK5MeCab12scoped_arrayIcE3getEv($15)|0);
  $17 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$16,$node,$os)|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 0:  {
  $12 = (($this) + 4|0);
  $13 = (__ZNK5MeCab12scoped_arrayIcE3getEv($12)|0);
  $14 = (__ZNK5MeCab6Writer9writeNodeEPNS_7LatticeEPKcPK12mecab_node_tPNS_12StringBufferE(0,$lattice,$13,$node,$os)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return 0|0;
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi64EEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab14getEscapedCharEc($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p << 24 >> 24;
 switch ($0|0) {
 case 92:  {
  $$0 = 92;
  break;
 }
 case 97:  {
  $$0 = 7;
  break;
 }
 case 98:  {
  $$0 = 8;
  break;
 }
 case 118:  {
  $$0 = 11;
  break;
 }
 case 114:  {
  $$0 = 13;
  break;
 }
 case 110:  {
  $$0 = 10;
  break;
 }
 case 115:  {
  $$0 = 32;
  break;
 }
 case 116:  {
  $$0 = 9;
  break;
 }
 case 102:  {
  $$0 = 12;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12StringBufferlsEs($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $fbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $fbuf = sp;
 __ZN5MeCab4itoaIsEEvT_Pc($n,$fbuf);
 $0 = (__ZN5MeCab12StringBuffer5writeEPKc($this,$fbuf)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNK5MeCab18scoped_fixed_arrayIPcLi64EE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab18scoped_fixed_arrayIPcLi64EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab18scoped_fixed_arrayIPcLi64EEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi64EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((402736 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdaPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi64EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab18scoped_fixed_arrayIPcLi64EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((402736 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (__Znaj(256)|0);
 HEAP32[$0>>2] = $1;
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 64;
 STACKTOP = sp;return;
}
function __ZN5MeCab4itoaIsEEvT_Pc($val,$s) {
 $val = $val|0;
 $s = $s|0;
 var $$0 = 0, $$01 = 0, $$012$i$i = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$0$lcssa = 0, $t$02 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val<<16>>16)<(0);
 if ($0) {
  $1 = $val&65535;
  $2 = (($s) + 1|0);
  HEAP8[$s>>0] = 45;
  $3 = (0 - ($1))|0;
  $4 = $3&65535;
  $$0 = $4;$$01 = $2;
 } else {
  $$0 = $val;$$01 = $s;
 }
 $5 = ($$0<<16>>16)==(0);
 if ($5) {
  $t$0$lcssa = $$01;
 } else {
  $$13 = $$0;$t$02 = $$01;
  while(1) {
   $6 = $$13 << 16 >> 16;
   $7 = (($6|0) % 10)&-1;
   $8 = (($7) + 48)|0;
   $9 = $8&255;
   $10 = (($t$02) + 1|0);
   HEAP8[$t$02>>0] = $9;
   $11 = (($6|0) / 10)&-1;
   $12 = $11&65535;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    $t$0$lcssa = $10;
    break;
   } else {
    $$13 = $12;$t$02 = $10;
   }
  }
 }
 $14 = ($$01|0)==($t$0$lcssa|0);
 if ($14) {
  $15 = (($t$0$lcssa) + 1|0);
  HEAP8[$t$0$lcssa>>0] = 48;
  $t$1 = $15;
 } else {
  $t$1 = $t$0$lcssa;
 }
 HEAP8[$t$1>>0] = 0;
 $16 = ($$01|0)==($t$1|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = (($t$1) + -1|0);
 $18 = ($17>>>0)>($$01>>>0);
 if ($18) {
  $$012$i$i = $$01;$21 = $17;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = HEAP8[$$012$i$i>>0]|0;
  $20 = HEAP8[$21>>0]|0;
  HEAP8[$$012$i$i>>0] = $20;
  HEAP8[$21>>0] = $19;
  $22 = (($$012$i$i) + 1|0);
  $23 = (($21) + -1|0);
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $$012$i$i = $22;$21 = $23;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab4itoaIlEEvT_Pc($val,$s) {
 $val = $val|0;
 $s = $s|0;
 var $$0 = 0, $$01 = 0, $$012$i$i = 0, $$13 = 0, $$13$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$0$lcssa = 0, $t$02 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val|0)<(0);
 if ($0) {
  $1 = (($s) + 1|0);
  HEAP8[$s>>0] = 45;
  $2 = (0 - ($val))|0;
  $$0 = $2;$$01 = $1;
 } else {
  $$0 = $val;$$01 = $s;
 }
 $3 = ($$0|0)==(0);
 if ($3) {
  $t$0$lcssa = $$01;
 } else {
  $$13 = $$0;$t$02 = $$01;
  while(1) {
   $4 = (($$13|0) % 10)&-1;
   $5 = (($4) + 48)|0;
   $6 = $5&255;
   $7 = (($t$02) + 1|0);
   HEAP8[$t$02>>0] = $6;
   $8 = (($$13|0) / 10)&-1;
   $$13$off = (($$13) + 9)|0;
   $9 = ($$13$off>>>0)<(19);
   if ($9) {
    $t$0$lcssa = $7;
    break;
   } else {
    $$13 = $8;$t$02 = $7;
   }
  }
 }
 $10 = ($$01|0)==($t$0$lcssa|0);
 if ($10) {
  $11 = (($t$0$lcssa) + 1|0);
  HEAP8[$t$0$lcssa>>0] = 48;
  $t$1 = $11;
 } else {
  $t$1 = $t$0$lcssa;
 }
 HEAP8[$t$1>>0] = 0;
 $12 = ($$01|0)==($t$1|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (($t$1) + -1|0);
 $14 = ($13>>>0)>($$01>>>0);
 if ($14) {
  $$012$i$i = $$01;$17 = $13;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = HEAP8[$$012$i$i>>0]|0;
  $16 = HEAP8[$17>>0]|0;
  HEAP8[$$012$i$i>>0] = $16;
  HEAP8[$17>>0] = $15;
  $18 = (($$012$i$i) + 1|0);
  $19 = (($17) + -1|0);
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $$012$i$i = $18;$17 = $19;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab5uitoaItEEvT_Pc($val,$s) {
 $val = $val|0;
 $s = $s|0;
 var $$012$i$i = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $div = 0, $t$0$lcssa3 = 0, $t$01 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val<<16>>16)==(0);
 if ($0) {
  $t$0$lcssa3 = $s;
  label = 4;
 } else {
  $$02 = $val;$t$01 = $s;
  while(1) {
   $1 = (($$02&65535) % 10)&-1;
   $2 = $1&65535;
   $3 = $2 | 48;
   $4 = $3&255;
   $5 = (($t$01) + 1|0);
   HEAP8[$t$01>>0] = $4;
   $div = (($$02&65535) / 10)&-1;
   $6 = ($$02&65535)<(10);
   if ($6) {
    break;
   } else {
    $$02 = $div;$t$01 = $5;
   }
  }
  $7 = ($5|0)==($s|0);
  if ($7) {
   $t$0$lcssa3 = $5;
   label = 4;
  } else {
   $t$1 = $5;
  }
 }
 if ((label|0) == 4) {
  $8 = (($t$0$lcssa3) + 1|0);
  HEAP8[$t$0$lcssa3>>0] = 48;
  $t$1 = $8;
 }
 HEAP8[$t$1>>0] = 0;
 $9 = ($t$1|0)==($s|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (($t$1) + -1|0);
 $11 = ($10>>>0)>($s>>>0);
 if ($11) {
  $$012$i$i = $s;$14 = $10;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $12 = HEAP8[$$012$i$i>>0]|0;
  $13 = HEAP8[$14>>0]|0;
  HEAP8[$$012$i$i>>0] = $13;
  HEAP8[$14>>0] = $12;
  $15 = (($$012$i$i) + 1|0);
  $16 = (($14) + -1|0);
  $17 = ($15>>>0)<($16>>>0);
  if ($17) {
   $$012$i$i = $15;$14 = $16;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab4itoaIiEEvT_Pc($val,$s) {
 $val = $val|0;
 $s = $s|0;
 var $$0 = 0, $$01 = 0, $$012$i$i = 0, $$13 = 0, $$13$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$0$lcssa = 0, $t$02 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val|0)<(0);
 if ($0) {
  $1 = (($s) + 1|0);
  HEAP8[$s>>0] = 45;
  $2 = (0 - ($val))|0;
  $$0 = $2;$$01 = $1;
 } else {
  $$0 = $val;$$01 = $s;
 }
 $3 = ($$0|0)==(0);
 if ($3) {
  $t$0$lcssa = $$01;
 } else {
  $$13 = $$0;$t$02 = $$01;
  while(1) {
   $4 = (($$13|0) % 10)&-1;
   $5 = (($4) + 48)|0;
   $6 = $5&255;
   $7 = (($t$02) + 1|0);
   HEAP8[$t$02>>0] = $6;
   $8 = (($$13|0) / 10)&-1;
   $$13$off = (($$13) + 9)|0;
   $9 = ($$13$off>>>0)<(19);
   if ($9) {
    $t$0$lcssa = $7;
    break;
   } else {
    $$13 = $8;$t$02 = $7;
   }
  }
 }
 $10 = ($$01|0)==($t$0$lcssa|0);
 if ($10) {
  $11 = (($t$0$lcssa) + 1|0);
  HEAP8[$t$0$lcssa>>0] = 48;
  $t$1 = $11;
 } else {
  $t$1 = $t$0$lcssa;
 }
 HEAP8[$t$1>>0] = 0;
 $12 = ($$01|0)==($t$1|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (($t$1) + -1|0);
 $14 = ($13>>>0)>($$01>>>0);
 if ($14) {
  $$012$i$i = $$01;$17 = $13;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = HEAP8[$$012$i$i>>0]|0;
  $16 = HEAP8[$17>>0]|0;
  HEAP8[$$012$i$i>>0] = $16;
  HEAP8[$17>>0] = $15;
  $18 = (($$012$i$i) + 1|0);
  $19 = (($17) + -1|0);
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $$012$i$i = $18;$17 = $19;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab5uitoaIjEEvT_Pc($val,$s) {
 $val = $val|0;
 $s = $s|0;
 var $$012$i$i = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $t$0$lcssa3 = 0, $t$01 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val|0)==(0);
 if ($0) {
  $t$0$lcssa3 = $s;
  label = 4;
 } else {
  $$02 = $val;$t$01 = $s;
  while(1) {
   $1 = (($$02>>>0) % 10)&-1;
   $2 = $1 | 48;
   $3 = $2&255;
   $4 = (($t$01) + 1|0);
   HEAP8[$t$01>>0] = $3;
   $5 = (($$02>>>0) / 10)&-1;
   $6 = ($$02>>>0)<(10);
   if ($6) {
    break;
   } else {
    $$02 = $5;$t$01 = $4;
   }
  }
  $7 = ($4|0)==($s|0);
  if ($7) {
   $t$0$lcssa3 = $4;
   label = 4;
  } else {
   $t$1 = $4;
  }
 }
 if ((label|0) == 4) {
  $8 = (($t$0$lcssa3) + 1|0);
  HEAP8[$t$0$lcssa3>>0] = 48;
  $t$1 = $8;
 }
 HEAP8[$t$1>>0] = 0;
 $9 = ($t$1|0)==($s|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (($t$1) + -1|0);
 $11 = ($10>>>0)>($s>>>0);
 if ($11) {
  $$012$i$i = $s;$14 = $10;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $12 = HEAP8[$$012$i$i>>0]|0;
  $13 = HEAP8[$14>>0]|0;
  HEAP8[$$012$i$i>>0] = $13;
  HEAP8[$14>>0] = $12;
  $15 = (($$012$i$i) + 1|0);
  $16 = (($14) + -1|0);
  $17 = ($15>>>0)<($16>>>0);
  if ($17) {
   $$012$i$i = $15;$14 = $16;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab4dtoaEdPc($val,$s) {
 $val = +$val;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $p$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAPF64[tempDoublePtr>>3]=$val;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($s,402800,$vararg_buffer)|0);
 $p$0 = $s;
 while(1) {
  $0 = HEAP8[$p$0>>0]|0;
  $1 = ($0<<24>>24)==(32);
  $2 = (($p$0) + 1|0);
  if ($1) {
   break;
  } else {
   $p$0 = $2;
  }
 }
 HEAP8[$p$0>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab12scoped_arrayIcE5resetEPc($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdaPv($1);
 }
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZN5MeCab13scoped_stringD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayIcED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab13scoped_stringC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12scoped_arrayIcEC2EPc($this,0);
 HEAP32[$this>>2] = ((402808 + 8|0));
 __ZN5MeCab13scoped_string12reset_stringEPKc($this,402208);
 STACKTOP = sp;return;
}
function __ZN5MeCab13scoped_stringD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab13scoped_stringD1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12StringBuffer7reserveEj($this,$length) {
 $this = $this|0;
 $length = $length|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($length))|0;
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>=($7>>>0);
 if ($2) {
  $9 = (($this) + 17|0);
  $10 = $8&1;
  HEAP8[$9>>0] = $10;
  $11 = $8 ^ 1;
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 if (!($8)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($7|0)==(0);
 if ($12) {
  HEAP32[$6>>2] = 8192;
  $13 = (__Znaj(8192)|0);
  $14 = (($this) + 12|0);
  HEAP32[$14>>2] = $13;
 }
 $15 = HEAP32[$3>>2]|0;
 $16 = (($15) + ($length))|0;
 $$promoted = HEAP32[$6>>2]|0;
 $18 = $$promoted;
 while(1) {
  $17 = $18 << 1;
  $19 = ($16>>>0)<($17>>>0);
  if ($19) {
   break;
  } else {
   $18 = $17;
  }
 }
 HEAP32[$6>>2] = $17;
 $20 = (__Znaj($17)|0);
 $21 = (($this) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$3>>2]|0;
 _memcpy(($20|0),($22|0),($23|0))|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  __ZdaPv($24);
 }
 HEAP32[$21>>2] = $20;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab12StringBufferD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab12StringBufferD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab12StringBufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((402864 + 8|0));
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZdaPv($4);
 }
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab12StringBuffer5writeEc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12StringBuffer7reserveEj($this,1)|0);
 if (!($0)) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 HEAP8[$5>>0] = $str;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$1>>2] = $7;
 STACKTOP = sp;return ($this|0);
}
function __ZN5MeCab12StringBuffer5writeEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($str|0))|0);
 $1 = (__ZN5MeCab12StringBuffer5writeEPKcj($this,$str,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12StringBuffer5writeEPKcj($this,$str,$length) {
 $this = $this|0;
 $str = $str|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab12StringBuffer7reserveEj($this,$length)|0);
 if (!($0)) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 _memcpy(($5|0),($str|0),($length|0))|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (($6) + ($length))|0;
 HEAP32[$3>>2] = $7;
 STACKTOP = sp;return ($this|0);
}
function __ZNK5MeCab5Param11dump_configEPNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE($this,$os) {
 $this = $this|0;
 $os = $os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 8|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 while(1) {
  $5 = (($6) + 16|0);
  $7 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($os,$5)|0);
  $8 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($7,402912)|0);
  $9 = (($6) + 28|0);
  $10 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($8,$9)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + -12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($10) + ($13)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$14);
  $15 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 31]($15,10)|0);
  __ZNSt3__16localeD2Ev($0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($10,$19)|0);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($10)|0);
  $20 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($6)|0);
  $21 = ($20|0)==($3|0);
  if ($21) {
   break;
  } else {
   $6 = $20;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5MeCab5Param4loadEPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$28 = 0, $$29 = 0, $$30 = 0, $$31 = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ifs = 0, $key = 0, $line = 0;
 var $s1$0 = 0, $s1$0$in = 0, $s2$0 = 0, $s2$0$in = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $0 = sp + 232|0;
 $ifs = sp + 44|0;
 $1 = sp + 40|0;
 $line = sp + 28|0;
 $2 = sp + 24|0;
 $value = sp + 12|0;
 $key = sp;
 $3 = (($ifs) + 108|0);
 $4 = (($ifs) + 8|0);
 HEAP32[$ifs>>2] = ((3336 + 12|0));
 $5 = (($ifs) + 108|0);
 HEAP32[$5>>2] = ((3336 + 32|0));
 $6 = (($ifs) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$ifs>>2]|0;
 $8 = (($7) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($ifs) + ($9)|0);
 __ZNSt3__18ios_base4initEPv($10,$4);
 $$sum$i$i = (($9) + 72)|0;
 $11 = (($ifs) + ($$sum$i$i)|0);
 HEAP32[$11>>2] = 0;
 $$sum1$i$i = (($9) + 76)|0;
 $12 = (($ifs) + ($$sum1$i$i)|0);
 HEAP32[$12>>2] = -1;
 HEAP32[$ifs>>2] = ((3216 + 12|0));
 HEAP32[$3>>2] = ((3216 + 32|0));
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($4);
 $13 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($4,$filename,8)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = HEAP32[$ifs>>2]|0;
  $16 = (($15) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($ifs) + ($17)|0);
  $$sum$i = (($17) + 16)|0;
  $19 = (($ifs) + ($$sum$i)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 | 4;
  __ZNSt3__18ios_base5clearEj($18,$21);
 }
 $22 = HEAP32[$ifs>>2]|0;
 $23 = (($22) + -12|0);
 $24 = HEAP32[$23>>2]|0;
 $$sum = (($24) + 16)|0;
 $25 = (($ifs) + ($$sum)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 5;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $29 = (($this) + 64|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($1,$29);
  $30 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($29,402920)|0);
  $31 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($30,402936)|0);
  $32 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($31,69)|0);
  $33 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($32,402944)|0);
  $34 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($33,402952)|0);
  $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,402960)|0);
  $36 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($35,402968)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,$filename)|0);
  $$1 = 0;
  __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($ifs);
  STACKTOP = sp;return ($$1|0);
 }
 ;HEAP32[$line+0>>2]=0|0;HEAP32[$line+4>>2]=0|0;HEAP32[$line+8>>2]=0|0;
 $37 = (($line) + 1|0);
 $38 = (($line) + 8|0);
 $39 = (($line) + 4|0);
 $40 = (($line) + 1|0);
 $41 = (($line) + 8|0);
 $42 = (($key) + 1|0);
 $43 = (($key) + 8|0);
 $44 = (($line) + 4|0);
 $45 = (($line) + 1|0);
 $46 = (($line) + 1|0);
 $47 = (($line) + 8|0);
 $48 = (($line) + 8|0);
 $49 = (($line) + 4|0);
 $50 = (($line) + 4|0);
 while(1) {
  $51 = HEAP32[$ifs>>2]|0;
  $52 = (($51) + -12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($ifs) + ($53)|0);
  __ZNKSt3__18ios_base6getlocEv($0,$54);
  $55 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 28|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (FUNCTION_TABLE_iii[$58 & 31]($55,10)|0);
  __ZNSt3__16localeD2Ev($0);
  $60 = (__ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($ifs,$line,$59)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + -12|0);
  $63 = HEAP32[$62>>2]|0;
  $$sum17 = (($63) + 16)|0;
  $64 = (($60) + ($$sum17)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65 & 5;
  $67 = ($66|0)==(0);
  if (!($67)) {
   $$0 = 1;
   break;
  }
  $68 = HEAP8[$line>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $72 = $68&255;
   $73 = $72 >>> 1;
   $74 = $73;
  } else {
   $71 = HEAP32[$50>>2]|0;
   $74 = $71;
  }
  $75 = ($74|0)==(0);
  if ($75) {
   continue;
  }
  $76 = HEAP8[$line>>0]|0;
  $77 = $76 & 1;
  $78 = ($77<<24>>24)==(0);
  if ($78) {
   $80 = $76&255;
   $81 = $80 >>> 1;
   $82 = $81;
  } else {
   $79 = HEAP32[$49>>2]|0;
   $82 = $79;
  }
  $83 = ($82|0)==(0);
  if (!($83)) {
   $84 = HEAP8[$line>>0]|0;
   $85 = $84 & 1;
   $86 = ($85<<24>>24)==(0);
   $87 = HEAP32[$48>>2]|0;
   $$ = $86 ? $45 : $87;
   $88 = HEAP8[$$>>0]|0;
   $89 = ($88<<24>>24)==(59);
   if ($89) {
    continue;
   }
   $90 = HEAP8[$line>>0]|0;
   $91 = $90 & 1;
   $92 = ($91<<24>>24)==(0);
   $93 = HEAP32[$47>>2]|0;
   $$28 = $92 ? $46 : $93;
   $94 = HEAP8[$$28>>0]|0;
   $95 = ($94<<24>>24)==(35);
   if ($95) {
    continue;
   }
  }
  $96 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($line,61,0)|0);
  $97 = ($96|0)==(-1);
  if ($97) {
   label = 18;
   break;
  } else {
   $s1$0$in = $96;
  }
  while(1) {
   $s1$0 = (($s1$0$in) + 1)|0;
   $106 = HEAP8[$line>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $110 = $106&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $109 = HEAP32[$39>>2]|0;
    $113 = $109;
   }
   $112 = ($s1$0>>>0)<($113>>>0);
   if (!($112)) {
    $s2$0$in = $96;
    break;
   }
   $114 = HEAP8[$line>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   $117 = HEAP32[$38>>2]|0;
   $$29 = $116 ? $37 : $117;
   $118 = (($$29) + ($s1$0)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119 << 24 >> 24;
   $121 = (_isspace($120)|0);
   $122 = ($121|0)==(0);
   if ($122) {
    $s2$0$in = $96;
    break;
   } else {
    $s1$0$in = $s1$0;
   }
  }
  while(1) {
   $s2$0 = (($s2$0$in) + -1)|0;
   $123 = ($s2$0|0)>(-1);
   if (!($123)) {
    break;
   }
   $124 = HEAP8[$line>>0]|0;
   $125 = $124 & 1;
   $126 = ($125<<24>>24)==(0);
   $127 = HEAP32[$41>>2]|0;
   $$30 = $126 ? $40 : $127;
   $128 = (($$30) + ($s2$0)|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129 << 24 >> 24;
   $131 = (_isspace($130)|0);
   $132 = ($131|0)==(0);
   if ($132) {
    break;
   } else {
    $s2$0$in = $s2$0;
   }
  }
  $133 = HEAP8[$line>>0]|0;
  $134 = $133 & 1;
  $135 = ($134<<24>>24)==(0);
  if ($135) {
   $137 = $133&255;
   $138 = $137 >>> 1;
   $140 = $138;
  } else {
   $136 = HEAP32[$44>>2]|0;
   $140 = $136;
  }
  $139 = (($140) - ($s1$0))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_($value,$line,$s1$0,$139,$line);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_($key,$line,0,$s2$0$in,$line);
  $141 = HEAP8[$key>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  $144 = HEAP32[$43>>2]|0;
  $$31 = $143 ? $42 : $144;
  __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($this,$$31,$value,0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($key);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($value);
 }
 if ((label|0) == 18) {
  $98 = (($this) + 64|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$98);
  $99 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($98,402920)|0);
  $100 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($99,402936)|0);
  $101 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($100,77)|0);
  $102 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($101,402944)|0);
  $103 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($102,403000)|0);
  $104 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($103,402960)|0);
  $105 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($104,403032)|0);
  (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($105,$line)|0);
  $$0 = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($line);
 $$1 = $$0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($ifs);
 STACKTOP = sp;return ($$1|0);
}
function __ZN5MeCab5Param4openEiPPcPKNS_6OptionE($this,$argc,$argv,$opts) {
 $this = $this|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $opts = $opts|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$031 = 0, $i1$09 = 0, $i2$014 = 0, $ind$029 = 0, $ind$1 = 0, $s$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 80|0;
 $1 = sp + 68|0;
 $2 = sp + 56|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $5 = sp + 28|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = ($argc|0)<(1);
 $10 = (($this) + 28|0);
 if ($9) {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($10,403048)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$argv>>2]|0;
 $12 = (_strlen(($11|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$11,$12);
 $13 = HEAP8[$10>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $19 = (($10) + 1|0);
  HEAP8[$19>>0] = 0;
  HEAP8[$10>>0] = 0;
 } else {
  $16 = (($this) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP8[$17>>0] = 0;
  $18 = (($this) + 32|0);
  HEAP32[$18>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($10,0);
 ;HEAP32[$10+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $20 = (($this) + 40|0);
 $21 = (($this) + 52|0);
 __ZN5MeCab12_GLOBAL__N_110init_paramEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_RKS7_PKNS_6OptionE($20,$21,$10,$opts);
 $22 = HEAP32[$opts>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $32 = $22;$i$031 = 0;
  while(1) {
   $28 = ((($opts) + (($i$031*20)|0)|0) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $31 = (_strlen(($29|0))|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$29,$31);
    __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($this,$32,$1,1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
   }
   $33 = (($i$031) + 1)|0;
   $34 = (($opts) + (($33*20)|0)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    break;
   } else {
    $32 = $35;$i$031 = $33;
   }
  }
 }
 $24 = ($argc|0)>(1);
 if (!($24)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($this) + 20|0);
 $26 = (($this) + 24|0);
 $27 = (($this) + 16|0);
 $ind$029 = 1;
 L19: while(1) {
  $37 = (($argv) + ($ind$029<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==(45);
  do {
   if ($40) {
    $41 = (($38) + 1|0);
    $42 = HEAP8[$41>>0]|0;
    if ((($42<<24>>24) == 0)) {
     $ind$1 = $ind$029;
     break;
    } else if (!((($42<<24>>24) == 45))) {
     $43 = HEAP32[$opts>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      label = 47;
      break L19;
     }
     $45 = HEAP32[$37>>2]|0;
     $46 = (($45) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $96 = $43;$i2$014 = 0;
     while(1) {
      $86 = ((($opts) + (($i2$014*20)|0)|0) + 4|0);
      $87 = HEAP8[$86>>0]|0;
      $88 = ($87<<24>>24)==($47<<24>>24);
      $83 = (($i2$014) + 1)|0;
      if ($88) {
       break;
      }
      $82 = (($opts) + (($83*20)|0)|0);
      $84 = HEAP32[$82>>2]|0;
      $85 = ($84|0)==(0|0);
      if ($85) {
       label = 47;
       break L19;
      } else {
       $96 = $84;$i2$014 = $83;
      }
     }
     $89 = ((($opts) + (($i2$014*20)|0)|0) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($90|0)==(0|0);
     $92 = (($45) + 2|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = ($93<<24>>24)!=(0);
     if ($91) {
      if ($94) {
       label = 49;
       break L19;
      }
      HEAP32[$7>>2] = 1;
      __ZN5MeCab5Param3setIiEEvPKcRKT_b($this,$96,$7,1);
      $ind$1 = $ind$029;
      break;
     }
     if ($94) {
      $95 = (_strlen(($92|0))|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5,$92,$95);
      __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($this,$96,$5,1);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
      $ind$1 = $ind$029;
      break;
     }
     $97 = (($ind$029) + 1)|0;
     $98 = ($97|0)==($argc|0);
     if ($98) {
      label = 48;
      break L19;
     }
     $99 = (($argv) + ($97<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (_strlen(($100|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($6,$100,$101);
     __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($this,$96,$6,1);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
     $ind$1 = $97;
     break;
    }
    $48 = (($38) + 2|0);
    $s$0 = $48;
    while(1) {
     $49 = HEAP8[$s$0>>0]|0;
     if ((($49<<24>>24) == 61) | (($49<<24>>24) == 0)) {
      break;
     }
     $50 = (($s$0) + 1|0);
     $s$0 = $50;
    }
    $51 = HEAP32[$37>>2]|0;
    $52 = (($51) + 2|0);
    $53 = $s$0;
    $54 = $52;
    $55 = (($53) - ($54))|0;
    $56 = ($s$0|0)==($52|0);
    if ($56) {
     $$0 = 1;
     label = 50;
     break L19;
    }
    $57 = HEAP32[$opts>>2]|0;
    $58 = ($57|0)==(0|0);
    if ($58) {
     label = 47;
     break L19;
    } else {
     $59 = $57;$i1$09 = 0;
    }
    while(1) {
     $60 = (_strlen(($59|0))|0);
     $61 = ($60|0)==($55|0);
     if ($61) {
      $62 = HEAP32[$37>>2]|0;
      $63 = (($62) + 2|0);
      $64 = (_strncmp($63,$59,$55)|0);
      $65 = ($64|0)==(0);
      if ($65) {
       break;
      }
     }
     $66 = (($i1$09) + 1)|0;
     $67 = (($opts) + (($66*20)|0)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(0|0);
     if ($69) {
      label = 47;
      break L19;
     } else {
      $59 = $68;$i1$09 = $66;
     }
    }
    $70 = ((($opts) + (($i1$09*20)|0)|0) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    $73 = HEAP8[$s$0>>0]|0;
    $74 = ($73<<24>>24)==(61);
    if ($72) {
     if ($74) {
      label = 49;
      break L19;
     }
     HEAP32[$4>>2] = 1;
     __ZN5MeCab5Param3setIiEEvPKcRKT_b($this,$59,$4,1);
     $ind$1 = $ind$029;
     break;
    }
    if ($74) {
     $75 = (($s$0) + 1|0);
     $76 = (_strlen(($75|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,$75,$76);
     __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($this,$59,$2,1);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
     $ind$1 = $ind$029;
     break;
    }
    $77 = (($ind$029) + 1)|0;
    $78 = ($77|0)==($argc|0);
    if ($78) {
     label = 48;
     break L19;
    }
    $79 = (($argv) + ($77<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (_strlen(($80|0))|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,$80,$81);
    __ZN5MeCab5Param3setINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPKcRKT_b($this,$59,$3,1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
    $ind$1 = $77;
   } else {
    $102 = (_strlen(($38|0))|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($8,$38,$102);
    $103 = HEAP32[$25>>2]|0;
    $104 = HEAP32[$26>>2]|0;
    $105 = ($103>>>0)<($104>>>0);
    if ($105) {
     $106 = ($103|0)==(0|0);
     if (!($106)) {
      ;HEAP32[$103+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$103+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$8+8>>2]|0;
      ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
     }
     $107 = HEAP32[$25>>2]|0;
     $108 = (($107) + 12|0);
     HEAP32[$25>>2] = $108;
    } else {
     __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($27,$8);
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
    $ind$1 = $ind$029;
   }
  } while(0);
  $109 = (($ind$1) + 1)|0;
  $110 = ($109|0)<($argc|0);
  if ($110) {
   $ind$029 = $109;
  } else {
   $$0 = 1;
   label = 50;
   break;
  }
 }
 if ((label|0) == 47) {
  $111 = (($this) + 64|0);
  $112 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($111,403056)|0);
  $113 = HEAP32[$37>>2]|0;
  $114 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($112,$113)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($114,403080)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 48) {
  $115 = (($this) + 64|0);
  $116 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($115,403080)|0);
  $117 = HEAP32[$37>>2]|0;
  $118 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($116,$117)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($118,403088)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 49) {
  $119 = (($this) + 64|0);
  $120 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($119,403080)|0);
  $121 = HEAP32[$37>>2]|0;
  $122 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($120,$121)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($122,403112)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 50) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab12_GLOBAL__N_110init_paramEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_RKS7_PKNS_6OptionE($help,$version,$system_name,$opts) {
 $help = $help|0;
 $version = $version|0;
 $system_name = $system_name|0;
 $opts = $opts|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $i$016 = 0, $i1$013 = 0, $l2$0 = 0, $l2$111 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 84|0;
 $1 = sp + 72|0;
 $2 = sp + 60|0;
 $3 = sp + 48|0;
 $4 = sp + 36|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,403152,162);
 $8 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($3,403320)|0);
 ;HEAP32[$2+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$8+8>>2]|0;
 ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $9 = HEAP8[$system_name>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($system_name) + 1|0);
  $22 = $14;
 } else {
  $12 = (($system_name) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $22 = $13;
 }
 $15 = HEAP8[$system_name>>0]|0;
 $16 = $15 & 1;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $20 = $15&255;
  $21 = $20 >>> 1;
  $23 = $21;
 } else {
  $18 = (($system_name) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $23 = $19;
 }
 $24 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($2,$22,$23)|0);
 ;HEAP32[$1+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$24+8>>2]|0;
 ;HEAP32[$24+0>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
 $25 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($1,403336)|0);
 ;HEAP32[$0+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$25+8>>2]|0;
 ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
 $26 = HEAP8[$help>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $32 = (($help) + 1|0);
  HEAP8[$32>>0] = 0;
  HEAP8[$help>>0] = 0;
 } else {
  $29 = (($help) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP8[$30>>0] = 0;
  $31 = (($help) + 4|0);
  HEAP32[$31>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($help,0);
 ;HEAP32[$help+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$help+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$help+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($7,403144,5);
 $33 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($7,403360)|0);
 ;HEAP32[$6+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$33+8>>2]|0;
 ;HEAP32[$33+0>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;
 $34 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($6,403368)|0);
 ;HEAP32[$5+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$34+8>>2]|0;
 ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($5,10);
 ;HEAP32[$4+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $35 = HEAP8[$version>>0]|0;
 $36 = $35 & 1;
 $37 = ($36<<24>>24)==(0);
 if ($37) {
  $41 = (($version) + 1|0);
  HEAP8[$41>>0] = 0;
  HEAP8[$version>>0] = 0;
 } else {
  $38 = (($version) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP8[$39>>0] = 0;
  $40 = (($version) + 4|0);
  HEAP32[$40>>2] = 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($version,0);
 ;HEAP32[$version+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$version+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$version+8>>2]=HEAP32[$4+8>>2]|0;
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 $42 = HEAP32[$opts>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$lcssa = 0;
 } else {
  $46 = $42;$57 = 0;$i$016 = 0;
  while(1) {
   $47 = (_strlen(($46|0))|0);
   $48 = (($47) + 1)|0;
   $49 = ((($opts) + (($i$016*20)|0)|0) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    $55 = $48;
   } else {
    $52 = (_strlen(($50|0))|0);
    $53 = (($47) + 2)|0;
    $54 = (($53) + ($52))|0;
    $55 = $54;
   }
   $56 = ($55>>>0)<($57>>>0);
   $58 = $56 ? $57 : $55;
   $59 = (($i$016) + 1)|0;
   $60 = (($opts) + (($59*20)|0)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if ($62) {
    $$lcssa = $58;
    break;
   } else {
    $46 = $61;$57 = $58;$i$016 = $59;
   }
  }
 }
 $44 = HEAP32[$opts>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($help,10);
  STACKTOP = sp;return;
 } else {
  $63 = $44;$74 = $opts;$i1$013 = 0;
 }
 while(1) {
  $64 = (_strlen(($63|0))|0);
  $65 = ((($opts) + (($i1$013*20)|0)|0) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0|0);
  if ($67) {
   $l2$0 = $64;
  } else {
   $68 = (_strlen(($66|0))|0);
   $69 = (($64) + 1)|0;
   $70 = (($69) + ($68))|0;
   $l2$0 = $70;
  }
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($help,403376)|0);
  $71 = ((($opts) + (($i1$013*20)|0)|0) + 4|0);
  $72 = HEAP8[$71>>0]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($help,$72);
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($help,403384)|0);
  $73 = HEAP32[$74>>2]|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($help,$73)|0);
  $75 = HEAP32[$65>>2]|0;
  $76 = ($75|0)==(0|0);
  if (!($76)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($help,61);
   $77 = HEAP32[$65>>2]|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($help,$77)|0);
  }
  $78 = ($l2$0>>>0)>($$lcssa>>>0);
  if (!($78)) {
   $l2$111 = $l2$0;
   while(1) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($help,32);
    $79 = (($l2$111) + 1)|0;
    $80 = ($79>>>0)>($$lcssa>>>0);
    if ($80) {
     break;
    } else {
     $l2$111 = $79;
    }
   }
  }
  $81 = ((($opts) + (($i1$013*20)|0)|0) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($help,$82)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($help,10);
  $83 = (($i1$013) + 1)|0;
  $84 = (($opts) + (($83*20)|0)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if ($86) {
   break;
  } else {
   $63 = $85;$74 = $84;$i1$013 = $83;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($help,10);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Param4openEPKcPKNS_6OptionE($this,$arg,$opts) {
 $this = $this|0;
 $arg = $arg|0;
 $opts = $opts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$08 = 0, $p$1 = 0, $p$2$lcssa = 0, $p$27 = 0, $ptr = 0, $size$09 = 0, $size$1 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $str = sp + 256|0;
 $ptr = sp;
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC1Ev($str);
 $0 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($str)|0);
 $1 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE4sizeEv($str)|0);
 (_strncpy(($0|0),($arg|0),($1|0))|0);
 HEAP32[$ptr>>2] = 403144;
 $2 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($str)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   $size$1 = 1;
  } else {
   $p$08 = $2;$size$09 = 1;
   while(1) {
    $p$1 = $p$08;
    while(1) {
     $7 = HEAP8[$p$1>>0]|0;
     $8 = $7 << 24 >> 24;
     $9 = (_isspace($8)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      break;
     }
     $11 = (($p$1) + 1|0);
     HEAP8[$p$1>>0] = 0;
     $p$1 = $11;
    }
    $12 = HEAP8[$p$1>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $size$1 = $size$09;
     break L1;
    }
    $14 = (($size$09) + 1)|0;
    $15 = (($ptr) + ($size$09<<2)|0);
    HEAP32[$15>>2] = $p$1;
    $16 = ($14|0)==(256);
    if ($16) {
     $size$1 = 256;
     break L1;
    }
    $17 = HEAP8[$p$1>>0]|0;
    $18 = ($17<<24>>24)==(0);
    L10: do {
     if ($18) {
      $p$2$lcssa = $p$1;
     } else {
      $23 = $17;$p$27 = $p$1;
      while(1) {
       $22 = $23 << 24 >> 24;
       $24 = (_isspace($22)|0);
       $25 = ($24|0)==(0);
       $20 = (($p$27) + 1|0);
       if (!($25)) {
        $p$2$lcssa = $p$27;
        break L10;
       }
       $19 = HEAP8[$20>>0]|0;
       $21 = ($19<<24>>24)==(0);
       if ($21) {
        $p$2$lcssa = $20;
        break;
       } else {
        $23 = $19;$p$27 = $20;
       }
      }
     }
    } while(0);
    $5 = HEAP8[$p$2$lcssa>>0]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $size$1 = $14;
     break;
    } else {
     $p$08 = $p$2$lcssa;$size$09 = $14;
    }
   }
  }
 } while(0);
 $26 = (__ZN5MeCab5Param4openEiPPcPKNS_6OptionE($this,$size$1,$ptr,$opts)|0);
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($str);
 STACKTOP = sp;return ($26|0);
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tE4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 520|0);
 $1 = (__ZN5MeCab7whatlog3strEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((403392 + 8|0));
 __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tE5closeEv($this);
 $0 = (($this) + 520|0);
 __ZN5MeCab7whatlogD1Ev($0);
 $1 = (($this) + 336|0);
 __ZN5MeCab12CharPropertyD1Ev($1);
 $2 = (($this) + 316|0);
 __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEED1Ev($2);
 $3 = (($this) + 288|0);
 __ZN5MeCab8FreeListI23mecab_dictionary_info_tED1Ev($3);
 $4 = (($this) + 280|0);
 __ZN5MeCab13scoped_stringD1Ev($4);
 $5 = (($this) + 272|0);
 __ZN5MeCab13scoped_stringD1Ev($5);
 $6 = (($this) + 16|0);
 __ZN5MeCab10DictionaryD1Ev($6);
 $7 = (($this) + 4|0);
 __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEED1Ev($7);
 STACKTOP = sp;return;
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tE5closeEv($this) {
 $this = $this|0;
 var $$lcssa8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i2 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i1 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i6 = 0, $uglygep$i$i$i = 0, $uglygep$i$i$i4 = 0, $uglygep3$i$i$i = 0, $uglygep3$i$i$i5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $$lcssa8 = $3;
 } else {
  $6 = $1;
  while(1) {
   $5 = HEAP32[$6>>2]|0;
   $7 = ($5|0)==(0|0);
   if (!($7)) {
    $8 = HEAP32[$5>>2]|0;
    $9 = (($8) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    FUNCTION_TABLE_vi[$10 & 511]($5);
   }
   $11 = (($6) + 4|0);
   $12 = HEAP32[$2>>2]|0;
   $13 = ($11|0)==($12|0);
   if ($13) {
    $$lcssa8 = $12;
    break;
   } else {
    $6 = $11;
   }
  }
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = ($$lcssa8|0)==($14|0);
 if (!($15)) {
  $scevgep$i$i$i1 = (($$lcssa8) + -4|0);
  $__new_last2$i$i$i2 = $14;
  $16 = (0 - ($__new_last2$i$i$i2))|0;
  $uglygep$i$i$i4 = (($scevgep$i$i$i1) + ($16)|0);
  $uglygep3$i$i$i5 = $uglygep$i$i$i4;
  $17 = $uglygep3$i$i$i5 >>> 2;
  $18 = $17 ^ -1;
  $scevgep4$i$i$i6 = (($$lcssa8) + ($18<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i6;
 }
 $19 = (($this) + 316|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($this) + 320|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==($20|0);
 if ($23) {
  $27 = (($this) + 336|0);
  __ZN5MeCab12CharProperty5closeEv($27);
  STACKTOP = sp;return;
 }
 $scevgep$i$i$i = (($22) + -8|0);
 $__new_last2$i$i$i = $20;
 $24 = (0 - ($__new_last2$i$i$i))|0;
 $uglygep$i$i$i = (($scevgep$i$i$i) + ($24)|0);
 $uglygep3$i$i$i = $uglygep$i$i$i;
 $25 = $uglygep3$i$i$i >>> 3;
 $26 = $25 ^ -1;
 $scevgep4$i$i$i = (($22) + ($26<<3)|0);
 HEAP32[$21>>2] = $scevgep4$i$i$i;
 $27 = (($this) + 336|0);
 __ZN5MeCab12CharProperty5closeEv($27);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI23mecab_dictionary_info_tED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI23mecab_dictionary_info_tED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tEC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tEC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((403392 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 16|0);
 __ZN5MeCab10DictionaryC1Ev($3);
 $4 = (($this) + 272|0);
 __ZN5MeCab13scoped_stringC1Ev($4);
 $5 = (($this) + 280|0);
 __ZN5MeCab13scoped_stringC1Ev($5);
 $6 = (($this) + 288|0);
 __ZN5MeCab8FreeListI23mecab_dictionary_info_tEC1Ej($6,4);
 $7 = (($this) + 316|0);
 $8 = (($this) + 332|0);
 ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 __ZN5MeCab8CharInfoC1Ev($8);
 $9 = (($this) + 336|0);
 __ZN5MeCab12CharPropertyC1Ev($9);
 $10 = (($this) + 516|0);
 HEAP32[$10>>2] = 0;
 $11 = (($this) + 520|0);
 __ZN5MeCab7whatlogC1Ev($11);
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI23mecab_dictionary_info_tEC1Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI23mecab_dictionary_info_tEC2Ej($this,$_size);
 STACKTOP = sp;return;
}
function __ZN5MeCab8CharInfoC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8CharInfoC2Ev($this);
 STACKTOP = sp;return;
}
function __ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE15dictionary_infoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 328|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getBOSNodeEPNS_9AllocatorIS1_S2_EE($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
 $1 = (($0) + 24|0);
 HEAP32[$1>>2] = 403472;
 $2 = (($this) + 272|0);
 $3 = (__ZNK5MeCab12scoped_arrayIcE3getEv($2)|0);
 $4 = (($0) + 28|0);
 HEAP32[$4>>2] = $3;
 $5 = (($0) + 48|0);
 HEAP8[$5>>0] = 1;
 $6 = (($0) + 47|0);
 HEAP8[$6>>0] = 2;
 STACKTOP = sp;return ($0|0);
}
function __ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getEOSNodeEPNS_9AllocatorIS1_S2_EE($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE10getBOSNodeEPNS_9AllocatorIS1_S2_EE($this,$allocator)|0);
 $1 = (($0) + 47|0);
 HEAP8[$1>>0] = 3;
 STACKTOP = sp;return ($0|0);
}
function __ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE6lookupILb0EEEPS1_PKcS7_PNS_9AllocatorIS1_S2_EEPNS_7LatticeE($this,$begin,$end,$allocator,$lattice) {
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 $allocator = $allocator|0;
 $lattice = $lattice|0;
 var $$0 = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $begin3$1$lcssa = 0;
 var $begin3$110 = 0, $begin3$2 = 0, $cinfo = 0, $clen = 0, $exitcond = 0, $exitcond49 = 0, $exitcond52 = 0, $exitcond54 = 0, $exitcond56 = 0, $exitcond57 = 0, $fail = 0, $group_begin3$0 = 0, $i$037 = 0, $i8$011 = 0, $j$031 = 0, $k$025 = 0, $k11$06 = 0, $k15$04 = 0, $k6$020 = 0, $mblen = 0;
 var $new_node = 0, $new_node12 = 0, $new_node16 = 0, $new_node3 = 0, $new_node7 = 0, $or$cond = 0, $or$cond9 = 0, $result_node$0$lcssa58 = 0, $result_node$043 = 0, $result_node$1$lcssa = 0, $result_node$10 = 0, $result_node$11 = 0, $result_node$123 = 0, $result_node$138 = 0, $result_node$2$lcssa = 0, $result_node$232 = 0, $result_node$3$lcssa = 0, $result_node$326 = 0, $result_node$4 = 0, $result_node$521 = 0;
 var $result_node$7 = 0, $result_node$812 = 0, $result_node$9$lcssa = 0, $result_node$95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp + 48|0;
 $cinfo = sp + 44|0;
 $mblen = sp + 40|0;
 $clen = sp + 36|0;
 $0 = sp + 32|0;
 $new_node = sp + 28|0;
 $new_node3 = sp + 24|0;
 $fail = sp + 20|0;
 $1 = sp + 16|0;
 $new_node7 = sp + 12|0;
 $new_node12 = sp + 8|0;
 $2 = sp + 4|0;
 $new_node16 = sp;
 __ZN5MeCab8CharInfoC1Ev($cinfo);
 HEAP32[$mblen>>2] = 0;
 HEAP32[$clen>>2] = 0;
 $3 = $end;
 $4 = $begin;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)>(65534);
 $7 = (($begin) + 65535|0);
 $8 = $6 ? $7 : $end;
 $9 = (($this) + 336|0);
 $10 = (($this) + 332|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$0>>2] = $11;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $12 = (__ZNK5MeCab12CharProperty15seekToOtherTypeEPKcS2_NS_8CharInfoEPS3_PjS5_($9,$begin,$8,$$byval_copy,$cinfo,$mblen,$clen)|0);
 $13 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE15mutable_resultsEv($allocator)|0);
 $14 = (($this) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)==($17|0);
 if ($18) {
  $result_node$0$lcssa58 = 0;
 } else {
  $19 = $8;
  $20 = $12;
  $21 = (($19) - ($20))|0;
  $22 = (($20) - ($4))|0;
  $24 = $15;$result_node$043 = 0;
  while(1) {
   $23 = HEAP32[$24>>2]|0;
   $25 = (__ZNK5MeCab10Dictionary18commonPrefixSearchEPKcjPNS_5Darts15DoubleArrayImplIchijNS3_6LengthIcEEE16result_pair_typeEj($23,$12,$21,$13,512)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $result_node$1$lcssa = $result_node$043;
   } else {
    $i$037 = 0;$result_node$138 = $result_node$043;
    while(1) {
     $27 = (($13) + ($i$037<<3)|0);
     $28 = (__ZNK5MeCab10Dictionary10token_sizeERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE(0,$27)|0);
     $29 = HEAP32[$24>>2]|0;
     $30 = (__ZNK5MeCab10Dictionary5tokenERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE($29,$27)|0);
     $31 = ($28|0)==(0);
     if ($31) {
      $result_node$2$lcssa = $result_node$138;
     } else {
      $32 = ((($13) + ($i$037<<3)|0) + 4|0);
      $j$031 = 0;$result_node$232 = $result_node$138;
      while(1) {
       $33 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
       HEAP32[$new_node>>2] = $33;
       $34 = HEAP32[$24>>2]|0;
       $35 = (($30) + ($j$031<<4)|0);
       __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($34,$35,$new_node);
       $36 = HEAP32[$32>>2]|0;
       $37 = $36&65535;
       $38 = HEAP32[$new_node>>2]|0;
       $39 = (($38) + 36|0);
       HEAP16[$39>>1] = $37;
       $40 = HEAP32[$new_node>>2]|0;
       $41 = (($40) + 36|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = $42&65535;
       $44 = (($22) + ($43))|0;
       $45 = $44&65535;
       $46 = (($40) + 38|0);
       HEAP16[$46>>1] = $45;
       $47 = HEAP32[$new_node>>2]|0;
       $48 = (($47) + 24|0);
       HEAP32[$48>>2] = $12;
       $49 = HEAP32[$new_node>>2]|0;
       $50 = (($49) + 47|0);
       HEAP8[$50>>0] = 0;
       $51 = HEAP32[$cinfo>>2]|0;
       $52 = $51 >>> 18;
       $53 = $52&255;
       $54 = HEAP32[$new_node>>2]|0;
       $55 = (($54) + 46|0);
       HEAP8[$55>>0] = $53;
       $56 = HEAP32[$new_node>>2]|0;
       $57 = (($56) + 12|0);
       HEAP32[$57>>2] = $result_node$232;
       $58 = HEAP32[$new_node>>2]|0;
       $59 = (($j$031) + 1)|0;
       $exitcond56 = ($59|0)==($28|0);
       if ($exitcond56) {
        $result_node$2$lcssa = $58;
        break;
       } else {
        $j$031 = $59;$result_node$232 = $58;
       }
      }
     }
     $60 = (($i$037) + 1)|0;
     $exitcond57 = ($60|0)==($25|0);
     if ($exitcond57) {
      $result_node$1$lcssa = $result_node$2$lcssa;
      break;
     } else {
      $i$037 = $60;$result_node$138 = $result_node$2$lcssa;
     }
    }
   }
   $61 = (($24) + 4|0);
   $62 = HEAP32[$16>>2]|0;
   $63 = ($61|0)==($62|0);
   if ($63) {
    break;
   } else {
    $24 = $61;$result_node$043 = $result_node$1$lcssa;
   }
  }
  $64 = ($result_node$1$lcssa|0)==(0|0);
  if ($64) {
   $result_node$0$lcssa58 = 0;
  } else {
   $65 = HEAP32[$cinfo>>2]|0;
   $66 = ($65|0)<(0);
   if ($66) {
    $result_node$0$lcssa58 = $result_node$1$lcssa;
   } else {
    $$0 = $result_node$1$lcssa;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $67 = HEAP32[$mblen>>2]|0;
 $68 = (($12) + ($67)|0);
 $69 = ($68>>>0)>($8>>>0);
 if ($69) {
  $70 = HEAP32[$cinfo>>2]|0;
  $71 = $70 >>> 18;
  $72 = $71 & 255;
  $73 = (($this) + 316|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + ($72<<3)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($74) + ($72<<3)|0) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)==(0);
  if ($79) {
   $result_node$3$lcssa = $result_node$0$lcssa58;
  } else {
   $80 = (($this) + 16|0);
   $81 = HEAP32[$cinfo>>2]|0;
   $82 = $81 >>> 18;
   $83 = $82&255;
   $84 = $68;
   $85 = $67&65535;
   $86 = (($84) - ($4))|0;
   $87 = $86&65535;
   $88 = (($this) + 280|0);
   $k$025 = 0;$result_node$326 = $result_node$0$lcssa58;
   while(1) {
    $89 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
    HEAP32[$new_node3>>2] = $89;
    $90 = (($76) + ($k$025<<4)|0);
    __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($80,$90,$new_node3);
    $91 = HEAP32[$new_node3>>2]|0;
    $92 = (($91) + 46|0);
    HEAP8[$92>>0] = $83;
    $93 = HEAP32[$new_node3>>2]|0;
    $94 = (($93) + 24|0);
    HEAP32[$94>>2] = $12;
    $95 = HEAP32[$new_node3>>2]|0;
    $96 = (($95) + 36|0);
    HEAP16[$96>>1] = $85;
    $97 = HEAP32[$new_node3>>2]|0;
    $98 = (($97) + 38|0);
    HEAP16[$98>>1] = $87;
    $99 = HEAP32[$new_node3>>2]|0;
    $100 = (($99) + 47|0);
    HEAP8[$100>>0] = 1;
    $101 = HEAP32[$new_node3>>2]|0;
    $102 = (($101) + 12|0);
    HEAP32[$102>>2] = $result_node$326;
    $103 = (__ZNK5MeCab12scoped_arrayIcE3getEv($88)|0);
    $104 = ($103|0)==(0|0);
    if (!($104)) {
     $105 = HEAP32[$new_node3>>2]|0;
     $106 = (($105) + 28|0);
     HEAP32[$106>>2] = $103;
    }
    $107 = HEAP32[$new_node3>>2]|0;
    $108 = (($k$025) + 1)|0;
    $exitcond54 = ($108|0)==($78|0);
    if ($exitcond54) {
     $result_node$3$lcssa = $107;
     break;
    } else {
     $k$025 = $108;$result_node$326 = $107;
    }
   }
  }
  $109 = ($result_node$3$lcssa|0)==(0|0);
  if ($109) {
   $result_node$4 = 0;
  } else {
   $$0 = $result_node$3$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $result_node$4 = $result_node$0$lcssa58;
 }
 $110 = HEAP32[$cinfo>>2]|0;
 $111 = $110 & 1073741824;
 $112 = ($111|0)==(0);
 if ($112) {
  $group_begin3$0 = 0;$result_node$7 = $result_node$4;
 } else {
  __ZN5MeCab8CharInfoC1Ev($fail);
  $113 = HEAP32[$cinfo>>2]|0;
  HEAP32[$1>>2] = $113;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  $114 = (__ZNK5MeCab12CharProperty15seekToOtherTypeEPKcS2_NS_8CharInfoEPS3_PjS5_($9,$68,$8,$$byval_copy,$fail,$mblen,$clen)|0);
  $115 = HEAP32[$clen>>2]|0;
  $116 = (($this) + 516|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115>>>0)>($117>>>0);
  if ($118) {
   $group_begin3$0 = $114;$result_node$7 = $result_node$4;
  } else {
   $119 = HEAP32[$cinfo>>2]|0;
   $120 = $119 >>> 18;
   $121 = $120 & 255;
   $122 = (($this) + 316|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($123) + ($121<<3)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($123) + ($121<<3)|0) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($127|0)==(0);
   if ($128) {
    $group_begin3$0 = $114;$result_node$7 = $result_node$4;
   } else {
    $129 = (($this) + 16|0);
    $130 = HEAP32[$cinfo>>2]|0;
    $131 = $130 >>> 18;
    $132 = $131&255;
    $133 = $114;
    $134 = $12;
    $135 = (($133) - ($134))|0;
    $136 = $135&65535;
    $137 = (($133) - ($4))|0;
    $138 = $137&65535;
    $139 = (($this) + 280|0);
    $k6$020 = 0;$result_node$521 = $result_node$4;
    while(1) {
     $140 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
     HEAP32[$new_node7>>2] = $140;
     $141 = (($125) + ($k6$020<<4)|0);
     __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($129,$141,$new_node7);
     $142 = HEAP32[$new_node7>>2]|0;
     $143 = (($142) + 46|0);
     HEAP8[$143>>0] = $132;
     $144 = HEAP32[$new_node7>>2]|0;
     $145 = (($144) + 24|0);
     HEAP32[$145>>2] = $12;
     $146 = HEAP32[$new_node7>>2]|0;
     $147 = (($146) + 36|0);
     HEAP16[$147>>1] = $136;
     $148 = HEAP32[$new_node7>>2]|0;
     $149 = (($148) + 38|0);
     HEAP16[$149>>1] = $138;
     $150 = HEAP32[$new_node7>>2]|0;
     $151 = (($150) + 47|0);
     HEAP8[$151>>0] = 1;
     $152 = HEAP32[$new_node7>>2]|0;
     $153 = (($152) + 12|0);
     HEAP32[$153>>2] = $result_node$521;
     $154 = (__ZNK5MeCab12scoped_arrayIcE3getEv($139)|0);
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = HEAP32[$new_node7>>2]|0;
      $157 = (($156) + 28|0);
      HEAP32[$157>>2] = $154;
     }
     $158 = HEAP32[$new_node7>>2]|0;
     $159 = (($k6$020) + 1)|0;
     $exitcond52 = ($159|0)==($127|0);
     if ($exitcond52) {
      $group_begin3$0 = $114;$result_node$7 = $158;
      break;
     } else {
      $k6$020 = $159;$result_node$521 = $158;
     }
    }
   }
  }
 }
 $160 = HEAP32[$cinfo>>2]|0;
 $161 = $160 & 1006632960;
 $162 = ($161|0)==(0);
 $163 = ($68>>>0)>($8>>>0);
 $or$cond9 = $162 | $163;
 L40: do {
  if ($or$cond9) {
   $begin3$1$lcssa = $68;$result_node$11 = $result_node$7;
  } else {
   $164 = (($this) + 316|0);
   $165 = (($this) + 16|0);
   $166 = $12;
   $167 = (($this) + 280|0);
   $begin3$110 = $68;$i8$011 = 1;$result_node$812 = $result_node$7;
   while(1) {
    $168 = ($begin3$110|0)==($group_begin3$0|0);
    if ($168) {
     $begin3$2 = $begin3$110;$result_node$10 = $result_node$812;
    } else {
     HEAP32[$clen>>2] = $i8$011;
     $169 = HEAP32[$cinfo>>2]|0;
     $170 = $169 >>> 18;
     $171 = $170 & 255;
     $172 = HEAP32[$164>>2]|0;
     $173 = (($172) + ($171<<3)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = ((($172) + ($171<<3)|0) + 4|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($176|0)==(0);
     if ($177) {
      $result_node$9$lcssa = $result_node$812;
     } else {
      $178 = HEAP32[$cinfo>>2]|0;
      $179 = $178 >>> 18;
      $180 = $179&255;
      $181 = $begin3$110;
      $182 = (($181) - ($166))|0;
      $183 = $182&65535;
      $184 = (($181) - ($4))|0;
      $185 = $184&65535;
      $k11$06 = 0;$result_node$95 = $result_node$812;
      while(1) {
       $186 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
       HEAP32[$new_node12>>2] = $186;
       $187 = (($174) + ($k11$06<<4)|0);
       __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($165,$187,$new_node12);
       $188 = HEAP32[$new_node12>>2]|0;
       $189 = (($188) + 46|0);
       HEAP8[$189>>0] = $180;
       $190 = HEAP32[$new_node12>>2]|0;
       $191 = (($190) + 24|0);
       HEAP32[$191>>2] = $12;
       $192 = HEAP32[$new_node12>>2]|0;
       $193 = (($192) + 36|0);
       HEAP16[$193>>1] = $183;
       $194 = HEAP32[$new_node12>>2]|0;
       $195 = (($194) + 38|0);
       HEAP16[$195>>1] = $185;
       $196 = HEAP32[$new_node12>>2]|0;
       $197 = (($196) + 47|0);
       HEAP8[$197>>0] = 1;
       $198 = HEAP32[$new_node12>>2]|0;
       $199 = (($198) + 12|0);
       HEAP32[$199>>2] = $result_node$95;
       $200 = (__ZNK5MeCab12scoped_arrayIcE3getEv($167)|0);
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$new_node12>>2]|0;
        $203 = (($202) + 28|0);
        HEAP32[$203>>2] = $200;
       }
       $204 = HEAP32[$new_node12>>2]|0;
       $205 = (($k11$06) + 1)|0;
       $exitcond49 = ($205|0)==($176|0);
       if ($exitcond49) {
        $result_node$9$lcssa = $204;
        break;
       } else {
        $k11$06 = $205;$result_node$95 = $204;
       }
      }
     }
     __ZNK5MeCab12CharProperty11getCharInfoEPKcS2_Pj($2,$9,$begin3$110,$8,$mblen);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     $206 = (__ZNK5MeCab8CharInfo8isKindOfES0_($cinfo,$$byval_copy)|0);
     if (!($206)) {
      $begin3$1$lcssa = $begin3$110;$result_node$11 = $result_node$9$lcssa;
      break L40;
     }
     $207 = HEAP32[$mblen>>2]|0;
     $208 = (($begin3$110) + ($207)|0);
     $begin3$2 = $208;$result_node$10 = $result_node$9$lcssa;
    }
    $209 = (($i8$011) + 1)|0;
    $210 = HEAP32[$cinfo>>2]|0;
    $211 = $210 >>> 26;
    $212 = $211 & 15;
    $213 = ($209>>>0)>($212>>>0);
    $214 = ($begin3$2>>>0)>($8>>>0);
    $or$cond = $213 | $214;
    if ($or$cond) {
     $begin3$1$lcssa = $begin3$2;$result_node$11 = $result_node$10;
     break;
    } else {
     $begin3$110 = $begin3$2;$i8$011 = $209;$result_node$812 = $result_node$10;
    }
   }
  }
 } while(0);
 $215 = ($result_node$11|0)==(0|0);
 if (!($215)) {
  $$0 = $result_node$11;
  STACKTOP = sp;return ($$0|0);
 }
 $216 = HEAP32[$cinfo>>2]|0;
 $217 = $216 >>> 18;
 $218 = $217 & 255;
 $219 = (($this) + 316|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = (($220) + ($218<<3)|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = ((($220) + ($218<<3)|0) + 4|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = ($224|0)==(0);
 if ($225) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $226 = (($this) + 16|0);
 $227 = HEAP32[$cinfo>>2]|0;
 $228 = $227 >>> 18;
 $229 = $228&255;
 $230 = $begin3$1$lcssa;
 $231 = $12;
 $232 = (($230) - ($231))|0;
 $233 = $232&65535;
 $234 = (($230) - ($4))|0;
 $235 = $234&65535;
 $236 = (($this) + 280|0);
 $k15$04 = 0;$result_node$123 = 0;
 while(1) {
  $237 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
  HEAP32[$new_node16>>2] = $237;
  $238 = (($222) + ($k15$04<<4)|0);
  __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($226,$238,$new_node16);
  $239 = HEAP32[$new_node16>>2]|0;
  $240 = (($239) + 46|0);
  HEAP8[$240>>0] = $229;
  $241 = HEAP32[$new_node16>>2]|0;
  $242 = (($241) + 24|0);
  HEAP32[$242>>2] = $12;
  $243 = HEAP32[$new_node16>>2]|0;
  $244 = (($243) + 36|0);
  HEAP16[$244>>1] = $233;
  $245 = HEAP32[$new_node16>>2]|0;
  $246 = (($245) + 38|0);
  HEAP16[$246>>1] = $235;
  $247 = HEAP32[$new_node16>>2]|0;
  $248 = (($247) + 47|0);
  HEAP8[$248>>0] = 1;
  $249 = HEAP32[$new_node16>>2]|0;
  $250 = (($249) + 12|0);
  HEAP32[$250>>2] = $result_node$123;
  $251 = (__ZNK5MeCab12scoped_arrayIcE3getEv($236)|0);
  $252 = ($251|0)==(0|0);
  if (!($252)) {
   $253 = HEAP32[$new_node16>>2]|0;
   $254 = (($253) + 28|0);
   HEAP32[$254>>2] = $251;
  }
  $255 = HEAP32[$new_node16>>2]|0;
  $256 = (($k15$04) + 1)|0;
  $exitcond = ($256|0)==($224|0);
  if ($exitcond) {
   $$0 = $255;
   break;
  } else {
   $k15$04 = $256;$result_node$123 = $255;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab12CharProperty15seekToOtherTypeEPKcS2_NS_8CharInfoEPS3_PjS5_($this,$begin,$end,$c,$fail,$mblen,$clen) {
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 $c = $c|0;
 $fail = $fail|0;
 $mblen = $mblen|0;
 $clen = $clen|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$lcssa = 0, $p$02 = 0, $tmpcast1$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast1$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$clen>>2] = 0;
 $2 = ($begin|0)==($end|0);
 if ($2) {
  $p$0$lcssa = $begin;
  STACKTOP = sp;return ($p$0$lcssa|0);
 }
 $p$02 = $begin;
 while(1) {
  __ZNK5MeCab12CharProperty11getCharInfoEPKcS2_Pj($1,$this,$p$02,$end,$mblen);
  $3 = HEAP32[$1>>2]|0;
  HEAP32[$fail>>2] = $3;
  HEAP32[$0>>2] = $3;
  ;HEAP32[$tmpcast1$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  $4 = (__ZNK5MeCab8CharInfo8isKindOfES0_($c,$tmpcast1$byval_copy)|0);
  if (!($4)) {
   $p$0$lcssa = $p$02;
   label = 5;
   break;
  }
  $5 = HEAP32[$mblen>>2]|0;
  $6 = (($p$02) + ($5)|0);
  $7 = HEAP32[$clen>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$clen>>2] = $8;
  $9 = HEAP32[$fail>>2]|0;
  HEAP32[$c>>2] = $9;
  $10 = ($6|0)==($end|0);
  if ($10) {
   $p$0$lcssa = $6;
   label = 5;
   break;
  } else {
   $p$02 = $6;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($p$0$lcssa|0);
 }
 return 0|0;
}
function __ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE15mutable_resultsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 52|0);
 $1 = (__ZNK5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEE3getEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary18commonPrefixSearchEPKcjPNS_5Darts15DoubleArrayImplIchijNS3_6LengthIcEEE16result_pair_typeEj($this,$key,$len,$result,$rlen) {
 $this = $this|0;
 $key = $key|0;
 $len = $len|0;
 $result = $result|0;
 $rlen = $rlen|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 204|0);
 $1 = (__ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE18commonPrefixSearchINS4_16result_pair_typeEEEjPKcPT_jjj($0,$key,$result,$rlen,$len,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary10token_sizeERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$n>>2]|0;
 $1 = $0 & 255;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary5tokenERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$n>>2]|0;
 $3 = $2 >> 8;
 $4 = (($1) + ($3<<4)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($dic,$token,$node) {
 $dic = $dic|0;
 $token = $token|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$token>>1]|0;
 $1 = HEAP32[$node>>2]|0;
 $2 = (($1) + 42|0);
 HEAP16[$2>>1] = $0;
 $3 = (($token) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = HEAP32[$node>>2]|0;
 $6 = (($5) + 40|0);
 HEAP16[$6>>1] = $4;
 $7 = (($token) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = HEAP32[$node>>2]|0;
 $10 = (($9) + 44|0);
 HEAP16[$10>>1] = $8;
 $11 = (($token) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = HEAP32[$node>>2]|0;
 $14 = (($13) + 64|0);
 HEAP16[$14>>1] = $12;
 $15 = (__ZNK5MeCab10Dictionary7featureERKNS_5TokenE($dic,$token)|0);
 $16 = HEAP32[$node>>2]|0;
 $17 = (($16) + 28|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNK5MeCab8CharInfo8isKindOfES0_($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$c>>2]|0;
 $2 = $0 & 262143;
 $3 = $2 & $1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK5MeCab9TokenizerI12mecab_node_t12mecab_path_tE6lookupILb1EEEPS1_PKcS7_PNS_9AllocatorIS1_S2_EEPNS_7LatticeE($this,$begin,$end,$allocator,$lattice) {
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 $allocator = $allocator|0;
 $lattice = $lattice|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$result_node$12 = 0, $$result_node$16 = 0, $$result_node$19 = 0, $$result_node$4 = 0, $$result_node$7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $begin3$1$lcssa = 0, $begin3$122 = 0, $begin3$2 = 0, $begin3$3 = 0, $cinfo = 0, $clen = 0, $exitcond = 0, $exitcond60 = 0, $exitcond61 = 0, $exitcond63 = 0;
 var $exitcond64 = 0, $exitcond65 = 0, $exitcond66 = 0, $fail = 0, $group_begin3$0 = 0, $i$047 = 0, $i9$021 = 0, $j$041 = 0, $k$035 = 0, $k12$014 = 0, $k16$08 = 0, $k20$06 = 0, $k7$030 = 0, $mblen = 0, $n$0 = 0, $n$0$in = 0, $new_node = 0, $new_node13 = 0, $new_node17 = 0, $new_node21 = 0;
 var $new_node4 = 0, $new_node8 = 0, $or$cond = 0, $or$cond20 = 0, $result_node$0$lcssa69 = 0, $result_node$053 = 0, $result_node$1$lcssa = 0, $result_node$10 = 0, $result_node$1123 = 0, $result_node$12$lcssa = 0, $result_node$1215 = 0, $result_node$14 = 0, $result_node$148 = 0, $result_node$15 = 0, $result_node$169 = 0, $result_node$19$lcssa = 0, $result_node$197 = 0, $result_node$2$lcssa = 0, $result_node$242 = 0, $result_node$3 = 0;
 var $result_node$4$lcssa = 0, $result_node$436 = 0, $result_node$6 = 0, $result_node$731 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp + 52|0;
 $cinfo = sp + 48|0;
 $mblen = sp + 44|0;
 $clen = sp + 40|0;
 $0 = sp + 36|0;
 $new_node = sp + 32|0;
 $new_node4 = sp + 28|0;
 $fail = sp + 24|0;
 $1 = sp + 20|0;
 $new_node8 = sp + 16|0;
 $new_node13 = sp + 12|0;
 $2 = sp + 8|0;
 $new_node17 = sp + 4|0;
 $new_node21 = sp;
 $3 = sp + 56|0;
 __ZN5MeCab8CharInfoC1Ev($cinfo);
 HEAP32[$mblen>>2] = 0;
 HEAP32[$clen>>2] = 0;
 $4 = $end;
 $5 = $begin;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>(65534);
 $8 = (($begin) + 65535|0);
 $9 = $7 ? $8 : $end;
 $10 = HEAP32[$lattice>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($lattice)|0);
 $14 = $13;
 $15 = (($5) - ($14))|0;
 $n$0$in = $15;
 while(1) {
  $n$0 = (($n$0$in) + 1)|0;
  $16 = HEAP32[$lattice>>2]|0;
  $17 = (($16) + 44|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_ii[$18 & 127]($lattice)|0);
  $20 = ($n$0>>>0)<($19>>>0);
  if (!($20)) {
   $$01 = $9;
   break;
  }
  $21 = HEAP32[$lattice>>2]|0;
  $22 = (($21) + 124|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 31]($lattice,$n$0)|0);
  $25 = ($24|0)==(1);
  if ($25) {
   label = 4;
   break;
  } else {
   $n$0$in = $n$0;
  }
 }
 if ((label|0) == 4) {
  $26 = HEAP32[$lattice>>2]|0;
  $27 = (($26) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_ii[$28 & 127]($lattice)|0);
  $30 = (($29) + ($n$0)|0);
  $$01 = $30;
 }
 $31 = (($this) + 336|0);
 $32 = (($this) + 332|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$0>>2] = $33;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $34 = (__ZNK5MeCab12CharProperty15seekToOtherTypeEPKcS2_NS_8CharInfoEPS3_PjS5_($31,$begin,$$01,$$byval_copy,$cinfo,$mblen,$clen)|0);
 $35 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE15mutable_resultsEv($allocator)|0);
 $36 = (($this) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37|0)==($39|0);
 if ($40) {
  $result_node$0$lcssa69 = 0;
 } else {
  $41 = $$01;
  $42 = $34;
  $43 = (($41) - ($42))|0;
  $44 = (($42) - ($5))|0;
  $46 = $37;$result_node$053 = 0;
  while(1) {
   $45 = HEAP32[$46>>2]|0;
   $47 = (__ZNK5MeCab10Dictionary18commonPrefixSearchEPKcjPNS_5Darts15DoubleArrayImplIchijNS3_6LengthIcEEE16result_pair_typeEj($45,$34,$43,$35,512)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $result_node$1$lcssa = $result_node$053;
   } else {
    $i$047 = 0;$result_node$148 = $result_node$053;
    while(1) {
     $49 = (($35) + ($i$047<<3)|0);
     $50 = (__ZNK5MeCab10Dictionary10token_sizeERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE(0,$49)|0);
     $51 = HEAP32[$46>>2]|0;
     $52 = (__ZNK5MeCab10Dictionary5tokenERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE($51,$49)|0);
     $53 = ($50|0)==(0);
     if ($53) {
      $result_node$2$lcssa = $result_node$148;
     } else {
      $54 = ((($35) + ($i$047<<3)|0) + 4|0);
      $j$041 = 0;$result_node$242 = $result_node$148;
      while(1) {
       $55 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
       HEAP32[$new_node>>2] = $55;
       $56 = HEAP32[$46>>2]|0;
       $57 = (($52) + ($j$041<<4)|0);
       __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($56,$57,$new_node);
       $58 = HEAP32[$54>>2]|0;
       $59 = $58&65535;
       $60 = HEAP32[$new_node>>2]|0;
       $61 = (($60) + 36|0);
       HEAP16[$61>>1] = $59;
       $62 = HEAP32[$new_node>>2]|0;
       $63 = (($62) + 36|0);
       $64 = HEAP16[$63>>1]|0;
       $65 = $64&65535;
       $66 = (($44) + ($65))|0;
       $67 = $66&65535;
       $68 = (($62) + 38|0);
       HEAP16[$68>>1] = $67;
       $69 = HEAP32[$new_node>>2]|0;
       $70 = (($69) + 24|0);
       HEAP32[$70>>2] = $34;
       $71 = HEAP32[$new_node>>2]|0;
       $72 = (($71) + 47|0);
       HEAP8[$72>>0] = 0;
       $73 = HEAP32[$cinfo>>2]|0;
       $74 = $73 >>> 18;
       $75 = $74&255;
       $76 = HEAP32[$new_node>>2]|0;
       $77 = (($76) + 46|0);
       HEAP8[$77>>0] = $75;
       $78 = HEAP32[$new_node>>2]|0;
       $79 = (__ZN5MeCab12_GLOBAL__N_113is_valid_nodeI12mecab_node_tEEbPKNS_7LatticeEPT_($lattice,$78)|0);
       if ($79) {
        $80 = HEAP32[$new_node>>2]|0;
        $81 = (($80) + 12|0);
        HEAP32[$81>>2] = $result_node$242;
        $82 = HEAP32[$new_node>>2]|0;
        $result_node$3 = $82;
       } else {
        $result_node$3 = $result_node$242;
       }
       $83 = (($j$041) + 1)|0;
       $exitcond65 = ($83|0)==($50|0);
       if ($exitcond65) {
        $result_node$2$lcssa = $result_node$3;
        break;
       } else {
        $j$041 = $83;$result_node$242 = $result_node$3;
       }
      }
     }
     $84 = (($i$047) + 1)|0;
     $exitcond66 = ($84|0)==($47|0);
     if ($exitcond66) {
      $result_node$1$lcssa = $result_node$2$lcssa;
      break;
     } else {
      $i$047 = $84;$result_node$148 = $result_node$2$lcssa;
     }
    }
   }
   $85 = (($46) + 4|0);
   $86 = HEAP32[$38>>2]|0;
   $87 = ($85|0)==($86|0);
   if ($87) {
    break;
   } else {
    $46 = $85;$result_node$053 = $result_node$1$lcssa;
   }
  }
  $88 = ($result_node$1$lcssa|0)==(0|0);
  if ($88) {
   $result_node$0$lcssa69 = 0;
  } else {
   $89 = HEAP32[$cinfo>>2]|0;
   $90 = ($89|0)<(0);
   if ($90) {
    $result_node$0$lcssa69 = $result_node$1$lcssa;
   } else {
    $$0 = $result_node$1$lcssa;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $91 = HEAP32[$mblen>>2]|0;
 $92 = (($34) + ($91)|0);
 $93 = ($92>>>0)>($$01>>>0);
 if ($93) {
  $94 = HEAP32[$cinfo>>2]|0;
  $95 = $94 >>> 18;
  $96 = $95 & 255;
  $97 = (($this) + 316|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($96<<3)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($98) + ($96<<3)|0) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0);
  if ($103) {
   $result_node$4$lcssa = $result_node$0$lcssa69;
  } else {
   $104 = (($this) + 16|0);
   $105 = HEAP32[$cinfo>>2]|0;
   $106 = $105 >>> 18;
   $107 = $106&255;
   $108 = $92;
   $109 = $91&65535;
   $110 = (($108) - ($5))|0;
   $111 = $110&65535;
   $112 = (($this) + 280|0);
   $k$035 = 0;$result_node$436 = $result_node$0$lcssa69;
   while(1) {
    $113 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
    HEAP32[$new_node4>>2] = $113;
    $114 = (($100) + ($k$035<<4)|0);
    __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($104,$114,$new_node4);
    $115 = HEAP32[$new_node4>>2]|0;
    $116 = (($115) + 46|0);
    HEAP8[$116>>0] = $107;
    $117 = HEAP32[$new_node4>>2]|0;
    $118 = (($117) + 24|0);
    HEAP32[$118>>2] = $34;
    $119 = HEAP32[$new_node4>>2]|0;
    $120 = (($119) + 36|0);
    HEAP16[$120>>1] = $109;
    $121 = HEAP32[$new_node4>>2]|0;
    $122 = (($121) + 38|0);
    HEAP16[$122>>1] = $111;
    $123 = HEAP32[$new_node4>>2]|0;
    $124 = (($123) + 47|0);
    HEAP8[$124>>0] = 1;
    $125 = HEAP32[$new_node4>>2]|0;
    $126 = (($125) + 12|0);
    HEAP32[$126>>2] = $result_node$436;
    $127 = (__ZNK5MeCab12scoped_arrayIcE3getEv($112)|0);
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = HEAP32[$new_node4>>2]|0;
     $130 = (($129) + 28|0);
     HEAP32[$130>>2] = $127;
    }
    $131 = HEAP32[$new_node4>>2]|0;
    $132 = (__ZN5MeCab12_GLOBAL__N_113is_valid_nodeI12mecab_node_tEEbPKNS_7LatticeEPT_($lattice,$131)|0);
    $133 = HEAP32[$new_node4>>2]|0;
    $$result_node$4 = $132 ? $133 : $result_node$436;
    $134 = (($k$035) + 1)|0;
    $exitcond64 = ($134|0)==($102|0);
    if ($exitcond64) {
     $result_node$4$lcssa = $$result_node$4;
     break;
    } else {
     $k$035 = $134;$result_node$436 = $$result_node$4;
    }
   }
  }
  $135 = ($result_node$4$lcssa|0)==(0|0);
  if ($135) {
   $result_node$6 = 0;
  } else {
   $$0 = $result_node$4$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $result_node$6 = $result_node$0$lcssa69;
 }
 $136 = HEAP32[$cinfo>>2]|0;
 $137 = $136 & 1073741824;
 $138 = ($137|0)==(0);
 if ($138) {
  $group_begin3$0 = 0;$result_node$10 = $result_node$6;
 } else {
  __ZN5MeCab8CharInfoC1Ev($fail);
  $139 = HEAP32[$cinfo>>2]|0;
  HEAP32[$1>>2] = $139;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  $140 = (__ZNK5MeCab12CharProperty15seekToOtherTypeEPKcS2_NS_8CharInfoEPS3_PjS5_($31,$92,$$01,$$byval_copy,$fail,$mblen,$clen)|0);
  $141 = HEAP32[$clen>>2]|0;
  $142 = (($this) + 516|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($141>>>0)>($143>>>0);
  if ($144) {
   $group_begin3$0 = $140;$result_node$10 = $result_node$6;
  } else {
   $145 = HEAP32[$cinfo>>2]|0;
   $146 = $145 >>> 18;
   $147 = $146 & 255;
   $148 = (($this) + 316|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + ($147<<3)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ((($149) + ($147<<3)|0) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)==(0);
   if ($154) {
    $group_begin3$0 = $140;$result_node$10 = $result_node$6;
   } else {
    $155 = (($this) + 16|0);
    $156 = HEAP32[$cinfo>>2]|0;
    $157 = $156 >>> 18;
    $158 = $157&255;
    $159 = $140;
    $160 = $34;
    $161 = (($159) - ($160))|0;
    $162 = $161&65535;
    $163 = (($159) - ($5))|0;
    $164 = $163&65535;
    $165 = (($this) + 280|0);
    $k7$030 = 0;$result_node$731 = $result_node$6;
    while(1) {
     $166 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
     HEAP32[$new_node8>>2] = $166;
     $167 = (($151) + ($k7$030<<4)|0);
     __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($155,$167,$new_node8);
     $168 = HEAP32[$new_node8>>2]|0;
     $169 = (($168) + 46|0);
     HEAP8[$169>>0] = $158;
     $170 = HEAP32[$new_node8>>2]|0;
     $171 = (($170) + 24|0);
     HEAP32[$171>>2] = $34;
     $172 = HEAP32[$new_node8>>2]|0;
     $173 = (($172) + 36|0);
     HEAP16[$173>>1] = $162;
     $174 = HEAP32[$new_node8>>2]|0;
     $175 = (($174) + 38|0);
     HEAP16[$175>>1] = $164;
     $176 = HEAP32[$new_node8>>2]|0;
     $177 = (($176) + 47|0);
     HEAP8[$177>>0] = 1;
     $178 = HEAP32[$new_node8>>2]|0;
     $179 = (($178) + 12|0);
     HEAP32[$179>>2] = $result_node$731;
     $180 = (__ZNK5MeCab12scoped_arrayIcE3getEv($165)|0);
     $181 = ($180|0)==(0|0);
     if (!($181)) {
      $182 = HEAP32[$new_node8>>2]|0;
      $183 = (($182) + 28|0);
      HEAP32[$183>>2] = $180;
     }
     $184 = HEAP32[$new_node8>>2]|0;
     $185 = (__ZN5MeCab12_GLOBAL__N_113is_valid_nodeI12mecab_node_tEEbPKNS_7LatticeEPT_($lattice,$184)|0);
     $186 = HEAP32[$new_node8>>2]|0;
     $$result_node$7 = $185 ? $186 : $result_node$731;
     $187 = (($k7$030) + 1)|0;
     $exitcond63 = ($187|0)==($153|0);
     if ($exitcond63) {
      $group_begin3$0 = $140;$result_node$10 = $$result_node$7;
      break;
     } else {
      $k7$030 = $187;$result_node$731 = $$result_node$7;
     }
    }
   }
  }
 }
 $188 = HEAP32[$cinfo>>2]|0;
 $189 = $188 & 1006632960;
 $190 = ($189|0)==(0);
 $191 = ($92>>>0)>($$01>>>0);
 $or$cond20 = $190 | $191;
 L49: do {
  if ($or$cond20) {
   $begin3$1$lcssa = $92;$result_node$15 = $result_node$10;
  } else {
   $192 = (($this) + 316|0);
   $193 = (($this) + 16|0);
   $194 = $34;
   $195 = (($this) + 280|0);
   $begin3$122 = $92;$i9$021 = 1;$result_node$1123 = $result_node$10;
   while(1) {
    $196 = ($begin3$122|0)==($group_begin3$0|0);
    if ($196) {
     $begin3$2 = $begin3$122;$result_node$14 = $result_node$1123;
    } else {
     HEAP32[$clen>>2] = $i9$021;
     $197 = HEAP32[$cinfo>>2]|0;
     $198 = $197 >>> 18;
     $199 = $198 & 255;
     $200 = HEAP32[$192>>2]|0;
     $201 = (($200) + ($199<<3)|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ((($200) + ($199<<3)|0) + 4|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0);
     if ($205) {
      $result_node$12$lcssa = $result_node$1123;
     } else {
      $206 = HEAP32[$cinfo>>2]|0;
      $207 = $206 >>> 18;
      $208 = $207&255;
      $209 = $begin3$122;
      $210 = (($209) - ($194))|0;
      $211 = $210&65535;
      $212 = (($209) - ($5))|0;
      $213 = $212&65535;
      $k12$014 = 0;$result_node$1215 = $result_node$1123;
      while(1) {
       $214 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
       HEAP32[$new_node13>>2] = $214;
       $215 = (($202) + ($k12$014<<4)|0);
       __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($193,$215,$new_node13);
       $216 = HEAP32[$new_node13>>2]|0;
       $217 = (($216) + 46|0);
       HEAP8[$217>>0] = $208;
       $218 = HEAP32[$new_node13>>2]|0;
       $219 = (($218) + 24|0);
       HEAP32[$219>>2] = $34;
       $220 = HEAP32[$new_node13>>2]|0;
       $221 = (($220) + 36|0);
       HEAP16[$221>>1] = $211;
       $222 = HEAP32[$new_node13>>2]|0;
       $223 = (($222) + 38|0);
       HEAP16[$223>>1] = $213;
       $224 = HEAP32[$new_node13>>2]|0;
       $225 = (($224) + 47|0);
       HEAP8[$225>>0] = 1;
       $226 = HEAP32[$new_node13>>2]|0;
       $227 = (($226) + 12|0);
       HEAP32[$227>>2] = $result_node$1215;
       $228 = (__ZNK5MeCab12scoped_arrayIcE3getEv($195)|0);
       $229 = ($228|0)==(0|0);
       if (!($229)) {
        $230 = HEAP32[$new_node13>>2]|0;
        $231 = (($230) + 28|0);
        HEAP32[$231>>2] = $228;
       }
       $232 = HEAP32[$new_node13>>2]|0;
       $233 = (__ZN5MeCab12_GLOBAL__N_113is_valid_nodeI12mecab_node_tEEbPKNS_7LatticeEPT_($lattice,$232)|0);
       $234 = HEAP32[$new_node13>>2]|0;
       $$result_node$12 = $233 ? $234 : $result_node$1215;
       $235 = (($k12$014) + 1)|0;
       $exitcond61 = ($235|0)==($204|0);
       if ($exitcond61) {
        $result_node$12$lcssa = $$result_node$12;
        break;
       } else {
        $k12$014 = $235;$result_node$1215 = $$result_node$12;
       }
      }
     }
     __ZNK5MeCab12CharProperty11getCharInfoEPKcS2_Pj($2,$31,$begin3$122,$$01,$mblen);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     $236 = (__ZNK5MeCab8CharInfo8isKindOfES0_($cinfo,$$byval_copy)|0);
     if (!($236)) {
      $begin3$1$lcssa = $begin3$122;$result_node$15 = $result_node$12$lcssa;
      break L49;
     }
     $237 = HEAP32[$mblen>>2]|0;
     $238 = (($begin3$122) + ($237)|0);
     $begin3$2 = $238;$result_node$14 = $result_node$12$lcssa;
    }
    $239 = (($i9$021) + 1)|0;
    $240 = HEAP32[$cinfo>>2]|0;
    $241 = $240 >>> 26;
    $242 = $241 & 15;
    $243 = ($239>>>0)>($242>>>0);
    $244 = ($begin3$2>>>0)>($$01>>>0);
    $or$cond = $243 | $244;
    if ($or$cond) {
     $begin3$1$lcssa = $begin3$2;$result_node$15 = $result_node$14;
     break;
    } else {
     $begin3$122 = $begin3$2;$i9$021 = $239;$result_node$1123 = $result_node$14;
    }
   }
  }
 } while(0);
 $245 = ($result_node$15|0)==(0|0);
 if (!($245)) {
  $$0 = $result_node$15;
  STACKTOP = sp;return ($$0|0);
 }
 $246 = HEAP32[$cinfo>>2]|0;
 $247 = $246 >>> 18;
 $248 = $247 & 255;
 $249 = (($this) + 316|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($250) + ($248<<3)|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = ((($250) + ($248<<3)|0) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($254|0)==(0);
 if (!($255)) {
  $256 = (($this) + 16|0);
  $257 = HEAP32[$cinfo>>2]|0;
  $258 = $257 >>> 18;
  $259 = $258&255;
  $260 = $begin3$1$lcssa;
  $261 = $34;
  $262 = (($260) - ($261))|0;
  $263 = $262&65535;
  $264 = (($260) - ($5))|0;
  $265 = $264&65535;
  $266 = (($this) + 280|0);
  $k16$08 = 0;$result_node$169 = 0;
  while(1) {
   $267 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
   HEAP32[$new_node17>>2] = $267;
   $268 = (($252) + ($k16$08<<4)|0);
   __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($256,$268,$new_node17);
   $269 = HEAP32[$new_node17>>2]|0;
   $270 = (($269) + 46|0);
   HEAP8[$270>>0] = $259;
   $271 = HEAP32[$new_node17>>2]|0;
   $272 = (($271) + 24|0);
   HEAP32[$272>>2] = $34;
   $273 = HEAP32[$new_node17>>2]|0;
   $274 = (($273) + 36|0);
   HEAP16[$274>>1] = $263;
   $275 = HEAP32[$new_node17>>2]|0;
   $276 = (($275) + 38|0);
   HEAP16[$276>>1] = $265;
   $277 = HEAP32[$new_node17>>2]|0;
   $278 = (($277) + 47|0);
   HEAP8[$278>>0] = 1;
   $279 = HEAP32[$new_node17>>2]|0;
   $280 = (($279) + 12|0);
   HEAP32[$280>>2] = $result_node$169;
   $281 = (__ZNK5MeCab12scoped_arrayIcE3getEv($266)|0);
   $282 = ($281|0)==(0|0);
   if (!($282)) {
    $283 = HEAP32[$new_node17>>2]|0;
    $284 = (($283) + 28|0);
    HEAP32[$284>>2] = $281;
   }
   $285 = HEAP32[$new_node17>>2]|0;
   $286 = (__ZN5MeCab12_GLOBAL__N_113is_valid_nodeI12mecab_node_tEEbPKNS_7LatticeEPT_($lattice,$285)|0);
   $287 = HEAP32[$new_node17>>2]|0;
   $$result_node$16 = $286 ? $287 : $result_node$169;
   $288 = (($k16$08) + 1)|0;
   $exitcond60 = ($288|0)==($254|0);
   if ($exitcond60) {
    break;
   } else {
    $k16$08 = $288;$result_node$169 = $$result_node$16;
   }
  }
  $289 = ($$result_node$16|0)==(0|0);
  if (!($289)) {
   $$0 = $$result_node$16;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $begin3$3 = $34;
 while(1) {
  __ZNK5MeCab12CharProperty11getCharInfoEPKcS2_Pj($cinfo,$31,$begin3$3,$$01,$mblen);
  $290 = HEAP32[$mblen>>2]|0;
  $291 = (($begin3$3) + ($290)|0);
  $292 = ($291>>>0)>($$01>>>0);
  if ($292) {
   break;
  }
  $293 = HEAP32[$lattice>>2]|0;
  $294 = (($293) + 124|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = HEAP32[$lattice>>2]|0;
  $297 = (($296) + 32|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = (FUNCTION_TABLE_ii[$298 & 127]($lattice)|0);
  $300 = $291;
  $301 = $299;
  $302 = (($300) - ($301))|0;
  $303 = (FUNCTION_TABLE_iii[$295 & 31]($lattice,$302)|0);
  $304 = ($303|0)==(2);
  if ($304) {
   $begin3$3 = $291;
  } else {
   break;
  }
 }
 $305 = HEAP32[$cinfo>>2]|0;
 $306 = $305 >>> 18;
 $307 = $306 & 255;
 $308 = (($this) + 316|0);
 $309 = HEAP32[$308>>2]|0;
 $310 = (($309) + ($307<<3)|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = ((($309) + ($307<<3)|0) + 4|0);
 $313 = HEAP32[$312>>2]|0;
 $314 = ($313|0)==(0);
 if ($314) {
  $result_node$19$lcssa = 0;
 } else {
  $315 = (($this) + 16|0);
  $316 = HEAP32[$cinfo>>2]|0;
  $317 = $316 >>> 18;
  $318 = $317&255;
  $319 = $291;
  $320 = $34;
  $321 = (($319) - ($320))|0;
  $322 = $321&65535;
  $323 = (($319) - ($5))|0;
  $324 = $323&65535;
  $325 = (($this) + 280|0);
  $k20$06 = 0;$result_node$197 = 0;
  while(1) {
   $326 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
   HEAP32[$new_node21>>2] = $326;
   $327 = (($311) + ($k20$06<<4)|0);
   __ZN5MeCab12_GLOBAL__N_114read_node_infoERKNS_10DictionaryERKNS_5TokenEPP12mecab_node_t($315,$327,$new_node21);
   $328 = HEAP32[$new_node21>>2]|0;
   $329 = (($328) + 46|0);
   HEAP8[$329>>0] = $318;
   $330 = HEAP32[$new_node21>>2]|0;
   $331 = (($330) + 24|0);
   HEAP32[$331>>2] = $34;
   $332 = HEAP32[$new_node21>>2]|0;
   $333 = (($332) + 36|0);
   HEAP16[$333>>1] = $322;
   $334 = HEAP32[$new_node21>>2]|0;
   $335 = (($334) + 38|0);
   HEAP16[$335>>1] = $324;
   $336 = HEAP32[$new_node21>>2]|0;
   $337 = (($336) + 47|0);
   HEAP8[$337>>0] = 1;
   $338 = HEAP32[$new_node21>>2]|0;
   $339 = (($338) + 12|0);
   HEAP32[$339>>2] = $result_node$197;
   $340 = (__ZNK5MeCab12scoped_arrayIcE3getEv($325)|0);
   $341 = ($340|0)==(0|0);
   if (!($341)) {
    $342 = HEAP32[$new_node21>>2]|0;
    $343 = (($342) + 28|0);
    HEAP32[$343>>2] = $340;
   }
   $344 = HEAP32[$new_node21>>2]|0;
   $345 = (__ZN5MeCab12_GLOBAL__N_113is_valid_nodeI12mecab_node_tEEbPKNS_7LatticeEPT_($lattice,$344)|0);
   $346 = HEAP32[$new_node21>>2]|0;
   $$result_node$19 = $345 ? $346 : $result_node$197;
   $347 = (($k20$06) + 1)|0;
   $exitcond = ($347|0)==($313|0);
   if ($exitcond) {
    $result_node$19$lcssa = $$result_node$19;
    break;
   } else {
    $k20$06 = $347;$result_node$197 = $$result_node$19;
   }
  }
 }
 $348 = ($result_node$19$lcssa|0)==(0|0);
 if (!($348)) {
  $$0 = $result_node$19$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 $349 = (__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tE7newNodeEv($allocator)|0);
 $350 = HEAP32[$cinfo>>2]|0;
 $351 = $350 >>> 18;
 $352 = $351&255;
 $353 = (($349) + 46|0);
 HEAP8[$353>>0] = $352;
 $354 = (($349) + 24|0);
 HEAP32[$354>>2] = $34;
 $355 = $291;
 $356 = $34;
 $357 = (($355) - ($356))|0;
 $358 = $357&65535;
 $359 = (($349) + 36|0);
 HEAP16[$359>>1] = $358;
 $360 = (($355) - ($5))|0;
 $361 = $360&65535;
 $362 = (($349) + 38|0);
 HEAP16[$362>>1] = $361;
 $363 = (($349) + 47|0);
 HEAP8[$363>>0] = 1;
 $364 = (($349) + 12|0);
 HEAP32[$364>>2] = $result_node$19$lcssa;
 $365 = HEAP32[$lattice>>2]|0;
 $366 = (($365) + 128|0);
 $367 = HEAP32[$366>>2]|0;
 $368 = HEAP32[$lattice>>2]|0;
 $369 = (($368) + 32|0);
 $370 = HEAP32[$369>>2]|0;
 $371 = (FUNCTION_TABLE_ii[$370 & 127]($lattice)|0);
 $372 = $371;
 $373 = (($5) - ($372))|0;
 $374 = (FUNCTION_TABLE_iii[$367 & 31]($lattice,$373)|0);
 $375 = (($349) + 28|0);
 HEAP32[$375>>2] = $374;
 $376 = ($374|0)==(0|0);
 if ($376) {
  $377 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(405088,403480)|0);
  $378 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($377,403496)|0);
  $379 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($378,368)|0);
  $380 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($379,403504)|0);
  $381 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($380,403512)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($381,403536)|0);
  __ZN5MeCab3dieD1Ev($3);
  // unreachable;
 } else {
  $$0 = $349;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN5MeCab12_GLOBAL__N_113is_valid_nodeI12mecab_node_tEEbPKNS_7LatticeEPT_($lattice,$node) {
 $lattice = $lattice|0;
 $node = $node|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($node) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$lattice>>2]|0;
 $3 = (($2) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($lattice)|0);
 $6 = $1;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = (($node) + 36|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($8) + ($11))|0;
 $13 = HEAP32[$lattice>>2]|0;
 $14 = (($13) + 124|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iii[$15 & 31]($lattice,$12)|0);
 $17 = ($16|0)==(2);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$lattice>>2]|0;
 $20 = (($19) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 127]($lattice)|0);
 $23 = $18;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = HEAP16[$9>>1]|0;
 $27 = $26&65535;
 $28 = (($25) + ($27))|0;
 $29 = (($node) + 38|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = (($28) - ($31))|0;
 $33 = HEAP32[$lattice>>2]|0;
 $34 = (($33) + 128|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_iii[$35 & 31]($lattice,$32)|0);
 $37 = ($36|0)==(0|0);
 if ($37) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = HEAP32[$lattice>>2]|0;
 $39 = (($38) + 124|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (FUNCTION_TABLE_iii[$40 & 31]($lattice,$32)|0);
 $42 = ($41|0)==(1);
 if ($42) {
  $43 = HEAP32[$lattice>>2]|0;
  $44 = (($43) + 124|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_iii[$45 & 31]($lattice,$12)|0);
  $47 = ($46|0)==(1);
  if ($47) {
   $48 = (($node) + 28|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (__ZN5MeCab12_GLOBAL__N_113partial_matchEPKcS2_($36,$49)|0);
   if ($50) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tE4openERKNS_5ParamE($this,$param) {
 $this = $this|0;
 $param = $param|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $buf = 0, $d = 0, $dicfile = 0, $i$041 = 0, $i1$0 = 0, $i1$026 = 0, $i1$027 = 0;
 var $i3$0 = 0, $n4 = 0, $prefix = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $sysdic = 0, $tmp = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, $userdic = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $prefix = sp + 176|0;
 $0 = sp + 164|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $sysdic = sp + 140|0;
 $4 = sp + 128|0;
 $5 = sp + 116|0;
 $6 = sp + 112|0;
 $7 = sp + 108|0;
 $userdic = sp + 96|0;
 $buf = sp + 84|0;
 $dicfile = sp + 72|0;
 $d = sp + 68|0;
 $8 = sp + 64|0;
 $9 = sp + 60|0;
 $10 = sp + 56|0;
 $n4 = sp + 48|0;
 $11 = sp + 40|0;
 $12 = sp;
 $13 = sp + 36|0;
 $14 = sp + 24|0;
 $tmp = sp + 12|0;
 $15 = sp + 8|0;
 __ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tE5closeEv($this);
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($prefix,$param,403544);
 $16 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,403552,7);
 __ZN5MeCab15create_filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($0,$prefix,$1);
 $17 = HEAP8[$0>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($0) + 1|0);
  $23 = $22;
 } else {
  $20 = (($0) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $23 = $21;
 }
 $24 = (__ZN5MeCab10Dictionary4openEPKcS2_($16,$23,403560)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 if (!($24)) {
  $25 = (($this) + 520|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$25);
  $26 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25,403480)|0);
  $27 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($26,403496)|0);
  $28 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($27,103)|0);
  $29 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($28,403504)|0);
  $30 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($29,403568)|0);
  $31 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($30,403536)|0);
  $32 = (__ZN5MeCab10Dictionary4whatEv($16)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($31,$32)|0);
  $$3 = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($prefix);
  STACKTOP = sp;return ($$3|0);
 }
 $33 = (($this) + 336|0);
 $34 = (__ZN5MeCab12CharProperty4openERKNS_5ParamE($33,$param)|0);
 if (!($34)) {
  $35 = (($this) + 520|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($3,$35);
  $36 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($35,403480)|0);
  $37 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,403496)|0);
  $38 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($37,105)|0);
  $39 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($38,403504)|0);
  $40 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($39,403632)|0);
  $41 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($40,403536)|0);
  $42 = (__ZN5MeCab12CharProperty4whatEv($33)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($41,$42)|0);
  $$3 = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($prefix);
  STACKTOP = sp;return ($$3|0);
 }
 $43 = (__Znwj(256)|0);
 __ZN5MeCab10DictionaryC1Ev($43);
 HEAP32[$sysdic>>2] = $43;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5,403656,7);
 __ZN5MeCab15create_filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($4,$prefix,$5);
 $44 = HEAP8[$4>>0]|0;
 $45 = $44 & 1;
 $46 = ($45<<24>>24)==(0);
 if ($46) {
  $49 = (($4) + 1|0);
  $50 = $49;
 } else {
  $47 = (($4) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $50 = $48;
 }
 $51 = (__ZN5MeCab10Dictionary4openEPKcS2_($43,$50,403560)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 if (!($51)) {
  $52 = (($this) + 520|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($6,$52);
  $53 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($52,403480)|0);
  $54 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($53,403496)|0);
  $55 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($54,110)|0);
  $56 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($55,403504)|0);
  $57 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($56,403664)|0);
  $58 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($57,403536)|0);
  $59 = HEAP32[$sysdic>>2]|0;
  $60 = (__ZN5MeCab10Dictionary4whatEv($59)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($58,$60)|0);
  $$3 = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($prefix);
  STACKTOP = sp;return ($$3|0);
 }
 $61 = HEAP32[$sysdic>>2]|0;
 $62 = (__ZNK5MeCab10Dictionary4typeEv($61)|0);
 $63 = ($62|0)==(0);
 if (!($63)) {
  $64 = (($this) + 520|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($7,$64);
  $65 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($64,403480)|0);
  $66 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($65,403496)|0);
  $67 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($66,113)|0);
  $68 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($67,403504)|0);
  $69 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($68,403728)|0);
  $70 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($69,403536)|0);
  $71 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($70,403752)|0);
  (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($71,$prefix)|0);
  $$3 = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($prefix);
  STACKTOP = sp;return ($$3|0);
 }
 $72 = (__ZNK5MeCab10Dictionary7charsetEv($61)|0);
 __ZN5MeCab12CharProperty11set_charsetEPKc($33,$72);
 $73 = (($this) + 4|0);
 $74 = (($this) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($this) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($75|0)==($77|0);
 if ($78) {
  __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($73,$sysdic);
 } else {
  $79 = ($75|0)==(0|0);
  if (!($79)) {
   $80 = HEAP32[$sysdic>>2]|0;
   HEAP32[$75>>2] = $80;
  }
  $81 = HEAP32[$74>>2]|0;
  $82 = (($81) + 4|0);
  HEAP32[$74>>2] = $82;
 }
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($userdic,$param,403784);
 $83 = HEAP8[$userdic>>0]|0;
 $84 = $83 & 1;
 $85 = ($84<<24>>24)==(0);
 if ($85) {
  $88 = $83&255;
  $89 = $88 >>> 1;
  $90 = $89;
 } else {
  $86 = (($userdic) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $90 = $87;
 }
 $91 = ($90|0)==(0);
 L36: do {
  if ($91) {
   label = 42;
  } else {
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC1Ev($buf);
   __ZN5MeCab18scoped_fixed_arrayIPcLi8192EEC1Ev($dicfile);
   $92 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf)|0);
   $93 = HEAP8[$userdic>>0]|0;
   $94 = $93 & 1;
   $95 = ($94<<24>>24)==(0);
   if ($95) {
    $98 = (($userdic) + 1|0);
    $100 = $98;
   } else {
    $96 = (($userdic) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $100 = $97;
   }
   $99 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE4sizeEv($buf)|0);
   (_strncpy(($92|0),($100|0),($99|0))|0);
   $101 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf)|0);
   $102 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi8192EE3getEv($dicfile)|0);
   $103 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi8192EE4sizeEv($dicfile)|0);
   $104 = (__ZN5MeCab11tokenizeCSVIPPcEEjS1_T_j($101,$102,$103)|0);
   $105 = ($104|0)==(0);
   L42: do {
    if (!($105)) {
     $106 = HEAP32[$sysdic>>2]|0;
     $i$041 = 0;
     while(1) {
      $107 = (__Znwj(256)|0);
      __ZN5MeCab10DictionaryC1Ev($107);
      HEAP32[$d>>2] = $107;
      $108 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi8192EEixEj($dicfile,$i$041)|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (__ZN5MeCab10Dictionary4openEPKcS2_($107,$109,403560)|0);
      if (!($110)) {
       label = 30;
       break;
      }
      $120 = HEAP32[$d>>2]|0;
      $121 = (__ZNK5MeCab10Dictionary4typeEv($120)|0);
      $122 = ($121|0)==(1);
      if (!($122)) {
       label = 32;
       break;
      }
      $133 = (__ZNK5MeCab10Dictionary12isCompatibleERKS0_($106,$120)|0);
      if (!($133)) {
       label = 34;
       break;
      }
      $144 = HEAP32[$74>>2]|0;
      $145 = HEAP32[$76>>2]|0;
      $146 = ($144|0)==($145|0);
      if ($146) {
       __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($73,$d);
      } else {
       $147 = ($144|0)==(0|0);
       if (!($147)) {
        $148 = HEAP32[$d>>2]|0;
        HEAP32[$144>>2] = $148;
       }
       $149 = HEAP32[$74>>2]|0;
       $150 = (($149) + 4|0);
       HEAP32[$74>>2] = $150;
      }
      $151 = (($i$041) + 1)|0;
      $152 = ($151>>>0)<($104>>>0);
      if ($152) {
       $i$041 = $151;
      } else {
       break L42;
      }
     }
     if ((label|0) == 30) {
      $111 = (($this) + 520|0);
      __ZN5MeCab4wlogC1EPNS_7whatlogE($8,$111);
      $112 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($111,403480)|0);
      $113 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($112,403496)|0);
      $114 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($113,127)|0);
      $115 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($114,403504)|0);
      $116 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($115,403792)|0);
      $117 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($116,403536)|0);
      $118 = HEAP32[$d>>2]|0;
      $119 = (__ZN5MeCab10Dictionary4whatEv($118)|0);
      (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($117,$119)|0);
      __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED1Ev($dicfile);
      __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
      $$2 = 0;
      break L36;
     }
     else if ((label|0) == 32) {
      $123 = (($this) + 520|0);
      __ZN5MeCab4wlogC1EPNS_7whatlogE($9,$123);
      $124 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($123,403480)|0);
      $125 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($124,403496)|0);
      $126 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($125,128)|0);
      $127 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($126,403504)|0);
      $128 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($127,403816)|0);
      $129 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($128,403536)|0);
      $130 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($129,403832)|0);
      $131 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi8192EEixEj($dicfile,$i$041)|0);
      $132 = HEAP32[$131>>2]|0;
      (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($130,$132)|0);
      __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED1Ev($dicfile);
      __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
      $$2 = 0;
      break L36;
     }
     else if ((label|0) == 34) {
      $134 = (($this) + 520|0);
      __ZN5MeCab4wlogC1EPNS_7whatlogE($10,$134);
      $135 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($134,403480)|0);
      $136 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($135,403496)|0);
      $137 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($136,130)|0);
      $138 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($137,403504)|0);
      $139 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($138,403856)|0);
      $140 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($139,403536)|0);
      $141 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($140,403888)|0);
      $142 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi8192EEixEj($dicfile,$i$041)|0);
      $143 = HEAP32[$142>>2]|0;
      (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($141,$143)|0);
      __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED1Ev($dicfile);
      __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
      $$2 = 0;
      break L36;
     }
    }
   } while(0);
   __ZN5MeCab18scoped_fixed_arrayIPcLi8192EED1Ev($dicfile);
   __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf);
   label = 42;
  }
 } while(0);
 do {
  if ((label|0) == 42) {
   $153 = (($this) + 328|0);
   HEAP32[$153>>2] = 0;
   $154 = (($this) + 288|0);
   __ZN5MeCab8FreeListI23mecab_dictionary_info_tE4freeEv($154);
   $155 = HEAP32[$74>>2]|0;
   $156 = HEAP32[$73>>2]|0;
   $157 = $155;
   $158 = $156;
   $159 = (($157) - ($158))|0;
   $160 = $159 >> 2;
   $i1$026 = (($160) + -1)|0;
   $161 = ($i1$026|0)>(-1);
   if ($161) {
    $i1$027 = $i1$026;
    while(1) {
     $162 = (__ZN5MeCab8FreeListI23mecab_dictionary_info_tE5allocEv($154)|0);
     $163 = HEAP32[$153>>2]|0;
     $164 = (($162) + 28|0);
     HEAP32[$164>>2] = $163;
     $165 = HEAP32[$73>>2]|0;
     $166 = (($165) + ($i1$027<<2)|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (__ZNK5MeCab10Dictionary8filenameEv($167)|0);
     HEAP32[$162>>2] = $168;
     $169 = HEAP32[$73>>2]|0;
     $170 = (($169) + ($i1$027<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (__ZNK5MeCab10Dictionary7charsetEv($171)|0);
     $173 = (($162) + 4|0);
     HEAP32[$173>>2] = $172;
     $174 = HEAP32[$73>>2]|0;
     $175 = (($174) + ($i1$027<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (__ZNK5MeCab10Dictionary4sizeEv($176)|0);
     $178 = (($162) + 8|0);
     HEAP32[$178>>2] = $177;
     $179 = HEAP32[$73>>2]|0;
     $180 = (($179) + ($i1$027<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (__ZNK5MeCab10Dictionary5lsizeEv($181)|0);
     $183 = (($162) + 16|0);
     HEAP32[$183>>2] = $182;
     $184 = HEAP32[$73>>2]|0;
     $185 = (($184) + ($i1$027<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (__ZNK5MeCab10Dictionary5rsizeEv($186)|0);
     $188 = (($162) + 20|0);
     HEAP32[$188>>2] = $187;
     $189 = HEAP32[$73>>2]|0;
     $190 = (($189) + ($i1$027<<2)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (__ZNK5MeCab10Dictionary4typeEv($191)|0);
     $193 = (($162) + 12|0);
     HEAP32[$193>>2] = $192;
     $194 = HEAP32[$73>>2]|0;
     $195 = (($194) + ($i1$027<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (__ZNK5MeCab10Dictionary7versionEv($196)|0);
     $198 = (($162) + 24|0);
     HEAP16[$198>>1] = $197;
     HEAP32[$153>>2] = $162;
     $i1$0 = (($i1$027) + -1)|0;
     $199 = ($i1$0|0)>(-1);
     if ($199) {
      $i1$027 = $i1$0;
     } else {
      break;
     }
    }
   }
   $200 = (($this) + 316|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = (($this) + 320|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($203|0)==($201|0);
   if (!($204)) {
    $scevgep$i$i$i = (($203) + -8|0);
    $__new_last2$i$i$i = $201;
    $205 = (0 - ($__new_last2$i$i$i))|0;
    $uglygep$i$i$i = (($scevgep$i$i$i) + ($205)|0);
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $206 = $uglygep3$i$i$i >>> 3;
    $207 = $206 ^ -1;
    $scevgep4$i$i$i = (($203) + ($207<<3)|0);
    HEAP32[$202>>2] = $scevgep4$i$i$i;
   }
   $208 = (($12) + 4|0);
   $209 = (($this) + 324|0);
   $i3$0 = 0;
   while(1) {
    $210 = (__ZNK5MeCab12CharProperty4sizeEv($33)|0);
    $211 = ($i3$0>>>0)<($210>>>0);
    if (!($211)) {
     break;
    }
    $212 = (__ZNK5MeCab12CharProperty4nameEj($33,$i3$0)|0);
    __ZNK5MeCab10Dictionary16exactMatchSearchEPKc($n4,$16,$212);
    $213 = HEAP32[$n4>>2]|0;
    $214 = ($213|0)==(-1);
    if ($214) {
     label = 49;
     break;
    }
    $223 = (__ZNK5MeCab10Dictionary5tokenERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE($16,$n4)|0);
    $224 = (__ZNK5MeCab10Dictionary10token_sizeERKNS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeE(0,$n4)|0);
    HEAP32[$12>>2] = $223;
    HEAP32[$208>>2] = $224;
    $225 = HEAP32[$202>>2]|0;
    $226 = HEAP32[$209>>2]|0;
    $227 = ($225>>>0)<($226>>>0);
    if ($227) {
     $228 = ($225|0)==(0|0);
     if (!($228)) {
      $229 = $12;
      $230 = $229;
      $231 = HEAP32[$230>>2]|0;
      $232 = (($229) + 4)|0;
      $233 = $232;
      $234 = HEAP32[$233>>2]|0;
      $235 = $225;
      $236 = $235;
      HEAP32[$236>>2] = $231;
      $237 = (($235) + 4)|0;
      $238 = $237;
      HEAP32[$238>>2] = $234;
     }
     $239 = HEAP32[$202>>2]|0;
     $240 = (($239) + 8|0);
     HEAP32[$202>>2] = $240;
    } else {
     __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_($200,$12);
    }
    $241 = (($i3$0) + 1)|0;
    $i3$0 = $241;
   }
   if ((label|0) == 49) {
    $215 = (($this) + 520|0);
    __ZN5MeCab4wlogC1EPNS_7whatlogE($11,$215);
    $216 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($215,403480)|0);
    $217 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($216,403496)|0);
    $218 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($217,155)|0);
    $219 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($218,403504)|0);
    $220 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($219,403920)|0);
    $221 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($220,403536)|0);
    $222 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($221,403936)|0);
    (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($222,$212)|0);
    $$2 = 0;
    break;
   }
   __ZNK5MeCab12CharProperty11getCharInfoEj($13,$33,32);
   $242 = (($this) + 332|0);
   $243 = HEAP32[$13>>2]|0;
   HEAP32[$242>>2] = $243;
   $244 = (($this) + 272|0);
   __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($14,$param,403968);
   __ZN5MeCab13scoped_string12reset_stringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($244,$14);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($14);
   __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($tmp,$param,403984);
   $245 = (($this) + 280|0);
   __ZN5MeCab12scoped_arrayIcE5resetEPc($245,0);
   $246 = HEAP8[$tmp>>0]|0;
   $247 = $246 & 1;
   $248 = ($247<<24>>24)==(0);
   if ($248) {
    $251 = $246&255;
    $252 = $251 >>> 1;
    $253 = $252;
   } else {
    $249 = (($tmp) + 4|0);
    $250 = HEAP32[$249>>2]|0;
    $253 = $250;
   }
   $254 = ($253|0)==(0);
   if (!($254)) {
    __ZN5MeCab13scoped_string12reset_stringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($245,$tmp);
   }
   $255 = (__ZNK5MeCab12scoped_arrayIcEdeEv($244)|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = ($256<<24>>24)==(0);
   if ($257) {
    $258 = (($this) + 520|0);
    __ZN5MeCab4wlogC1EPNS_7whatlogE($15,$258);
    $259 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($258,403480)|0);
    $260 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($259,403496)|0);
    $261 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($260,171)|0);
    $262 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($261,403504)|0);
    $263 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($262,404000)|0);
    $264 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($263,403536)|0);
    (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($264,404024)|0);
    $$1 = 0;
   } else {
    $265 = (__ZNK5MeCab5Param3getIjEET_PKc($param,404064)|0);
    $266 = (($this) + 516|0);
    $267 = ($265|0)==(0);
    $$ = $267 ? 24 : $265;
    HEAP32[$266>>2] = $$;
    $$1 = 1;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($tmp);
   $$2 = $$1;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($userdic);
 $$3 = $$2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($prefix);
 STACKTOP = sp;return ($$3|0);
}
function __ZN5MeCab10Dictionary4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 56|0);
 $1 = (__ZN5MeCab7whatlog3strEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab12CharProperty4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = (__ZN5MeCab7whatlog3strEv($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary4typeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary12isCompatibleERKS0_($this,$d) {
 $this = $this|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($d) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $5 = (($this) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($d) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if (!($9)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $10 = (($this) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($d) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==($13|0);
 if (!($14)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $15 = (($this) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN5MeCab14decode_charsetEPKc($16)|0);
 $18 = (($d) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZN5MeCab14decode_charsetEPKc($19)|0);
 $21 = ($17|0)==($20|0);
 $22 = $21;
 STACKTOP = sp;return ($22|0);
}
function __ZN5MeCab8FreeListI23mecab_dictionary_info_tE4freeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI23mecab_dictionary_info_tE5allocEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $6 = (($this) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  HEAP32[$1>>2] = 0;
 }
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 4|0);
 $12 = (($this) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($10|0)==($18|0);
 do {
  if ($19) {
   $20 = HEAP32[$3>>2]|0;
   $$arith = $20<<5;
   $$overflow = ($20>>>0)>(134217727);
   $21 = $$overflow ? -1 : $$arith;
   $22 = (__Znaj($21)|0);
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($this) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23>>>0)<($25>>>0);
   if (!($26)) {
    __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($11,$0);
    break;
   }
   $27 = ($23|0)==(0|0);
   if (!($27)) {
    HEAP32[$23>>2] = $22;
   }
   $28 = HEAP32[$12>>2]|0;
   $29 = (($28) + 4|0);
   HEAP32[$12>>2] = $29;
  }
 } while(0);
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$11>>2]|0;
 $32 = (($31) + ($30<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[$1>>2] = $35;
 $36 = (($33) + ($34<<5)|0);
 STACKTOP = sp;return ($36|0);
}
function __ZNK5MeCab10Dictionary8filenameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($0) + 1|0);
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 } else {
  $4 = (($this) + 52|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZNK5MeCab10Dictionary4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary5lsizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary5rsizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary7versionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1&65535;
 STACKTOP = sp;return ($2|0);
}
function __ZNK5MeCab10Dictionary16exactMatchSearchEPKc($agg$result,$this,$key) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 204|0);
 __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE16exactMatchSearchINS4_16result_pair_typeEEEvPKcRT_jj($0,$key,$agg$result,0,0);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12CharProperty11getCharInfoEj($agg$result,$this,$id) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($id<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$agg$result>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN5MeCab13scoped_string12reset_stringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($str) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = (($8) + 1)|0;
 $9 = (__Znaj($7)|0);
 $10 = HEAP8[$str>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = (($str) + 1|0);
  $16 = $15;
 } else {
  $13 = (($str) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $16 = $14;
 }
 (_strcpy(($9|0),($16|0))|0);
 __ZN5MeCab12scoped_arrayIcE5resetEPc($this,$9);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12scoped_arrayIcEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab5Param3getIjEET_PKc($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $it = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $it = sp + 36|0;
 $0 = sp + 24|0;
 $r = sp + 16|0;
 $1 = sp;
 $2 = (_strlen(($key|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$key,$2);
 $3 = (($this) + 4|0);
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($it,$3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $4 = (($this) + 8|0);
 $5 = HEAP32[$it>>2]|0;
 $6 = ($5|0)==($4|0);
 if ($6) {
  $7 = (__Znwj(4)|0);
  HEAP32[$7>>2] = 0;
  __ZN5MeCab10scoped_ptrIjEC1EPj($r,$7);
  $8 = (__ZNK5MeCab10scoped_ptrIjEdeEv($r)|0);
  $9 = HEAP32[$8>>2]|0;
  __ZN5MeCab10scoped_ptrIjED1Ev($r);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 } else {
  $10 = (($5) + 28|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($1,$10);
  $11 = (__ZN12_GLOBAL__N_112lexical_castIjNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($1)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNK5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEE3getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK5MeCab10Dictionary7featureERKNS_5TokenE($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5MeCab10scoped_ptrIjEC1EPj($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIjEC2EPj($this,$p);
 STACKTOP = sp;return;
}
function __ZNK5MeCab10scoped_ptrIjEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab10scoped_ptrIjED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIjED2Ev($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112lexical_castIjNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_T0_($arg) {
 $arg = $arg|0;
 var $$0 = 0, $$sum = 0, $$sum$i$i$i = 0, $$sum1 = 0, $$sum1$i$i$i = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $interpreter = 0, $r = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 160|0;
 $interpreter = sp + 16|0;
 $result = sp + 8|0;
 $r = sp;
 $1 = (($interpreter) + 64|0);
 $2 = (($interpreter) + 8|0);
 HEAP32[$2>>2] = ((656 + 32|0));
 $3 = (($interpreter) + 12|0);
 HEAP32[$interpreter>>2] = ((912 + 12|0));
 $4 = (($interpreter) + 64|0);
 HEAP32[$4>>2] = ((912 + 32|0));
 $5 = (($interpreter) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$interpreter>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($interpreter) + ($8)|0);
 __ZNSt3__18ios_base4initEPv($9,$3);
 $$sum$i$i$i = (($8) + 72)|0;
 $10 = (($interpreter) + ($$sum$i$i$i)|0);
 HEAP32[$10>>2] = 0;
 $$sum1$i$i$i = (($8) + 76)|0;
 $11 = (($interpreter) + ($$sum1$i$i$i)|0);
 HEAP32[$11>>2] = -1;
 HEAP32[$interpreter>>2] = ((656 + 12|0));
 HEAP32[$1>>2] = ((656 + 52|0));
 HEAP32[$2>>2] = ((656 + 32|0));
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($3);
 HEAP32[$3>>2] = ((992 + 8|0));
 $12 = (($interpreter) + 44|0);
 $13 = (($interpreter) + 60|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 HEAP32[$13>>2] = 24;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($3,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $14 = (($interpreter) + 8|0);
 $15 = (__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($14,$arg)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $$sum = (($18) + 16)|0;
 $19 = (($15) + ($$sum)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 5;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = (__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERj($interpreter,$result)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -12|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum1 = (($26) + 16)|0;
  $27 = (($23) + ($$sum1)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 5;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = (__ZNSt3__12wsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_($interpreter)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + -12|0);
   $34 = HEAP32[$33>>2]|0;
   $$sum2 = (($34) + 16)|0;
   $35 = (($31) + ($$sum2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 2;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $42 = HEAP32[$result>>2]|0;
    $$0 = $42;
    __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $39 = (__Znwj(4)|0);
 HEAP32[$39>>2] = 0;
 __ZN5MeCab10scoped_ptrIjEC1EPj($r,$39);
 $40 = (__ZNK5MeCab10scoped_ptrIjEdeEv($r)|0);
 $41 = HEAP32[$40>>2]|0;
 __ZN5MeCab10scoped_ptrIjED1Ev($r);
 $$0 = $41;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($interpreter);
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab10scoped_ptrIjED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((404088 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIjED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab10scoped_ptrIjED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab10scoped_ptrIjEC2EPj($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((404088 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 3;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 2;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 3;
 __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEEC1EjjS9_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = $__x;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = $28;
  $37 = $36;
  HEAP32[$37>>2] = $32;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
 }
 $40 = HEAP32[$27>>2]|0;
 $41 = (($40) + 8|0);
 HEAP32[$27>>2] = $41;
 __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($this,$__v);
 __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEEC1EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEEC2EjjS9_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<3)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -8|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 3;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 536870911;
}
function __ZNSt3__114__split_bufferINS_4pairIPKN5MeCab5TokenEjEERNS_9allocatorIS6_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 3;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<3)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<3)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEEC1EjjS5_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v);
 __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEEC1EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1073741823;
}
function __ZNSt3__114__split_bufferIP23mecab_dictionary_info_tRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEEC1EjjS6_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEEC1EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $__new_last2$i$i$i = $1;
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1073741823;
}
function __ZNSt3__114__split_bufferIPN5MeCab10DictionaryERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE16exactMatchSearchINS4_16result_pair_typeEEEvPKcRT_jj($this,$key,$result,$len,$node_pos) {
 $this = $this|0;
 $key = $key|0;
 $result = $result|0;
 $len = $len|0;
 $node_pos = $node_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE16exactMatchSearchINS4_16result_pair_typeEEET_PKcjj($0,$this,$key,$len,$node_pos);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $result;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE16exactMatchSearchINS4_16result_pair_typeEEET_PKcjj($agg$result,$this,$key,$len,$node_pos) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $key = $key|0;
 $len = $len|0;
 $node_pos = $node_pos|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0 = 0, $b$0$lcssa = 0, $b$02 = 0, $b$04 = 0, $i$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  $1 = (__ZNK5MeCab5Darts6LengthIcEclEPKc(0,$key)|0);
  $$0 = $1;
 } else {
  $$0 = $len;
 }
 __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE10set_resultERNS4_16result_pair_typeEij(0,$agg$result,-1,0);
 $2 = HEAP32[$this>>2]|0;
 $3 = (($2) + ($node_pos<<3)|0);
 $b$02 = HEAP32[$3>>2]|0;
 $4 = ($$0|0)==(0);
 L4: do {
  if ($4) {
   $b$0$lcssa = $b$02;
  } else {
   $5 = HEAP32[$this>>2]|0;
   $b$04 = $b$02;$i$03 = 0;
   while(1) {
    $6 = (($key) + ($i$03)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    $9 = (($b$04) + 1)|0;
    $10 = (($9) + ($8))|0;
    $11 = ((($5) + ($10<<3)|0) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($b$04|0)==($12|0);
    if (!($13)) {
     break;
    }
    $14 = (($5) + ($10<<3)|0);
    $15 = (($i$03) + 1)|0;
    $b$0 = HEAP32[$14>>2]|0;
    $16 = ($15>>>0)<($$0>>>0);
    if ($16) {
     $b$04 = $b$0;$i$03 = $15;
    } else {
     $b$0$lcssa = $b$0;
     break L4;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $17 = HEAP32[$this>>2]|0;
 $18 = (($17) + ($b$0$lcssa<<3)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($17) + ($b$0$lcssa<<3)|0) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($b$0$lcssa|0)==($21|0);
 $23 = ($19|0)<(0);
 $or$cond = $22 & $23;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $24 = $19 ^ -1;
 __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE10set_resultERNS4_16result_pair_typeEij(0,$agg$result,$24,$$0);
 STACKTOP = sp;return;
}
function __ZNK5MeCab5Darts6LengthIcEclEPKc($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($key|0))|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE10set_resultERNS4_16result_pair_typeEij($this,$x,$r,$l) {
 $this = $this|0;
 $x = $x|0;
 $r = $r|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$x>>2] = $r;
 $0 = (($x) + 4|0);
 HEAP32[$0>>2] = $l;
 STACKTOP = sp;return;
}
function __ZN5MeCab12_GLOBAL__N_113partial_matchEPKcS2_($f1,$f2) {
 $f1 = $f1|0;
 $f2 = $f2|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf1 = 0, $buf2 = 0, $c1 = 0, $c2 = 0, $i$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $buf1 = sp + 36|0;
 $buf2 = sp + 24|0;
 $c1 = sp + 12|0;
 $c2 = sp;
 $0 = (_strcmp($f1,404136)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC1Ev($buf1);
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EEC1Ev($buf2);
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EEC1Ev($c1);
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EEC1Ev($c2);
 $2 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf1)|0);
 $3 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE4sizeEv($buf1)|0);
 (_strncpy(($2|0),($f1|0),($3|0))|0);
 $4 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf2)|0);
 $5 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE4sizeEv($buf2)|0);
 (_strncpy(($4|0),($f2|0),($5|0))|0);
 $6 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf1)|0);
 $7 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EE3getEv($c1)|0);
 $8 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EE4sizeEv($c1)|0);
 $9 = (__ZN5MeCab11tokenizeCSVIPPcEEjS1_T_j($6,$7,$8)|0);
 $10 = (__ZNK5MeCab18scoped_fixed_arrayIcLi8192EE3getEv($buf2)|0);
 $11 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EE3getEv($c2)|0);
 $12 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EE4sizeEv($c2)|0);
 $13 = (__ZN5MeCab11tokenizeCSVIPPcEEjS1_T_j($10,$11,$12)|0);
 $14 = ($13>>>0)<($9>>>0);
 $15 = $14 ? $13 : $9;
 $16 = ($15|0)==(0);
 L4: do {
  if ($16) {
   $$0 = 1;
  } else {
   $i$06 = 0;
   while(1) {
    $17 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EEixEj($c1,$i$06)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (_strcmp($18,404136)|0);
    $20 = ($19|0)==(0);
    if (!($20)) {
     $21 = (__ZNK5MeCab18scoped_fixed_arrayIPcLi64EEixEj($c2,$i$06)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (_strcmp($18,$22)|0);
     $24 = ($23|0)==(0);
     if (!($24)) {
      $$0 = 0;
      break L4;
     }
    }
    $25 = (($i$06) + 1)|0;
    $26 = ($25>>>0)<($15>>>0);
    if ($26) {
     $i$06 = $25;
    } else {
     $$0 = 1;
     break;
    }
   }
  }
 } while(0);
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($c2);
 __ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev($c1);
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf2);
 __ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev($buf1);
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE18commonPrefixSearchINS4_16result_pair_typeEEEjPKcPT_jjj($this,$key,$result,$result_len,$len,$node_pos) {
 $this = $this|0;
 $key = $key|0;
 $result = $result|0;
 $result_len = $result_len|0;
 $len = $len|0;
 $node_pos = $node_pos|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b$0 = 0, $b$010 = 0, $b$06 = 0, $i$09 = 0, $num$0$lcssa = 0, $num$08 = 0, $num$1 = 0, $or$cond = 0, $or$cond$lcssa = 0, $or$cond11 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  $1 = (__ZNK5MeCab5Darts6LengthIcEclEPKc(0,$key)|0);
  $$01 = $1;
 } else {
  $$01 = $len;
 }
 $2 = HEAP32[$this>>2]|0;
 $3 = (($2) + ($node_pos<<3)|0);
 $b$06 = HEAP32[$3>>2]|0;
 $4 = ($$01|0)==(0);
 $5 = (($2) + ($b$06<<3)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2) + ($b$06<<3)|0) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($b$06|0)==($8|0);
 $10 = ($6|0)<(0);
 $or$cond7 = $9 & $10;
 L4: do {
  if ($4) {
   $$lcssa = $6;$num$0$lcssa = 0;$or$cond$lcssa = $or$cond7;
  } else {
   $14 = $6;$b$010 = $b$06;$i$09 = 0;$num$08 = 0;$or$cond11 = $or$cond7;
   while(1) {
    if ($or$cond11) {
     $11 = ($num$08>>>0)<($result_len>>>0);
     if ($11) {
      $12 = (($result) + ($num$08<<3)|0);
      $13 = $14 ^ -1;
      __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE10set_resultERNS4_16result_pair_typeEij(0,$12,$13,$i$09);
     }
     $15 = (($num$08) + 1)|0;
     $num$1 = $15;
    } else {
     $num$1 = $num$08;
    }
    $16 = (($key) + ($i$09)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($b$010) + 1)|0;
    $20 = (($19) + ($18))|0;
    $21 = HEAP32[$this>>2]|0;
    $22 = ((($21) + ($20<<3)|0) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($b$010|0)==($23|0);
    if (!($24)) {
     $$0 = $num$1;
     break;
    }
    $25 = (($21) + ($20<<3)|0);
    $26 = (($i$09) + 1)|0;
    $b$0 = HEAP32[$25>>2]|0;
    $27 = ($26>>>0)<($$01>>>0);
    $28 = HEAP32[$this>>2]|0;
    $29 = (($28) + ($b$0<<3)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($28) + ($b$0<<3)|0) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($b$0|0)==($32|0);
    $34 = ($30|0)<(0);
    $or$cond = $33 & $34;
    if ($27) {
     $14 = $30;$b$010 = $b$0;$i$09 = $26;$num$08 = $num$1;$or$cond11 = $or$cond;
    } else {
     $$lcssa = $30;$num$0$lcssa = $num$1;$or$cond$lcssa = $or$cond;
     break L4;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if (!($or$cond$lcssa)) {
  $$0 = $num$0$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = ($num$0$lcssa>>>0)<($result_len>>>0);
 if ($35) {
  $36 = (($result) + ($num$0$lcssa<<3)|0);
  $37 = $$lcssa ^ -1;
  __ZNK5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE10set_resultERNS4_16result_pair_typeEij(0,$36,$37,$$01);
 }
 $38 = (($num$0$lcssa) + 1)|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab8FreeListI23mecab_dictionary_info_tEC2Ej($this,$_size) {
 $this = $this|0;
 $_size = $_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((404144 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (($this) + 24|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 HEAP32[$1>>2] = $_size;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI23mecab_dictionary_info_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab8FreeListI23mecab_dictionary_info_tED1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN5MeCab8CharInfoC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MeCab8FreeListI23mecab_dictionary_info_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((404144 + 8|0));
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 4|0);
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEED1Ev($1);
  STACKTOP = sp;return;
 } else {
  $7 = $4;$storemerge1 = 0;
 }
 while(1) {
  $6 = (($7) + ($storemerge1<<2)|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = $12;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 2;
  $18 = ($11>>>0)<($17>>>0);
  if ($18) {
   $7 = $13;$storemerge1 = $11;
  } else {
   break;
  }
 }
 __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP23mecab_dictionary_info_tNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIP23mecab_dictionary_info_tNS_9allocatorIS2_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIP23mecab_dictionary_info_tNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5MeCab10DictionaryENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseIPN5MeCab10DictionaryENS_9allocatorIS3_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPN5MeCab10DictionaryENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113__vector_baseINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_4pairIPKN5MeCab5TokenEjEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -8|0);
  $__new_last2$i$i = $0;
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 3;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return;
}
function __ZN5MeCab12CharProperty4openERKNS_5ParamE($this,$param) {
 $this = $this|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $filename = 0, $prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $prefix = sp + 24|0;
 $filename = sp + 12|0;
 $0 = sp;
 __ZNK5MeCab5Param3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_PKc($prefix,$param,404216);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,404224,8);
 __ZN5MeCab15create_filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($filename,$prefix,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $1 = HEAP8[$filename>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($filename) + 1|0);
  $7 = $6;
 } else {
  $4 = (($filename) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (__ZN5MeCab12CharProperty4openEPKc($this,$7)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($filename);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($prefix);
 STACKTOP = sp;return ($8|0);
}
function __ZN5MeCab12CharProperty4openEPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $$0 = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $csize = 0, $error = 0, $i$01 = 0, $ptr = 0, $s = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 160|0;
 $error = sp + 24|0;
 $1 = sp + 16|0;
 $ptr = sp + 12|0;
 $csize = sp + 8|0;
 $2 = sp + 4|0;
 $s = sp;
 $3 = (($error) + 56|0);
 $4 = (($error) + 4|0);
 HEAP32[$error>>2] = ((1712 + 12|0));
 $5 = (($error) + 56|0);
 HEAP32[$5>>2] = ((1712 + 32|0));
 $6 = HEAP32[$error>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($error) + ($8)|0);
 __ZNSt3__18ios_base4initEPv($9,$4);
 $$sum$i$i = (($8) + 72)|0;
 $10 = (($error) + ($$sum$i$i)|0);
 HEAP32[$10>>2] = 0;
 $$sum1$i$i = (($8) + 76)|0;
 $11 = (($error) + ($$sum1$i$i)|0);
 HEAP32[$11>>2] = -1;
 HEAP32[$error>>2] = ((1568 + 12|0));
 HEAP32[$3>>2] = ((1568 + 32|0));
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($4);
 HEAP32[$4>>2] = ((992 + 8|0));
 $12 = (($error) + 36|0);
 $13 = (($error) + 52|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 HEAP32[$13>>2] = 16;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($4,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $14 = (($this) + 4|0);
 $15 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($14)|0);
 $16 = (__ZN5MeCab4MmapIcE4openEPKcS3_($15,$filename,404240)|0);
 if (!($16)) {
  $17 = (($this) + 32|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($1,$17);
  $18 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($17,404248)|0);
  $19 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($18,404272)|0);
  $20 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($19,82)|0);
  $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,404280)|0);
  $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21,404288)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($22,404320)|0);
  $$0 = 0;
  __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($14)|0);
 $24 = (__ZN5MeCab4MmapIcE5beginEv($23)|0);
 HEAP32[$ptr>>2] = $24;
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$csize);
 $25 = HEAP32[$csize>>2]|0;
 $26 = $25 << 5;
 $27 = $26 | 4;
 $28 = (($27) + 262140)|0;
 $29 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($14)|0);
 $30 = (__ZN5MeCab4MmapIcE4sizeEv($29)|0);
 $31 = ($28|0)==($30|0);
 if (!($31)) {
  $32 = (($this) + 32|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$32);
  $33 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($32,404248)|0);
  $34 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($33,404272)|0);
  $35 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($34,91)|0);
  $36 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($35,404280)|0);
  $37 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,404328)|0);
  $38 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($37,404320)|0);
  $39 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($38,404352)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($39,$filename)|0);
  $$0 = 0;
  __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (($this) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($this) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==($41|0);
 if (!($44)) {
  $scevgep$i$i$i = (($43) + -4|0);
  $__new_last2$i$i$i = $41;
  $45 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($45)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $46 = $uglygep3$i$i$i >>> 2;
  $47 = $46 ^ -1;
  $scevgep4$i$i$i = (($43) + ($47<<2)|0);
  HEAP32[$42>>2] = $scevgep4$i$i$i;
 }
 $48 = HEAP32[$csize>>2]|0;
 $49 = ($48|0)==(0);
 if (!($49)) {
  $50 = (($this) + 20|0);
  $51 = HEAP32[$csize>>2]|0;
  $i$01 = 0;
  while(1) {
   $52 = (__ZN5MeCab8read_ptrEPPKcj($ptr,32)|0);
   HEAP32[$s>>2] = $52;
   $53 = HEAP32[$42>>2]|0;
   $54 = HEAP32[$50>>2]|0;
   $55 = ($53|0)==($54|0);
   if ($55) {
    __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($40,$s);
   } else {
    $56 = ($53|0)==(0|0);
    if (!($56)) {
     HEAP32[$53>>2] = $52;
    }
    $57 = HEAP32[$42>>2]|0;
    $58 = (($57) + 4|0);
    HEAP32[$42>>2] = $58;
   }
   $59 = (($i$01) + 1)|0;
   $60 = ($59>>>0)<($51>>>0);
   if ($60) {
    $i$01 = $59;
   } else {
    break;
   }
  }
 }
 $61 = HEAP32[$ptr>>2]|0;
 $62 = (($this) + 24|0);
 HEAP32[$62>>2] = $61;
 $$0 = 1;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
 STACKTOP = sp;return ($$0|0);
}
function __ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$value) {
 $ptr = $ptr|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab8read_ptrEPPKcj($ptr,4)|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 HEAP8[$value>>0]=$1&255;HEAP8[$value+1>>0]=($1>>8)&255;HEAP8[$value+2>>0]=($1>>16)&255;HEAP8[$value+3>>0]=$1>>24;
 STACKTOP = sp;return;
}
function __ZN5MeCab8read_ptrEPPKcj($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + ($size)|0);
 HEAP32[$ptr>>2] = $1;
 STACKTOP = sp;return ($0|0);
}
function __ZN5MeCab12CharProperty5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($0)|0);
 __ZN5MeCab4MmapIcE5closeEv($1);
 STACKTOP = sp;return;
}
function __ZNK5MeCab12CharProperty4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 STACKTOP = sp;return ($7|0);
}
function __ZNK5MeCab12CharProperty4nameEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN5MeCab12CharProperty11set_charsetEPKc($this,$ct) {
 $this = $this|0;
 $ct = $ct|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN5MeCab14decode_charsetEPKc($ct)|0);
 $1 = (($this) + 28|0);
 HEAP32[$1>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = (($13) - ($5))|0;
 $15 = $14 >> 2;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($8>>>0);
  $20 = $19 ? $8 : $18;
  $$0$i = $20;
 } else {
  $$0$i = $9;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$this>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC1EjjS5_($__v,$$0$i,$26,$0);
 $27 = (($__v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = HEAP32[$__x>>2]|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = HEAP32[$27>>2]|0;
 $32 = (($31) + 4|0);
 HEAP32[$27>>2] = $32;
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v);
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED1Ev($__v);
 STACKTOP = sp;return;
}
function __ZN5MeCab10Dictionary4openEPKcS2_($this,$file,$mode) {
 $this = $this|0;
 $file = $file|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $dsize = 0, $dummy = 0, $fsize = 0, $magic = 0, $ptr = 0, $tsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $ptr = sp + 32|0;
 $dsize = sp + 28|0;
 $tsize = sp + 24|0;
 $fsize = sp + 20|0;
 $magic = sp + 16|0;
 $dummy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 __ZN5MeCab10Dictionary5closeEv($this);
 $5 = (($this) + 44|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($5,$file)|0);
 $6 = (($this) + 4|0);
 $7 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($6)|0);
 $8 = (__ZN5MeCab4MmapIcE4openEPKcS3_($7,$file,$mode)|0);
 if (!($8)) {
  $9 = (($this) + 56|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($0,$9);
  $10 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($9,404376)|0);
  $11 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($10,404392)|0);
  $12 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($11,79)|0);
  $13 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($12,404400)|0);
  $14 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($13,404408)|0);
  $15 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($14,404440)|0);
  $16 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($15,404448)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($16,$file)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($6)|0);
 $18 = (__ZN5MeCab4MmapIcE4sizeEv($17)|0);
 $19 = ($18>>>0)>(99);
 if (!($19)) {
  $20 = (($this) + 56|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($1,$20);
  $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,404376)|0);
  $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21,404392)|0);
  $23 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($22,82)|0);
  $24 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($23,404400)|0);
  $25 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($24,404480)|0);
  $26 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25,404440)|0);
  $27 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($26,404504)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($27,$file)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = (__ZN5MeCab4MmapIcE5beginEv($17)|0);
 HEAP32[$ptr>>2] = $28;
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$magic);
 $29 = HEAP32[$magic>>2]|0;
 $30 = $29 ^ -277770377;
 $31 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($6)|0);
 $32 = (__ZN5MeCab4MmapIcE4sizeEv($31)|0);
 $33 = ($30|0)==($32|0);
 if (!($33)) {
  $34 = (($this) + 56|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($2,$34);
  $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,404376)|0);
  $36 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($35,404392)|0);
  $37 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($36,94)|0);
  $38 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($37,404400)|0);
  $39 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($38,404536)|0);
  $40 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($39,404440)|0);
  $41 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($40,404504)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($41,$file)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = (($this) + 24|0);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$42);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(102);
 if (!($44)) {
  $45 = (($this) + 56|0);
  __ZN5MeCab4wlogC1EPNS_7whatlogE($3,$45);
  $46 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($45,404376)|0);
  $47 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($46,404392)|0);
  $48 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($47,98)|0);
  $49 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($48,404400)|0);
  $50 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($49,404584)|0);
  $51 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($50,404440)|0);
  $52 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($51,404608)|0);
  $53 = HEAP32[$42>>2]|0;
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($52,$53)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $54 = (($this) + 28|0);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$54);
 $55 = (($this) + 32|0);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$55);
 $56 = (($this) + 36|0);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$56);
 $57 = (($this) + 40|0);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$57);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$dsize);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$tsize);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$fsize);
 __ZN5MeCab11read_staticIjEEvPPKcRT_($ptr,$dummy);
 $58 = HEAP32[$ptr>>2]|0;
 $59 = (($this) + 20|0);
 HEAP32[$59>>2] = $58;
 $60 = HEAP32[$ptr>>2]|0;
 $61 = (($60) + 32|0);
 HEAP32[$ptr>>2] = $61;
 $62 = (($this) + 204|0);
 __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE9set_arrayEPvj($62,$61,0);
 $63 = HEAP32[$dsize>>2]|0;
 $64 = HEAP32[$ptr>>2]|0;
 $65 = (($64) + ($63)|0);
 HEAP32[$ptr>>2] = $65;
 $66 = (($this) + 12|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$tsize>>2]|0;
 $68 = HEAP32[$ptr>>2]|0;
 $69 = (($68) + ($67)|0);
 HEAP32[$ptr>>2] = $69;
 $70 = (($this) + 16|0);
 HEAP32[$70>>2] = $69;
 $71 = HEAP32[$fsize>>2]|0;
 $72 = HEAP32[$ptr>>2]|0;
 $73 = (($72) + ($71)|0);
 HEAP32[$ptr>>2] = $73;
 $74 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($6)|0);
 $75 = (__ZN5MeCab4MmapIcE3endEv($74)|0);
 $76 = ($73|0)==($75|0);
 if ($76) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $77 = (($this) + 56|0);
 __ZN5MeCab4wlogC1EPNS_7whatlogE($4,$77);
 $78 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($77,404376)|0);
 $79 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($78,404392)|0);
 $80 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($79,122)|0);
 $81 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($80,404400)|0);
 $82 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($81,404632)|0);
 $83 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($82,404440)|0);
 $84 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($83,404504)|0);
 (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($84,$file)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5MeCab10Dictionary5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = (__ZNK5MeCab10scoped_ptrINS_4MmapIcEEEptEv($0)|0);
 __ZN5MeCab4MmapIcE5closeEv($1);
 STACKTOP = sp;return;
}
function __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE9set_arrayEPvj($this,$ptr,$size) {
 $this = $this|0;
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5MeCab5Darts15DoubleArrayImplIchijNS0_6LengthIcEEE5clearEv($this);
 HEAP32[$this>>2] = $ptr;
 $0 = (($this) + 40|0);
 HEAP8[$0>>0] = 1;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = $size;
 STACKTOP = sp;return;
}
function __ZN5MeCab4MmapIcE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN5MeCab4MmapIcE4sizeEv($this)|0);
 $3 = (($1) + ($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __Z14getGlobalErrorv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (404656|0);
}
function __Z14setGlobalErrorPKc($str) {
 $str = $str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_strncpy((404656|0),($str|0),255)|0);
 HEAP8[((404656 + 255|0))>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(405624,$0,405680);
 HEAP32[404912>>2] = ((406856 + 12|0));
 HEAP32[((404912 + 8|0))>>2] = ((406856 + 32|0));
 HEAP32[((404912 + 4|0))>>2] = 0;
 __ZNSt3__18ios_base4initEPv(((404912 + 8|0)),405624);
 HEAP32[((404912 + 80|0))>>2] = 0;
 HEAP32[((404912 + 84|0))>>2] = -1;
 $1 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(405728,$1,((405680 + 8|0)));
 HEAP32[405000>>2] = ((406936 + 12|0));
 HEAP32[((405000 + 4|0))>>2] = ((406936 + 32|0));
 __ZNSt3__18ios_base4initEPv(((405000 + 4|0)),405728);
 HEAP32[((405000 + 76|0))>>2] = 0;
 HEAP32[((405000 + 80|0))>>2] = -1;
 $2 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(405776,$2,((405680 + 16|0)));
 HEAP32[405088>>2] = ((406936 + 12|0));
 HEAP32[((405088 + 4|0))>>2] = ((406936 + 32|0));
 __ZNSt3__18ios_base4initEPv(((405088 + 4|0)),405776);
 HEAP32[((405088 + 76|0))>>2] = 0;
 HEAP32[((405088 + 80|0))>>2] = -1;
 $3 = HEAP32[405088>>2]|0;
 $4 = (($3) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum = (($5) + 24)|0;
 $6 = (405088 + ($$sum)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[405176>>2] = ((406936 + 12|0));
 HEAP32[((405176 + 4|0))>>2] = ((406936 + 32|0));
 __ZNSt3__18ios_base4initEPv(((405176 + 4|0)),$7);
 HEAP32[((405176 + 76|0))>>2] = 0;
 HEAP32[((405176 + 80|0))>>2] = -1;
 $8 = HEAP32[404912>>2]|0;
 $9 = (($8) + -12|0);
 $10 = HEAP32[$9>>2]|0;
 $$sum5 = (($10) + 72)|0;
 $11 = (404912 + ($$sum5)|0);
 HEAP32[$11>>2] = 405000;
 $12 = HEAP32[405088>>2]|0;
 $13 = (($12) + -12|0);
 $14 = HEAP32[$13>>2]|0;
 $$sum6 = (($14) + 4)|0;
 $15 = (405088 + ($$sum6)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | 8192;
 HEAP32[$15>>2] = $17;
 $18 = HEAP32[405088>>2]|0;
 $19 = (($18) + -12|0);
 $20 = HEAP32[$19>>2]|0;
 $$sum7 = (($20) + 72)|0;
 $21 = (405088 + ($$sum7)|0);
 HEAP32[$21>>2] = 405000;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(405824,$0,((405680 + 24|0)));
 HEAP32[405264>>2] = ((406896 + 12|0));
 HEAP32[((405264 + 8|0))>>2] = ((406896 + 32|0));
 HEAP32[((405264 + 4|0))>>2] = 0;
 __ZNSt3__18ios_base4initEPv(((405264 + 8|0)),405824);
 HEAP32[((405264 + 80|0))>>2] = 0;
 HEAP32[((405264 + 84|0))>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(405880,$1,((405680 + 32|0)));
 HEAP32[405352>>2] = ((406976 + 12|0));
 HEAP32[((405352 + 4|0))>>2] = ((406976 + 32|0));
 __ZNSt3__18ios_base4initEPv(((405352 + 4|0)),405880);
 HEAP32[((405352 + 76|0))>>2] = 0;
 HEAP32[((405352 + 80|0))>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(405928,$2,((405680 + 40|0)));
 HEAP32[405440>>2] = ((406976 + 12|0));
 HEAP32[((405440 + 4|0))>>2] = ((406976 + 32|0));
 __ZNSt3__18ios_base4initEPv(((405440 + 4|0)),405928);
 HEAP32[((405440 + 76|0))>>2] = 0;
 HEAP32[((405440 + 80|0))>>2] = -1;
 $22 = HEAP32[405440>>2]|0;
 $23 = (($22) + -12|0);
 $24 = HEAP32[$23>>2]|0;
 $$sum8 = (($24) + 24)|0;
 $25 = (405440 + ($$sum8)|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[405528>>2] = ((406976 + 12|0));
 HEAP32[((405528 + 4|0))>>2] = ((406976 + 32|0));
 __ZNSt3__18ios_base4initEPv(((405528 + 4|0)),$26);
 HEAP32[((405528 + 76|0))>>2] = 0;
 HEAP32[((405528 + 80|0))>>2] = -1;
 $27 = HEAP32[405264>>2]|0;
 $28 = (($27) + -12|0);
 $29 = HEAP32[$28>>2]|0;
 $$sum9 = (($29) + 72)|0;
 $30 = (405264 + ($$sum9)|0);
 HEAP32[$30>>2] = 405352;
 $31 = HEAP32[405440>>2]|0;
 $32 = (($31) + -12|0);
 $33 = HEAP32[$32>>2]|0;
 $$sum10 = (($33) + 4)|0;
 $34 = (405440 + ($$sum10)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 | 8192;
 HEAP32[$34>>2] = $36;
 $37 = HEAP32[405440>>2]|0;
 $38 = (($37) + -12|0);
 $39 = HEAP32[$38>>2]|0;
 $$sum11 = (($39) + 72)|0;
 $40 = (405440 + ($$sum11)|0);
 HEAP32[$40>>2] = 405352;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(405000)|0);
 (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(405176)|0);
 (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(405352)|0);
 (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(405528)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((405976 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409648)|0);
 $4 = (($this) + 36|0);
 __ZNSt3__16localeD2Ev($0);
 HEAP32[$4>>2] = $3;
 $5 = (($this) + 40|0);
 HEAP32[$5>>2] = $__st;
 $6 = (($this) + 44|0);
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($3)|0);
 $11 = $10&1;
 HEAP8[$6>>0] = $11;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406792 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409648)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 15]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 31]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((406088 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406792 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409648)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(406192);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   } else if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 15]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((406232 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409640)|0);
 $4 = (($this) + 36|0);
 __ZNSt3__16localeD2Ev($0);
 HEAP32[$4>>2] = $3;
 $5 = (($this) + 40|0);
 HEAP32[$5>>2] = $__st;
 $6 = (($this) + 44|0);
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($3)|0);
 $11 = $10&1;
 HEAP8[$6>>0] = $11;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406728 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409640)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 15]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 31]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((406344 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406728 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409640)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(406192);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 15]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((243|0),(405616|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((418024 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($0,$msg);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((418048 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($0,$7);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((418048 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($0,$msg);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (($0) + 13)|0;
 $3 = (__Znaj($2)|0);
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = $0;
 HEAP32[$3>>2] = $0;
 $5 = (($3) + 12|0);
 HEAP32[$this>>2] = $5;
 $6 = (($3) + 8|0);
 HEAP32[$6>>2] = 0;
 _memcpy(($5|0),($msg|0),($1|0))|0;
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = HEAP8[$what_arg>>0]|0;
  $4 = $3 & 1;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $8 = $3&255;
   $9 = $8 >>> 1;
   $10 = $9;
  } else {
   $6 = (($what_arg) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $10 = $7;
  }
  $11 = ($10|0)==(0);
  if ($11) {
   $17 = $1;
  } else {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,406488)|0);
   $$pre = HEAP32[$ec>>2]|0;
   $17 = $$pre;
  }
  $12 = (($ec) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_viii[$16 & 7]($0,$13,$17);
  $18 = HEAP8[$0>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $25 = (($0) + 1|0);
   $26 = $18&255;
   $27 = $26 >>> 1;
   $28 = $25;$29 = $27;
  } else {
   $21 = (($0) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($0) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $22;$29 = $24;
  }
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$28,$29)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 }
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$ec,$1);
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 HEAP32[$this>>2] = ((406496 + 8|0));
 $3 = (($this) + 8|0);
 $4 = $ec;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((406640|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((406664|0),(406640|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$flag>>2] = 1;
  (_pthread_mutex_unlock((406640|0))|0);
  FUNCTION_TABLE_vi[$func & 511]($arg);
  (_pthread_mutex_lock((406640|0))|0);
  HEAP32[$flag>>2] = -1;
  (_pthread_mutex_unlock((406640|0))|0);
  (_pthread_cond_broadcast((406664|0))|0);
  STACKTOP = sp;return;
 } else {
  (_pthread_mutex_unlock((406640|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __ZNSt11logic_errorC2EPKc($0,406712);
 HEAP32[$0>>2] = ((418104 + 8|0));
 ___cxa_throw(($0|0),(418152|0),(229|0));
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __ZNSt11logic_errorC2EPKc($0,406712);
 HEAP32[$0>>2] = ((418168 + 8|0));
 ___cxa_throw(($0|0),(418216|0),(229|0));
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,0);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($__str) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(0);
  // unreachable;
 }
 if ($2) {
  $11 = (($__str) + 1|0);
  $13 = $11;
 } else {
  $9 = (($__str) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($7) - ($__pos))|0;
 $15 = ($14>>>0)<($__n>>>0);
 $16 = $15 ? $14 : $__n;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$12,$16);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $15 = (0 - ($0))|0;
 $scevgep = (($__last) + ($15)|0);
 $scevgep3 = $scevgep;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $16 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $16;
  $17 = (($$02) + 1|0);
  $18 = (($__p$01) + 1|0);
  $19 = ($17|0)==($__last|0);
  if ($19) {
   break;
  } else {
   $$02 = $17;$__p$01 = $18;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($scevgep3)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$__str>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = (($__str) + 1|0);
  $9 = $1&255;
  $10 = $9 >>> 1;
  $11 = $8;$12 = $10;
 } else {
  $4 = (($__str) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($__str) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $5;$12 = $7;
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$11,$12)|0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($7) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($6))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 1|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 _memmove(($14|0),($__s|0),($__n|0))|0;
 $15 = (($14) + ($__n)|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 if ($8) {
  $9 = (($__n) - ($7))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this>>0] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12>>0] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $16 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $16 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = (($16) - ($15))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($16))|0;
  $19 = (($18) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($15)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($15) + ($__n))|0;
 $29 = HEAP8[$this>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this>>0] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $23 = ($20|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($20>>>0)>($22>>>0);
   $28 = (($20) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    $30 = (__Znwj($28)|0);
    $__new_data$0 = $30;
   }
   $31 = $8 & 1;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $35 = (($this) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $35;$__was_long$0$off0 = 0;
    break;
   } else {
    $33 = (($this) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $34;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $36 = $8 & 1;
 $37 = ($36<<24>>24)==(0);
 if ($37) {
  $40 = $8&255;
  $41 = $40 >>> 1;
  $43 = $41;
 } else {
  $38 = (($this) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $43 = $39;
 }
 $42 = (($43) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($42|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $44 = (($20) + 1)|0;
  $45 = $44 | 1;
  HEAP32[$this>>2] = $45;
  $46 = (($this) + 4|0);
  HEAP32[$46>>2] = $14;
  $47 = (($this) + 8|0);
  HEAP32[$47>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $48 = $14 << 1;
  $49 = $48&255;
  HEAP8[$this>>0] = $49;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $15 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $15 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($15))|0;
  $34 = (($33) + ($14))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($14)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($14) + ($__n))|0;
 $26 = HEAP8[$this>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this>>0] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj($this,$__pos,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$1 = 0, $$12 = 0, $$14 = 0, $$2 = 0, $$sum = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(0);
  // unreachable;
 }
 $9 = (($7) - ($__pos))|0;
 $10 = ($9>>>0)<($__n1>>>0);
 $11 = $10 ? $9 : $__n1;
 if ($2) {
  $17 = 10;$20 = $0;
 } else {
  $12 = HEAP32[$this>>2]|0;
  $13 = $12 & -2;
  $phitmp$i = (($13) + -1)|0;
  $14 = $12&255;
  $17 = $phitmp$i;$20 = $14;
 }
 $15 = (($11) - ($7))|0;
 $16 = (($15) + ($17))|0;
 $18 = ($16>>>0)<($__n2>>>0);
 if ($18) {
  $56 = (($7) + ($__n2))|0;
  $57 = (($56) - ($11))|0;
  $58 = (($57) - ($17))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$17,$58,$7,$__pos,$11,$__n2,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $19 = $20 & 1;
 $21 = ($19<<24>>24)==(0);
 if ($21) {
  $24 = (($this) + 1|0);
  $30 = $24;
 } else {
  $22 = (($this) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $30 = $23;
 }
 $25 = ($11|0)==($__n2|0);
 do {
  if ($25) {
   $$1 = $__pos;$$12 = $__s;$$14 = $__n2;$59 = $__n2;
   label = 22;
  } else {
   $26 = (($9) - ($11))|0;
   $27 = ($9|0)==($11|0);
   if ($27) {
    $$1 = $__pos;$$12 = $__s;$$14 = $__n2;$59 = $9;
    label = 22;
   } else {
    $28 = ($11>>>0)>($__n2>>>0);
    $29 = (($30) + ($__pos)|0);
    if ($28) {
     _memmove(($29|0),($__s|0),($__n2|0))|0;
     $$sum7 = (($__n2) + ($__pos))|0;
     $31 = (($30) + ($$sum7)|0);
     $$sum8 = (($11) + ($__pos))|0;
     $32 = (($30) + ($$sum8)|0);
     _memmove(($31|0),($32|0),($26|0))|0;
     $$2 = $__n2;$47 = $11;
     break;
    }
    $33 = ($29>>>0)<($__s>>>0);
    do {
     if ($33) {
      $34 = (($30) + ($7)|0);
      $35 = ($34>>>0)>($__s>>>0);
      if ($35) {
       $$sum6 = (($11) + ($__pos))|0;
       $36 = (($30) + ($$sum6)|0);
       $37 = ($36>>>0)>($__s>>>0);
       if ($37) {
        _memmove(($29|0),($__s|0),($11|0))|0;
        $40 = (($__s) + ($__n2)|0);
        $41 = (($__n2) - ($11))|0;
        $$0 = $$sum6;$$01 = $40;$$03 = $41;$43 = 0;
        break;
       } else {
        $38 = (($__n2) - ($11))|0;
        $39 = (($__s) + ($38)|0);
        $$0 = $__pos;$$01 = $39;$$03 = $__n2;$43 = $11;
        break;
       }
      } else {
       $$0 = $__pos;$$01 = $__s;$$03 = $__n2;$43 = $11;
      }
     } else {
      $$0 = $__pos;$$01 = $__s;$$03 = $__n2;$43 = $11;
     }
    } while(0);
    $$sum = (($$0) + ($$03))|0;
    $42 = (($30) + ($$sum)|0);
    $$sum5 = (($$0) + ($43))|0;
    $44 = (($30) + ($$sum5)|0);
    _memmove(($42|0),($44|0),($26|0))|0;
    $$1 = $$0;$$12 = $$01;$$14 = $$03;$59 = $43;
    label = 22;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $45 = (($30) + ($$1)|0);
  _memmove(($45|0),($$12|0),($$14|0))|0;
  $$2 = $$14;$47 = $59;
 }
 $46 = (($$2) - ($47))|0;
 $48 = (($46) + ($7))|0;
 $49 = HEAP8[$this>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $53 = $48 << 1;
  $54 = $53&255;
  HEAP8[$this>>0] = $54;
 } else {
  $52 = (($this) + 4|0);
  HEAP32[$52>>2] = $48;
 }
 $55 = (($30) + ($48)|0);
 HEAP8[$55>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj($this,$__s,$__pos,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 var $$0 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 3|0;
 $$byval_copy = sp + 2|0;
 $0 = sp + 1|0;
 $1 = sp;
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  $9 = $8;
 } else {
  $5 = (($this) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = ($9>>>0)<($__pos>>>0);
 $11 = (($9) - ($__pos))|0;
 $12 = ($11>>>0)<($__n>>>0);
 $or$cond = $10 | $12;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($__n|0)==(0);
 if ($13) {
  $$0 = $__pos;
  STACKTOP = sp;return ($$0|0);
 }
 if ($4) {
  $16 = (($this) + 1|0);
  $18 = $16;
 } else {
  $14 = (($this) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 }
 $17 = (($18) + ($__pos)|0);
 $19 = (($18) + ($9)|0);
 $20 = (($__s) + ($__n)|0);
 ;HEAP8[$$byval_copy+0>>0]=HEAP8[$0+0>>0]|0;
 ;HEAP8[$$byval_copy1+0>>0]=HEAP8[$1+0>>0]|0;
 $21 = (__ZNSt3__18__searchIRNS_11__traits_eqINS_11char_traitsIcEEEEPKcS7_EET0_S8_S8_T1_S9_T_NS_26random_access_iterator_tagESB_($17,$19,$__s,$20,0,$$byval_copy,$$byval_copy1)|0);
 $22 = ($21|0)==($19|0);
 if ($22) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = $21;
 $24 = $18;
 $25 = (($23) - ($24))|0;
 $$0 = $25;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($this,$__c,$__pos) {
 $this = $this|0;
 $__c = $__c|0;
 $__pos = $__pos|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)>($__pos>>>0);
 if (!($8)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ($2) {
  $11 = (($this) + 1|0);
  $13 = $11;
 } else {
  $9 = (($this) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($7) - ($__pos))|0;
 $15 = $__c&255;
 $16 = (_memchr($12,$15,$14)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $16;
 $19 = $13;
 $20 = (($18) - ($19))|0;
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($this,$__pos1,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos1 = $__pos1|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos1>>>0);
 $9 = ($__n2|0)==(-1);
 $or$cond = $8 | $9;
 if ($or$cond) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(0);
  // unreachable;
 }
 $10 = (($7) - ($__pos1))|0;
 $11 = ($10>>>0)<($__n1>>>0);
 $12 = $11 ? $10 : $__n1;
 if ($2) {
  $15 = (($this) + 1|0);
  $17 = $15;
 } else {
  $13 = (($this) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $16 = (($17) + ($__pos1)|0);
 $18 = ($12>>>0)>($__n2>>>0);
 $19 = $18 ? $__n2 : $12;
 $20 = (_memcmp($16,$__s,$19)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $__r$0 = $20;
  STACKTOP = sp;return ($__r$0|0);
 }
 $22 = ($12>>>0)<($__n2>>>0);
 if ($22) {
  $__r$0 = -1;
  STACKTOP = sp;return ($__r$0|0);
 } else {
  $$ = $18&1;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($this,0,-1,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $17 = (0 - ($0))|0;
 $uglygep = (($scevgep) + ($17)|0);
 $uglygep4 = $uglygep;
 $18 = $uglygep4 >>> 2;
 $19 = (($18) + 1)|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $20 = HEAP32[$$02>>2]|0;
  HEAP32[$__p$01>>2] = $20;
  $21 = (($$02) + 4|0);
  $22 = (($__p$01) + 4|0);
  $23 = ($21|0)==($__last|0);
  if ($23) {
   break;
  } else {
   $$02 = $21;$__p$01 = $22;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($19<<2)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($7) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($6))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $20 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $23 = ($20|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($20>>>0)>($22>>>0);
   $28 = $20 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    $31 = (__Znwj($29)|0);
    $$sink = $31;
   }
   $32 = $8 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $36 = (($this) + 4|0);
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $36;$__was_long$0$off0 = 0;
    break;
   } else {
    $34 = (($this) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $35;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $37 = $8 & 1;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $41 = $8&255;
  $42 = $41 >>> 1;
  $44 = $42;
 } else {
  $39 = (($this) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $44 = $40;
 }
 $43 = (($44) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$43)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $45 = (($20) + 1)|0;
  $46 = $45 | 1;
  HEAP32[$this>>2] = $46;
  $47 = (($this) + 4|0);
  HEAP32[$47>>2] = $14;
  $48 = (($this) + 8|0);
  HEAP32[$48>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $49 = $14 << 1;
  $50 = $49&255;
  HEAP8[$this>>0] = $50;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 } else {
  $13 = (___cxa_allocate_exception(16)|0);
  (__ZNSt3__117iostream_categoryEv()|0);
  $14 = $0;
  $15 = $14;
  HEAP32[$15>>2] = 1;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = (407072);
  __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($13,407128,$0);
  ___cxa_throw(($13|0),(407176|0),(162|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((407112 + 8|0));
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,0);
 $0 = (($this) + 28|0);
 __ZNSt3__16localeD2Ev($0);
 $1 = (($this) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = (($this) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = (($this) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = (($this) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 32|0);
 $4 = (($this) + 36|0);
 $i$01 = $1;
 while(1) {
  $5 = (($i$01) + -1)|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 7]($ev,$this,$11);
  $12 = ($5|0)==(0);
  if ($12) {
   break;
  } else {
   $i$01 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406728 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406728 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406728 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406728 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 31]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406792 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406792 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406792 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((406792 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 31]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$ = 0, $$0$i$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__is) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $91 = (($__is) + ($3)|0);
  $92 = $5 | 4;
  __ZNSt3__18ios_base5clearEj($91,$92);
  STACKTOP = sp;return;
 }
 $$sum13 = (($3) + 72)|0;
 $7 = (($__is) + ($$sum13)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 do {
  if (!($__noskipws)) {
   $10 = HEAP32[$__is>>2]|0;
   $11 = (($10) + -12|0);
   $12 = HEAP32[$11>>2]|0;
   $$sum14 = (($12) + 4)|0;
   $13 = (($__is) + ($$sum14)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 4096;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $$sum15 = (($12) + 28)|0;
    $17 = (($__is) + ($$sum15)|0);
    __ZNSt3__16localeC2ERKS0_($0,$17);
    $18 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
    __ZNSt3__16localeD2Ev($0);
    $19 = HEAP32[$__is>>2]|0;
    $20 = (($19) + -12|0);
    $21 = HEAP32[$20>>2]|0;
    $$sum$i$i = (($21) + 24)|0;
    $22 = (($__is) + ($$sum$i$i)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($18) + 8|0);
    $25 = $23;
    while(1) {
     $26 = ($25|0)==(0|0);
     if ($26) {
      break;
     }
     $27 = (($25) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($25) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($28|0)==($30|0);
     if ($31) {
      $32 = HEAP32[$25>>2]|0;
      $33 = (($32) + 36|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (FUNCTION_TABLE_ii[$34 & 127]($25)|0);
      $36 = ($35|0)==(-1);
      $$ = $36 ? 0 : $25;
      $37 = ($$|0)==(0|0);
      if ($37) {
       break;
      } else {
       $39 = $$;
      }
     } else {
      $39 = $25;
     }
     $38 = (($39) + 12|0);
     $40 = HEAP32[$38>>2]|0;
     $41 = (($39) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($40|0)==($42|0);
     if ($43) {
      $44 = HEAP32[$39>>2]|0;
      $45 = (($44) + 36|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (FUNCTION_TABLE_ii[$46 & 127]($39)|0);
      $$0$i$i = $47;
     } else {
      $48 = HEAP8[$40>>0]|0;
      $49 = $48&255;
      $$0$i$i = $49;
     }
     $50 = $$0$i$i&255;
     $isascii1$i = ($50<<24>>24)>(-1);
     if (!($isascii1$i)) {
      label = 18;
      break;
     }
     $sext = $$0$i$i << 24;
     $51 = $sext >> 24;
     $52 = HEAP32[$24>>2]|0;
     $53 = (($52) + ($51<<1)|0);
     $54 = HEAP16[$53>>1]|0;
     $55 = $54 & 8192;
     $56 = ($55<<16>>16)==(0);
     if ($56) {
      label = 18;
      break;
     }
     $57 = HEAP32[$38>>2]|0;
     $58 = HEAP32[$41>>2]|0;
     $59 = ($57|0)==($58|0);
     if ($59) {
      $60 = HEAP32[$39>>2]|0;
      $61 = (($60) + 40|0);
      $62 = HEAP32[$61>>2]|0;
      (FUNCTION_TABLE_ii[$62 & 127]($39)|0);
      $25 = $39;
      continue;
     } else {
      $63 = (($57) + 1|0);
      HEAP32[$38>>2] = $63;
      $25 = $39;
      continue;
     }
    }
    if ((label|0) == 18) {
     $64 = ($39|0)==(0|0);
     if (!($64)) {
      $65 = (($39) + 12|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (($39) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($66|0)==($68|0);
      if (!($69)) {
       break;
      }
      $70 = HEAP32[$39>>2]|0;
      $71 = (($70) + 36|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (FUNCTION_TABLE_ii[$72 & 127]($39)|0);
      $74 = ($73|0)==(-1);
      $75 = ($39|0)==(0|0);
      $76 = $74 | $75;
      if (!($76)) {
       break;
      }
     }
    }
    $77 = HEAP32[$__is>>2]|0;
    $78 = (($77) + -12|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($__is) + ($79)|0);
    $$sum17 = (($79) + 16)|0;
    $81 = (($__is) + ($$sum17)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $82 | 6;
    __ZNSt3__18ios_base5clearEj($80,$83);
   }
  }
 } while(0);
 $84 = HEAP32[$__is>>2]|0;
 $85 = (($84) + -12|0);
 $86 = HEAP32[$85>>2]|0;
 $$sum16 = (($86) + 16)|0;
 $87 = (($__is) + ($$sum16)|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(0);
 $90 = $89&1;
 HEAP8[$this>>0] = $90;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
 $6 = HEAP8[$__s>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[$this>>2]|0;
  $9 = (($8) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $$sum1 = (($10) + 24)|0;
  $11 = (($this) + ($$sum1)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_ii[$15 & 127]($12)|0);
  $17 = ($16|0)==(-1);
  if ($17) {
   $18 = HEAP32[$this>>2]|0;
   $19 = (($18) + -12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($this) + ($20)|0);
   $$sum2 = (($20) + 16)|0;
   $22 = (($this) + ($$sum2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 | 1;
   __ZNSt3__18ios_base5clearEj($21,$24);
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERb($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$sum = 0, $$sum$i$i = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__err = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__s = sp + 28|0;
 $__err = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__s,$this,0);
 $4 = HEAP8[$__s>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP32[$__err>>2] = 0;
 $6 = HEAP32[$this>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $$sum = (($8) + 28)|0;
 $9 = (($this) + ($$sum)|0);
 __ZNSt3__16localeC2ERKS0_($2,$9);
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($2,408080)|0);
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $$sum$i$i = (($13) + 24)|0;
 $14 = (($this) + ($$sum$i$i)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + ($13)|0);
 $17 = HEAP32[$10>>2]|0;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$1>>2] = 0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$19 & 63]($3,$10,$$byval_copy,$$byval_copy1,$16,$__err,$__n);
 __ZNSt3__16localeD2Ev($2);
 $20 = HEAP32[$this>>2]|0;
 $21 = (($20) + -12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($this) + ($22)|0);
 $24 = HEAP32[$__err>>2]|0;
 $$sum7 = (($22) + 16)|0;
 $25 = (($this) + ($$sum7)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | $24;
 __ZNSt3__18ios_base5clearEj($23,$27);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$sum = 0, $$sum$i$i = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__err = 0, $__s = 0, $__temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy1 = sp + 28|0;
 $$byval_copy = sp + 24|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $__s = sp + 32|0;
 $__err = sp + 12|0;
 $__temp = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__s,$this,0);
 $4 = HEAP8[$__s>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP32[$__err>>2] = 0;
 $6 = HEAP32[$this>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $$sum = (($8) + 28)|0;
 $9 = (($this) + ($$sum)|0);
 __ZNSt3__16localeC2ERKS0_($2,$9);
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($2,408080)|0);
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $$sum$i$i = (($13) + 24)|0;
 $14 = (($this) + ($$sum$i$i)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + ($13)|0);
 $17 = HEAP32[$10>>2]|0;
 $18 = (($17) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$1>>2] = 0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$19 & 63]($3,$10,$$byval_copy,$$byval_copy1,$16,$__err,$__temp);
 __ZNSt3__16localeD2Ev($2);
 $20 = HEAP32[$__temp>>2]|0;
 HEAP32[$__n>>2] = $20;
 $21 = HEAP32[$this>>2]|0;
 $22 = (($21) + -12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($this) + ($23)|0);
 $25 = HEAP32[$__err>>2]|0;
 $$sum7 = (($23) + 16)|0;
 $26 = (($this) + ($$sum7)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 | $25;
 __ZNSt3__18ios_base5clearEj($24,$28);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$sum = 0, $$sum$i$i = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__err = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__s = sp + 28|0;
 $__err = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__s,$this,0);
 $4 = HEAP8[$__s>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP32[$__err>>2] = 0;
 $6 = HEAP32[$this>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $$sum = (($8) + 28)|0;
 $9 = (($this) + ($$sum)|0);
 __ZNSt3__16localeC2ERKS0_($2,$9);
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($2,408080)|0);
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $$sum$i$i = (($13) + 24)|0;
 $14 = (($this) + ($$sum$i$i)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + ($13)|0);
 $17 = HEAP32[$10>>2]|0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$1>>2] = 0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$19 & 63]($3,$10,$$byval_copy,$$byval_copy1,$16,$__err,$__n);
 __ZNSt3__16localeD2Ev($2);
 $20 = HEAP32[$this>>2]|0;
 $21 = (($20) + -12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($this) + ($22)|0);
 $24 = HEAP32[$__err>>2]|0;
 $$sum7 = (($22) + 16)|0;
 $25 = (($this) + ($$sum7)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | $24;
 __ZNSt3__18ios_base5clearEj($23,$27);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERd($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$sum = 0, $$sum$i$i = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__err = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__s = sp + 28|0;
 $__err = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__s,$this,0);
 $4 = HEAP8[$__s>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP32[$__err>>2] = 0;
 $6 = HEAP32[$this>>2]|0;
 $7 = (($6) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $$sum = (($8) + 28)|0;
 $9 = (($this) + ($$sum)|0);
 __ZNSt3__16localeC2ERKS0_($2,$9);
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($2,408080)|0);
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $$sum$i$i = (($13) + 24)|0;
 $14 = (($this) + ($$sum$i$i)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + ($13)|0);
 $17 = HEAP32[$10>>2]|0;
 $18 = (($17) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$1>>2] = 0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$19 & 63]($3,$10,$$byval_copy,$$byval_copy1,$16,$__err,$__n);
 __ZNSt3__16localeD2Ev($2);
 $20 = HEAP32[$this>>2]|0;
 $21 = (($20) + -12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($this) + ($22)|0);
 $24 = HEAP32[$__err>>2]|0;
 $$sum7 = (($22) + 16)|0;
 $25 = (($this) + ($$sum7)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | $24;
 __ZNSt3__18ios_base5clearEj($23,$27);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic($this,$__s,$__n,$__dlm) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 $__dlm = $__dlm|0;
 var $$0 = 0, $$0$i6 = 0, $$__err$0 = 0, $$sum = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__err$0 = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sen = sp;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__sen,$this,1);
 $1 = HEAP8[$__sen>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return ($this|0);
 }
 $3 = (($__n) + -1)|0;
 $$0 = $__s;
 while(1) {
  $4 = HEAP32[$this>>2]|0;
  $5 = (($4) + -12|0);
  $6 = HEAP32[$5>>2]|0;
  $$sum = (($6) + 24)|0;
  $7 = (($this) + ($$sum)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)==($12|0);
  if ($13) {
   $14 = HEAP32[$8>>2]|0;
   $15 = (($14) + 36|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (FUNCTION_TABLE_ii[$16 & 127]($8)|0);
   $18 = ($17|0)==(-1);
   if ($18) {
    $__err$0 = 2;
    break;
   } else {
    $$0$i6 = $17;
   }
  } else {
   $19 = HEAP8[$10>>0]|0;
   $20 = $19&255;
   $$0$i6 = $20;
  }
  $21 = $$0$i6&255;
  $22 = ($21<<24>>24)==($__dlm<<24>>24);
  if ($22) {
   label = 8;
   break;
  }
  $39 = HEAP32[$0>>2]|0;
  $40 = ($39|0)<($3|0);
  if (!($40)) {
   $__err$0 = 4;
   break;
  }
  $41 = (($$0) + 1|0);
  HEAP8[$$0>>0] = $21;
  $42 = HEAP32[$this>>2]|0;
  $43 = (($42) + -12|0);
  $44 = HEAP32[$43>>2]|0;
  $$sum8 = (($44) + 24)|0;
  $45 = (($this) + ($$sum8)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
  }
  $56 = HEAP32[$0>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[$0>>2] = $57;
  $$0 = $41;
 }
 if ((label|0) == 8) {
  $23 = HEAP32[$this>>2]|0;
  $24 = (($23) + -12|0);
  $25 = HEAP32[$24>>2]|0;
  $$sum9 = (($25) + 24)|0;
  $26 = (($this) + ($$sum9)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 40|0);
   $35 = HEAP32[$34>>2]|0;
   (FUNCTION_TABLE_ii[$35 & 127]($27)|0);
  } else {
   $36 = (($29) + 1|0);
   HEAP32[$28>>2] = $36;
  }
  $37 = HEAP32[$0>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$0>>2] = $38;
  $__err$0 = 0;
 }
 $58 = ($__n|0)>(0);
 if ($58) {
  HEAP8[$$0>>0] = 0;
 }
 $59 = HEAP32[$0>>2]|0;
 $60 = ($59|0)==(0);
 $61 = $__err$0 | 4;
 $$__err$0 = $60 ? $61 : $__err$0;
 $62 = HEAP32[$this>>2]|0;
 $63 = (($62) + -12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($this) + ($64)|0);
 $$sum7 = (($64) + 16)|0;
 $66 = (($this) + ($$sum7)|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 | $$__err$0;
 __ZNSt3__18ios_base5clearEj($65,$68);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($__s,$this);
 $6 = HEAP8[$__s>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[$this>>2]|0;
  $9 = (($8) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $$sum1 = (($10) + 24)|0;
  $11 = (($this) + ($$sum1)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_ii[$15 & 127]($12)|0);
  $17 = ($16|0)==(-1);
  if ($17) {
   $18 = HEAP32[$this>>2]|0;
   $19 = (($18) + -12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($this) + ($20)|0);
   $$sum2 = (($20) + 16)|0;
   $22 = (($this) + ($$sum2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 | 1;
   __ZNSt3__18ios_base5clearEj($21,$24);
  }
 }
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 127]($21)|0);
 $26 = ($25|0)==(-1);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($27) + ($30)|0);
 $$sum4 = (($30) + 16)|0;
 $32 = (($27) + ($$sum4)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 1;
 __ZNSt3__18ios_base5clearEj($31,$34);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEt($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$sum = 0, $$sum$i$i = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__s = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
 $3 = HEAP8[$__s>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($this|0);
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 $7 = HEAP32[$6>>2]|0;
 $$sum = (($7) + 28)|0;
 $8 = (($this) + ($$sum)|0);
 __ZNSt3__16localeC2ERKS0_($1,$8);
 $9 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,408264)|0);
 __ZNSt3__16localeD2Ev($1);
 $10 = HEAP32[$this>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum$i$i = (($12) + 24)|0;
 $13 = (($this) + ($$sum$i$i)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($this) + ($12)|0);
 $$sum3 = (($12) + 76)|0;
 $16 = (($this) + ($$sum3)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(-1);
 if ($18) {
  $$sum5 = (($12) + 28)|0;
  $19 = (($this) + ($$sum5)|0);
  __ZNSt3__16localeC2ERKS0_($$byval_copy,$19);
  $20 = (__ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy,409576)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 31]($20,32)|0);
  __ZNSt3__16localeD2Ev($$byval_copy);
  $25 = $24 << 24 >> 24;
  HEAP32[$16>>2] = $25;
  $27 = $25;
 } else {
  $27 = $17;
 }
 $26 = $27&255;
 $28 = $__n&65535;
 $29 = HEAP32[$9>>2]|0;
 $30 = (($29) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$0>>2] = $14;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 FUNCTION_TABLE_viiiiii[$31 & 31]($2,$9,$$byval_copy,$15,$26,$28);
 $32 = HEAP32[$2>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($this|0);
 }
 $34 = HEAP32[$this>>2]|0;
 $35 = (($34) + -12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($this) + ($36)|0);
 $$sum4 = (($36) + 16)|0;
 $38 = (($this) + ($$sum4)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 | 5;
 __ZNSt3__18ios_base5clearEj($37,$40);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$sum = 0, $$sum$i$i = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__s = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
 $3 = HEAP8[$__s>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($this|0);
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 $7 = HEAP32[$6>>2]|0;
 $$sum = (($7) + 28)|0;
 $8 = (($this) + ($$sum)|0);
 __ZNSt3__16localeC2ERKS0_($1,$8);
 $9 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,408264)|0);
 __ZNSt3__16localeD2Ev($1);
 $10 = HEAP32[$this>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum$i$i = (($12) + 24)|0;
 $13 = (($this) + ($$sum$i$i)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($this) + ($12)|0);
 $$sum4 = (($12) + 76)|0;
 $16 = (($this) + ($$sum4)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(-1);
 if ($18) {
  $$sum6 = (($12) + 28)|0;
  $19 = (($this) + ($$sum6)|0);
  __ZNSt3__16localeC2ERKS0_($$byval_copy,$19);
  $20 = (__ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy,409576)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 31]($20,32)|0);
  __ZNSt3__16localeD2Ev($$byval_copy);
  $25 = $24 << 24 >> 24;
  HEAP32[$16>>2] = $25;
  $27 = $25;
 } else {
  $27 = $17;
 }
 $26 = $27&255;
 $28 = HEAP32[$9>>2]|0;
 $29 = (($28) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$0>>2] = $14;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 FUNCTION_TABLE_viiiiii[$30 & 31]($2,$9,$$byval_copy,$15,$26,$__n);
 $31 = HEAP32[$2>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($this|0);
 }
 $33 = HEAP32[$this>>2]|0;
 $34 = (($33) + -12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($this) + ($35)|0);
 $$sum5 = (($35) + 16)|0;
 $37 = (($this) + ($$sum5)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 | 5;
 __ZNSt3__18ios_base5clearEj($36,$39);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$sum = 0, $$sum$i$i = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__s = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
 $3 = HEAP8[$__s>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($this|0);
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 $7 = HEAP32[$6>>2]|0;
 $$sum = (($7) + 28)|0;
 $8 = (($this) + ($$sum)|0);
 __ZNSt3__16localeC2ERKS0_($1,$8);
 $9 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,408264)|0);
 __ZNSt3__16localeD2Ev($1);
 $10 = HEAP32[$this>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum$i$i = (($12) + 24)|0;
 $13 = (($this) + ($$sum$i$i)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($this) + ($12)|0);
 $$sum3 = (($12) + 76)|0;
 $16 = (($this) + ($$sum3)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(-1);
 if ($18) {
  $$sum5 = (($12) + 28)|0;
  $19 = (($this) + ($$sum5)|0);
  __ZNSt3__16localeC2ERKS0_($$byval_copy,$19);
  $20 = (__ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy,409576)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 31]($20,32)|0);
  __ZNSt3__16localeD2Ev($$byval_copy);
  $25 = $24 << 24 >> 24;
  HEAP32[$16>>2] = $25;
  $27 = $25;
 } else {
  $27 = $17;
 }
 $26 = $27&255;
 $28 = HEAP32[$9>>2]|0;
 $29 = (($28) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$0>>2] = $14;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 FUNCTION_TABLE_viiiiii[$30 & 31]($2,$9,$$byval_copy,$15,$26,$__n);
 $31 = HEAP32[$2>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($this|0);
 }
 $33 = HEAP32[$this>>2]|0;
 $34 = (($33) + -12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($this) + ($35)|0);
 $$sum4 = (($35) + 16)|0;
 $37 = (($this) + ($$sum4)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 | 5;
 __ZNSt3__18ios_base5clearEj($36,$39);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pre = 0, $$sum = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
 $0 = HEAP8[$__s>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if (!($1)) {
   $2 = HEAP32[$this>>2]|0;
   $3 = (($2) + -12|0);
   $4 = HEAP32[$3>>2]|0;
   $$sum$i$i = (($4) + 24)|0;
   $5 = (($this) + ($$sum$i$i)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $21 = $2;
   } else {
    $8 = (($6) + 24|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($6) + 28|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if (!($12)) {
     $13 = (($9) + 1|0);
     HEAP32[$8>>2] = $13;
     HEAP8[$9>>0] = $__c;
     break;
    }
    $14 = HEAP32[$6>>2]|0;
    $15 = (($14) + 52|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $__c&255;
    $18 = (FUNCTION_TABLE_iii[$16 & 31]($6,$17)|0);
    $19 = ($18|0)==(-1);
    if (!($19)) {
     break;
    }
    $$pre = HEAP32[$this>>2]|0;
    $21 = $$pre;
   }
   $20 = (($21) + -12|0);
   $22 = HEAP32[$20>>2]|0;
   $23 = (($this) + ($22)|0);
   $$sum = (($22) + 16)|0;
   $24 = (($this) + ($$sum)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 | 1;
   __ZNSt3__18ios_base5clearEj($23,$26);
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 127]($21)|0);
 $26 = ($25|0)==(-1);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($27) + ($30)|0);
 $$sum4 = (($30) + 16)|0;
 $32 = (($27) + ($$sum4)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 1;
 __ZNSt3__18ios_base5clearEj($31,$34);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 $1 = (($0) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 12)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (407016|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)==(1);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,407032,35);
  STACKTOP = sp;return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[407080>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((407080|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[407072>>2] = ((407848 + 8|0));
   (___cxa_atexit((166|0),(407072|0),(___dso_handle|0))|0);
   ___cxa_guard_release((407080|0));
  }
 }
 STACKTOP = sp;return (407072|0);
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((407088 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy2 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  __ZNKSt3__18ios_base6getlocEv($3,$__iob);
  $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($3,409576)|0);
  $18 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($18)|0);
  __ZNKSt3__18ios_base6getlocEv($4,$__iob);
  $19 = (__ZNKSt3__16locale9use_facetERNS0_2idE($4,409720)|0);
  $20 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 63]($__names,$19);
  $24 = (($__names) + 12|0);
  $25 = HEAP32[$19>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 63]($24,$19);
  $28 = HEAP32[$__e>>2]|0;
  HEAP32[$5>>2] = $28;
  $29 = (($__names) + 24|0);
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
  $30 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy2,$__names,$29,$17,$__err,1)|0);
  $31 = ($30|0)==($__names|0);
  $32 = $31&1;
  HEAP8[$__v>>0] = $32;
  $33 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $33;
  $34 = (($__names) + 12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($34);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
  STACKTOP = sp;return;
 }
 HEAP32[$__lv>>2] = -1;
 $10 = HEAP32[$this>>2]|0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$__b>>2]|0;
 HEAP32[$1>>2] = $13;
 $14 = HEAP32[$__e>>2]|0;
 HEAP32[$2>>2] = $14;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$2+0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy2,$__iob,$__err,$__lv);
 $15 = HEAP32[$0>>2]|0;
 HEAP32[$__b>>2] = $15;
 $16 = HEAP32[$__lv>>2]|0;
 if ((($16|0) == 0)) {
  HEAP8[$__v>>0] = 0;
 } else if ((($16|0) == 1)) {
  HEAP8[$__v>>0] = 1;
 } else {
  HEAP8[$__v>>0] = 1;
  HEAP32[$__err>>2] = 4;
 }
 HEAP32[$agg$result>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02676 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off035 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$062 = 0, $__ky1$036 = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$060 = 0, $__n_does_match$1 = 0;
 var $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$332 = 0, $__n_does_match$4 = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$059 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$331 = 0, $__n_might_match$4 = 0, $__st$061 = 0, $__st$133 = 0, $__st$246 = 0, $__st$32577 = 0, $__statbuf = 0, $__status$0 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $158 = $5;$__status$0 = $5;
  }
 } else {
  $158 = 0;$__status$0 = $__statbuf;
 }
 $7 = ($__kb|0)==($__ke|0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$062 = $__kb;$__n_does_match$060 = 0;$__n_might_match$059 = $3;$__st$061 = $__status$0;
  while(1) {
   $8 = HEAP8[$__ky$062>>0]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $8&255;
    $14 = $13 >>> 1;
    $15 = $14;
   } else {
    $11 = (($__ky$062) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $15 = $12;
   }
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$__st$061>>0] = 2;
    $17 = (($__n_might_match$059) + -1)|0;
    $18 = (($__n_does_match$060) + 1)|0;
    $__n_does_match$1 = $18;$__n_might_match$1 = $17;
   } else {
    HEAP8[$__st$061>>0] = 1;
    $__n_does_match$1 = $__n_does_match$060;$__n_might_match$1 = $__n_might_match$059;
   }
   $19 = (($__ky$062) + 12|0);
   $20 = (($__st$061) + 1|0);
   $21 = ($19|0)==($__ke|0);
   if ($21) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$062 = $19;$__n_does_match$060 = $__n_does_match$1;$__n_might_match$059 = $__n_might_match$1;$__st$061 = $20;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L17: while(1) {
  $22 = HEAP32[$__b>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    $34 = 0;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $33 = ($32|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $34 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $34 = $$pre$i$i$i;
      break;
     }
    } else {
     $34 = $22;
    }
   }
  } while(0);
  $35 = ($34|0)==(0|0);
  $36 = HEAP32[$__e>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $$pre$i2$i$i16 = 0;
  } else {
   $38 = (($36) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($36) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$36>>2]|0;
    $44 = (($43) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 127]($36)|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i16 = 0;
    } else {
     $$pre$i2$i$i16 = $36;
    }
   } else {
    $$pre$i2$i$i16 = $36;
   }
  }
  $48 = ($$pre$i2$i$i16|0)==(0|0);
  $tmp$i$i = $35 ^ $48;
  $49 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $49;
  $50 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $51 = (($50) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)==($54|0);
  if ($55) {
   $56 = HEAP32[$50>>2]|0;
   $57 = (($56) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_ii[$58 & 127]($50)|0);
   $$0$i$i = $59;
  } else {
   $60 = HEAP8[$52>>0]|0;
   $61 = $60&255;
   $$0$i$i = $61;
  }
  $62 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $62;
  } else {
   $63 = HEAP32[$__ct>>2]|0;
   $64 = (($63) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (FUNCTION_TABLE_iii[$65 & 31]($__ct,$62)|0);
   $__c$0 = $66;
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($7) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
  }
  while(1) {
   $67 = HEAP8[$__st$133>>0]|0;
   $68 = ($67<<24>>24)==(1);
   do {
    if ($68) {
     $69 = HEAP8[$__ky1$036>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = (($__ky1$036) + 1|0);
      $76 = $74;
     } else {
      $72 = (($__ky1$036) + 8|0);
      $73 = HEAP32[$72>>2]|0;
      $76 = $73;
     }
     $75 = (($76) + ($__indx$0)|0);
     $77 = HEAP8[$75>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $77;
     } else {
      $78 = HEAP32[$__ct>>2]|0;
      $79 = (($78) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_iii[$80 & 31]($__ct,$77)|0);
      $__kc$0 = $81;
     }
     $82 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($82)) {
      HEAP8[$__st$133>>0] = 0;
      $94 = (($__n_might_match$331) + -1)|0;
      $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $94;
      break;
     }
     $83 = HEAP8[$__ky1$036>>0]|0;
     $84 = $83 & 1;
     $85 = ($84<<24>>24)==(0);
     if ($85) {
      $88 = $83&255;
      $89 = $88 >>> 1;
      $90 = $89;
     } else {
      $86 = (($__ky1$036) + 4|0);
      $87 = HEAP32[$86>>2]|0;
      $90 = $87;
     }
     $91 = ($90|0)==($$pre|0);
     if ($91) {
      HEAP8[$__st$133>>0] = 2;
      $92 = (($__n_might_match$331) + -1)|0;
      $93 = (($__n_does_match$332) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $93;$__n_might_match$4 = $92;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
    }
   } while(0);
   $95 = (($__ky1$036) + 12|0);
   $96 = ($95|0)==($__ke|0);
   if ($96) {
    break;
   }
   $97 = (($__st$133) + 1|0);
   $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $95;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $97;
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $98 = HEAP32[$__b>>2]|0;
  $99 = (($98) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 16|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($100|0)==($102|0);
  if ($103) {
   $104 = HEAP32[$98>>2]|0;
   $105 = (($104) + 40|0);
   $106 = HEAP32[$105>>2]|0;
   (FUNCTION_TABLE_ii[$106 & 127]($98)|0);
  } else {
   $107 = (($100) + 1|0);
   HEAP32[$99>>2] = $107;
  }
  $108 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($108>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$4;$__st$246 = $__status$0;
  }
  while(1) {
   $109 = HEAP8[$__st$246>>0]|0;
   $110 = ($109<<24>>24)==(2);
   if ($110) {
    $111 = HEAP8[$__ky2$047>>0]|0;
    $112 = $111 & 1;
    $113 = ($112<<24>>24)==(0);
    if ($113) {
     $116 = $111&255;
     $117 = $116 >>> 1;
     $118 = $117;
    } else {
     $114 = (($__ky2$047) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $118 = $115;
    }
    $119 = ($118|0)==($$pre|0);
    if ($119) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246>>0] = 0;
     $120 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $120;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $121 = (($__ky2$047) + 12|0);
   $122 = (($__st$246) + 1|0);
   $123 = ($121|0)==($__ke|0);
   if ($123) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L17;
   } else {
    $__ky2$047 = $121;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $122;
   }
  }
 }
 $124 = ($50|0)==(0|0);
 do {
  if ($124) {
   $135 = 0;
  } else {
   $125 = (($50) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($50) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($126|0)==($128|0);
   if ($129) {
    $130 = HEAP32[$50>>2]|0;
    $131 = (($130) + 36|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (FUNCTION_TABLE_ii[$132 & 127]($50)|0);
    $134 = ($133|0)==(-1);
    if ($134) {
     HEAP32[$__b>>2] = 0;
     $135 = 0;
     break;
    } else {
     $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
     $135 = $$pre$i$i$i12;
     break;
    }
   } else {
    $135 = $50;
   }
  }
 } while(0);
 $136 = ($135|0)==(0|0);
 do {
  if ($48) {
   label = 66;
  } else {
   $137 = (($$pre$i2$i$i16) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($$pre$i2$i$i16) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)==($140|0);
   if (!($141)) {
    if ($136) {
     break;
    } else {
     label = 68;
     break;
    }
   }
   $142 = HEAP32[$$pre$i2$i$i16>>2]|0;
   $143 = (($142) + 36|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (FUNCTION_TABLE_ii[$144 & 127]($$pre$i2$i$i16)|0);
   $146 = ($145|0)==(-1);
   if ($146) {
    HEAP32[$__e>>2] = 0;
    label = 66;
    break;
   } else {
    if ($136) {
     break;
    } else {
     label = 68;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 66) {
  if ($136) {
   label = 68;
  }
 }
 if ((label|0) == 68) {
  $147 = HEAP32[$__err>>2]|0;
  $148 = $147 | 2;
  HEAP32[$__err>>2] = $148;
 }
 L97: do {
  if ($7) {
   label = 73;
  } else {
   $149 = HEAP8[$__status$0>>0]|0;
   $150 = ($149<<24>>24)==(2);
   if ($150) {
    $$024 = $__kb;
   } else {
    $$02676 = $__kb;$__st$32577 = $__status$0;
    while(1) {
     $154 = (($$02676) + 12|0);
     $155 = ($154|0)==($__ke|0);
     $152 = (($__st$32577) + 1|0);
     if ($155) {
      label = 73;
      break L97;
     }
     $151 = HEAP8[$152>>0]|0;
     $153 = ($151<<24>>24)==(2);
     if ($153) {
      $$024 = $154;
      break;
     } else {
      $$02676 = $154;$__st$32577 = $152;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $156 = HEAP32[$__err>>2]|0;
  $157 = $156 | 4;
  HEAP32[$__err>>2] = $157;
  $$024 = $__ke;
 }
 $159 = ($158|0)==(0|0);
 if ($159) {
  STACKTOP = sp;return ($$024|0);
 }
 _free($158);
 STACKTOP = sp;return ($$024|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $6;$$pre$phi34Z2D = $$pre33;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi32Z2D;
   } else {
    $63 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($78,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[$__g_end>>2]|0;
  $98 = $97;
  $99 = $__g;
  $100 = (($98) - ($99))|0;
  $101 = ($100|0)<(160);
  if ($101) {
   $102 = HEAP32[$__dc>>2]|0;
   $103 = (($97) + 4|0);
   HEAP32[$__g_end>>2] = $103;
   HEAP32[$97>>2] = $102;
  }
 }
 $104 = HEAP32[$__a_end>>2]|0;
 $105 = (__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$104,$__err,$0)|0);
 HEAP32[$__v>>2] = $105;
 $106 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$106,$__err);
 $107 = ($21|0)==(0|0);
 if ($107) {
  $118 = 0;
 } else {
  $108 = (($21) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($21) + 16|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($109|0)==($111|0);
  if ($112) {
   $113 = HEAP32[$21>>2]|0;
   $114 = (($113) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (FUNCTION_TABLE_ii[$115 & 127]($21)|0);
   $117 = ($116|0)==(-1);
   if ($117) {
    HEAP32[$__b>>2] = 0;
    $118 = 0;
   } else {
    $118 = $21;
   }
  } else {
   $118 = $21;
  }
 }
 $119 = ($118|0)==(0|0);
 $120 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 50;
  } else {
   $121 = (($$pre$i2$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i2$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if (!($125)) {
    if (!($119)) {
     break;
    }
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $126 = HEAP32[$$pre$i2$i$i>>2]|0;
   $127 = (($126) + 36|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i2$i$i)|0);
   $130 = ($129|0)==(-1);
   if ($130) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   }
   $131 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $119 ^ $131;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if (!($119)) {
   HEAP32[$agg$result>>2] = $118;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $118;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $6;$$pre$phi34Z2D = $$pre33;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $139 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $139 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi32Z2D;
   } else {
    $63 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($78,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[$__g_end>>2]|0;
  $98 = $97;
  $99 = $__g;
  $100 = (($98) - ($99))|0;
  $101 = ($100|0)<(160);
  if ($101) {
   $102 = HEAP32[$__dc>>2]|0;
   $103 = (($97) + 4|0);
   HEAP32[$__g_end>>2] = $103;
   HEAP32[$97>>2] = $102;
  }
 }
 $104 = HEAP32[$__a_end>>2]|0;
 $105 = (__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$104,$__err,$0)|0);
 $106 = tempRet0;
 $107 = $__v;
 $108 = $107;
 HEAP32[$108>>2] = $105;
 $109 = (($107) + 4)|0;
 $110 = $109;
 HEAP32[$110>>2] = $106;
 $111 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$111,$__err);
 $112 = ($21|0)==(0|0);
 if ($112) {
  $123 = 0;
 } else {
  $113 = (($21) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($21) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$21>>2]|0;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 127]($21)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$__b>>2] = 0;
    $123 = 0;
   } else {
    $123 = $21;
   }
  } else {
   $123 = $21;
  }
 }
 $124 = ($123|0)==(0|0);
 $125 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 50;
  } else {
   $126 = (($$pre$i2$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i2$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if (!($130)) {
    if (!($124)) {
     break;
    }
    HEAP32[$agg$result>>2] = $123;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $131 = HEAP32[$$pre$i2$i$i>>2]|0;
   $132 = (($131) + 36|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i2$i$i)|0);
   $135 = ($134|0)==(-1);
   if ($135) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   }
   $136 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $124 ^ $136;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $123;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if (!($124)) {
   HEAP32[$agg$result>>2] = $123;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $137 = HEAP32[$__err>>2]|0;
 $138 = $137 | 2;
 HEAP32[$__err>>2] = $138;
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $6;$$pre$phi34Z2D = $$pre33;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi32Z2D;
   } else {
    $63 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($78,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[$__g_end>>2]|0;
  $98 = $97;
  $99 = $__g;
  $100 = (($98) - ($99))|0;
  $101 = ($100|0)<(160);
  if ($101) {
   $102 = HEAP32[$__dc>>2]|0;
   $103 = (($97) + 4|0);
   HEAP32[$__g_end>>2] = $103;
   HEAP32[$97>>2] = $102;
  }
 }
 $104 = HEAP32[$__a_end>>2]|0;
 $105 = (__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$104,$__err,$0)|0);
 HEAP16[$__v>>1] = $105;
 $106 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$106,$__err);
 $107 = ($21|0)==(0|0);
 if ($107) {
  $118 = 0;
 } else {
  $108 = (($21) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($21) + 16|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($109|0)==($111|0);
  if ($112) {
   $113 = HEAP32[$21>>2]|0;
   $114 = (($113) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (FUNCTION_TABLE_ii[$115 & 127]($21)|0);
   $117 = ($116|0)==(-1);
   if ($117) {
    HEAP32[$__b>>2] = 0;
    $118 = 0;
   } else {
    $118 = $21;
   }
  } else {
   $118 = $21;
  }
 }
 $119 = ($118|0)==(0|0);
 $120 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 50;
  } else {
   $121 = (($$pre$i2$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i2$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if (!($125)) {
    if (!($119)) {
     break;
    }
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $126 = HEAP32[$$pre$i2$i$i>>2]|0;
   $127 = (($126) + 36|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i2$i$i)|0);
   $130 = ($129|0)==(-1);
   if ($130) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   }
   $131 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $119 ^ $131;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if (!($119)) {
   HEAP32[$agg$result>>2] = $118;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $118;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $6;$$pre$phi34Z2D = $$pre33;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi32Z2D;
   } else {
    $63 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($78,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[$__g_end>>2]|0;
  $98 = $97;
  $99 = $__g;
  $100 = (($98) - ($99))|0;
  $101 = ($100|0)<(160);
  if ($101) {
   $102 = HEAP32[$__dc>>2]|0;
   $103 = (($97) + 4|0);
   HEAP32[$__g_end>>2] = $103;
   HEAP32[$97>>2] = $102;
  }
 }
 $104 = HEAP32[$__a_end>>2]|0;
 $105 = (__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$104,$__err,$0)|0);
 HEAP32[$__v>>2] = $105;
 $106 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$106,$__err);
 $107 = ($21|0)==(0|0);
 if ($107) {
  $118 = 0;
 } else {
  $108 = (($21) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($21) + 16|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($109|0)==($111|0);
  if ($112) {
   $113 = HEAP32[$21>>2]|0;
   $114 = (($113) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (FUNCTION_TABLE_ii[$115 & 127]($21)|0);
   $117 = ($116|0)==(-1);
   if ($117) {
    HEAP32[$__b>>2] = 0;
    $118 = 0;
   } else {
    $118 = $21;
   }
  } else {
   $118 = $21;
  }
 }
 $119 = ($118|0)==(0|0);
 $120 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 50;
  } else {
   $121 = (($$pre$i2$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i2$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if (!($125)) {
    if (!($119)) {
     break;
    }
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $126 = HEAP32[$$pre$i2$i$i>>2]|0;
   $127 = (($126) + 36|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i2$i$i)|0);
   $130 = ($129|0)==(-1);
   if ($130) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   }
   $131 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $119 ^ $131;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if (!($119)) {
   HEAP32[$agg$result>>2] = $118;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $118;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $6;$$pre$phi34Z2D = $$pre33;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $134 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi32Z2D;
   } else {
    $63 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($78,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[$__g_end>>2]|0;
  $98 = $97;
  $99 = $__g;
  $100 = (($98) - ($99))|0;
  $101 = ($100|0)<(160);
  if ($101) {
   $102 = HEAP32[$__dc>>2]|0;
   $103 = (($97) + 4|0);
   HEAP32[$__g_end>>2] = $103;
   HEAP32[$97>>2] = $102;
  }
 }
 $104 = HEAP32[$__a_end>>2]|0;
 $105 = (__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$104,$__err,$0)|0);
 HEAP32[$__v>>2] = $105;
 $106 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$106,$__err);
 $107 = ($21|0)==(0|0);
 if ($107) {
  $118 = 0;
 } else {
  $108 = (($21) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($21) + 16|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($109|0)==($111|0);
  if ($112) {
   $113 = HEAP32[$21>>2]|0;
   $114 = (($113) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (FUNCTION_TABLE_ii[$115 & 127]($21)|0);
   $117 = ($116|0)==(-1);
   if ($117) {
    HEAP32[$__b>>2] = 0;
    $118 = 0;
   } else {
    $118 = $21;
   }
  } else {
   $118 = $21;
  }
 }
 $119 = ($118|0)==(0|0);
 $120 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 50;
  } else {
   $121 = (($$pre$i2$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i2$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if (!($125)) {
    if (!($119)) {
     break;
    }
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $126 = HEAP32[$$pre$i2$i$i>>2]|0;
   $127 = (($126) + 36|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i2$i$i)|0);
   $130 = ($129|0)==(-1);
   if ($130) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   }
   $131 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $119 ^ $131;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if (!($119)) {
   HEAP32[$agg$result>>2] = $118;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $118;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $6;$$pre$phi34Z2D = $$pre33;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $139 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $139 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi32Z2D;
   } else {
    $63 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($78,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[$__g_end>>2]|0;
  $98 = $97;
  $99 = $__g;
  $100 = (($98) - ($99))|0;
  $101 = ($100|0)<(160);
  if ($101) {
   $102 = HEAP32[$__dc>>2]|0;
   $103 = (($97) + 4|0);
   HEAP32[$__g_end>>2] = $103;
   HEAP32[$97>>2] = $102;
  }
 }
 $104 = HEAP32[$__a_end>>2]|0;
 $105 = (__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$104,$__err,$0)|0);
 $106 = tempRet0;
 $107 = $__v;
 $108 = $107;
 HEAP32[$108>>2] = $105;
 $109 = (($107) + 4)|0;
 $110 = $109;
 HEAP32[$110>>2] = $106;
 $111 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$111,$__err);
 $112 = ($21|0)==(0|0);
 if ($112) {
  $123 = 0;
 } else {
  $113 = (($21) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($21) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$21>>2]|0;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 127]($21)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$__b>>2] = 0;
    $123 = 0;
   } else {
    $123 = $21;
   }
  } else {
   $123 = $21;
  }
 }
 $124 = ($123|0)==(0|0);
 $125 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 50;
  } else {
   $126 = (($$pre$i2$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i2$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if (!($130)) {
    if (!($124)) {
     break;
    }
    HEAP32[$agg$result>>2] = $123;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $131 = HEAP32[$$pre$i2$i$i>>2]|0;
   $132 = (($131) + 36|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i2$i$i)|0);
   $135 = ($134|0)==(-1);
   if ($135) {
    HEAP32[$__e>>2] = 0;
    label = 50;
    break;
   }
   $136 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $124 ^ $136;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $123;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if (!($124)) {
   HEAP32[$agg$result>>2] = $123;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $137 = HEAP32[$__err>>2]|0;
 $138 = $137 | 2;
 HEAP32[$__err>>2] = $138;
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre34 = (($__buf) + 8|0);
  $$pre$phi33Z2D = $5;$$pre$phi35Z2D = $$pre34;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre32 = (($__buf) + 1|0);
  $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP8[$__decimal_point>>0]|0;
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi33Z2D;
   } else {
    $63 = HEAP32[$$pre$phi35Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($78,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP8[$__in_units>>0]|0;
  $98 = ($97<<24>>24)==(0);
  if (!($98)) {
   $99 = HEAP32[$__g_end>>2]|0;
   $100 = $99;
   $101 = $__g;
   $102 = (($100) - ($101))|0;
   $103 = ($102|0)<(160);
   if ($103) {
    $104 = HEAP32[$__dc>>2]|0;
    $105 = (($99) + 4|0);
    HEAP32[$__g_end>>2] = $105;
    HEAP32[$99>>2] = $104;
   }
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (+__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2,$106,$__err));
 HEAPF32[$__v>>2] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($21|0)==(0|0);
 if ($109) {
  $120 = 0;
 } else {
  $110 = (($21) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($21) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$21>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($21)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $120 = 0;
   } else {
    $120 = $21;
   }
  } else {
   $120 = $21;
  }
 }
 $121 = ($120|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 51;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($121)) {
     break;
    }
    HEAP32[$agg$result>>2] = $120;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 51;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $121 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $120;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 51) {
  if (!($121)) {
   HEAP32[$agg$result>>2] = $120;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $120;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre34 = (($__buf) + 8|0);
  $$pre$phi33Z2D = $5;$$pre$phi35Z2D = $$pre34;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre32 = (($__buf) + 1|0);
  $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP8[$__decimal_point>>0]|0;
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi33Z2D;
   } else {
    $63 = HEAP32[$$pre$phi35Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($78,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP8[$__in_units>>0]|0;
  $98 = ($97<<24>>24)==(0);
  if (!($98)) {
   $99 = HEAP32[$__g_end>>2]|0;
   $100 = $99;
   $101 = $__g;
   $102 = (($100) - ($101))|0;
   $103 = ($102|0)<(160);
   if ($103) {
    $104 = HEAP32[$__dc>>2]|0;
    $105 = (($99) + 4|0);
    HEAP32[$__g_end>>2] = $105;
    HEAP32[$99>>2] = $104;
   }
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (+__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2,$106,$__err));
 HEAPF64[$__v>>3] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($21|0)==(0|0);
 if ($109) {
  $120 = 0;
 } else {
  $110 = (($21) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($21) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$21>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($21)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $120 = 0;
   } else {
    $120 = $21;
   }
  } else {
   $120 = $21;
  }
 }
 $121 = ($120|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 51;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($121)) {
     break;
    }
    HEAP32[$agg$result>>2] = $120;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 51;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $121 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $120;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 51) {
  if (!($121)) {
   HEAP32[$agg$result>>2] = $120;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $120;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre34 = (($__buf) + 8|0);
  $$pre$phi33Z2D = $5;$$pre$phi35Z2D = $$pre34;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre32 = (($__buf) + 1|0);
  $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP8[$__decimal_point>>0]|0;
 $9 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $21 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $21 = 0;
    } else {
     $21 = $$pre$i$i$i4;
    }
   } else {
    $21 = $$pre$i$i$i4;
   }
  }
  $22 = ($21|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($22) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($22) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($22) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi33Z2D;
   } else {
    $63 = HEAP32[$$pre$phi35Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($21) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($21) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$21>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($21)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68>>0]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($78,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$21>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($21)|0);
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $21;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping>>0]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $95 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $95 = $92;
 }
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP8[$__in_units>>0]|0;
  $98 = ($97<<24>>24)==(0);
  if (!($98)) {
   $99 = HEAP32[$__g_end>>2]|0;
   $100 = $99;
   $101 = $__g;
   $102 = (($100) - ($101))|0;
   $103 = ($102|0)<(160);
   if ($103) {
    $104 = HEAP32[$__dc>>2]|0;
    $105 = (($99) + 4|0);
    HEAP32[$__g_end>>2] = $105;
    HEAP32[$99>>2] = $104;
   }
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (+__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2,$106,$__err));
 HEAPF64[$__v>>3] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($21|0)==(0|0);
 if ($109) {
  $120 = 0;
 } else {
  $110 = (($21) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($21) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$21>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($21)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $120 = 0;
   } else {
    $120 = $21;
   }
  } else {
   $120 = $21;
  }
 }
 $121 = ($120|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 51;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($121)) {
     break;
    }
    HEAP32[$agg$result>>2] = $120;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 51;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $121 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $120;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 51) {
  if (!($121)) {
   HEAP32[$agg$result>>2] = $120;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $120;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $phitmp$i22 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_iiiii[$4 & 15]($1,408088,((408088 + 26|0)),$__atoms)|0);
 $5 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $6 = HEAP8[$__buf>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $11;$$pre$phi36Z2D = $$pre35;$12 = $11;
 } else {
  $9 = (($__buf) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $9;$12 = $10;
 }
 HEAP32[$__a_end>>2] = $12;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $13 = (($__buf) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i8 = $$pre;$__a$0 = $12;
 L5: while(1) {
  $14 = ($$pre$i$i$i8|0)==(0|0);
  if ($14) {
   $25 = 0;
  } else {
   $15 = (($$pre$i$i$i8) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($$pre$i$i$i8) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$$pre$i$i$i8>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($$pre$i$i$i8)|0);
    $24 = ($23|0)==(-1);
    if ($24) {
     HEAP32[$__b>>2] = 0;
     $25 = 0;
    } else {
     $25 = $$pre$i$i$i8;
    }
   } else {
    $25 = $$pre$i$i$i8;
   }
  }
  $26 = ($25|0)==(0|0);
  $27 = HEAP32[$__e>>2]|0;
  $28 = ($27|0)==(0|0);
  do {
   if ($28) {
    label = 14;
   } else {
    $29 = (($27) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($27) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($30|0)==($32|0);
    if (!($33)) {
     if ($26) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L5;
     }
    }
    $34 = HEAP32[$27>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 127]($27)|0);
    $38 = ($37|0)==(-1);
    if ($38) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($26) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($26) {
    $__a$2 = $__a$0;
    break;
   }
  }
  $39 = HEAP32[$__a_end>>2]|0;
  $40 = $39;
  $41 = $__a$0;
  $42 = (($40) - ($41))|0;
  $43 = HEAP8[$__buf>>0]|0;
  $44 = $43 & 1;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   $47 = $43&255;
   $48 = $47 >>> 1;
   $50 = $48;
  } else {
   $46 = HEAP32[$13>>2]|0;
   $50 = $46;
  }
  $49 = ($42|0)==($50|0);
  if ($49) {
   if ($45) {
    $52 = $43&255;
    $53 = $52 >>> 1;
    $54 = $43&255;
    $55 = $54 >>> 1;
    $57 = $55;$70 = $53;
   } else {
    $51 = HEAP32[$13>>2]|0;
    $57 = $51;$70 = $51;
   }
   $56 = $57 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$56,0);
   $58 = HEAP8[$__buf>>0]|0;
   $59 = $58 & 1;
   $60 = ($59<<24>>24)==(0);
   if ($60) {
    $63 = 10;
   } else {
    $61 = HEAP32[$__buf>>2]|0;
    $62 = $61 & -2;
    $phitmp$i22 = (($62) + -1)|0;
    $63 = $phitmp$i22;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$63,0);
   $64 = HEAP8[$__buf>>0]|0;
   $65 = $64 & 1;
   $66 = ($65<<24>>24)==(0);
   if ($66) {
    $69 = $$pre$phi34Z2D;
   } else {
    $67 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $69 = $67;
   }
   $68 = (($69) + ($70)|0);
   HEAP32[$__a_end>>2] = $68;
   $__a$1 = $69;
  } else {
   $__a$1 = $__a$0;
  }
  $71 = (($25) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($25) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$25>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (FUNCTION_TABLE_ii[$78 & 127]($25)|0);
   $$0$i$i = $79;
  } else {
   $80 = HEAP8[$72>>0]|0;
   $81 = $80&255;
   $$0$i$i = $81;
  }
  $82 = $$0$i$i&255;
  $83 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($82,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
  $84 = ($83|0)==(0);
  if (!($84)) {
   $__a$2 = $__a$1;
   break;
  }
  $85 = HEAP32[$71>>2]|0;
  $86 = HEAP32[$73>>2]|0;
  $87 = ($85|0)==($86|0);
  if ($87) {
   $88 = HEAP32[$25>>2]|0;
   $89 = (($88) + 40|0);
   $90 = HEAP32[$89>>2]|0;
   (FUNCTION_TABLE_ii[$90 & 127]($25)|0);
   $$pre$i$i$i8 = $25;$__a$0 = $__a$1;
   continue;
  } else {
   $91 = (($85) + 1|0);
   HEAP32[$71>>2] = $91;
   $$pre$i$i$i8 = $25;$__a$0 = $__a$1;
   continue;
  }
 }
 $92 = (($__a$2) + 3|0);
 HEAP8[$92>>0] = 0;
 $93 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $94 = (__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2,$93,408128,$vararg_buffer)|0);
 $95 = ($94|0)==(1);
 if (!($95)) {
  HEAP32[$__err>>2] = 4;
 }
 $96 = HEAP32[$__b>>2]|0;
 $97 = ($96|0)==(0|0);
 if ($97) {
  $108 = 0;
 } else {
  $98 = (($96) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($96) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($99|0)==($101|0);
  if ($102) {
   $103 = HEAP32[$96>>2]|0;
   $104 = (($103) + 36|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (FUNCTION_TABLE_ii[$105 & 127]($96)|0);
   $107 = ($106|0)==(-1);
   if ($107) {
    HEAP32[$__b>>2] = 0;
    $108 = 0;
   } else {
    $108 = $96;
   }
  } else {
   $108 = $96;
  }
 }
 $109 = ($108|0)==(0|0);
 $110 = HEAP32[$__e>>2]|0;
 $111 = ($110|0)==(0|0);
 do {
  if ($111) {
   label = 46;
  } else {
   $112 = (($110) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($110) + 16|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ($113|0)==($115|0);
   if (!($116)) {
    if (!($109)) {
     break;
    }
    HEAP32[$agg$result>>2] = $108;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $117 = HEAP32[$110>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 127]($110)|0);
   $121 = ($120|0)==(-1);
   if ($121) {
    HEAP32[$__e>>2] = 0;
    label = 46;
    break;
   }
   $122 = ($110|0)==(0|0);
   $tmp$i$i = $109 ^ $122;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $108;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 46) {
  if (!($109)) {
   HEAP32[$agg$result>>2] = $108;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $123 = HEAP32[$__err>>2]|0;
 $124 = $123 | 2;
 HEAP32[$__err>>2] = $124;
 HEAP32[$agg$result>>2] = $108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $17 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $18 = ($17|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $18 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $28 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $29 = ($28|0)==($27|0);
  if ($29) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $28;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (408088 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (408088 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 (_uselocale(($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409472>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((409472|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_newlocale(2147483647,(409480|0),(0|0))|0);
   HEAP32[409464>>2] = $4;
   ___cxa_guard_release((409472|0));
  }
 }
 $5 = HEAP32[409464>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy2 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  __ZNKSt3__18ios_base6getlocEv($3,$__iob);
  $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($3,409568)|0);
  $18 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($18)|0);
  __ZNKSt3__18ios_base6getlocEv($4,$__iob);
  $19 = (__ZNKSt3__16locale9use_facetERNS0_2idE($4,409728)|0);
  $20 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 63]($__names,$19);
  $24 = (($__names) + 12|0);
  $25 = HEAP32[$19>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 63]($24,$19);
  $28 = HEAP32[$__e>>2]|0;
  HEAP32[$5>>2] = $28;
  $29 = (($__names) + 24|0);
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
  $30 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy2,$__names,$29,$17,$__err,1)|0);
  $31 = ($30|0)==($__names|0);
  $32 = $31&1;
  HEAP8[$__v>>0] = $32;
  $33 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $33;
  $34 = (($__names) + 12|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($34);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
  STACKTOP = sp;return;
 }
 HEAP32[$__lv>>2] = -1;
 $10 = HEAP32[$this>>2]|0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$__b>>2]|0;
 HEAP32[$1>>2] = $13;
 $14 = HEAP32[$__e>>2]|0;
 HEAP32[$2>>2] = $14;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$2+0>>2]|0;
 FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy2,$__iob,$__err,$__lv);
 $15 = HEAP32[$0>>2]|0;
 HEAP32[$__b>>2] = $15;
 $16 = HEAP32[$__lv>>2]|0;
 if ((($16|0) == 0)) {
  HEAP8[$__v>>0] = 0;
 } else if ((($16|0) == 1)) {
  HEAP8[$__v>>0] = 1;
 } else {
  HEAP8[$__v>>0] = 1;
  HEAP32[$__err>>2] = 4;
 }
 HEAP32[$agg$result>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03078 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off039 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$066 = 0;
 var $__ky1$040 = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$064 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$336 = 0, $__n_does_match$4 = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$063 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$335 = 0, $__n_might_match$4 = 0, $__st$065 = 0, $__st$137 = 0;
 var $__st$250 = 0, $__st$32979 = 0, $__statbuf = 0, $__status$0 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $158 = $5;$__status$0 = $5;
  }
 } else {
  $158 = 0;$__status$0 = $__statbuf;
 }
 $7 = ($__kb|0)==($__ke|0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$066 = $__kb;$__n_does_match$064 = 0;$__n_might_match$063 = $3;$__st$065 = $__status$0;
  while(1) {
   $8 = HEAP8[$__ky$066>>0]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $8&255;
    $14 = $13 >>> 1;
    $15 = $14;
   } else {
    $11 = (($__ky$066) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $15 = $12;
   }
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$__st$065>>0] = 2;
    $17 = (($__n_might_match$063) + -1)|0;
    $18 = (($__n_does_match$064) + 1)|0;
    $__n_does_match$1 = $18;$__n_might_match$1 = $17;
   } else {
    HEAP8[$__st$065>>0] = 1;
    $__n_does_match$1 = $__n_does_match$064;$__n_might_match$1 = $__n_might_match$063;
   }
   $19 = (($__ky$066) + 12|0);
   $20 = (($__st$065) + 1|0);
   $21 = ($19|0)==($__ke|0);
   if ($21) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$066 = $19;$__n_does_match$064 = $__n_does_match$1;$__n_might_match$063 = $__n_might_match$1;$__st$065 = $20;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L17: while(1) {
  $22 = HEAP32[$__b>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    $49 = 1;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i$i$i = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i$i$i = $33;
    }
    $34 = ($$0$i$i$i$i|0)==(-1);
    if ($34) {
     HEAP32[$__b>>2] = 0;
     $49 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $49 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $35 = HEAP32[$__e>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   $$pre$i3$i$i19 = 0;$48 = 1;
  } else {
   $37 = (($35) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($35) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($38|0)==($40|0);
   if ($41) {
    $42 = HEAP32[$35>>2]|0;
    $43 = (($42) + 36|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_ii[$44 & 127]($35)|0);
    $$0$i$i1$i$i = $45;
   } else {
    $46 = HEAP32[$38>>2]|0;
    $$0$i$i1$i$i = $46;
   }
   $47 = ($$0$i$i1$i$i|0)==(-1);
   if ($47) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i19 = 0;$48 = 1;
   } else {
    $$pre$i3$i$i19 = $35;$48 = 0;
   }
  }
  $tmp$i$i = $49 ^ $48;
  $50 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $50;
  $51 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $52 = (($51) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = (($57) + 36|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (FUNCTION_TABLE_ii[$59 & 127]($51)|0);
   $$0$i$i = $60;
  } else {
   $61 = HEAP32[$53>>2]|0;
   $$0$i$i = $61;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $62 = HEAP32[$__ct>>2]|0;
   $63 = (($62) + 28|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_iii[$64 & 31]($__ct,$$0$i$i)|0);
   $__c$0 = $65;
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($7) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
  }
  while(1) {
   $66 = HEAP8[$__st$137>>0]|0;
   $67 = ($66<<24>>24)==(1);
   do {
    if ($67) {
     $68 = HEAP8[$__ky1$040>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = (($__ky1$040) + 4|0);
      $75 = $73;
     } else {
      $71 = (($__ky1$040) + 8|0);
      $72 = HEAP32[$71>>2]|0;
      $75 = $72;
     }
     $74 = (($75) + ($__indx$0<<2)|0);
     $76 = HEAP32[$74>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $76;
     } else {
      $77 = HEAP32[$__ct>>2]|0;
      $78 = (($77) + 28|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (FUNCTION_TABLE_iii[$79 & 31]($__ct,$76)|0);
      $__kc$0 = $80;
     }
     $81 = ($__c$0|0)==($__kc$0|0);
     if (!($81)) {
      HEAP8[$__st$137>>0] = 0;
      $93 = (($__n_might_match$335) + -1)|0;
      $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $93;
      break;
     }
     $82 = HEAP8[$__ky1$040>>0]|0;
     $83 = $82 & 1;
     $84 = ($83<<24>>24)==(0);
     if ($84) {
      $87 = $82&255;
      $88 = $87 >>> 1;
      $89 = $88;
     } else {
      $85 = (($__ky1$040) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $89 = $86;
     }
     $90 = ($89|0)==($$pre|0);
     if ($90) {
      HEAP8[$__st$137>>0] = 2;
      $91 = (($__n_might_match$335) + -1)|0;
      $92 = (($__n_does_match$336) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $92;$__n_might_match$4 = $91;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
    }
   } while(0);
   $94 = (($__ky1$040) + 12|0);
   $95 = ($94|0)==($__ke|0);
   if ($95) {
    break;
   }
   $96 = (($__st$137) + 1|0);
   $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $94;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $96;
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $97 = HEAP32[$__b>>2]|0;
  $98 = (($97) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($99|0)==($101|0);
  if ($102) {
   $103 = HEAP32[$97>>2]|0;
   $104 = (($103) + 40|0);
   $105 = HEAP32[$104>>2]|0;
   (FUNCTION_TABLE_ii[$105 & 127]($97)|0);
  } else {
   $106 = (($99) + 4|0);
   HEAP32[$98>>2] = $106;
  }
  $107 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($107>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$4;$__st$250 = $__status$0;
  }
  while(1) {
   $108 = HEAP8[$__st$250>>0]|0;
   $109 = ($108<<24>>24)==(2);
   if ($109) {
    $110 = HEAP8[$__ky2$051>>0]|0;
    $111 = $110 & 1;
    $112 = ($111<<24>>24)==(0);
    if ($112) {
     $115 = $110&255;
     $116 = $115 >>> 1;
     $117 = $116;
    } else {
     $113 = (($__ky2$051) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $117 = $114;
    }
    $118 = ($117|0)==($$pre|0);
    if ($118) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250>>0] = 0;
     $119 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $119;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $120 = (($__ky2$051) + 12|0);
   $121 = (($__st$250) + 1|0);
   $122 = ($120|0)==($__ke|0);
   if ($122) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L17;
   } else {
    $__ky2$051 = $120;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $121;
   }
  }
 }
 $123 = ($51|0)==(0|0);
 do {
  if ($123) {
   $160 = 1;
  } else {
   $124 = (($51) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($51) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$51>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 127]($51)|0);
    $$0$i$i$i$i11 = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i$i$i11 = $133;
   }
   $134 = ($$0$i$i$i$i11|0)==(-1);
   if ($134) {
    HEAP32[$__b>>2] = 0;
    $160 = 1;
    break;
   } else {
    $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
    $160 = $phitmp$i$i$i14;
    break;
   }
  }
 } while(0);
 $135 = ($$pre$i3$i$i19|0)==(0|0);
 do {
  if ($135) {
   label = 73;
  } else {
   $136 = (($$pre$i3$i$i19) + 12|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($$pre$i3$i$i19) + 16|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($137|0)==($139|0);
   if ($140) {
    $141 = HEAP32[$$pre$i3$i$i19>>2]|0;
    $142 = (($141) + 36|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (FUNCTION_TABLE_ii[$143 & 127]($$pre$i3$i$i19)|0);
    $$0$i$i1$i$i17 = $144;
   } else {
    $145 = HEAP32[$137>>2]|0;
    $$0$i$i1$i$i17 = $145;
   }
   $146 = ($$0$i$i1$i$i17|0)==(-1);
   if ($146) {
    HEAP32[$__e>>2] = 0;
    label = 73;
    break;
   } else {
    if ($160) {
     break;
    } else {
     label = 75;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 73) {
  if ($160) {
   label = 75;
  }
 }
 if ((label|0) == 75) {
  $147 = HEAP32[$__err>>2]|0;
  $148 = $147 | 2;
  HEAP32[$__err>>2] = $148;
 }
 L107: do {
  if ($7) {
   label = 80;
  } else {
   $149 = HEAP8[$__status$0>>0]|0;
   $150 = ($149<<24>>24)==(2);
   if ($150) {
    $$028 = $__kb;
   } else {
    $$03078 = $__kb;$__st$32979 = $__status$0;
    while(1) {
     $154 = (($$03078) + 12|0);
     $155 = ($154|0)==($__ke|0);
     $152 = (($__st$32979) + 1|0);
     if ($155) {
      label = 80;
      break L107;
     }
     $151 = HEAP8[$152>>0]|0;
     $153 = ($151<<24>>24)==(2);
     if ($153) {
      $$028 = $154;
      break;
     } else {
      $$03078 = $154;$__st$32979 = $152;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 80) {
  $156 = HEAP32[$__err>>2]|0;
  $157 = $156 | 4;
  HEAP32[$__err>>2] = $157;
  $$028 = $__ke;
 }
 $159 = ($158|0)==(0|0);
 if ($159) {
  STACKTOP = sp;return ($$028|0);
 }
 _free($158);
 STACKTOP = sp;return ($$028|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $6;$$pre$phi36Z2D = $$pre35;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $133 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $133 = 1;$68 = 0;
   } else {
    $133 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($133) {
      $134 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($133) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi34Z2D;
   } else {
    $63 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP32[$__g_end>>2]|0;
  $97 = $96;
  $98 = $__g;
  $99 = (($97) - ($98))|0;
  $100 = ($99|0)<(160);
  if ($100) {
   $101 = HEAP32[$__dc>>2]|0;
   $102 = (($96) + 4|0);
   HEAP32[$__g_end>>2] = $102;
   HEAP32[$96>>2] = $101;
  }
 }
 $103 = HEAP32[$__a_end>>2]|0;
 $104 = (__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$103,$__err,$0)|0);
 HEAP32[$__v>>2] = $104;
 $105 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$105,$__err);
 $106 = ($68|0)==(0|0);
 if ($106) {
  $132 = 0;$135 = 1;
 } else {
  $107 = (($68) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($68) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($108|0)==($110|0);
  if ($111) {
   $112 = HEAP32[$68>>2]|0;
   $113 = (($112) + 36|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (FUNCTION_TABLE_ii[$114 & 127]($68)|0);
   $$0$i$i$i$i = $115;
  } else {
   $116 = HEAP32[$108>>2]|0;
   $$0$i$i$i$i = $116;
  }
  $117 = ($$0$i$i$i$i|0)==(-1);
  if ($117) {
   HEAP32[$__b>>2] = 0;
   $132 = 0;$135 = 1;
  } else {
   $132 = $68;$135 = 0;
  }
 }
 $118 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($118) {
   label = 56;
  } else {
   $119 = (($$pre$i3$i$i) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($$pre$i3$i$i) + 16|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($120|0)==($122|0);
   if ($123) {
    $124 = HEAP32[$$pre$i3$i$i>>2]|0;
    $125 = (($124) + 36|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (FUNCTION_TABLE_ii[$126 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $127;
   } else {
    $128 = HEAP32[$120>>2]|0;
    $$0$i$i1$i$i = $128;
   }
   $129 = ($$0$i$i1$i$i|0)==(-1);
   if ($129) {
    HEAP32[$__e>>2] = 0;
    label = 56;
    break;
   }
   if ($135) {
    HEAP32[$agg$result>>2] = $132;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 56) {
  if (!($135)) {
   HEAP32[$agg$result>>2] = $132;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $130 = HEAP32[$__err>>2]|0;
 $131 = $130 | 2;
 HEAP32[$__err>>2] = $131;
 HEAP32[$agg$result>>2] = $132;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $6;$$pre$phi36Z2D = $$pre35;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $138 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $138 = 1;$68 = 0;
   } else {
    $138 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($138) {
      $139 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($138) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi34Z2D;
   } else {
    $63 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP32[$__g_end>>2]|0;
  $97 = $96;
  $98 = $__g;
  $99 = (($97) - ($98))|0;
  $100 = ($99|0)<(160);
  if ($100) {
   $101 = HEAP32[$__dc>>2]|0;
   $102 = (($96) + 4|0);
   HEAP32[$__g_end>>2] = $102;
   HEAP32[$96>>2] = $101;
  }
 }
 $103 = HEAP32[$__a_end>>2]|0;
 $104 = (__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$103,$__err,$0)|0);
 $105 = tempRet0;
 $106 = $__v;
 $107 = $106;
 HEAP32[$107>>2] = $104;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = $105;
 $110 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$110,$__err);
 $111 = ($68|0)==(0|0);
 if ($111) {
  $137 = 0;$140 = 1;
 } else {
  $112 = (($68) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($68) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$68>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 127]($68)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$__b>>2] = 0;
   $137 = 0;$140 = 1;
  } else {
   $137 = $68;$140 = 0;
  }
 }
 $123 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 56;
  } else {
   $124 = (($$pre$i3$i$i) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($$pre$i3$i$i) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i3$i$i>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i1$i$i = $133;
   }
   $134 = ($$0$i$i1$i$i|0)==(-1);
   if ($134) {
    HEAP32[$__e>>2] = 0;
    label = 56;
    break;
   }
   if ($140) {
    HEAP32[$agg$result>>2] = $137;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 56) {
  if (!($140)) {
   HEAP32[$agg$result>>2] = $137;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $135 = HEAP32[$__err>>2]|0;
 $136 = $135 | 2;
 HEAP32[$__err>>2] = $136;
 HEAP32[$agg$result>>2] = $137;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $6;$$pre$phi36Z2D = $$pre35;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $133 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $133 = 1;$68 = 0;
   } else {
    $133 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($133) {
      $134 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($133) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi34Z2D;
   } else {
    $63 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP32[$__g_end>>2]|0;
  $97 = $96;
  $98 = $__g;
  $99 = (($97) - ($98))|0;
  $100 = ($99|0)<(160);
  if ($100) {
   $101 = HEAP32[$__dc>>2]|0;
   $102 = (($96) + 4|0);
   HEAP32[$__g_end>>2] = $102;
   HEAP32[$96>>2] = $101;
  }
 }
 $103 = HEAP32[$__a_end>>2]|0;
 $104 = (__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$103,$__err,$0)|0);
 HEAP16[$__v>>1] = $104;
 $105 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$105,$__err);
 $106 = ($68|0)==(0|0);
 if ($106) {
  $132 = 0;$135 = 1;
 } else {
  $107 = (($68) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($68) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($108|0)==($110|0);
  if ($111) {
   $112 = HEAP32[$68>>2]|0;
   $113 = (($112) + 36|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (FUNCTION_TABLE_ii[$114 & 127]($68)|0);
   $$0$i$i$i$i = $115;
  } else {
   $116 = HEAP32[$108>>2]|0;
   $$0$i$i$i$i = $116;
  }
  $117 = ($$0$i$i$i$i|0)==(-1);
  if ($117) {
   HEAP32[$__b>>2] = 0;
   $132 = 0;$135 = 1;
  } else {
   $132 = $68;$135 = 0;
  }
 }
 $118 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($118) {
   label = 56;
  } else {
   $119 = (($$pre$i3$i$i) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($$pre$i3$i$i) + 16|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($120|0)==($122|0);
   if ($123) {
    $124 = HEAP32[$$pre$i3$i$i>>2]|0;
    $125 = (($124) + 36|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (FUNCTION_TABLE_ii[$126 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $127;
   } else {
    $128 = HEAP32[$120>>2]|0;
    $$0$i$i1$i$i = $128;
   }
   $129 = ($$0$i$i1$i$i|0)==(-1);
   if ($129) {
    HEAP32[$__e>>2] = 0;
    label = 56;
    break;
   }
   if ($135) {
    HEAP32[$agg$result>>2] = $132;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 56) {
  if (!($135)) {
   HEAP32[$agg$result>>2] = $132;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $130 = HEAP32[$__err>>2]|0;
 $131 = $130 | 2;
 HEAP32[$__err>>2] = $131;
 HEAP32[$agg$result>>2] = $132;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $6;$$pre$phi36Z2D = $$pre35;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $133 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $133 = 1;$68 = 0;
   } else {
    $133 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($133) {
      $134 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($133) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi34Z2D;
   } else {
    $63 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP32[$__g_end>>2]|0;
  $97 = $96;
  $98 = $__g;
  $99 = (($97) - ($98))|0;
  $100 = ($99|0)<(160);
  if ($100) {
   $101 = HEAP32[$__dc>>2]|0;
   $102 = (($96) + 4|0);
   HEAP32[$__g_end>>2] = $102;
   HEAP32[$96>>2] = $101;
  }
 }
 $103 = HEAP32[$__a_end>>2]|0;
 $104 = (__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$103,$__err,$0)|0);
 HEAP32[$__v>>2] = $104;
 $105 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$105,$__err);
 $106 = ($68|0)==(0|0);
 if ($106) {
  $132 = 0;$135 = 1;
 } else {
  $107 = (($68) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($68) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($108|0)==($110|0);
  if ($111) {
   $112 = HEAP32[$68>>2]|0;
   $113 = (($112) + 36|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (FUNCTION_TABLE_ii[$114 & 127]($68)|0);
   $$0$i$i$i$i = $115;
  } else {
   $116 = HEAP32[$108>>2]|0;
   $$0$i$i$i$i = $116;
  }
  $117 = ($$0$i$i$i$i|0)==(-1);
  if ($117) {
   HEAP32[$__b>>2] = 0;
   $132 = 0;$135 = 1;
  } else {
   $132 = $68;$135 = 0;
  }
 }
 $118 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($118) {
   label = 56;
  } else {
   $119 = (($$pre$i3$i$i) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($$pre$i3$i$i) + 16|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($120|0)==($122|0);
   if ($123) {
    $124 = HEAP32[$$pre$i3$i$i>>2]|0;
    $125 = (($124) + 36|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (FUNCTION_TABLE_ii[$126 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $127;
   } else {
    $128 = HEAP32[$120>>2]|0;
    $$0$i$i1$i$i = $128;
   }
   $129 = ($$0$i$i1$i$i|0)==(-1);
   if ($129) {
    HEAP32[$__e>>2] = 0;
    label = 56;
    break;
   }
   if ($135) {
    HEAP32[$agg$result>>2] = $132;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 56) {
  if (!($135)) {
   HEAP32[$agg$result>>2] = $132;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $130 = HEAP32[$__err>>2]|0;
 $131 = $130 | 2;
 HEAP32[$__err>>2] = $131;
 HEAP32[$agg$result>>2] = $132;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $6;$$pre$phi36Z2D = $$pre35;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $133 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $133 = 1;$68 = 0;
   } else {
    $133 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($133) {
      $134 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($133) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $134 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi34Z2D;
   } else {
    $63 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $134;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP32[$__g_end>>2]|0;
  $97 = $96;
  $98 = $__g;
  $99 = (($97) - ($98))|0;
  $100 = ($99|0)<(160);
  if ($100) {
   $101 = HEAP32[$__dc>>2]|0;
   $102 = (($96) + 4|0);
   HEAP32[$__g_end>>2] = $102;
   HEAP32[$96>>2] = $101;
  }
 }
 $103 = HEAP32[$__a_end>>2]|0;
 $104 = (__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$103,$__err,$0)|0);
 HEAP32[$__v>>2] = $104;
 $105 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$105,$__err);
 $106 = ($68|0)==(0|0);
 if ($106) {
  $132 = 0;$135 = 1;
 } else {
  $107 = (($68) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($68) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($108|0)==($110|0);
  if ($111) {
   $112 = HEAP32[$68>>2]|0;
   $113 = (($112) + 36|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (FUNCTION_TABLE_ii[$114 & 127]($68)|0);
   $$0$i$i$i$i = $115;
  } else {
   $116 = HEAP32[$108>>2]|0;
   $$0$i$i$i$i = $116;
  }
  $117 = ($$0$i$i$i$i|0)==(-1);
  if ($117) {
   HEAP32[$__b>>2] = 0;
   $132 = 0;$135 = 1;
  } else {
   $132 = $68;$135 = 0;
  }
 }
 $118 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($118) {
   label = 56;
  } else {
   $119 = (($$pre$i3$i$i) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($$pre$i3$i$i) + 16|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($120|0)==($122|0);
   if ($123) {
    $124 = HEAP32[$$pre$i3$i$i>>2]|0;
    $125 = (($124) + 36|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (FUNCTION_TABLE_ii[$126 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $127;
   } else {
    $128 = HEAP32[$120>>2]|0;
    $$0$i$i1$i$i = $128;
   }
   $129 = ($$0$i$i1$i$i|0)==(-1);
   if ($129) {
    HEAP32[$__e>>2] = 0;
    label = 56;
    break;
   }
   if ($135) {
    HEAP32[$agg$result>>2] = $132;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 56) {
  if (!($135)) {
   HEAP32[$agg$result>>2] = $132;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $130 = HEAP32[$__err>>2]|0;
 $131 = $130 | 2;
 HEAP32[$__err>>2] = $131;
 HEAP32[$agg$result>>2] = $132;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $1 = HEAP8[$__buf>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $6;$$pre$phi36Z2D = $$pre35;$7 = $6;
 } else {
  $4 = (($__buf) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $4;$7 = $5;
 }
 HEAP32[$__a_end>>2] = $7;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $8 = (($__buf) + 4|0);
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $7;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $138 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $138 = 1;$68 = 0;
   } else {
    $138 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($138) {
      $139 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($138) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$8>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$8>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi34Z2D;
   } else {
    $63 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$9,$__grouping,$__g,$__g_end,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP32[$__g_end>>2]|0;
  $97 = $96;
  $98 = $__g;
  $99 = (($97) - ($98))|0;
  $100 = ($99|0)<(160);
  if ($100) {
   $101 = HEAP32[$__dc>>2]|0;
   $102 = (($96) + 4|0);
   HEAP32[$__g_end>>2] = $102;
   HEAP32[$96>>2] = $101;
  }
 }
 $103 = HEAP32[$__a_end>>2]|0;
 $104 = (__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$103,$__err,$0)|0);
 $105 = tempRet0;
 $106 = $__v;
 $107 = $106;
 HEAP32[$107>>2] = $104;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = $105;
 $110 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$110,$__err);
 $111 = ($68|0)==(0|0);
 if ($111) {
  $137 = 0;$140 = 1;
 } else {
  $112 = (($68) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($68) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$68>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 127]($68)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$__b>>2] = 0;
   $137 = 0;$140 = 1;
  } else {
   $137 = $68;$140 = 0;
  }
 }
 $123 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 56;
  } else {
   $124 = (($$pre$i3$i$i) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($$pre$i3$i$i) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i3$i$i>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i1$i$i = $133;
   }
   $134 = ($$0$i$i1$i$i|0)==(-1);
   if ($134) {
    HEAP32[$__e>>2] = 0;
    label = 56;
    break;
   }
   if ($140) {
    HEAP32[$agg$result>>2] = $137;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 56) {
  if (!($140)) {
   HEAP32[$agg$result>>2] = $137;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $135 = HEAP32[$__err>>2]|0;
 $136 = $135 | 2;
 HEAP32[$__err>>2] = $136;
 HEAP32[$agg$result>>2] = $137;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre36 = (($__buf) + 8|0);
  $$pre$phi35Z2D = $5;$$pre$phi37Z2D = $$pre36;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre34 = (($__buf) + 1|0);
  $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP32[$__decimal_point>>2]|0;
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $135 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$68 = 0;
   } else {
    $135 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi35Z2D;
   } else {
    $63 = HEAP32[$$pre$phi37Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP8[$__in_units>>0]|0;
  $97 = ($96<<24>>24)==(0);
  if (!($97)) {
   $98 = HEAP32[$__g_end>>2]|0;
   $99 = $98;
   $100 = $__g;
   $101 = (($99) - ($100))|0;
   $102 = ($101|0)<(160);
   if ($102) {
    $103 = HEAP32[$__dc>>2]|0;
    $104 = (($98) + 4|0);
    HEAP32[$__g_end>>2] = $104;
    HEAP32[$98>>2] = $103;
   }
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (+__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2,$105,$__err));
 HEAPF32[$__v>>2] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($68|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($68) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($68) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$68>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($68)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $68;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 57;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 57) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre36 = (($__buf) + 8|0);
  $$pre$phi35Z2D = $5;$$pre$phi37Z2D = $$pre36;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre34 = (($__buf) + 1|0);
  $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP32[$__decimal_point>>2]|0;
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $135 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$68 = 0;
   } else {
    $135 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi35Z2D;
   } else {
    $63 = HEAP32[$$pre$phi37Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP8[$__in_units>>0]|0;
  $97 = ($96<<24>>24)==(0);
  if (!($97)) {
   $98 = HEAP32[$__g_end>>2]|0;
   $99 = $98;
   $100 = $__g;
   $101 = (($99) - ($100))|0;
   $102 = ($101|0)<(160);
   if ($102) {
    $103 = HEAP32[$__dc>>2]|0;
    $104 = (($98) + 4|0);
    HEAP32[$__g_end>>2] = $104;
    HEAP32[$98>>2] = $103;
   }
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (+__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2,$105,$__err));
 HEAPF64[$__v>>3] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($68|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($68) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($68) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$68>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($68)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $68;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 57;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 57) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre36 = (($__buf) + 8|0);
  $$pre$phi35Z2D = $5;$$pre$phi37Z2D = $$pre36;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre34 = (($__buf) + 1|0);
  $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP32[$__decimal_point>>2]|0;
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $135 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$68 = 0;
   } else {
    $135 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi35Z2D;
   } else {
    $63 = HEAP32[$$pre$phi37Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $94 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $94 = $91;
 }
 $95 = ($94|0)==(0);
 if (!($95)) {
  $96 = HEAP8[$__in_units>>0]|0;
  $97 = ($96<<24>>24)==(0);
  if (!($97)) {
   $98 = HEAP32[$__g_end>>2]|0;
   $99 = $98;
   $100 = $__g;
   $101 = (($99) - ($100))|0;
   $102 = ($101|0)<(160);
   if ($102) {
    $103 = HEAP32[$__dc>>2]|0;
    $104 = (($98) + 4|0);
    HEAP32[$__g_end>>2] = $104;
    HEAP32[$98>>2] = $103;
   }
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (+__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2,$105,$__err));
 HEAPF64[$__v>>3] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($68|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($68) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($68) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$68>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($68)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $68;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 57;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 57) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi36Z2D = 0, $$pre$phi38Z2D = 0, $$pre35 = 0, $$pre37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409568)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_iiiii[$4 & 15]($1,408088,((408088 + 26|0)),$__atoms)|0);
 $5 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $6 = HEAP8[$__buf>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = (($__buf) + 1|0);
  $$pre37 = (($__buf) + 8|0);
  $$pre$phi36Z2D = $11;$$pre$phi38Z2D = $$pre37;$12 = $11;
 } else {
  $9 = (($__buf) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$pre35 = (($__buf) + 1|0);
  $$pre$phi36Z2D = $$pre35;$$pre$phi38Z2D = $9;$12 = $10;
 }
 HEAP32[$__a_end>>2] = $12;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $13 = (($__buf) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i9 = $$pre;$__a$0 = $12;
 L5: while(1) {
  $14 = ($$pre$i$i$i9|0)==(0|0);
  if ($14) {
   $124 = 1;$72 = 0;
  } else {
   $15 = (($$pre$i$i$i9) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($$pre$i$i$i9) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$$pre$i$i$i9>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($$pre$i$i$i9)|0);
    $$0$i$i$i$i7 = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i$i$i7 = $24;
   }
   $25 = ($$0$i$i$i$i7|0)==(-1);
   if ($25) {
    HEAP32[$__b>>2] = 0;
    $124 = 1;$72 = 0;
   } else {
    $124 = 0;$72 = $$pre$i$i$i9;
   }
  }
  $26 = HEAP32[$__e>>2]|0;
  $27 = ($26|0)==(0|0);
  do {
   if ($27) {
    label = 17;
   } else {
    $28 = (($26) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($26) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($29|0)==($31|0);
    if ($32) {
     $33 = HEAP32[$26>>2]|0;
     $34 = (($33) + 36|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (FUNCTION_TABLE_ii[$35 & 127]($26)|0);
     $$0$i$i1$i$i13 = $36;
    } else {
     $37 = HEAP32[$29>>2]|0;
     $$0$i$i1$i$i13 = $37;
    }
    $38 = ($$0$i$i1$i$i13|0)==(-1);
    if ($38) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($124) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($124) {
    $__a$2 = $__a$0;
    break;
   }
  }
  $39 = HEAP32[$__a_end>>2]|0;
  $40 = $39;
  $41 = $__a$0;
  $42 = (($40) - ($41))|0;
  $43 = HEAP8[$__buf>>0]|0;
  $44 = $43 & 1;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   $47 = $43&255;
   $48 = $47 >>> 1;
   $50 = $48;
  } else {
   $46 = HEAP32[$13>>2]|0;
   $50 = $46;
  }
  $49 = ($42|0)==($50|0);
  if ($49) {
   if ($45) {
    $52 = $43&255;
    $53 = $52 >>> 1;
    $54 = $43&255;
    $55 = $54 >>> 1;
    $57 = $55;$70 = $53;
   } else {
    $51 = HEAP32[$13>>2]|0;
    $57 = $51;$70 = $51;
   }
   $56 = $57 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$56,0);
   $58 = HEAP8[$__buf>>0]|0;
   $59 = $58 & 1;
   $60 = ($59<<24>>24)==(0);
   if ($60) {
    $63 = 10;
   } else {
    $61 = HEAP32[$__buf>>2]|0;
    $62 = $61 & -2;
    $phitmp$i26 = (($62) + -1)|0;
    $63 = $phitmp$i26;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$63,0);
   $64 = HEAP8[$__buf>>0]|0;
   $65 = $64 & 1;
   $66 = ($65<<24>>24)==(0);
   if ($66) {
    $69 = $$pre$phi36Z2D;
   } else {
    $67 = HEAP32[$$pre$phi38Z2D>>2]|0;
    $69 = $67;
   }
   $68 = (($69) + ($70)|0);
   HEAP32[$__a_end>>2] = $68;
   $__a$1 = $69;
  } else {
   $__a$1 = $__a$0;
  }
  $71 = (($72) + 12|0);
  $73 = HEAP32[$71>>2]|0;
  $74 = (($72) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$72>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($72)|0);
   $$0$i$i = $80;
  } else {
   $81 = HEAP32[$73>>2]|0;
   $$0$i$i = $81;
  }
  $82 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
  $83 = ($82|0)==(0);
  if (!($83)) {
   $__a$2 = $__a$1;
   break;
  }
  $84 = HEAP32[$71>>2]|0;
  $85 = HEAP32[$74>>2]|0;
  $86 = ($84|0)==($85|0);
  if ($86) {
   $87 = HEAP32[$72>>2]|0;
   $88 = (($87) + 40|0);
   $89 = HEAP32[$88>>2]|0;
   (FUNCTION_TABLE_ii[$89 & 127]($72)|0);
   $$pre$i$i$i9 = $72;$__a$0 = $__a$1;
   continue;
  } else {
   $90 = (($84) + 4|0);
   HEAP32[$71>>2] = $90;
   $$pre$i$i$i9 = $72;$__a$0 = $__a$1;
   continue;
  }
 }
 $91 = (($__a$2) + 3|0);
 HEAP8[$91>>0] = 0;
 $92 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $93 = (__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2,$92,408128,$vararg_buffer)|0);
 $94 = ($93|0)==(1);
 if (!($94)) {
  HEAP32[$__err>>2] = 4;
 }
 $95 = HEAP32[$__b>>2]|0;
 $96 = ($95|0)==(0|0);
 if ($96) {
  $123 = 0;$125 = 1;
 } else {
  $97 = (($95) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($95) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($98|0)==($100|0);
  if ($101) {
   $102 = HEAP32[$95>>2]|0;
   $103 = (($102) + 36|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (FUNCTION_TABLE_ii[$104 & 127]($95)|0);
   $$0$i$i$i$i = $105;
  } else {
   $106 = HEAP32[$98>>2]|0;
   $$0$i$i$i$i = $106;
  }
  $107 = ($$0$i$i$i$i|0)==(-1);
  if ($107) {
   HEAP32[$__b>>2] = 0;
   $123 = 0;$125 = 1;
  } else {
   $123 = $95;$125 = 0;
  }
 }
 $108 = HEAP32[$__e>>2]|0;
 $109 = ($108|0)==(0|0);
 do {
  if ($109) {
   label = 52;
  } else {
   $110 = (($108) + 12|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($108) + 16|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($111|0)==($113|0);
   if ($114) {
    $115 = HEAP32[$108>>2]|0;
    $116 = (($115) + 36|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (FUNCTION_TABLE_ii[$117 & 127]($108)|0);
    $$0$i$i1$i$i = $118;
   } else {
    $119 = HEAP32[$111>>2]|0;
    $$0$i$i1$i$i = $119;
   }
   $120 = ($$0$i$i1$i$i|0)==(-1);
   if ($120) {
    HEAP32[$__e>>2] = 0;
    label = 52;
    break;
   }
   if ($125) {
    HEAP32[$agg$result>>2] = $123;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 52) {
  if (!($125)) {
   HEAP32[$agg$result>>2] = $123;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $121 = HEAP32[$__err>>2]|0;
 $122 = $121 | 2;
 HEAP32[$__err>>2] = $122;
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $17 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $18 = ($17|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $18 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $28 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $29 = ($28|0)==($27|0);
  if ($29) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $28;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (408088 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (408088 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 15]($0,408088,((408088 + 26|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409720)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($4)|0);
 HEAP8[$__thousands_sep>>0] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 63]($agg$result,$4);
 $12 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 15]($0,408088,((408088 + 32|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409720)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($4)|0);
 HEAP8[$__decimal_point>>0] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 HEAP8[$__thousands_sep>>0] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = (($13) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vii[$15 & 63]($agg$result,$4);
 $16 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $12 = $9;
  }
  $13 = ($12|0)==(0);
  if ($13) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $29 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $29 = $26;
  }
  $30 = ($29|0)==(0);
  if (!($30)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $41 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $42 = ($41|0)==($40|0);
  if ($42) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $41;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (408088 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $80 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $80 = $77;
    }
    $81 = ($80|0)==(0);
    if (!($81)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 15]($0,408088,((408088 + 26|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409728)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($4)|0);
 HEAP32[$__thousands_sep>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 63]($agg$result,$4);
 $12 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 15]($0,408088,((408088 + 32|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409728)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($4)|0);
 HEAP32[$__decimal_point>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 HEAP32[$__thousands_sep>>2] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = (($13) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vii[$15 & 63]($agg$result,$4);
 $16 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $12 = $9;
  }
  $13 = ($12|0)==(0);
  if ($13) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $29 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $29 = $26;
  }
  $30 = ($29|0)==(0);
  if (!($30)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $41 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $42 = ($41|0)==($40|0);
  if ($42) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $41;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (408088 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $79 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $79 = $76;
    }
    $80 = ($79|0)==(0);
    if (!($80)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 31]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,409720)|0);
 $12 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
 $13 = HEAP32[$11>>2]|0;
 if ($__v) {
  $14 = (($13) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vii[$15 & 63]($__nm,$11);
 } else {
  $16 = (($13) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 63]($__nm,$11);
 }
 $18 = HEAP8[$__nm>>0]|0;
 $19 = $18 & 1;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $23 = (($__nm) + 1|0);
  $$pre5 = (($__nm) + 8|0);
  $$ph = $23;$$pre$phi4Z2D = $23;$$pre$phi6Z2D = $$pre5;
 } else {
  $21 = (($__nm) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $$pre3 = (($__nm) + 1|0);
  $$ph = $22;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $21;
 }
 $24 = (($__nm) + 4|0);
 $26 = $18;$35 = $$ph;
 while(1) {
  $25 = $26 & 1;
  $27 = ($25<<24>>24)==(0);
  if ($27) {
   $30 = $26&255;
   $31 = $30 >>> 1;
   $33 = $$pre$phi4Z2D;$34 = $31;
  } else {
   $28 = HEAP32[$$pre$phi6Z2D>>2]|0;
   $29 = HEAP32[$24>>2]|0;
   $33 = $28;$34 = $29;
  }
  $32 = (($33) + ($34)|0);
  $36 = ($35|0)==($32|0);
  if ($36) {
   break;
  }
  $37 = HEAP8[$35>>0]|0;
  $38 = HEAP32[$__s>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if (!($39)) {
    $40 = (($38) + 24|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 28|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if (!($44)) {
     $45 = (($41) + 1|0);
     HEAP32[$40>>2] = $45;
     HEAP8[$41>>0] = $37;
     break;
    }
    $46 = HEAP32[$38>>2]|0;
    $47 = (($46) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $37&255;
    $50 = (FUNCTION_TABLE_iii[$48 & 31]($38,$49)|0);
    $51 = ($50|0)==(-1);
    if ($51) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $52 = (($35) + 1|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $26 = $$pre;$35 = $52;
 }
 $53 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$result>>2] = $53;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp;
 $__fmt = sp + 56|0;
 $__nar = sp + 44|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[408368+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[408368+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[408368+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[408368+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[408368+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[408368+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,408272,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 if ((($13|0) == 8)) {
  $14 = $__flags & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP8[$$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 64)) {
  HEAP8[$$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else {
  if ($__signd) {
   HEAP8[$$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 (_uselocale(($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$12 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409720)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $12 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiiii[$16 & 15]($0,$__nb,$__ne,$__ob)|0);
  $17 = $__ne;
  $18 = $__nb;
  $19 = (($17) - ($18))|0;
  $20 = (($__ob) + ($19)|0);
  HEAP32[$__oe>>2] = $20;
 } else {
  HEAP32[$__oe>>2] = $__ob;
  $21 = HEAP8[$__nb>>0]|0;
  if ((($21<<24>>24) == 43) | (($21<<24>>24) == 45)) {
   $22 = HEAP32[$0>>2]|0;
   $23 = (($22) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iii[$24 & 31]($0,$21)|0);
   $26 = (($__nb) + 1|0);
   $27 = HEAP32[$__oe>>2]|0;
   $28 = (($27) + 1|0);
   HEAP32[$__oe>>2] = $28;
   HEAP8[$27>>0] = $25;
   $__nf$0 = $26;
  } else {
   $__nf$0 = $__nb;
  }
  $29 = $__ne;
  $30 = $__nf$0;
  $31 = (($29) - ($30))|0;
  $32 = ($31|0)>(1);
  if ($32) {
   $33 = HEAP8[$__nf$0>>0]|0;
   $34 = ($33<<24>>24)==(48);
   if ($34) {
    $35 = (($__nf$0) + 1|0);
    $36 = HEAP8[$35>>0]|0;
    if ((($36<<24>>24) == 88) | (($36<<24>>24) == 120)) {
     $37 = HEAP32[$0>>2]|0;
     $38 = (($37) + 28|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_iii[$39 & 31]($0,48)|0);
     $41 = HEAP32[$__oe>>2]|0;
     $42 = (($41) + 1|0);
     HEAP32[$__oe>>2] = $42;
     HEAP8[$41>>0] = $40;
     $43 = HEAP8[$35>>0]|0;
     $44 = HEAP32[$0>>2]|0;
     $45 = (($44) + 28|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 31]($0,$43)|0);
     $48 = (($__nf$0) + 2|0);
     $49 = HEAP32[$__oe>>2]|0;
     $50 = (($49) + 1|0);
     HEAP32[$__oe>>2] = $50;
     HEAP8[$49>>0] = $47;
     $__nf$1 = $48;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } else {
   $__nf$1 = $__nf$0;
  }
  $51 = ($__nf$1|0)==($__ne|0);
  if (!($51)) {
   $52 = (($__ne) + -1|0);
   $53 = ($52>>>0)>($__nf$1>>>0);
   if ($53) {
    $$012$i$i5 = $__nf$1;$56 = $52;
    while(1) {
     $54 = HEAP8[$$012$i$i5>>0]|0;
     $55 = HEAP8[$56>>0]|0;
     HEAP8[$$012$i$i5>>0] = $55;
     HEAP8[$56>>0] = $54;
     $57 = (($$012$i$i5) + 1|0);
     $58 = (($56) + -1|0);
     $59 = ($57>>>0)<($58>>>0);
     if ($59) {
      $$012$i$i5 = $57;$56 = $58;
     } else {
      break;
     }
    }
   }
  }
  $60 = HEAP32[$1>>2]|0;
  $61 = (($60) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (FUNCTION_TABLE_ii[$62 & 127]($1)|0);
  $64 = ($__nf$1>>>0)<($__ne>>>0);
  if ($64) {
   $65 = (($__grouping) + 1|0);
   $66 = (($__grouping) + 4|0);
   $67 = (($__grouping) + 8|0);
   $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
   while(1) {
    $68 = HEAP8[$__grouping>>0]|0;
    $69 = $68 & 1;
    $70 = ($69<<24>>24)==(0);
    $71 = HEAP32[$67>>2]|0;
    $$ = $70 ? $65 : $71;
    $72 = (($$) + ($__dg$010)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
    } else {
     $75 = HEAP32[$67>>2]|0;
     $$12 = $70 ? $65 : $75;
     $76 = (($$12) + ($__dg$010)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77 << 24 >> 24;
     $79 = ($__dc$09|0)==($78|0);
     if ($79) {
      $80 = HEAP32[$__oe>>2]|0;
      $81 = (($80) + 1|0);
      HEAP32[$__oe>>2] = $81;
      HEAP8[$80>>0] = $63;
      $82 = HEAP8[$__grouping>>0]|0;
      $83 = $82 & 1;
      $84 = ($83<<24>>24)==(0);
      if ($84) {
       $86 = $82&255;
       $87 = $86 >>> 1;
       $89 = $87;
      } else {
       $85 = HEAP32[$66>>2]|0;
       $89 = $85;
      }
      $88 = (($89) + -1)|0;
      $90 = ($__dg$010>>>0)<($88>>>0);
      $91 = $90&1;
      $$__dg$0 = (($91) + ($__dg$010))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
     }
    }
    $92 = HEAP8[$__p$011>>0]|0;
    $93 = HEAP32[$0>>2]|0;
    $94 = (($93) + 28|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (FUNCTION_TABLE_iii[$95 & 31]($0,$92)|0);
    $97 = HEAP32[$__oe>>2]|0;
    $98 = (($97) + 1|0);
    HEAP32[$__oe>>2] = $98;
    HEAP8[$97>>0] = $96;
    $99 = (($__dc$1) + 1)|0;
    $100 = (($__p$011) + 1|0);
    $101 = ($100>>>0)<($__ne>>>0);
    if ($101) {
     $__dc$09 = $99;$__dg$010 = $__dg$1;$__p$011 = $100;
    } else {
     break;
    }
   }
  }
  $102 = $__nf$1;
  $103 = $__nb;
  $104 = (($102) - ($103))|0;
  $105 = (($__ob) + ($104)|0);
  $106 = HEAP32[$__oe>>2]|0;
  $107 = ($105|0)==($106|0);
  if (!($107)) {
   $108 = (($106) + -1|0);
   $109 = ($108>>>0)>($105>>>0);
   if ($109) {
    $$012$i$i = $105;$112 = $108;
    while(1) {
     $110 = HEAP8[$$012$i$i>>0]|0;
     $111 = HEAP8[$112>>0]|0;
     HEAP8[$$012$i$i>>0] = $111;
     HEAP8[$112>>0] = $110;
     $113 = (($$012$i$i) + 1|0);
     $114 = (($112) + -1|0);
     $115 = ($113>>>0)<($114>>>0);
     if ($115) {
      $$012$i$i = $113;$112 = $114;
     } else {
      break;
     }
    }
   }
  }
 }
 $116 = ($__np|0)==($__ne|0);
 if ($116) {
  $117 = HEAP32[$__oe>>2]|0;
  $storemerge = $117;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $118 = $__np;
  $119 = $__nb;
  $120 = (($118) - ($119))|0;
  $121 = (($__ob) + ($120)|0);
  $storemerge = $121;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 74|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,408280,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp;
 $__fmt = sp + 56|0;
 $__nar = sp + 44|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[408368+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[408368+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[408368+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[408368+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[408368+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[408368+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,408272,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 75|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,408280,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 102|0;
 $__nb = sp + 40|0;
 $__o = sp + 44|0;
 $__op = sp + 36|0;
 $__oe = sp + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,408288,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$$byval_copy>>2] = $13;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 if ($16) {
  $17 = (__ZNSt3__16__clocEv()|0);
  $18 = (($__iob) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$$byval_copy>>2] = $19;
  $vararg_ptr8 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $20 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$$byval_copy)|0);
  $21 = HEAP32[$__nb>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $24 = $21;$38 = $21;$__nc$2 = $20;
  }
 } else {
  $$pre9 = HEAP32[$__nb>>2]|0;
  $24 = $$pre9;$38 = 0;$__nc$2 = $__nc$0;
 }
 $23 = (($24) + ($__nc$2)|0);
 $25 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24,$23,$__iob)|0);
 $26 = ($24|0)==($__nar|0);
 if ($26) {
  $30 = $__nar;$36 = 0;$__ob$0 = $__o;
 } else {
  $27 = $__nc$2 << 1;
  $28 = (_malloc($27)|0);
  $29 = ($28|0)==(0|0);
  if ($29) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $30 = $24;$36 = $28;$__ob$0 = $28;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($30,$25,$23,$__ob$0,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$33,$34,$__iob,$__fl);
 $35 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $35;
 HEAP32[$agg$result>>2] = $35;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  _free($36);
 }
 $39 = ($38|0)==(0|0);
 if ($39) {
  STACKTOP = sp;return;
 }
 _free($38);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vasprintf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 (_uselocale(($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$47 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$018 = 0, $__dc$1 = 0, $__dg$019 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$3 = 0, $__ns$034 = 0;
 var $__ns$126 = 0, $__ns$2 = 0, $__p$020 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409720)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iii[$8 & 31]($0,$5)|0);
  $10 = (($__nb) + 1|0);
  $11 = HEAP32[$__oe>>2]|0;
  $12 = (($11) + 1|0);
  HEAP32[$__oe>>2] = $12;
  HEAP8[$11>>0] = $9;
  $__nf$0 = $10;
 } else {
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 $14 = $__nf$0;
 $15 = (($13) - ($14))|0;
 $16 = ($15|0)>(1);
 L4: do {
  if ($16) {
   $18 = HEAP8[$__nf$0>>0]|0;
   $19 = ($18<<24>>24)==(48);
   if ($19) {
    $20 = (($__nf$0) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    if ((($21<<24>>24) == 88) | (($21<<24>>24) == 120)) {
     $22 = HEAP32[$0>>2]|0;
     $23 = (($22) + 28|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iii[$24 & 31]($0,48)|0);
     $26 = HEAP32[$__oe>>2]|0;
     $27 = (($26) + 1|0);
     HEAP32[$__oe>>2] = $27;
     HEAP8[$26>>0] = $25;
     $28 = (($__nf$0) + 2|0);
     $29 = HEAP8[$20>>0]|0;
     $30 = HEAP32[$0>>2]|0;
     $31 = (($30) + 28|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (FUNCTION_TABLE_iii[$32 & 31]($0,$29)|0);
     $34 = HEAP32[$__oe>>2]|0;
     $35 = (($34) + 1|0);
     HEAP32[$__oe>>2] = $35;
     HEAP8[$34>>0] = $33;
     $36 = ($28>>>0)<($__ne>>>0);
     if ($36) {
      $__ns$034 = $28;
      while(1) {
       $39 = HEAP8[$__ns$034>>0]|0;
       $40 = (__ZNSt3__16__clocEv()|0);
       $41 = $39 << 24 >> 24;
       $42 = (_isxdigit_l($41,$40)|0);
       $43 = ($42|0)==(0);
       $37 = (($__ns$034) + 1|0);
       if ($43) {
        $__nf$1 = $28;$__ns$2 = $__ns$034;
        break L4;
       }
       $38 = ($37>>>0)<($__ne>>>0);
       if ($38) {
        $__ns$034 = $37;
       } else {
        $__nf$1 = $28;$__ns$2 = $37;
        break;
       }
      }
     } else {
      $__nf$1 = $28;$__ns$2 = $28;
     }
    } else {
     label = 4;
    }
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } while(0);
 L11: do {
  if ((label|0) == 4) {
   $17 = ($__nf$0>>>0)<($__ne>>>0);
   if ($17) {
    $__ns$126 = $__nf$0;
    while(1) {
     $46 = HEAP8[$__ns$126>>0]|0;
     $47 = (__ZNSt3__16__clocEv()|0);
     $48 = $46 << 24 >> 24;
     $49 = (_isdigit_l($48,$47)|0);
     $50 = ($49|0)==(0);
     $44 = (($__ns$126) + 1|0);
     if ($50) {
      $__nf$1 = $__nf$0;$__ns$2 = $__ns$126;
      break L11;
     }
     $45 = ($44>>>0)<($__ne>>>0);
     if ($45) {
      $__ns$126 = $44;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $44;
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
   }
  }
 } while(0);
 $51 = HEAP8[$__grouping>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if ($53) {
  $56 = $51&255;
  $57 = $56 >>> 1;
  $58 = $57;
 } else {
  $54 = (($__grouping) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $58 = $55;
 }
 $59 = ($58|0)==(0);
 if ($59) {
  $60 = HEAP32[$__oe>>2]|0;
  $61 = HEAP32[$0>>2]|0;
  $62 = (($61) + 32|0);
  $63 = HEAP32[$62>>2]|0;
  (FUNCTION_TABLE_iiiii[$63 & 15]($0,$__nf$1,$__ns$2,$60)|0);
  $64 = $__ns$2;
  $65 = $__nf$1;
  $66 = (($64) - ($65))|0;
  $67 = HEAP32[$__oe>>2]|0;
  $68 = (($67) + ($66)|0);
  HEAP32[$__oe>>2] = $68;
 } else {
  $69 = ($__nf$1|0)==($__ns$2|0);
  if (!($69)) {
   $70 = (($__ns$2) + -1|0);
   $71 = ($70>>>0)>($__nf$1>>>0);
   if ($71) {
    $$012$i$i = $__nf$1;$74 = $70;
    while(1) {
     $72 = HEAP8[$$012$i$i>>0]|0;
     $73 = HEAP8[$74>>0]|0;
     HEAP8[$$012$i$i>>0] = $73;
     HEAP8[$74>>0] = $72;
     $75 = (($$012$i$i) + 1|0);
     $76 = (($74) + -1|0);
     $77 = ($75>>>0)<($76>>>0);
     if ($77) {
      $$012$i$i = $75;$74 = $76;
     } else {
      break;
     }
    }
   }
  }
  $78 = HEAP32[$1>>2]|0;
  $79 = (($78) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (FUNCTION_TABLE_ii[$80 & 127]($1)|0);
  $82 = ($__nf$1>>>0)<($__ns$2>>>0);
  if ($82) {
   $83 = (($__grouping) + 1|0);
   $84 = (($__grouping) + 4|0);
   $85 = (($__grouping) + 8|0);
   $__dc$018 = 0;$__dg$019 = 0;$__p$020 = $__nf$1;
   while(1) {
    $86 = HEAP8[$__grouping>>0]|0;
    $87 = $86 & 1;
    $88 = ($87<<24>>24)==(0);
    $89 = HEAP32[$85>>2]|0;
    $$ = $88 ? $83 : $89;
    $90 = (($$) + ($__dg$019)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = ($91<<24>>24)>(0);
    if ($92) {
     $93 = HEAP32[$85>>2]|0;
     $$47 = $88 ? $83 : $93;
     $94 = (($$47) + ($__dg$019)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95 << 24 >> 24;
     $97 = ($__dc$018|0)==($96|0);
     if ($97) {
      $98 = HEAP32[$__oe>>2]|0;
      $99 = (($98) + 1|0);
      HEAP32[$__oe>>2] = $99;
      HEAP8[$98>>0] = $81;
      $100 = HEAP8[$__grouping>>0]|0;
      $101 = $100 & 1;
      $102 = ($101<<24>>24)==(0);
      if ($102) {
       $104 = $100&255;
       $105 = $104 >>> 1;
       $107 = $105;
      } else {
       $103 = HEAP32[$84>>2]|0;
       $107 = $103;
      }
      $106 = (($107) + -1)|0;
      $108 = ($__dg$019>>>0)<($106>>>0);
      $109 = $108&1;
      $$__dg$0 = (($109) + ($__dg$019))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
     }
    } else {
     $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
    }
    $110 = HEAP8[$__p$020>>0]|0;
    $111 = HEAP32[$0>>2]|0;
    $112 = (($111) + 28|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (FUNCTION_TABLE_iii[$113 & 31]($0,$110)|0);
    $115 = HEAP32[$__oe>>2]|0;
    $116 = (($115) + 1|0);
    HEAP32[$__oe>>2] = $116;
    HEAP8[$115>>0] = $114;
    $117 = (($__dc$1) + 1)|0;
    $118 = (($__p$020) + 1|0);
    $119 = ($118>>>0)<($__ns$2>>>0);
    if ($119) {
     $__dc$018 = $117;$__dg$019 = $__dg$1;$__p$020 = $118;
    } else {
     break;
    }
   }
  }
  $120 = $__nf$1;
  $121 = $__nb;
  $122 = (($120) - ($121))|0;
  $123 = (($__ob) + ($122)|0);
  $124 = HEAP32[$__oe>>2]|0;
  $125 = ($123|0)==($124|0);
  if (!($125)) {
   $126 = (($124) + -1|0);
   $127 = ($126>>>0)>($123>>>0);
   if ($127) {
    $$012$i$i7 = $123;$130 = $126;
    while(1) {
     $128 = HEAP8[$$012$i$i7>>0]|0;
     $129 = HEAP8[$130>>0]|0;
     HEAP8[$$012$i$i7>>0] = $129;
     HEAP8[$130>>0] = $128;
     $131 = (($$012$i$i7) + 1|0);
     $132 = (($130) + -1|0);
     $133 = ($131>>>0)<($132>>>0);
     if ($133) {
      $$012$i$i7 = $131;$130 = $132;
     } else {
      break;
     }
    }
   }
  }
 }
 $134 = ($__ns$2>>>0)<($__ne>>>0);
 L46: do {
  if ($134) {
   $__nf$214 = $__ns$2;
   while(1) {
    $135 = HEAP8[$__nf$214>>0]|0;
    $136 = ($135<<24>>24)==(46);
    if ($136) {
     break;
    }
    $144 = HEAP32[$0>>2]|0;
    $145 = (($144) + 28|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_iii[$146 & 31]($0,$135)|0);
    $148 = HEAP32[$__oe>>2]|0;
    $149 = (($148) + 1|0);
    HEAP32[$__oe>>2] = $149;
    HEAP8[$148>>0] = $147;
    $150 = (($__nf$214) + 1|0);
    $151 = ($150>>>0)<($__ne>>>0);
    if ($151) {
     $__nf$214 = $150;
    } else {
     $__nf$3 = $150;
     break L46;
    }
   }
   $137 = HEAP32[$1>>2]|0;
   $138 = (($137) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (FUNCTION_TABLE_ii[$139 & 127]($1)|0);
   $141 = HEAP32[$__oe>>2]|0;
   $142 = (($141) + 1|0);
   HEAP32[$__oe>>2] = $142;
   HEAP8[$141>>0] = $140;
   $143 = (($__nf$214) + 1|0);
   $__nf$3 = $143;
  } else {
   $__nf$3 = $__ns$2;
  }
 } while(0);
 $152 = HEAP32[$__oe>>2]|0;
 $153 = HEAP32[$0>>2]|0;
 $154 = (($153) + 32|0);
 $155 = HEAP32[$154>>2]|0;
 (FUNCTION_TABLE_iiiii[$155 & 15]($0,$__nf$3,$__ne,$152)|0);
 $156 = $__nf$3;
 $157 = (($13) - ($156))|0;
 $158 = HEAP32[$__oe>>2]|0;
 $159 = (($158) + ($157)|0);
 HEAP32[$__oe>>2] = $159;
 $160 = ($__np|0)==($__ne|0);
 if ($160) {
  $storemerge = $159;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $161 = $__np;
 $162 = $__nb;
 $163 = (($161) - ($162))|0;
 $164 = (($__ob) + ($163)|0);
 $storemerge = $164;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 102|0;
 $__nb = sp + 40|0;
 $__o = sp + 44|0;
 $__op = sp + 36|0;
 $__oe = sp + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,408296,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$$byval_copy>>2] = $13;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 if ($16) {
  $17 = (__ZNSt3__16__clocEv()|0);
  if ($10) {
   $18 = (($__iob) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$$byval_copy>>2] = $19;
   $vararg_ptr8 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $20 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$$byval_copy)|0);
   $__nc$1 = $20;
  } else {
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $21 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$$byval_copy)|0);
   $__nc$1 = $21;
  }
  $22 = HEAP32[$__nb>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $25 = $22;$38 = $22;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre9 = HEAP32[$__nb>>2]|0;
  $25 = $$pre9;$38 = 0;$__nc$2 = $__nc$0;
 }
 $24 = (($25) + ($__nc$2)|0);
 $26 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($25,$24,$__iob)|0);
 $27 = ($25|0)==($__nar|0);
 if ($27) {
  $31 = $__nar;$37 = 0;$__ob$0 = $__o;
 } else {
  $28 = $__nc$2 << 1;
  $29 = (_malloc($28)|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $31 = $25;$37 = $29;$__ob$0 = $29;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31,$26,$24,$__ob$0,$__op,$__oe,$0);
 $32 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
 $33 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $33;
 $34 = HEAP32[$__op>>2]|0;
 $35 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$34,$35,$__iob,$__fl);
 $36 = HEAP32[$1>>2]|0;
 HEAP32[$agg$result>>2] = $36;
 _free($37);
 _free($38);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy = sp;
 $__fmt = sp + 72|0;
 $__nar = sp + 52|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[408376+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[408376+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[408376+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[408376+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[408376+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[408376+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$$byval_copy)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $6 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = (($8) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiii[$10 & 15]($6,$__nar,$4,$__o)|0);
 $11 = (($__o) + ($3)|0);
 $12 = ($5|0)==($4|0);
 if ($12) {
  $__op$0 = $11;
 } else {
  $13 = $__nar;
  $14 = $5;
  $15 = (($14) - ($13))|0;
  $16 = (($__o) + ($15)|0);
  $__op$0 = $16;
 }
 $17 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $17;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$11,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 31]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,409728)|0);
 $12 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
 $13 = HEAP32[$11>>2]|0;
 if ($__v) {
  $14 = (($13) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vii[$15 & 63]($__nm,$11);
 } else {
  $16 = (($13) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 63]($__nm,$11);
 }
 $18 = HEAP8[$__nm>>0]|0;
 $19 = $18 & 1;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $23 = (($__nm) + 4|0);
  $$pre3 = (($__nm) + 8|0);
  $$ph = $23;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $23;
 } else {
  $21 = (($__nm) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $$pre2 = (($__nm) + 4|0);
  $$ph = $22;$$pre$phi4Z2D = $21;$$pre$phiZ2D = $$pre2;
 }
 $25 = $18;$34 = $$ph;
 while(1) {
  $24 = $25 & 1;
  $26 = ($24<<24>>24)==(0);
  if ($26) {
   $29 = $25&255;
   $30 = $29 >>> 1;
   $32 = $$pre$phiZ2D;$33 = $30;
  } else {
   $27 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $28 = HEAP32[$$pre$phiZ2D>>2]|0;
   $32 = $27;$33 = $28;
  }
  $31 = (($32) + ($33<<2)|0);
  $35 = ($34|0)==($31|0);
  if ($35) {
   break;
  }
  $36 = HEAP32[$34>>2]|0;
  $37 = HEAP32[$__s>>2]|0;
  $38 = ($37|0)==(0|0);
  if (!($38)) {
   $39 = (($37) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($37) + 28|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($40|0)==($42|0);
   if ($43) {
    $44 = HEAP32[$37>>2]|0;
    $45 = (($44) + 52|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_iii[$46 & 31]($37,$36)|0);
    $$0$i$i = $47;
   } else {
    $48 = (($40) + 4|0);
    HEAP32[$39>>2] = $48;
    HEAP32[$40>>2] = $36;
    $$0$i$i = $36;
   }
   $49 = ($$0$i$i|0)==(-1);
   if ($49) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $50 = (($34) + 4|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $25 = $$pre;$34 = $50;
 }
 $51 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$result>>2] = $51;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp;
 $__fmt = sp + 116|0;
 $__nar = sp + 104|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[408368+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[408368+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[408368+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[408368+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[408368+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[408368+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,408272,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$11 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409728)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $12 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiiii[$16 & 15]($0,$__nb,$__ne,$__ob)|0);
  $17 = $__ne;
  $18 = $__nb;
  $19 = (($17) - ($18))|0;
  $20 = (($__ob) + ($19<<2)|0);
  HEAP32[$__oe>>2] = $20;
  $121 = $20;
 } else {
  HEAP32[$__oe>>2] = $__ob;
  $21 = HEAP8[$__nb>>0]|0;
  if ((($21<<24>>24) == 43) | (($21<<24>>24) == 45)) {
   $22 = HEAP32[$0>>2]|0;
   $23 = (($22) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iii[$24 & 31]($0,$21)|0);
   $26 = (($__nb) + 1|0);
   $27 = HEAP32[$__oe>>2]|0;
   $28 = (($27) + 4|0);
   HEAP32[$__oe>>2] = $28;
   HEAP32[$27>>2] = $25;
   $__nf$0 = $26;
  } else {
   $__nf$0 = $__nb;
  }
  $29 = $__ne;
  $30 = $__nf$0;
  $31 = (($29) - ($30))|0;
  $32 = ($31|0)>(1);
  if ($32) {
   $33 = HEAP8[$__nf$0>>0]|0;
   $34 = ($33<<24>>24)==(48);
   if ($34) {
    $35 = (($__nf$0) + 1|0);
    $36 = HEAP8[$35>>0]|0;
    if ((($36<<24>>24) == 88) | (($36<<24>>24) == 120)) {
     $37 = HEAP32[$0>>2]|0;
     $38 = (($37) + 44|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_iii[$39 & 31]($0,48)|0);
     $41 = HEAP32[$__oe>>2]|0;
     $42 = (($41) + 4|0);
     HEAP32[$__oe>>2] = $42;
     HEAP32[$41>>2] = $40;
     $43 = HEAP8[$35>>0]|0;
     $44 = HEAP32[$0>>2]|0;
     $45 = (($44) + 44|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 31]($0,$43)|0);
     $48 = (($__nf$0) + 2|0);
     $49 = HEAP32[$__oe>>2]|0;
     $50 = (($49) + 4|0);
     HEAP32[$__oe>>2] = $50;
     HEAP32[$49>>2] = $47;
     $__nf$1 = $48;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } else {
   $__nf$1 = $__nf$0;
  }
  $51 = ($__nf$1|0)==($__ne|0);
  if (!($51)) {
   $52 = (($__ne) + -1|0);
   $53 = ($52>>>0)>($__nf$1>>>0);
   if ($53) {
    $$012$i$i5 = $__nf$1;$56 = $52;
    while(1) {
     $54 = HEAP8[$$012$i$i5>>0]|0;
     $55 = HEAP8[$56>>0]|0;
     HEAP8[$$012$i$i5>>0] = $55;
     HEAP8[$56>>0] = $54;
     $57 = (($$012$i$i5) + 1|0);
     $58 = (($56) + -1|0);
     $59 = ($57>>>0)<($58>>>0);
     if ($59) {
      $$012$i$i5 = $57;$56 = $58;
     } else {
      break;
     }
    }
   }
  }
  $60 = HEAP32[$1>>2]|0;
  $61 = (($60) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (FUNCTION_TABLE_ii[$62 & 127]($1)|0);
  $64 = ($__nf$1>>>0)<($__ne>>>0);
  if ($64) {
   $65 = (($__grouping) + 1|0);
   $66 = (($__grouping) + 4|0);
   $67 = (($__grouping) + 8|0);
   $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
   while(1) {
    $68 = HEAP8[$__grouping>>0]|0;
    $69 = $68 & 1;
    $70 = ($69<<24>>24)==(0);
    $71 = HEAP32[$67>>2]|0;
    $$ = $70 ? $65 : $71;
    $72 = (($$) + ($__dg$09)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
    } else {
     $75 = HEAP32[$67>>2]|0;
     $$11 = $70 ? $65 : $75;
     $76 = (($$11) + ($__dg$09)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77 << 24 >> 24;
     $79 = ($__dc$08|0)==($78|0);
     if ($79) {
      $80 = HEAP32[$__oe>>2]|0;
      $81 = (($80) + 4|0);
      HEAP32[$__oe>>2] = $81;
      HEAP32[$80>>2] = $63;
      $82 = HEAP8[$__grouping>>0]|0;
      $83 = $82 & 1;
      $84 = ($83<<24>>24)==(0);
      if ($84) {
       $86 = $82&255;
       $87 = $86 >>> 1;
       $89 = $87;
      } else {
       $85 = HEAP32[$66>>2]|0;
       $89 = $85;
      }
      $88 = (($89) + -1)|0;
      $90 = ($__dg$09>>>0)<($88>>>0);
      $91 = $90&1;
      $$__dg$0 = (($91) + ($__dg$09))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
     }
    }
    $92 = HEAP8[$__p$010>>0]|0;
    $93 = HEAP32[$0>>2]|0;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (FUNCTION_TABLE_iii[$95 & 31]($0,$92)|0);
    $97 = HEAP32[$__oe>>2]|0;
    $98 = (($97) + 4|0);
    HEAP32[$__oe>>2] = $98;
    HEAP32[$97>>2] = $96;
    $99 = (($__dc$1) + 1)|0;
    $100 = (($__p$010) + 1|0);
    $101 = ($100>>>0)<($__ne>>>0);
    if ($101) {
     $__dc$08 = $99;$__dg$09 = $__dg$1;$__p$010 = $100;
    } else {
     $107 = $98;
     break;
    }
   }
  } else {
   $$pre = HEAP32[$__oe>>2]|0;
   $107 = $$pre;
  }
  $102 = $__nf$1;
  $103 = $__nb;
  $104 = (($102) - ($103))|0;
  $105 = (($__ob) + ($104<<2)|0);
  $106 = ($105|0)==($107|0);
  if ($106) {
   $121 = $107;
  } else {
   $108 = (($107) + -4|0);
   $109 = ($108>>>0)>($105>>>0);
   if ($109) {
    $$012$i$i = $105;$112 = $108;
    while(1) {
     $110 = HEAP32[$$012$i$i>>2]|0;
     $111 = HEAP32[$112>>2]|0;
     HEAP32[$$012$i$i>>2] = $111;
     HEAP32[$112>>2] = $110;
     $113 = (($$012$i$i) + 4|0);
     $114 = (($112) + -4|0);
     $115 = ($113>>>0)<($114>>>0);
     if ($115) {
      $$012$i$i = $113;$112 = $114;
     } else {
      $121 = $107;
      break;
     }
    }
   } else {
    $121 = $107;
   }
  }
 }
 $116 = ($__np|0)==($__ne|0);
 if ($116) {
  $storemerge = $121;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $117 = $__np;
 $118 = $__nb;
 $119 = (($117) - ($118))|0;
 $120 = (($__ob) + ($119<<2)|0);
 $storemerge = $120;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 63]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   $30 = (FUNCTION_TABLE_iiii[$28 & 63]($0,$29,$__ns$0)|0);
   $31 = ($30|0)==($__ns$0|0);
   if ($31) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $32 = (($2) - ($10))|0;
 $33 = $32 >> 2;
 $34 = ($32|0)>(0);
 if ($34) {
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 48|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiii[$37 & 63]($0,$__op,$33)|0);
  $39 = ($38|0)==($33|0);
  if (!($39)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 196|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,408280,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp;
 $__fmt = sp + 116|0;
 $__nar = sp + 104|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[408368+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[408368+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[408368+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[408368+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[408368+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[408368+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,408272,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 204|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,408280,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 272|0;
 $__nb = sp + 268|0;
 $__o = sp + 40|0;
 $__op = sp + 36|0;
 $__oe = sp + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,408288,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$$byval_copy>>2] = $13;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 if ($16) {
  $17 = (__ZNSt3__16__clocEv()|0);
  $18 = (($__iob) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$$byval_copy>>2] = $19;
  $vararg_ptr8 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $20 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$$byval_copy)|0);
  $21 = HEAP32[$__nb>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $24 = $21;$38 = $21;$__nc$2 = $20;
  }
 } else {
  $$pre7 = HEAP32[$__nb>>2]|0;
  $24 = $$pre7;$38 = 0;$__nc$2 = $__nc$0;
 }
 $23 = (($24) + ($__nc$2)|0);
 $25 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24,$23,$__iob)|0);
 $26 = ($24|0)==($__nar|0);
 if ($26) {
  $30 = $__nar;$36 = 0;$__ob$0 = $__o;
 } else {
  $27 = $__nc$2 << 3;
  $28 = (_malloc($27)|0);
  $29 = ($28|0)==(0|0);
  if ($29) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $30 = $24;$36 = $28;$__ob$0 = $28;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($30,$25,$23,$__ob$0,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$33,$34,$__iob,$__fl);
 $35 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $35;
 HEAP32[$agg$result>>2] = $35;
 $37 = ($36|0)==(0|0);
 if ($37) {
  _free($38);
  STACKTOP = sp;return;
 }
 _free($36);
 _free($38);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$46 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$017 = 0, $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$213 = 0;
 var $__nf$3 = 0, $__ns$033 = 0, $__ns$125 = 0, $__ns$2 = 0, $__p$019 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409728)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iii[$8 & 31]($0,$5)|0);
  $10 = (($__nb) + 1|0);
  $11 = HEAP32[$__oe>>2]|0;
  $12 = (($11) + 4|0);
  HEAP32[$__oe>>2] = $12;
  HEAP32[$11>>2] = $9;
  $__nf$0 = $10;
 } else {
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 $14 = $__nf$0;
 $15 = (($13) - ($14))|0;
 $16 = ($15|0)>(1);
 L4: do {
  if ($16) {
   $18 = HEAP8[$__nf$0>>0]|0;
   $19 = ($18<<24>>24)==(48);
   if ($19) {
    $20 = (($__nf$0) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    if ((($21<<24>>24) == 88) | (($21<<24>>24) == 120)) {
     $22 = HEAP32[$0>>2]|0;
     $23 = (($22) + 44|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iii[$24 & 31]($0,48)|0);
     $26 = HEAP32[$__oe>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$__oe>>2] = $27;
     HEAP32[$26>>2] = $25;
     $28 = (($__nf$0) + 2|0);
     $29 = HEAP8[$20>>0]|0;
     $30 = HEAP32[$0>>2]|0;
     $31 = (($30) + 44|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (FUNCTION_TABLE_iii[$32 & 31]($0,$29)|0);
     $34 = HEAP32[$__oe>>2]|0;
     $35 = (($34) + 4|0);
     HEAP32[$__oe>>2] = $35;
     HEAP32[$34>>2] = $33;
     $36 = ($28>>>0)<($__ne>>>0);
     if ($36) {
      $__ns$033 = $28;
      while(1) {
       $39 = HEAP8[$__ns$033>>0]|0;
       $40 = (__ZNSt3__16__clocEv()|0);
       $41 = $39 << 24 >> 24;
       $42 = (_isxdigit_l($41,$40)|0);
       $43 = ($42|0)==(0);
       $37 = (($__ns$033) + 1|0);
       if ($43) {
        $__nf$1 = $28;$__ns$2 = $__ns$033;
        break L4;
       }
       $38 = ($37>>>0)<($__ne>>>0);
       if ($38) {
        $__ns$033 = $37;
       } else {
        $__nf$1 = $28;$__ns$2 = $37;
        break;
       }
      }
     } else {
      $__nf$1 = $28;$__ns$2 = $28;
     }
    } else {
     label = 4;
    }
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } while(0);
 L11: do {
  if ((label|0) == 4) {
   $17 = ($__nf$0>>>0)<($__ne>>>0);
   if ($17) {
    $__ns$125 = $__nf$0;
    while(1) {
     $46 = HEAP8[$__ns$125>>0]|0;
     $47 = (__ZNSt3__16__clocEv()|0);
     $48 = $46 << 24 >> 24;
     $49 = (_isdigit_l($48,$47)|0);
     $50 = ($49|0)==(0);
     $44 = (($__ns$125) + 1|0);
     if ($50) {
      $__nf$1 = $__nf$0;$__ns$2 = $__ns$125;
      break L11;
     }
     $45 = ($44>>>0)<($__ne>>>0);
     if ($45) {
      $__ns$125 = $44;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $44;
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
   }
  }
 } while(0);
 $51 = HEAP8[$__grouping>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if ($53) {
  $56 = $51&255;
  $57 = $56 >>> 1;
  $58 = $57;
 } else {
  $54 = (($__grouping) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $58 = $55;
 }
 $59 = ($58|0)==(0);
 if ($59) {
  $60 = HEAP32[$__oe>>2]|0;
  $61 = HEAP32[$0>>2]|0;
  $62 = (($61) + 48|0);
  $63 = HEAP32[$62>>2]|0;
  (FUNCTION_TABLE_iiiii[$63 & 15]($0,$__nf$1,$__ns$2,$60)|0);
  $64 = $__ns$2;
  $65 = $__nf$1;
  $66 = (($64) - ($65))|0;
  $67 = HEAP32[$__oe>>2]|0;
  $68 = (($67) + ($66<<2)|0);
  HEAP32[$__oe>>2] = $68;
  $165 = $68;
 } else {
  $69 = ($__nf$1|0)==($__ns$2|0);
  if (!($69)) {
   $70 = (($__ns$2) + -1|0);
   $71 = ($70>>>0)>($__nf$1>>>0);
   if ($71) {
    $$012$i$i = $__nf$1;$74 = $70;
    while(1) {
     $72 = HEAP8[$$012$i$i>>0]|0;
     $73 = HEAP8[$74>>0]|0;
     HEAP8[$$012$i$i>>0] = $73;
     HEAP8[$74>>0] = $72;
     $75 = (($$012$i$i) + 1|0);
     $76 = (($74) + -1|0);
     $77 = ($75>>>0)<($76>>>0);
     if ($77) {
      $$012$i$i = $75;$74 = $76;
     } else {
      break;
     }
    }
   }
  }
  $78 = HEAP32[$1>>2]|0;
  $79 = (($78) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (FUNCTION_TABLE_ii[$80 & 127]($1)|0);
  $82 = ($__nf$1>>>0)<($__ns$2>>>0);
  if ($82) {
   $83 = (($__grouping) + 1|0);
   $84 = (($__grouping) + 4|0);
   $85 = (($__grouping) + 8|0);
   $__dc$017 = 0;$__dg$018 = 0;$__p$019 = $__nf$1;
   while(1) {
    $86 = HEAP8[$__grouping>>0]|0;
    $87 = $86 & 1;
    $88 = ($87<<24>>24)==(0);
    $89 = HEAP32[$85>>2]|0;
    $$ = $88 ? $83 : $89;
    $90 = (($$) + ($__dg$018)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = ($91<<24>>24)>(0);
    if ($92) {
     $93 = HEAP32[$85>>2]|0;
     $$46 = $88 ? $83 : $93;
     $94 = (($$46) + ($__dg$018)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95 << 24 >> 24;
     $97 = ($__dc$017|0)==($96|0);
     if ($97) {
      $98 = HEAP32[$__oe>>2]|0;
      $99 = (($98) + 4|0);
      HEAP32[$__oe>>2] = $99;
      HEAP32[$98>>2] = $81;
      $100 = HEAP8[$__grouping>>0]|0;
      $101 = $100 & 1;
      $102 = ($101<<24>>24)==(0);
      if ($102) {
       $104 = $100&255;
       $105 = $104 >>> 1;
       $107 = $105;
      } else {
       $103 = HEAP32[$84>>2]|0;
       $107 = $103;
      }
      $106 = (($107) + -1)|0;
      $108 = ($__dg$018>>>0)<($106>>>0);
      $109 = $108&1;
      $$__dg$0 = (($109) + ($__dg$018))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
     }
    } else {
     $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
    }
    $110 = HEAP8[$__p$019>>0]|0;
    $111 = HEAP32[$0>>2]|0;
    $112 = (($111) + 44|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (FUNCTION_TABLE_iii[$113 & 31]($0,$110)|0);
    $115 = HEAP32[$__oe>>2]|0;
    $116 = (($115) + 4|0);
    HEAP32[$__oe>>2] = $116;
    HEAP32[$115>>2] = $114;
    $117 = (($__dc$1) + 1)|0;
    $118 = (($__p$019) + 1|0);
    $119 = ($118>>>0)<($__ns$2>>>0);
    if ($119) {
     $__dc$017 = $117;$__dg$018 = $__dg$1;$__p$019 = $118;
    } else {
     $125 = $116;
     break;
    }
   }
  } else {
   $$pre = HEAP32[$__oe>>2]|0;
   $125 = $$pre;
  }
  $120 = $__nf$1;
  $121 = $__nb;
  $122 = (($120) - ($121))|0;
  $123 = (($__ob) + ($122<<2)|0);
  $124 = ($123|0)==($125|0);
  if ($124) {
   $165 = $125;
  } else {
   $126 = (($125) + -4|0);
   $127 = ($126>>>0)>($123>>>0);
   if ($127) {
    $$012$i$i7 = $123;$130 = $126;
    while(1) {
     $128 = HEAP32[$$012$i$i7>>2]|0;
     $129 = HEAP32[$130>>2]|0;
     HEAP32[$$012$i$i7>>2] = $129;
     HEAP32[$130>>2] = $128;
     $131 = (($$012$i$i7) + 4|0);
     $132 = (($130) + -4|0);
     $133 = ($131>>>0)<($132>>>0);
     if ($133) {
      $$012$i$i7 = $131;$130 = $132;
     } else {
      $165 = $125;
      break;
     }
    }
   } else {
    $165 = $125;
   }
  }
 }
 $134 = ($__ns$2>>>0)<($__ne>>>0);
 L47: do {
  if ($134) {
   $__nf$213 = $__ns$2;
   while(1) {
    $135 = HEAP8[$__nf$213>>0]|0;
    $136 = ($135<<24>>24)==(46);
    if ($136) {
     break;
    }
    $144 = HEAP32[$0>>2]|0;
    $145 = (($144) + 44|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_iii[$146 & 31]($0,$135)|0);
    $148 = HEAP32[$__oe>>2]|0;
    $149 = (($148) + 4|0);
    HEAP32[$__oe>>2] = $149;
    HEAP32[$148>>2] = $147;
    $150 = (($__nf$213) + 1|0);
    $151 = ($150>>>0)<($__ne>>>0);
    if ($151) {
     $__nf$213 = $150;
    } else {
     $155 = $149;$__nf$3 = $150;
     break L47;
    }
   }
   $137 = HEAP32[$1>>2]|0;
   $138 = (($137) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (FUNCTION_TABLE_ii[$139 & 127]($1)|0);
   $141 = HEAP32[$__oe>>2]|0;
   $142 = (($141) + 4|0);
   HEAP32[$__oe>>2] = $142;
   HEAP32[$141>>2] = $140;
   $143 = (($__nf$213) + 1|0);
   $155 = $142;$__nf$3 = $143;
  } else {
   $155 = $165;$__nf$3 = $__ns$2;
  }
 } while(0);
 $152 = HEAP32[$0>>2]|0;
 $153 = (($152) + 48|0);
 $154 = HEAP32[$153>>2]|0;
 (FUNCTION_TABLE_iiiii[$154 & 15]($0,$__nf$3,$__ne,$155)|0);
 $156 = $__nf$3;
 $157 = (($13) - ($156))|0;
 $158 = HEAP32[$__oe>>2]|0;
 $159 = (($158) + ($157<<2)|0);
 HEAP32[$__oe>>2] = $159;
 $160 = ($__np|0)==($__ne|0);
 if ($160) {
  $storemerge = $159;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $161 = $__np;
 $162 = $__nb;
 $163 = (($161) - ($162))|0;
 $164 = (($__ob) + ($163<<2)|0);
 $storemerge = $164;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 272|0;
 $__nb = sp + 268|0;
 $__o = sp + 40|0;
 $__op = sp + 36|0;
 $__oe = sp + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,408296,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$$byval_copy>>2] = $13;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$$byval_copy)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 if ($16) {
  $17 = (__ZNSt3__16__clocEv()|0);
  if ($10) {
   $18 = (($__iob) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$$byval_copy>>2] = $19;
   $vararg_ptr8 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $20 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$$byval_copy)|0);
   $__nc$1 = $20;
  } else {
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $21 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$$byval_copy)|0);
   $__nc$1 = $21;
  }
  $22 = HEAP32[$__nb>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $25 = $22;$39 = $22;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre7 = HEAP32[$__nb>>2]|0;
  $25 = $$pre7;$39 = 0;$__nc$2 = $__nc$0;
 }
 $24 = (($25) + ($__nc$2)|0);
 $26 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($25,$24,$__iob)|0);
 $27 = ($25|0)==($__nar|0);
 if ($27) {
  $31 = $__nar;$37 = 0;$__ob$0 = $__o;
 } else {
  $28 = $__nc$2 << 3;
  $29 = (_malloc($28)|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $31 = $25;$37 = $29;$__ob$0 = $29;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($31,$26,$24,$__ob$0,$__op,$__oe,$0);
 $32 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
 $33 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $33;
 $34 = HEAP32[$__op>>2]|0;
 $35 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$34,$35,$__iob,$__fl);
 $36 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $36;
 HEAP32[$agg$result>>2] = $36;
 $38 = ($37|0)==(0|0);
 if ($38) {
  _free($39);
  STACKTOP = sp;return;
 }
 _free($37);
 _free($39);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $$byval_copy = sp;
 $__fmt = sp + 180|0;
 $__nar = sp + 160|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[408376+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[408376+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[408376+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[408376+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[408376+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[408376+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$$byval_copy)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $6 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409568)|0);
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = (($8) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiii[$10 & 15]($6,$__nar,$4,$__o)|0);
 $11 = (($__o) + ($3<<2)|0);
 $12 = ($5|0)==($4|0);
 if ($12) {
  $__op$0 = $11;
 } else {
  $13 = $__nar;
  $14 = $5;
  $15 = (($14) - ($13))|0;
  $16 = (($__o) + ($15<<2)|0);
  $__op$0 = $16;
 }
 $17 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $17;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$11,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i24 = 0, $$0$ph$be = 0, $$0$ph37 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i15 = 0, $$pre$i$i$i6 = 0, $$pre$i2$i$i19 = 0, $$pre$i2$i$i1939 = 0, $$pre$i2$i$i1940 = 0, $$pre38 = 0, $$pre38$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i22 = 0, $isascii1$i3 = 0, $sext = 0, $tmp$i$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 $5 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 HEAP32[$__err>>2] = 0;
 $6 = ($__fmtb|0)==($__fmte|0);
 L1: do {
  if ($6) {
   label = 60;
  } else {
   $7 = (($4) + 8|0);
   $$0$ph37 = $__fmtb;$$pre38 = 0;
   L3: while(1) {
    $8 = $$pre38;
    while(1) {
     $9 = ($8|0)==(0);
     if (!($9)) {
      label = 60;
      break L1;
     }
     $10 = HEAP32[$__b>>2]|0;
     $11 = ($10|0)==(0|0);
     if ($11) {
      $22 = 0;
     } else {
      $12 = (($10) + 12|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = (($10) + 16|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ($13|0)==($15|0);
      if ($16) {
       $17 = HEAP32[$10>>2]|0;
       $18 = (($17) + 36|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = (FUNCTION_TABLE_ii[$19 & 127]($10)|0);
       $21 = ($20|0)==(-1);
       if ($21) {
        HEAP32[$__b>>2] = 0;
        $22 = 0;
       } else {
        $22 = $10;
       }
      } else {
       $22 = $10;
      }
     }
     $23 = ($22|0)==(0|0);
     $24 = HEAP32[$__e>>2]|0;
     $25 = ($24|0)==(0|0);
     do {
      if ($25) {
       label = 14;
      } else {
       $26 = (($24) + 12|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($24) + 16|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($27|0)==($29|0);
       if ($30) {
        $31 = HEAP32[$24>>2]|0;
        $32 = (($31) + 36|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (FUNCTION_TABLE_ii[$33 & 127]($24)|0);
        $35 = ($34|0)==(-1);
        if ($35) {
         HEAP32[$__e>>2] = 0;
         label = 14;
         break;
        }
       }
       if ($23) {
        $59 = $24;
       } else {
        label = 15;
        break L3;
       }
      }
     } while(0);
     if ((label|0) == 14) {
      label = 0;
      if ($23) {
       label = 15;
       break L3;
      } else {
       $59 = 0;
      }
     }
     $36 = HEAP8[$$0$ph37>>0]|0;
     $37 = HEAP32[$4>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_iiii[$39 & 63]($4,$36,0)|0);
     $41 = ($40<<24>>24)==(37);
     if ($41) {
      label = 17;
      break;
     }
     $63 = HEAP8[$$0$ph37>>0]|0;
     $isascii1$i = ($63<<24>>24)>(-1);
     if ($isascii1$i) {
      $64 = $63 << 24 >> 24;
      $65 = HEAP32[$7>>2]|0;
      $66 = (($65) + ($64<<1)|0);
      $67 = HEAP16[$66>>1]|0;
      $68 = $67 & 8192;
      $69 = ($68<<16>>16)==(0);
      if (!($69)) {
       $$0$pn = $$0$ph37;
       label = 28;
       break;
      }
     }
     $128 = (($22) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($22) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$22>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (FUNCTION_TABLE_ii[$135 & 127]($22)|0);
      $$0$i$i24 = $136;
     } else {
      $137 = HEAP8[$129>>0]|0;
      $138 = $137&255;
      $$0$i$i24 = $138;
     }
     $139 = $$0$i$i24&255;
     $140 = HEAP32[$4>>2]|0;
     $141 = (($140) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (FUNCTION_TABLE_iii[$142 & 31]($4,$139)|0);
     $144 = HEAP8[$$0$ph37>>0]|0;
     $145 = HEAP32[$4>>2]|0;
     $146 = (($145) + 12|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (FUNCTION_TABLE_iii[$147 & 31]($4,$144)|0);
     $149 = ($143<<24>>24)==($148<<24>>24);
     if ($149) {
      label = 55;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $8 = 4;
    }
    L31: do {
     if ((label|0) == 17) {
      label = 0;
      $42 = (($$0$ph37) + 1|0);
      $43 = ($42|0)==($__fmte|0);
      if ($43) {
       label = 18;
       break L3;
      }
      $44 = HEAP8[$42>>0]|0;
      $45 = HEAP32[$4>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (FUNCTION_TABLE_iiii[$47 & 63]($4,$44,0)|0);
      if ((($48<<24>>24) == 48) | (($48<<24>>24) == 69)) {
       $49 = (($$0$ph37) + 2|0);
       $50 = ($49|0)==($__fmte|0);
       if ($50) {
        label = 21;
        break L3;
       }
       $51 = HEAP8[$49>>0]|0;
       $52 = HEAP32[$4>>2]|0;
       $53 = (($52) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (FUNCTION_TABLE_iiii[$54 & 63]($4,$51,0)|0);
       $$1 = $49;$__cmd$0 = $55;$__opt$0 = $48;
      } else {
       $$1 = $42;$__cmd$0 = $48;$__opt$0 = 0;
      }
      $56 = HEAP32[$this>>2]|0;
      $57 = (($56) + 36|0);
      $58 = HEAP32[$57>>2]|0;
      HEAP32[$2>>2] = $22;
      HEAP32[$3>>2] = $59;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$58 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $60 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $60;
      $61 = (($$1) + 1|0);
      $$0$ph$be = $61;
     }
     else if ((label|0) == 28) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 1|0);
       $70 = ($$2|0)==($__fmte|0);
       if ($70) {
        $$2$lcssa = $__fmte;
        break;
       }
       $71 = HEAP8[$$2>>0]|0;
       $isascii1$i3 = ($71<<24>>24)>(-1);
       if (!($isascii1$i3)) {
        $$2$lcssa = $$2;
        break;
       }
       $72 = $71 << 24 >> 24;
       $73 = (($65) + ($72<<1)|0);
       $74 = HEAP16[$73>>1]|0;
       $75 = $74 & 8192;
       $76 = ($75<<16>>16)==(0);
       if ($76) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 28;
       }
      }
      $$pre$i$i$i15 = $22;$$pre$i2$i$i19 = $59;$90 = $59;
      while(1) {
       $77 = ($$pre$i$i$i15|0)==(0|0);
       if ($77) {
        $88 = 0;
       } else {
        $78 = (($$pre$i$i$i15) + 12|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = (($$pre$i$i$i15) + 16|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($79|0)==($81|0);
        if ($82) {
         $83 = HEAP32[$$pre$i$i$i15>>2]|0;
         $84 = (($83) + 36|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = (FUNCTION_TABLE_ii[$85 & 127]($$pre$i$i$i15)|0);
         $87 = ($86|0)==(-1);
         if ($87) {
          HEAP32[$__b>>2] = 0;
          $88 = 0;
         } else {
          $88 = $$pre$i$i$i15;
         }
        } else {
         $88 = $$pre$i$i$i15;
        }
       }
       $89 = ($88|0)==(0|0);
       $91 = ($90|0)==(0|0);
       do {
        if ($91) {
         $$pre$i2$i$i1940 = $$pre$i2$i$i19;
         label = 41;
        } else {
         $92 = (($90) + 12|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = (($90) + 16|0);
         $95 = HEAP32[$94>>2]|0;
         $96 = ($93|0)==($95|0);
         if (!($96)) {
          if ($89) {
           $$pre$i2$i$i1939 = $$pre$i2$i$i19;$185 = $90;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L31;
          }
         }
         $97 = HEAP32[$90>>2]|0;
         $98 = (($97) + 36|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = (FUNCTION_TABLE_ii[$99 & 127]($90)|0);
         $101 = ($100|0)==(-1);
         if ($101) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i1940 = 0;
          label = 41;
          break;
         } else {
          $102 = ($$pre$i2$i$i19|0)==(0|0);
          $tmp$i$i21 = $89 ^ $102;
          if ($tmp$i$i21) {
           $$pre$i2$i$i1939 = $$pre$i2$i$i19;$185 = $$pre$i2$i$i19;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L31;
          }
         }
        }
       } while(0);
       if ((label|0) == 41) {
        label = 0;
        if ($89) {
         $$0$ph$be = $$2$lcssa;
         break L31;
        } else {
         $$pre$i2$i$i1939 = $$pre$i2$i$i1940;$185 = 0;
        }
       }
       $103 = (($88) + 12|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = (($88) + 16|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($104|0)==($106|0);
       if ($107) {
        $108 = HEAP32[$88>>2]|0;
        $109 = (($108) + 36|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (FUNCTION_TABLE_ii[$110 & 127]($88)|0);
        $$0$i$i = $111;
       } else {
        $112 = HEAP8[$104>>0]|0;
        $113 = $112&255;
        $$0$i$i = $113;
       }
       $114 = $$0$i$i&255;
       $isascii1$i22 = ($114<<24>>24)>(-1);
       if (!($isascii1$i22)) {
        $$0$ph$be = $$2$lcssa;
        break L31;
       }
       $sext = $$0$i$i << 24;
       $115 = $sext >> 24;
       $116 = HEAP32[$7>>2]|0;
       $117 = (($116) + ($115<<1)|0);
       $118 = HEAP16[$117>>1]|0;
       $119 = $118 & 8192;
       $120 = ($119<<16>>16)==(0);
       if ($120) {
        $$0$ph$be = $$2$lcssa;
        break L31;
       }
       $121 = HEAP32[$103>>2]|0;
       $122 = HEAP32[$105>>2]|0;
       $123 = ($121|0)==($122|0);
       if ($123) {
        $124 = HEAP32[$88>>2]|0;
        $125 = (($124) + 40|0);
        $126 = HEAP32[$125>>2]|0;
        (FUNCTION_TABLE_ii[$126 & 127]($88)|0);
        $$pre$i$i$i15 = $88;$$pre$i2$i$i19 = $$pre$i2$i$i1939;$90 = $185;
        continue;
       } else {
        $127 = (($121) + 1|0);
        HEAP32[$103>>2] = $127;
        $$pre$i$i$i15 = $88;$$pre$i2$i$i19 = $$pre$i2$i$i1939;$90 = $185;
        continue;
       }
      }
     }
     else if ((label|0) == 55) {
      label = 0;
      $150 = HEAP32[$128>>2]|0;
      $151 = HEAP32[$130>>2]|0;
      $152 = ($150|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$22>>2]|0;
       $154 = (($153) + 40|0);
       $155 = HEAP32[$154>>2]|0;
       (FUNCTION_TABLE_ii[$155 & 127]($22)|0);
      } else {
       $156 = (($150) + 1|0);
       HEAP32[$128>>2] = $156;
      }
      $157 = (($$0$ph37) + 1|0);
      $$0$ph$be = $157;
     }
    } while(0);
    $62 = ($$0$ph$be|0)==($__fmte|0);
    if ($62) {
     label = 60;
     break L1;
    }
    $$pre38$pre = HEAP32[$__err>>2]|0;
    $$0$ph37 = $$0$ph$be;$$pre38 = $$pre38$pre;
   }
   if ((label|0) == 15) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $22;
    break;
   }
   else if ((label|0) == 18) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $22;
    break;
   }
   else if ((label|0) == 21) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $22;
    break;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i6 = $$pre;
 }
 $158 = ($$pre$i$i$i6|0)==(0|0);
 if ($158) {
  $169 = 0;
 } else {
  $159 = (($$pre$i$i$i6) + 12|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($$pre$i$i$i6) + 16|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($160|0)==($162|0);
  if ($163) {
   $164 = HEAP32[$$pre$i$i$i6>>2]|0;
   $165 = (($164) + 36|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (FUNCTION_TABLE_ii[$166 & 127]($$pre$i$i$i6)|0);
   $168 = ($167|0)==(-1);
   if ($168) {
    HEAP32[$__b>>2] = 0;
    $169 = 0;
   } else {
    $169 = $$pre$i$i$i6;
   }
  } else {
   $169 = $$pre$i$i$i6;
  }
 }
 $170 = ($169|0)==(0|0);
 $171 = HEAP32[$__e>>2]|0;
 $172 = ($171|0)==(0|0);
 do {
  if ($172) {
   label = 70;
  } else {
   $173 = (($171) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($171) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($174|0)==($176|0);
   if ($177) {
    $178 = HEAP32[$171>>2]|0;
    $179 = (($178) + 36|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (FUNCTION_TABLE_ii[$180 & 127]($171)|0);
    $182 = ($181|0)==(-1);
    if ($182) {
     HEAP32[$__e>>2] = 0;
     label = 70;
     break;
    }
   }
   if ($170) {
    HEAP32[$agg$result>>2] = $169;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 70) {
  if (!($170)) {
   HEAP32[$agg$result>>2] = $169;
   STACKTOP = sp;return;
  }
 }
 $183 = HEAP32[$__err>>2]|0;
 $184 = $183 | 2;
 HEAP32[$__err>>2] = $184;
 HEAP32[$agg$result>>2] = $169;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,408480,((408480 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 24|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 16|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409576)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 20|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(0,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy30 = sp + 160|0;
 $$byval_copy26 = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $40 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,409576)|0);
 $41 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
 $42 = $__fmt << 24 >> 24;
 do {
  switch ($42|0) {
  case 116: case 110:  {
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $88;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 101: case 100:  {
   $70 = (($__tm) + 12|0);
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $71;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(0,$70,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 120:  {
   $103 = HEAP32[$this>>2]|0;
   $104 = (($103) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $106;
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $107;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$105 & 63]($agg$result,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 70:  {
   $75 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $75;
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $76;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408496,((408496 + 8|0)));
   $77 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $77;
   break;
  }
  case 72:  {
   $78 = (($__tm) + 8|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(0,$78,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 65: case 97:  {
   $43 = (($__tm) + 24|0);
   $44 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $44;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$43,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 114:  {
   $91 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $91;
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $92;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408504,((408504 + 11|0)));
   $93 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $93;
   break;
  }
  case 112:  {
   $89 = (($__tm) + 8|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $90;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$89,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 109:  {
   $84 = (($__tm) + 16|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(0,$84,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 37:  {
   $135 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $135;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 106:  {
   $82 = (($__tm) + 28|0);
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(0,$82,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 89:  {
   $133 = (($__tm) + 20|0);
   $134 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $134;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(0,$133,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 77:  {
   $86 = (($__tm) + 4|0);
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $87;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(0,$86,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 99:  {
   $47 = (($this) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 127]($47)|0);
   $52 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $52;
   $53 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $53;
   $54 = HEAP8[$51>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $61 = (($51) + 1|0);
    $62 = (($51) + 1|0);
    $63 = $54&255;
    $64 = $63 >>> 1;
    $66 = $62;$67 = $64;$68 = $61;
   } else {
    $57 = (($51) + 8|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($51) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $66 = $58;$67 = $60;$68 = $58;
   }
   $65 = (($66) + ($67)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$68,$65);
   $69 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $69;
   break;
  }
  case 88:  {
   $108 = (($this) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (FUNCTION_TABLE_ii[$111 & 127]($108)|0);
   $113 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $113;
   $114 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $114;
   $115 = HEAP8[$112>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $122 = (($112) + 1|0);
    $123 = (($112) + 1|0);
    $124 = $115&255;
    $125 = $124 >>> 1;
    $127 = $123;$128 = $125;$129 = $122;
   } else {
    $118 = (($112) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($112) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $127 = $119;$128 = $121;$129 = $119;
   }
   $126 = (($127) + ($128)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$129,$126);
   $130 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $130;
   break;
  }
  case 73:  {
   $80 = (($__tm) + 8|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(0,$80,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 68:  {
   $72 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $72;
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $73;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408488,((408488 + 8|0)));
   $74 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 104: case 66: case 98:  {
   $45 = (($__tm) + 16|0);
   $46 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $46;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$45,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 121:  {
   $131 = (($__tm) + 20|0);
   $132 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $132;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(0,$131,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 84:  {
   $98 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $98;
   $99 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $99;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408528,((408528 + 8|0)));
   $100 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $100;
   break;
  }
  case 82:  {
   $94 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $94;
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $95;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408520,((408520 + 5|0)));
   $96 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $96;
   break;
  }
  case 119:  {
   $101 = (($__tm) + 24|0);
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $102;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(0,$101,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 83:  {
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $97;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(0,$__tm,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  default: {
   $136 = HEAP32[$__err>>2]|0;
   $137 = $136 | 4;
   HEAP32[$__err>>2] = $137;
  }
  }
 } while(0);
 $138 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $138;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(31);
  if ($6) {
   HEAP32[$__d>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(12);
  if ($6) {
   HEAP32[$__h>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $13 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 127]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $13 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $13 = $$pre$i$i$i;
      break;
     }
    } else {
     $13 = $1;
    }
   }
  } while(0);
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 127]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 127]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $68 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $68 = $$pre$i$i$i2;
     break;
    }
   } else {
    $68 = $56;
   }
  }
 } while(0);
 $69 = ($68|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 127]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($69) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($69)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 if ($24) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 63]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 127]($48)|0);
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
 }
 $58 = HEAP32[$__b>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $70 = 0;
  } else {
   $60 = (($58) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 127]($58)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $70 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $70 = $$pre$i$i$i2;
     break;
    }
   } else {
    $70 = $58;
   }
  }
 } while(0);
 $71 = ($70|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($71) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($71)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 63]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 127]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$79 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$79 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $77 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 127]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $77 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $77 = $$pre$i$i$i3;
        break;
       }
      } else {
       $77 = $65;
      }
     }
    } while(0);
    $78 = ($77|0)==(0|0);
    $80 = ($79|0)==(0|0);
    if ($80) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
    } else {
     $81 = (($79) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($79) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 127]($79)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i20 = 0;$91 = 0;
      } else {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $$pre$i2$i$i7;
      }
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
     }
    }
    $92 = ($91|0)==(0|0);
    $tmp$i$i9 = $78 ^ $92;
    $93 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 127]($94)|0);
     $$0$i$i10 = $103;
    } else {
     $104 = HEAP8[$96>>0]|0;
     $105 = $104&255;
     $$0$i$i10 = $105;
    }
    $106 = $$0$i$i10&255;
    $isascii1$i12 = ($106<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $107 = $sext24 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 63]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 127]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $141 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 127]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $141 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $141 = $$pre$i$i$i16;
        break;
       }
      } else {
       $141 = $94;
      }
     }
    } while(0);
    $142 = ($141|0)==(0|0);
    $143 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i20) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i20) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 127]($$pre$i2$i$i20)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($142) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($142)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i9 = 0, $$0$i$i15 = 0, $$0$ph$be = 0, $$0$ph42 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i11 = 0;
 var $$pre$i3$i$i1144 = 0, $$pre$i3$i$i1145 = 0, $$pre43 = 0, $$pre43$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $phitmp$i4$i$i12 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409568)|0);
 $5 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 HEAP32[$__err>>2] = 0;
 $6 = ($__fmtb|0)==($__fmte|0);
 L1: do {
  if ($6) {
   label = 64;
  } else {
   $$0$ph42 = $__fmtb;$$pre43 = 0;
   L3: while(1) {
    $7 = $$pre43;
    while(1) {
     $8 = ($7|0)==(0);
     if (!($8)) {
      label = 64;
      break L1;
     }
     $9 = HEAP32[$__b>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      $178 = 1;$58 = 0;
     } else {
      $11 = (($9) + 12|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($9) + 16|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ($12|0)==($14|0);
      if ($15) {
       $16 = HEAP32[$9>>2]|0;
       $17 = (($16) + 36|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = (FUNCTION_TABLE_ii[$18 & 127]($9)|0);
       $$0$i$i$i$i = $19;
      } else {
       $20 = HEAP32[$12>>2]|0;
       $$0$i$i$i$i = $20;
      }
      $21 = ($$0$i$i$i$i|0)==(-1);
      if ($21) {
       HEAP32[$__b>>2] = 0;
       $178 = 1;$58 = 0;
      } else {
       $178 = 0;$58 = $9;
      }
     }
     $22 = HEAP32[$__e>>2]|0;
     $23 = ($22|0)==(0|0);
     do {
      if ($23) {
       label = 17;
      } else {
       $24 = (($22) + 12|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (($22) + 16|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($25|0)==($27|0);
       if ($28) {
        $29 = HEAP32[$22>>2]|0;
        $30 = (($29) + 36|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
        $$0$i$i1$i$i = $32;
       } else {
        $33 = HEAP32[$25>>2]|0;
        $$0$i$i1$i$i = $33;
       }
       $34 = ($$0$i$i1$i$i|0)==(-1);
       if ($34) {
        HEAP32[$__e>>2] = 0;
        label = 17;
        break;
       } else {
        if ($178) {
         $59 = $22;
         break;
        } else {
         label = 19;
         break L3;
        }
       }
      }
     } while(0);
     if ((label|0) == 17) {
      label = 0;
      if ($178) {
       label = 19;
       break L3;
      } else {
       $59 = 0;
      }
     }
     $35 = HEAP32[$$0$ph42>>2]|0;
     $36 = HEAP32[$4>>2]|0;
     $37 = (($36) + 52|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (FUNCTION_TABLE_iiii[$38 & 63]($4,$35,0)|0);
     $40 = ($39<<24>>24)==(37);
     if ($40) {
      label = 21;
      break;
     }
     $63 = HEAP32[$$0$ph42>>2]|0;
     $64 = HEAP32[$4>>2]|0;
     $65 = (($64) + 12|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (FUNCTION_TABLE_iiii[$66 & 63]($4,8192,$63)|0);
     if ($67) {
      $$0$pn = $$0$ph42;
      label = 31;
      break;
     }
     $122 = (($58) + 12|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (($58) + 16|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($123|0)==($125|0);
     if ($126) {
      $127 = HEAP32[$58>>2]|0;
      $128 = (($127) + 36|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (FUNCTION_TABLE_ii[$129 & 127]($58)|0);
      $$0$i$i15 = $130;
     } else {
      $131 = HEAP32[$123>>2]|0;
      $$0$i$i15 = $131;
     }
     $132 = HEAP32[$4>>2]|0;
     $133 = (($132) + 28|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (FUNCTION_TABLE_iii[$134 & 31]($4,$$0$i$i15)|0);
     $136 = HEAP32[$$0$ph42>>2]|0;
     $137 = HEAP32[$4>>2]|0;
     $138 = (($137) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (FUNCTION_TABLE_iii[$139 & 31]($4,$136)|0);
     $141 = ($135|0)==($140|0);
     if ($141) {
      label = 59;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $7 = 4;
    }
    L35: do {
     if ((label|0) == 21) {
      label = 0;
      $41 = (($$0$ph42) + 4|0);
      $42 = ($41|0)==($__fmte|0);
      if ($42) {
       label = 22;
       break L3;
      }
      $43 = HEAP32[$41>>2]|0;
      $44 = HEAP32[$4>>2]|0;
      $45 = (($44) + 52|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (FUNCTION_TABLE_iiii[$46 & 63]($4,$43,0)|0);
      if ((($47<<24>>24) == 48) | (($47<<24>>24) == 69)) {
       $48 = (($$0$ph42) + 8|0);
       $49 = ($48|0)==($__fmte|0);
       if ($49) {
        label = 25;
        break L3;
       }
       $50 = HEAP32[$48>>2]|0;
       $51 = HEAP32[$4>>2]|0;
       $52 = (($51) + 52|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (FUNCTION_TABLE_iiii[$53 & 63]($4,$50,0)|0);
       $$1 = $48;$__cmd$0 = $54;$__opt$0 = $47;
      } else {
       $$1 = $41;$__cmd$0 = $47;$__opt$0 = 0;
      }
      $55 = HEAP32[$this>>2]|0;
      $56 = (($55) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      HEAP32[$2>>2] = $58;
      HEAP32[$3>>2] = $59;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$57 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $60 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $60;
      $61 = (($$1) + 4|0);
      $$0$ph$be = $61;
     }
     else if ((label|0) == 31) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 4|0);
       $68 = ($$2|0)==($__fmte|0);
       if ($68) {
        $$2$lcssa = $__fmte;
        break;
       }
       $69 = HEAP32[$$2>>2]|0;
       $70 = HEAP32[$4>>2]|0;
       $71 = (($70) + 12|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (FUNCTION_TABLE_iiii[$72 & 63]($4,8192,$69)|0);
       if ($73) {
        $$0$pn = $$2;
        label = 31;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i5 = $58;$$pre$i3$i$i11 = $59;$86 = $59;
      while(1) {
       $74 = ($$pre$i$i$i5|0)==(0|0);
       if ($74) {
        $101 = 0;$99 = 1;
       } else {
        $75 = (($$pre$i$i$i5) + 12|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = (($$pre$i$i$i5) + 16|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($76|0)==($78|0);
        if ($79) {
         $80 = HEAP32[$$pre$i$i$i5>>2]|0;
         $81 = (($80) + 36|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = (FUNCTION_TABLE_ii[$82 & 127]($$pre$i$i$i5)|0);
         $$0$i$i$i$i3 = $83;
        } else {
         $84 = HEAP32[$76>>2]|0;
         $$0$i$i$i$i3 = $84;
        }
        $85 = ($$0$i$i$i$i3|0)==(-1);
        if ($85) {
         HEAP32[$__b>>2] = 0;
         $101 = 0;$99 = 1;
        } else {
         $101 = $$pre$i$i$i5;$99 = 0;
        }
       }
       $87 = ($86|0)==(0|0);
       do {
        if ($87) {
         $$pre$i3$i$i1145 = $$pre$i3$i$i11;
         label = 46;
        } else {
         $88 = (($86) + 12|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = (($86) + 16|0);
         $91 = HEAP32[$90>>2]|0;
         $92 = ($89|0)==($91|0);
         if ($92) {
          $93 = HEAP32[$86>>2]|0;
          $94 = (($93) + 36|0);
          $95 = HEAP32[$94>>2]|0;
          $96 = (FUNCTION_TABLE_ii[$95 & 127]($86)|0);
          $$0$i$i1$i$i9 = $96;
         } else {
          $97 = HEAP32[$89>>2]|0;
          $$0$i$i1$i$i9 = $97;
         }
         $98 = ($$0$i$i1$i$i9|0)==(-1);
         if ($98) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1145 = 0;
          label = 46;
          break;
         } else {
          $phitmp$i4$i$i12 = ($$pre$i3$i$i11|0)==(0|0);
          $tmp$i$i14 = $99 ^ $phitmp$i4$i$i12;
          if ($tmp$i$i14) {
           $$pre$i3$i$i1144 = $$pre$i3$i$i11;$179 = $$pre$i3$i$i11;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L35;
          }
         }
        }
       } while(0);
       if ((label|0) == 46) {
        label = 0;
        if ($99) {
         $$0$ph$be = $$2$lcssa;
         break L35;
        } else {
         $$pre$i3$i$i1144 = $$pre$i3$i$i1145;$179 = 0;
        }
       }
       $100 = (($101) + 12|0);
       $102 = HEAP32[$100>>2]|0;
       $103 = (($101) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($102|0)==($104|0);
       if ($105) {
        $106 = HEAP32[$101>>2]|0;
        $107 = (($106) + 36|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (FUNCTION_TABLE_ii[$108 & 127]($101)|0);
        $$0$i$i = $109;
       } else {
        $110 = HEAP32[$102>>2]|0;
        $$0$i$i = $110;
       }
       $111 = HEAP32[$4>>2]|0;
       $112 = (($111) + 12|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (FUNCTION_TABLE_iiii[$113 & 63]($4,8192,$$0$i$i)|0);
       if (!($114)) {
        $$0$ph$be = $$2$lcssa;
        break L35;
       }
       $115 = HEAP32[$100>>2]|0;
       $116 = HEAP32[$103>>2]|0;
       $117 = ($115|0)==($116|0);
       if ($117) {
        $118 = HEAP32[$101>>2]|0;
        $119 = (($118) + 40|0);
        $120 = HEAP32[$119>>2]|0;
        (FUNCTION_TABLE_ii[$120 & 127]($101)|0);
        $$pre$i$i$i5 = $101;$$pre$i3$i$i11 = $$pre$i3$i$i1144;$86 = $179;
        continue;
       } else {
        $121 = (($115) + 4|0);
        HEAP32[$100>>2] = $121;
        $$pre$i$i$i5 = $101;$$pre$i3$i$i11 = $$pre$i3$i$i1144;$86 = $179;
        continue;
       }
      }
     }
     else if ((label|0) == 59) {
      label = 0;
      $142 = HEAP32[$122>>2]|0;
      $143 = HEAP32[$124>>2]|0;
      $144 = ($142|0)==($143|0);
      if ($144) {
       $145 = HEAP32[$58>>2]|0;
       $146 = (($145) + 40|0);
       $147 = HEAP32[$146>>2]|0;
       (FUNCTION_TABLE_ii[$147 & 127]($58)|0);
      } else {
       $148 = (($142) + 4|0);
       HEAP32[$122>>2] = $148;
      }
      $149 = (($$0$ph42) + 4|0);
      $$0$ph$be = $149;
     }
    } while(0);
    $62 = ($$0$ph$be|0)==($__fmte|0);
    if ($62) {
     label = 64;
     break L1;
    }
    $$pre43$pre = HEAP32[$__err>>2]|0;
    $$0$ph42 = $$0$ph$be;$$pre43 = $$pre43$pre;
   }
   if ((label|0) == 19) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $58;
    break;
   }
   else if ((label|0) == 22) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $58;
    break;
   }
   else if ((label|0) == 25) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $58;
    break;
   }
  }
 } while(0);
 if ((label|0) == 64) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i20 = $$pre;
 }
 $150 = ($$pre$i$i$i20|0)==(0|0);
 if ($150) {
  $177 = 0;$180 = 1;
 } else {
  $151 = (($$pre$i$i$i20) + 12|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($$pre$i$i$i20) + 16|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($152|0)==($154|0);
  if ($155) {
   $156 = HEAP32[$$pre$i$i$i20>>2]|0;
   $157 = (($156) + 36|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (FUNCTION_TABLE_ii[$158 & 127]($$pre$i$i$i20)|0);
   $$0$i$i$i$i18 = $159;
  } else {
   $160 = HEAP32[$152>>2]|0;
   $$0$i$i$i$i18 = $160;
  }
  $161 = ($$0$i$i$i$i18|0)==(-1);
  if ($161) {
   HEAP32[$__b>>2] = 0;
   $177 = 0;$180 = 1;
  } else {
   $177 = $$pre$i$i$i20;$180 = 0;
  }
 }
 $162 = HEAP32[$__e>>2]|0;
 $163 = ($162|0)==(0|0);
 do {
  if ($163) {
   label = 77;
  } else {
   $164 = (($162) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($162) + 16|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($165|0)==($167|0);
   if ($168) {
    $169 = HEAP32[$162>>2]|0;
    $170 = (($169) + 36|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (FUNCTION_TABLE_ii[$171 & 127]($162)|0);
    $$0$i$i1$i$i24 = $172;
   } else {
    $173 = HEAP32[$165>>2]|0;
    $$0$i$i1$i$i24 = $173;
   }
   $174 = ($$0$i$i1$i$i24|0)==(-1);
   if ($174) {
    HEAP32[$__e>>2] = 0;
    label = 77;
    break;
   }
   if ($180) {
    HEAP32[$agg$result>>2] = $177;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 77) {
  if (!($180)) {
   HEAP32[$agg$result>>2] = $177;
   STACKTOP = sp;return;
  }
 }
 $175 = HEAP32[$__err>>2]|0;
 $176 = $175 | 2;
 HEAP32[$__err>>2] = $176;
 HEAP32[$agg$result>>2] = $177;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,408632,((408632 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409568)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 24|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409568)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 16|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,409568)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 20|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(0,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy30 = sp + 160|0;
 $$byval_copy26 = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $40 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,409568)|0);
 $41 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
 $42 = $__fmt << 24 >> 24;
 do {
  switch ($42|0) {
  case 120:  {
   $103 = HEAP32[$this>>2]|0;
   $104 = (($103) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $106;
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $107;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$105 & 63]($agg$result,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 106:  {
   $82 = (($__tm) + 28|0);
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(0,$82,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 88:  {
   $108 = (($this) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (FUNCTION_TABLE_ii[$111 & 127]($108)|0);
   $113 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $113;
   $114 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $114;
   $115 = HEAP8[$112>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $122 = (($112) + 4|0);
    $123 = (($112) + 4|0);
    $124 = $115&255;
    $125 = $124 >>> 1;
    $127 = $123;$128 = $125;$129 = $122;
   } else {
    $118 = (($112) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($112) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $127 = $119;$128 = $121;$129 = $119;
   }
   $126 = (($127) + ($128<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$129,$126);
   $130 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $130;
   break;
  }
  case 37:  {
   $135 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $135;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 99:  {
   $47 = (($this) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 127]($47)|0);
   $52 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $52;
   $53 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $53;
   $54 = HEAP8[$51>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $61 = (($51) + 4|0);
    $62 = (($51) + 4|0);
    $63 = $54&255;
    $64 = $63 >>> 1;
    $66 = $62;$67 = $64;$68 = $61;
   } else {
    $57 = (($51) + 8|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($51) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $66 = $58;$67 = $60;$68 = $58;
   }
   $65 = (($66) + ($67<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$68,$65);
   $69 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $69;
   break;
  }
  case 65: case 97:  {
   $43 = (($__tm) + 24|0);
   $44 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $44;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$43,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 82:  {
   $94 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $94;
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $95;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408776,((408776 + 20|0)));
   $96 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $96;
   break;
  }
  case 73:  {
   $80 = (($__tm) + 8|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(0,$80,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 104: case 66: case 98:  {
   $45 = (($__tm) + 16|0);
   $46 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $46;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$45,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 68:  {
   $72 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $72;
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $73;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408664,((408664 + 32|0)));
   $74 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 77:  {
   $86 = (($__tm) + 4|0);
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $87;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(0,$86,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 116: case 110:  {
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $88;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 101: case 100:  {
   $70 = (($__tm) + 12|0);
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $71;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(0,$70,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 70:  {
   $75 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $75;
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $76;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408696,((408696 + 32|0)));
   $77 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $77;
   break;
  }
  case 121:  {
   $131 = (($__tm) + 20|0);
   $132 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $132;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(0,$131,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 114:  {
   $91 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $91;
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $92;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408728,((408728 + 44|0)));
   $93 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $93;
   break;
  }
  case 89:  {
   $133 = (($__tm) + 20|0);
   $134 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $134;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(0,$133,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 84:  {
   $98 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $98;
   $99 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $99;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,408800,((408800 + 32|0)));
   $100 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $100;
   break;
  }
  case 112:  {
   $89 = (($__tm) + 8|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $90;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$89,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 109:  {
   $84 = (($__tm) + 16|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(0,$84,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 119:  {
   $101 = (($__tm) + 24|0);
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $102;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(0,$101,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 72:  {
   $78 = (($__tm) + 8|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(0,$78,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 83:  {
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $97;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(0,$__tm,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  default: {
   $136 = HEAP32[$__err>>2]|0;
   $137 = $136 | 4;
   HEAP32[$__err>>2] = $137;
  }
  }
 } while(0);
 $138 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $138;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(31);
  if ($6) {
   HEAP32[$__d>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $$off = (($2) + -1)|0;
  $6 = ($$off>>>0)<(12);
  if ($6) {
   HEAP32[$__h>>2] = $2;
   STACKTOP = sp;return;
  }
 }
 $7 = $3 | 4;
 HEAP32[$__err>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 127]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 63]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 127]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 127]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 127]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 if ($24) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 63]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $84 = 1;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 127]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 63]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 63]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 127]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$73 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$73 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $87 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 127]($60)|0);
     $$0$i$i$i$i2 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i2 = $71;
    }
    $72 = ($$0$i$i$i$i2|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $87 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $87 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $74 = ($73|0)==(0|0);
  do {
   if ($74) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$86 = 1;
   } else {
    $75 = (($73) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($73) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$73>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 127]($73)|0);
     $$0$i$i1$i$i8 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i8 = $84;
    }
    $85 = ($$0$i$i1$i$i8|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i25 = 0;$149 = 0;$86 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$86 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  $tmp$i$i13 = $87 ^ $86;
  $88 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 127]($89)|0);
   $$0$i$i14 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i14 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 63]($__ct,2048,$$0$i$i14)|0);
  if (!($103)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 63]($__ct,$$0$i$i14,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 127]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$01|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 127]($89)|0);
    $$0$i$i$i$i17 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i17 = $131;
   }
   $132 = ($$0$i$i$i$i17|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i25|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i25) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i25) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i25>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 127]($$pre$i3$i$i25)|0);
    $$0$i$i1$i$i23 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i23 = $143;
   }
   $144 = ($$0$i$i1$i$i23|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16__clocEv()|0);
 $2 = ($0|0)==($1|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$this>>2]|0;
 _freelocale(($3|0));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $25 = $5;
  HEAP32[$agg$result>>2] = $25;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$22 = $5;$8 = $5;
 }
 while(1) {
  $7 = HEAP8[$$01$i$i>>0]|0;
  $9 = ($8|0)==(0|0);
  do {
   if ($9) {
    $26 = $22;$27 = 0;
   } else {
    $10 = (($8) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($8) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$8>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 31]($8,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $22;
     $$7$i = $21 ? 0 : $8;
     $26 = $$$i;$27 = $$7$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $26 = $22;$27 = $8;
     break;
    }
   }
  } while(0);
  $23 = (($$01$i$i) + 1|0);
  $24 = ($23|0)==($4|0);
  if ($24) {
   $25 = $26;
   break;
  } else {
   $$01$i$i = $23;$22 = $26;$8 = $27;
  }
 }
 HEAP32[$agg$result>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$21 = $5;$8 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $25 = $21;$26 = 0;
  } else {
   $10 = (($8) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($8) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$8>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 31]($8,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $21;
   $$7$i = $20 ? 0 : $8;
   $25 = $$$i;$26 = $$7$i;
  }
  $22 = (($$01$i$i) + 4|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$21 = $25;$8 = $26;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 $12 = (_mbsrtowcs($__wb,$__nb,$9,$mb)|0);
 $13 = ($11|0)==(0|0);
 if (!($13)) {
  (_uselocale(($11|0))|0);
 }
 $14 = ($12|0)==(-1);
 if ($14) {
  __ZNSt3__121__throw_runtime_errorEPKc(410456);
  // unreachable;
 } else {
  $15 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $15;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__atoms = 0;
 var $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp;
 $__wbuf = sp + 136|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 134|0;
 $0 = sp + 4|0;
 $__atoms = sp + 124|0;
 $__nbuf = sp + 24|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 244;
 $2 = (($__wbuf) + 100|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 do {
  if ($7) {
   $8 = HEAP32[$3>>2]|0;
   $9 = (($8) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   (FUNCTION_TABLE_iiiii[$10 & 15]($3,409192,((409192 + 10|0)),$__atoms)|0);
   $11 = HEAP32[$__wn>>2]|0;
   $12 = HEAP32[$__wb>>2]|0;
   $13 = $11;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = ($15|0)>(98);
   if ($16) {
    $17 = (($15) + 2)|0;
    $18 = (_malloc($17)|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     __ZSt17__throw_bad_allocv();
     // unreachable;
    } else {
     $41 = $18;$__nc$0 = $18;
    }
   } else {
    $41 = 0;$__nc$0 = $__nbuf;
   }
   $20 = HEAP8[$__neg>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $__nc$1 = $__nc$0;
   } else {
    $22 = (($__nc$0) + 1|0);
    HEAP8[$__nc$0>>0] = 45;
    $__nc$1 = $22;
   }
   $23 = ($12>>>0)<($11>>>0);
   if ($23) {
    $24 = (($__atoms) + 10|0);
    $25 = $__atoms;
    $__nc$27 = $__nc$1;$__w$08 = $12;
    while(1) {
     $26 = HEAP8[$__w$08>>0]|0;
     $$01$i = $__atoms;
     while(1) {
      $29 = HEAP8[$$01$i>>0]|0;
      $30 = ($29<<24>>24)==($26<<24>>24);
      $27 = (($$01$i) + 1|0);
      if ($30) {
       $$0$lcssa$i = $$01$i;
       break;
      }
      $28 = ($27|0)==($24|0);
      if ($28) {
       $$0$lcssa$i = $24;
       break;
      } else {
       $$01$i = $27;
      }
     }
     $31 = $$0$lcssa$i;
     $32 = (($31) - ($25))|0;
     $33 = (409192 + ($32)|0);
     $34 = HEAP8[$33>>0]|0;
     HEAP8[$__nc$27>>0] = $34;
     $35 = (($__w$08) + 1|0);
     $36 = (($__nc$27) + 1|0);
     $37 = HEAP32[$__wn>>2]|0;
     $38 = ($35>>>0)<($37>>>0);
     if ($38) {
      $__nc$27 = $36;$__w$08 = $35;
     } else {
      $__nc$2$lcssa = $36;
      break;
     }
    }
   } else {
    $__nc$2$lcssa = $__nc$1;
   }
   HEAP8[$__nc$2$lcssa>>0] = 0;
   HEAP32[$$byval_copy>>2] = $__v;
   $39 = (_sscanf($__nbuf,409208,$$byval_copy)|0);
   $40 = ($39|0)==(1);
   if ($40) {
    _free($41);
    break;
   } else {
    __ZNSt3__121__throw_runtime_errorEPKc(409216);
    // unreachable;
   }
  }
 } while(0);
 $42 = HEAP32[$__b>>2]|0;
 $43 = ($42|0)==(0|0);
 do {
  if ($43) {
   $54 = 0;
  } else {
   $44 = (($42) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($42) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($45|0)==($47|0);
   if ($48) {
    $49 = HEAP32[$42>>2]|0;
    $50 = (($49) + 36|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_ii[$51 & 127]($42)|0);
    $53 = ($52|0)==(-1);
    if ($53) {
     HEAP32[$__b>>2] = 0;
     $54 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $54 = $$pre$i$i$i;
     break;
    }
   } else {
    $54 = $42;
   }
  }
 } while(0);
 $55 = ($54|0)==(0|0);
 $56 = HEAP32[$__e>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   label = 26;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if (!($62)) {
    if ($55) {
     break;
    } else {
     label = 28;
     break;
    }
   }
   $63 = HEAP32[$56>>2]|0;
   $64 = (($63) + 36|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
   $67 = ($66|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    label = 26;
    break;
   } else {
    if ($55) {
     break;
    } else {
     label = 28;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  if ($55) {
   label = 28;
  }
 }
 if ((label|0) == 28) {
  $68 = HEAP32[$__err>>2]|0;
  $69 = $68 | 2;
  HEAP32[$__err>>2] = $69;
 }
 $70 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $70;
 $71 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($71)|0);
 $72 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $73 = ($72|0)==(0|0);
 if ($73) {
  STACKTOP = sp;return;
 }
 $74 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$74 & 511]($72);
 STACKTOP = sp;return;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i115 = 0, $$0$i$i125 = 0, $$0$i$i142 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i60 = 0, $$0$i$i79 = 0, $$0$i$i82 = 0, $$0$i$i99 = 0, $$283 = 0, $$284 = 0, $$285 = 0, $$286 = 0;
 var $$287 = 0, $$288 = 0, $$289 = 0, $$290 = 0, $$291 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i129 = 0, $$pre$i$i$i146 = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i65 = 0, $$pre$i$i$i89 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i133 = 0, $$pre$i2$i$i150 = 0, $$pre$i2$i$i150238 = 0, $$pre$i2$i$i150239 = 0, $$pre$i2$i$i244$ph = 0, $$pre$i2$i$i244281 = 0;
 var $$pre$i2$i$i39 = 0, $$pre$i2$i$i39235 = 0, $$pre$i2$i$i39237 = 0, $$pre$i2$i$i69 = 0, $$pre$i2$i$i69242$ph = 0, $$pre$i2$i$i69242278 = 0, $$pre$i2$i$i93 = 0, $$pre268 = 0, $$pre269 = 0, $$pre270 = 0, $$pre271 = 0, $$pre272 = 0, $$pre273 = 0, $$sum = 0, $$sum274 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0;
 var $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0227 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0229 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0;
 var $isascii1$i = 0, $isascii1$i123 = 0, $isascii1$i156 = 0, $isascii1$i48 = 0, $isascii1$i58 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond292 = 0, $or$cond7$not = 0, $or$cond8 = 0, $sext = 0, $sext194 = 0, $sext195 = 0, $sext196 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i135 = 0, $tmp$i$i152 = 0, $tmp$i$i41 = 0;
 var $tmp$i$i71 = 0, $tmp$i$i95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 76|0;
 $__ge = sp + 72|0;
 $__pat = sp + 68|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 244;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $3 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $3;
 $4 = (($__ct) + 8|0);
 $5 = (($__nsn) + 1|0);
 $6 = (($__nsn) + 4|0);
 $7 = (($__nsn) + 8|0);
 $8 = (($__psn) + 1|0);
 $9 = (($__psn) + 4|0);
 $10 = (($__psn) + 8|0);
 $11 = $__flags & 512;
 $12 = ($11|0)!=(0);
 $13 = (($__sym) + 1|0);
 $14 = (($__sym) + 8|0);
 $15 = (($__sym) + 4|0);
 $16 = (($__spaces) + 1|0);
 $17 = (($__spaces) + 8|0);
 $18 = (($__spaces) + 4|0);
 $19 = (($__pat) + 3|0);
 $20 = (($__grp) + 4|0);
 $761 = $__gbuf;$__p$0227 = 0;$__trailing_sign$0229 = 0;
 L1: while(1) {
  $21 = HEAP32[$__b>>2]|0;
  $22 = ($21|0)==(0|0);
  do {
   if ($22) {
    $33 = 0;
   } else {
    $23 = (($21) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($21) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $28 = HEAP32[$21>>2]|0;
     $29 = (($28) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 127]($21)|0);
     $32 = ($31|0)==(-1);
     if ($32) {
      HEAP32[$__b>>2] = 0;
      $33 = 0;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $33 = $$pre$i$i$i19;
      break;
     }
    } else {
     $33 = $21;
    }
   }
  } while(0);
  $34 = ($33|0)==(0|0);
  $35 = HEAP32[$__e>>2]|0;
  $36 = ($35|0)==(0|0);
  do {
   if ($36) {
    label = 12;
   } else {
    $37 = (($35) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($35) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($38|0)==($40|0);
    if (!($41)) {
     if ($34) {
      $762 = $35;
      break;
     } else {
      $753 = $761;$763 = $35;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
      label = 250;
      break L1;
     }
    }
    $42 = HEAP32[$35>>2]|0;
    $43 = (($42) + 36|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_ii[$44 & 127]($35)|0);
    $46 = ($45|0)==(-1);
    if ($46) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($34) {
      $762 = $35;
      break;
     } else {
      $753 = $761;$763 = $35;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
      label = 250;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($34) {
    $753 = $761;$763 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
    label = 250;
    break;
   } else {
    $762 = 0;
   }
  }
  $47 = (($__pat) + ($__p$0227)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48 << 24 >> 24;
  L21: do {
   switch ($49|0) {
   case 1:  {
    $cond = ($__p$0227|0)==(3);
    if ($cond) {
     $753 = $761;$763 = $762;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
     label = 250;
     break L1;
    }
    $51 = HEAP32[$__b>>2]|0;
    $52 = (($51) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($53|0)==($55|0);
    if ($56) {
     $57 = HEAP32[$51>>2]|0;
     $58 = (($57) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (FUNCTION_TABLE_ii[$59 & 127]($51)|0);
     $$0$i$i29 = $60;
    } else {
     $61 = HEAP8[$53>>0]|0;
     $62 = $61&255;
     $$0$i$i29 = $62;
    }
    $63 = $$0$i$i29&255;
    $isascii1$i = ($63<<24>>24)>(-1);
    if (!($isascii1$i)) {
     label = 26;
     break L1;
    }
    $sext196 = $$0$i$i29 << 24;
    $64 = $sext196 >> 24;
    $65 = HEAP32[$4>>2]|0;
    $66 = (($65) + ($64<<1)|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $67 & 8192;
    $69 = ($68<<16>>16)==(0);
    if ($69) {
     label = 26;
     break L1;
    }
    $70 = HEAP32[$__b>>2]|0;
    $71 = (($70) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($72|0)==($74|0);
    if ($75) {
     $76 = HEAP32[$70>>2]|0;
     $77 = (($76) + 40|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (FUNCTION_TABLE_ii[$78 & 127]($70)|0);
     $$0$i$i32 = $79;
    } else {
     $80 = (($72) + 1|0);
     HEAP32[$71>>2] = $80;
     $81 = HEAP8[$72>>0]|0;
     $82 = $81&255;
     $$0$i$i32 = $82;
    }
    $83 = $$0$i$i32&255;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$83);
    label = 27;
    break;
   }
   case 2:  {
    $316 = ($__trailing_sign$0229|0)!=(0|0);
    $317 = ($__p$0227>>>0)<(2);
    $or$cond = $316 | $317;
    if (!($or$cond)) {
     $318 = ($__p$0227|0)==(2);
     if ($318) {
      $319 = HEAP8[$19>>0]|0;
      $320 = ($319<<24>>24)!=(0);
      $321 = $320;
     } else {
      $321 = 0;
     }
     $brmerge = $12 | $321;
     if (!($brmerge)) {
      $764 = $762;$765 = $761;$__trailing_sign$1 = 0;
      break L21;
     }
    }
    $322 = HEAP8[$__sym>>0]|0;
    $323 = $322 & 1;
    $324 = ($323<<24>>24)==(0);
    $325 = HEAP32[$14>>2]|0;
    $$286 = $324 ? $13 : $325;
    $326 = ($__p$0227|0)==(0);
    L41: do {
     if ($326) {
      $$pre$i2$i$i150 = $762;$378 = $322;$387 = $$286;$403 = $762;
     } else {
      $327 = (($__p$0227) + -1)|0;
      $328 = (($__pat) + ($327)|0);
      $329 = HEAP8[$328>>0]|0;
      $switch = ($329&255)<(2);
      if ($switch) {
       $330 = $322&255;
       $331 = $330 >>> 1;
       $332 = HEAP32[$14>>2]|0;
       $333 = HEAP32[$15>>2]|0;
       $335 = $$286;
       while(1) {
        $$287 = $324 ? $13 : $332;
        $$288 = $324 ? $331 : $333;
        $334 = (($$287) + ($$288)|0);
        $336 = ($335|0)==($334|0);
        if ($336) {
         break;
        }
        $337 = HEAP8[$335>>0]|0;
        $isascii1$i156 = ($337<<24>>24)>(-1);
        if (!($isascii1$i156)) {
         break;
        }
        $338 = $337 << 24 >> 24;
        $339 = HEAP32[$4>>2]|0;
        $340 = (($339) + ($338<<1)|0);
        $341 = HEAP16[$340>>1]|0;
        $342 = $341 & 8192;
        $343 = ($342<<16>>16)==(0);
        $344 = (($335) + 1|0);
        if ($343) {
         break;
        } else {
         $335 = $344;
        }
       }
       $$289 = $324 ? $13 : $332;
       $345 = $335;
       $346 = $$289;
       $347 = (($345) - ($346))|0;
       $348 = HEAP8[$__spaces>>0]|0;
       $349 = $348 & 1;
       $350 = ($349<<24>>24)==(0);
       if ($350) {
        $352 = $348&255;
        $353 = $352 >>> 1;
        $355 = $353;
       } else {
        $351 = HEAP32[$18>>2]|0;
        $355 = $351;
       }
       $354 = ($347>>>0)>($355>>>0);
       L53: do {
        if (!($354)) {
         if ($350) {
          $359 = $348&255;
          $360 = $359 >>> 1;
          $$sum274 = (($360) - ($347))|0;
          $361 = ((($__spaces) + ($$sum274)|0) + 1|0);
          $362 = $348&255;
          $363 = $362 >>> 1;
          $365 = $16;$366 = $363;$367 = $361;
         } else {
          $356 = HEAP32[$17>>2]|0;
          $357 = HEAP32[$18>>2]|0;
          $$sum = (($357) - ($347))|0;
          $358 = (($356) + ($$sum)|0);
          $365 = $356;$366 = $357;$367 = $358;
         }
         $364 = (($365) + ($366)|0);
         $$290 = $324 ? $13 : $332;
         $368 = ($367|0)==($364|0);
         if ($368) {
          $$pre$i2$i$i150 = $762;$378 = $322;$387 = $335;$403 = $762;
          break L41;
         } else {
          $370 = $367;$372 = $$290;
         }
         while(1) {
          $369 = HEAP8[$370>>0]|0;
          $371 = HEAP8[$372>>0]|0;
          $373 = ($369<<24>>24)==($371<<24>>24);
          if (!($373)) {
           break L53;
          }
          $374 = (($370) + 1|0);
          $375 = (($372) + 1|0);
          $376 = ($374|0)==($364|0);
          if ($376) {
           $$pre$i2$i$i150 = $762;$378 = $322;$387 = $335;$403 = $762;
           break L41;
          } else {
           $370 = $374;$372 = $375;
          }
         }
        }
       } while(0);
       $$291 = $324 ? $13 : $332;
       $$pre$i2$i$i150 = $762;$378 = $322;$387 = $$291;$403 = $762;
      } else {
       $$pre$i2$i$i150 = $762;$378 = $322;$387 = $$286;$403 = $762;
      }
     }
    } while(0);
    L63: while(1) {
     $377 = $378 & 1;
     $379 = ($377<<24>>24)==(0);
     if ($379) {
      $382 = $378&255;
      $383 = $382 >>> 1;
      $385 = $13;$386 = $383;
     } else {
      $380 = HEAP32[$14>>2]|0;
      $381 = HEAP32[$15>>2]|0;
      $385 = $380;$386 = $381;
     }
     $384 = (($385) + ($386)|0);
     $388 = ($387|0)==($384|0);
     if ($388) {
      $767 = $$pre$i2$i$i150;
      break;
     }
     $389 = HEAP32[$__b>>2]|0;
     $390 = ($389|0)==(0|0);
     do {
      if ($390) {
       $401 = 0;
      } else {
       $391 = (($389) + 12|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = (($389) + 16|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = ($392|0)==($394|0);
       if ($395) {
        $396 = HEAP32[$389>>2]|0;
        $397 = (($396) + 36|0);
        $398 = HEAP32[$397>>2]|0;
        $399 = (FUNCTION_TABLE_ii[$398 & 127]($389)|0);
        $400 = ($399|0)==(-1);
        if ($400) {
         HEAP32[$__b>>2] = 0;
         $401 = 0;
         break;
        } else {
         $$pre$i$i$i146 = HEAP32[$__b>>2]|0;
         $401 = $$pre$i$i$i146;
         break;
        }
       } else {
        $401 = $389;
       }
      }
     } while(0);
     $402 = ($401|0)==(0|0);
     $404 = ($403|0)==(0|0);
     do {
      if ($404) {
       $$pre$i2$i$i150239 = $$pre$i2$i$i150;
       label = 149;
      } else {
       $405 = (($403) + 12|0);
       $406 = HEAP32[$405>>2]|0;
       $407 = (($403) + 16|0);
       $408 = HEAP32[$407>>2]|0;
       $409 = ($406|0)==($408|0);
       if (!($409)) {
        if ($402) {
         $$pre$i2$i$i150238 = $$pre$i2$i$i150;$768 = $403;
         break;
        } else {
         $767 = $$pre$i2$i$i150;
         break L63;
        }
       }
       $410 = HEAP32[$403>>2]|0;
       $411 = (($410) + 36|0);
       $412 = HEAP32[$411>>2]|0;
       $413 = (FUNCTION_TABLE_ii[$412 & 127]($403)|0);
       $414 = ($413|0)==(-1);
       if ($414) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i150239 = 0;
        label = 149;
        break;
       } else {
        $415 = ($$pre$i2$i$i150|0)==(0|0);
        $tmp$i$i152 = $402 ^ $415;
        if ($tmp$i$i152) {
         $$pre$i2$i$i150238 = $$pre$i2$i$i150;$768 = $$pre$i2$i$i150;
         break;
        } else {
         $767 = $$pre$i2$i$i150;
         break L63;
        }
       }
      }
     } while(0);
     if ((label|0) == 149) {
      label = 0;
      if ($402) {
       $767 = $$pre$i2$i$i150239;
       break;
      } else {
       $$pre$i2$i$i150238 = $$pre$i2$i$i150239;$768 = 0;
      }
     }
     $416 = HEAP32[$__b>>2]|0;
     $417 = (($416) + 12|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = (($416) + 16|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = ($418|0)==($420|0);
     if ($421) {
      $422 = HEAP32[$416>>2]|0;
      $423 = (($422) + 36|0);
      $424 = HEAP32[$423>>2]|0;
      $425 = (FUNCTION_TABLE_ii[$424 & 127]($416)|0);
      $$0$i$i142 = $425;
     } else {
      $426 = HEAP8[$418>>0]|0;
      $427 = $426&255;
      $$0$i$i142 = $427;
     }
     $428 = $$0$i$i142&255;
     $429 = HEAP8[$387>>0]|0;
     $430 = ($428<<24>>24)==($429<<24>>24);
     if (!($430)) {
      $767 = $$pre$i2$i$i150238;
      break;
     }
     $431 = HEAP32[$__b>>2]|0;
     $432 = (($431) + 12|0);
     $433 = HEAP32[$432>>2]|0;
     $434 = (($431) + 16|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = ($433|0)==($435|0);
     if ($436) {
      $437 = HEAP32[$431>>2]|0;
      $438 = (($437) + 40|0);
      $439 = HEAP32[$438>>2]|0;
      (FUNCTION_TABLE_ii[$439 & 127]($431)|0);
     } else {
      $440 = (($433) + 1|0);
      HEAP32[$432>>2] = $440;
     }
     $441 = (($387) + 1|0);
     $$pre = HEAP8[$__sym>>0]|0;
     $$pre$i2$i$i150 = $$pre$i2$i$i150238;$378 = $$pre;$387 = $441;$403 = $768;
    }
    if ($12) {
     $442 = HEAP8[$__sym>>0]|0;
     $443 = $442 & 1;
     $444 = ($443<<24>>24)==(0);
     if ($444) {
      $447 = $442&255;
      $448 = $447 >>> 1;
      $450 = $13;$451 = $448;
     } else {
      $445 = HEAP32[$14>>2]|0;
      $446 = HEAP32[$15>>2]|0;
      $450 = $445;$451 = $446;
     }
     $449 = (($450) + ($451)|0);
     $452 = ($387|0)==($449|0);
     if ($452) {
      $764 = $767;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
     } else {
      label = 164;
      break L1;
     }
    } else {
     $764 = $767;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
    }
    break;
   }
   case 4:  {
    $50 = HEAP8[$__ts>>0]|0;
    $$pre$i2$i$i133 = $762;$469 = $762;$516 = $761;$__ng$0 = 0;
    L104: while(1) {
     $455 = HEAP32[$__b>>2]|0;
     $456 = ($455|0)==(0|0);
     do {
      if ($456) {
       $467 = 0;
      } else {
       $457 = (($455) + 12|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = (($455) + 16|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = ($458|0)==($460|0);
       if ($461) {
        $462 = HEAP32[$455>>2]|0;
        $463 = (($462) + 36|0);
        $464 = HEAP32[$463>>2]|0;
        $465 = (FUNCTION_TABLE_ii[$464 & 127]($455)|0);
        $466 = ($465|0)==(-1);
        if ($466) {
         HEAP32[$__b>>2] = 0;
         $467 = 0;
         break;
        } else {
         $$pre$i$i$i129 = HEAP32[$__b>>2]|0;
         $467 = $$pre$i$i$i129;
         break;
        }
       } else {
        $467 = $455;
       }
      }
     } while(0);
     $468 = ($467|0)==(0|0);
     $470 = ($469|0)==(0|0);
     do {
      if ($470) {
       $769 = $$pre$i2$i$i133;
       label = 175;
      } else {
       $471 = (($469) + 12|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = (($469) + 16|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = ($472|0)==($474|0);
       if (!($475)) {
        if ($468) {
         $770 = $$pre$i2$i$i133;$771 = $469;
         break;
        } else {
         $$pre$i2$i$i93 = $$pre$i2$i$i133;
         break L104;
        }
       }
       $476 = HEAP32[$469>>2]|0;
       $477 = (($476) + 36|0);
       $478 = HEAP32[$477>>2]|0;
       $479 = (FUNCTION_TABLE_ii[$478 & 127]($469)|0);
       $480 = ($479|0)==(-1);
       if ($480) {
        HEAP32[$__e>>2] = 0;
        $769 = 0;
        label = 175;
        break;
       } else {
        $481 = ($$pre$i2$i$i133|0)==(0|0);
        $tmp$i$i135 = $468 ^ $481;
        if ($tmp$i$i135) {
         $770 = $$pre$i2$i$i133;$771 = $$pre$i2$i$i133;
         break;
        } else {
         $$pre$i2$i$i93 = $$pre$i2$i$i133;
         break L104;
        }
       }
      }
     } while(0);
     if ((label|0) == 175) {
      label = 0;
      if ($468) {
       $$pre$i2$i$i93 = $769;
       break;
      } else {
       $770 = $769;$771 = 0;
      }
     }
     $482 = HEAP32[$__b>>2]|0;
     $483 = (($482) + 12|0);
     $484 = HEAP32[$483>>2]|0;
     $485 = (($482) + 16|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = ($484|0)==($486|0);
     if ($487) {
      $488 = HEAP32[$482>>2]|0;
      $489 = (($488) + 36|0);
      $490 = HEAP32[$489>>2]|0;
      $491 = (FUNCTION_TABLE_ii[$490 & 127]($482)|0);
      $$0$i$i125 = $491;
     } else {
      $492 = HEAP8[$484>>0]|0;
      $493 = $492&255;
      $$0$i$i125 = $493;
     }
     $494 = $$0$i$i125&255;
     $isascii1$i123 = ($494<<24>>24)>(-1);
     if ($isascii1$i123) {
      $sext194 = $$0$i$i125 << 24;
      $495 = $sext194 >> 24;
      $496 = HEAP32[$4>>2]|0;
      $497 = (($496) + ($495<<1)|0);
      $498 = HEAP16[$497>>1]|0;
      $499 = $498 & 2048;
      $500 = ($499<<16>>16)==(0);
      if ($500) {
       label = 185;
      } else {
       $501 = HEAP32[$__wn>>2]|0;
       $502 = HEAP32[$0>>2]|0;
       $503 = ($501|0)==($502|0);
       if ($503) {
        __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
        $$pre272 = HEAP32[$__wn>>2]|0;
        $505 = $$pre272;
       } else {
        $505 = $501;
       }
       $504 = (($505) + 1|0);
       HEAP32[$__wn>>2] = $504;
       HEAP8[$505>>0] = $494;
       $506 = (($__ng$0) + 1)|0;
       $772 = $516;$__ng$1 = $506;
      }
     } else {
      label = 185;
     }
     if ((label|0) == 185) {
      label = 0;
      $507 = HEAP8[$__grp>>0]|0;
      $508 = $507 & 1;
      $509 = ($508<<24>>24)==(0);
      if ($509) {
       $511 = $507&255;
       $512 = $511 >>> 1;
       $513 = $512;
      } else {
       $510 = HEAP32[$20>>2]|0;
       $513 = $510;
      }
      $notlhs = ($513|0)!=(0);
      $notrhs = ($__ng$0|0)!=(0);
      $or$cond7$not = $notrhs & $notlhs;
      $514 = ($494<<24>>24)==($50<<24>>24);
      $or$cond292 = $or$cond7$not & $514;
      if (!($or$cond292)) {
       $$pre$i2$i$i93 = $770;
       break;
      }
      $515 = HEAP32[$__ge>>2]|0;
      $517 = ($516|0)==($515|0);
      if ($517) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
       $$pre273 = HEAP32[$__gn>>2]|0;
       $519 = $$pre273;
      } else {
       $519 = $516;
      }
      $518 = (($519) + 4|0);
      HEAP32[$__gn>>2] = $518;
      HEAP32[$519>>2] = $__ng$0;
      $772 = $518;$__ng$1 = 0;
     }
     $520 = HEAP32[$__b>>2]|0;
     $521 = (($520) + 12|0);
     $522 = HEAP32[$521>>2]|0;
     $523 = (($520) + 16|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = ($522|0)==($524|0);
     if ($525) {
      $526 = HEAP32[$520>>2]|0;
      $527 = (($526) + 40|0);
      $528 = HEAP32[$527>>2]|0;
      (FUNCTION_TABLE_ii[$528 & 127]($520)|0);
      $$pre$i2$i$i133 = $770;$469 = $771;$516 = $772;$__ng$0 = $__ng$1;
      continue;
     } else {
      $529 = (($522) + 1|0);
      HEAP32[$521>>2] = $529;
      $$pre$i2$i$i133 = $770;$469 = $771;$516 = $772;$__ng$0 = $__ng$1;
      continue;
     }
    }
    $530 = HEAP32[$__gb>>2]|0;
    $531 = ($530|0)==($516|0);
    $532 = ($__ng$0|0)==(0);
    $or$cond8 = $531 | $532;
    if ($or$cond8) {
     $773 = $516;
    } else {
     $533 = HEAP32[$__ge>>2]|0;
     $534 = ($516|0)==($533|0);
     if ($534) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
      $$pre271 = HEAP32[$__gn>>2]|0;
      $536 = $$pre271;
     } else {
      $536 = $516;
     }
     $535 = (($536) + 4|0);
     HEAP32[$__gn>>2] = $535;
     HEAP32[$536>>2] = $__ng$0;
     $773 = $535;
    }
    $537 = HEAP32[$__fd>>2]|0;
    $538 = ($537|0)>(0);
    if ($538) {
     $539 = HEAP32[$__b>>2]|0;
     $540 = ($539|0)==(0|0);
     do {
      if ($540) {
       $551 = 0;
      } else {
       $541 = (($539) + 12|0);
       $542 = HEAP32[$541>>2]|0;
       $543 = (($539) + 16|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = ($542|0)==($544|0);
       if ($545) {
        $546 = HEAP32[$539>>2]|0;
        $547 = (($546) + 36|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = (FUNCTION_TABLE_ii[$548 & 127]($539)|0);
        $550 = ($549|0)==(-1);
        if ($550) {
         HEAP32[$__b>>2] = 0;
         $551 = 0;
         break;
        } else {
         $$pre$i$i$i89 = HEAP32[$__b>>2]|0;
         $551 = $$pre$i$i$i89;
         break;
        }
       } else {
        $551 = $539;
       }
      }
     } while(0);
     $552 = ($551|0)==(0|0);
     $553 = ($$pre$i2$i$i93|0)==(0|0);
     do {
      if ($553) {
       label = 210;
      } else {
       $554 = (($$pre$i2$i$i93) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = (($$pre$i2$i$i93) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if (!($558)) {
        if ($552) {
         $775 = $$pre$i2$i$i93;
         break;
        } else {
         label = 216;
         break L1;
        }
       }
       $559 = HEAP32[$$pre$i2$i$i93>>2]|0;
       $560 = (($559) + 36|0);
       $561 = HEAP32[$560>>2]|0;
       $562 = (FUNCTION_TABLE_ii[$561 & 127]($$pre$i2$i$i93)|0);
       $563 = ($562|0)==(-1);
       if ($563) {
        HEAP32[$__e>>2] = 0;
        label = 210;
        break;
       } else {
        $564 = ($$pre$i2$i$i93|0)==(0|0);
        $tmp$i$i95 = $552 ^ $564;
        if ($tmp$i$i95) {
         $775 = $$pre$i2$i$i93;
         break;
        } else {
         label = 216;
         break L1;
        }
       }
      }
     } while(0);
     if ((label|0) == 210) {
      label = 0;
      if ($552) {
       label = 216;
       break L1;
      } else {
       $775 = 0;
      }
     }
     $565 = HEAP32[$__b>>2]|0;
     $566 = (($565) + 12|0);
     $567 = HEAP32[$566>>2]|0;
     $568 = (($565) + 16|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = ($567|0)==($569|0);
     if ($570) {
      $571 = HEAP32[$565>>2]|0;
      $572 = (($571) + 36|0);
      $573 = HEAP32[$572>>2]|0;
      $574 = (FUNCTION_TABLE_ii[$573 & 127]($565)|0);
      $$0$i$i82 = $574;
     } else {
      $575 = HEAP8[$567>>0]|0;
      $576 = $575&255;
      $$0$i$i82 = $576;
     }
     $577 = $$0$i$i82&255;
     $578 = HEAP8[$__dp>>0]|0;
     $579 = ($577<<24>>24)==($578<<24>>24);
     if (!($579)) {
      label = 216;
      break L1;
     }
     $582 = HEAP32[$__b>>2]|0;
     $583 = (($582) + 12|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = (($582) + 16|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = ($584|0)==($586|0);
     if ($587) {
      $588 = HEAP32[$582>>2]|0;
      $589 = (($588) + 40|0);
      $590 = HEAP32[$589>>2]|0;
      (FUNCTION_TABLE_ii[$590 & 127]($582)|0);
      $$pre$i2$i$i69 = $775;$606 = $775;$659 = $537;
     } else {
      $591 = (($584) + 1|0);
      HEAP32[$583>>2] = $591;
      $$pre$i2$i$i69 = $775;$606 = $775;$659 = $537;
     }
     while(1) {
      $592 = HEAP32[$__b>>2]|0;
      $593 = ($592|0)==(0|0);
      do {
       if ($593) {
        $604 = 0;
       } else {
        $594 = (($592) + 12|0);
        $595 = HEAP32[$594>>2]|0;
        $596 = (($592) + 16|0);
        $597 = HEAP32[$596>>2]|0;
        $598 = ($595|0)==($597|0);
        if ($598) {
         $599 = HEAP32[$592>>2]|0;
         $600 = (($599) + 36|0);
         $601 = HEAP32[$600>>2]|0;
         $602 = (FUNCTION_TABLE_ii[$601 & 127]($592)|0);
         $603 = ($602|0)==(-1);
         if ($603) {
          HEAP32[$__b>>2] = 0;
          $604 = 0;
          break;
         } else {
          $$pre$i$i$i65 = HEAP32[$__b>>2]|0;
          $604 = $$pre$i$i$i65;
          break;
         }
        } else {
         $604 = $592;
        }
       }
      } while(0);
      $605 = ($604|0)==(0|0);
      $607 = ($606|0)==(0|0);
      do {
       if ($607) {
        $$pre$i2$i$i69242$ph = $$pre$i2$i$i69;
        label = 230;
       } else {
        $608 = (($606) + 12|0);
        $609 = HEAP32[$608>>2]|0;
        $610 = (($606) + 16|0);
        $611 = HEAP32[$610>>2]|0;
        $612 = ($609|0)==($611|0);
        if (!($612)) {
         if ($605) {
          $$pre$i2$i$i69242278 = $$pre$i2$i$i69;$776 = $606;
          break;
         } else {
          label = 237;
          break L1;
         }
        }
        $613 = HEAP32[$606>>2]|0;
        $614 = (($613) + 36|0);
        $615 = HEAP32[$614>>2]|0;
        $616 = (FUNCTION_TABLE_ii[$615 & 127]($606)|0);
        $617 = ($616|0)==(-1);
        if ($617) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i69242$ph = 0;
         label = 230;
         break;
        } else {
         $618 = ($$pre$i2$i$i69|0)==(0|0);
         $tmp$i$i71 = $605 ^ $618;
         if ($tmp$i$i71) {
          $$pre$i2$i$i69242278 = $$pre$i2$i$i69;$776 = $$pre$i2$i$i69;
          break;
         } else {
          label = 237;
          break L1;
         }
        }
       }
      } while(0);
      if ((label|0) == 230) {
       label = 0;
       if ($605) {
        label = 237;
        break L1;
       } else {
        $$pre$i2$i$i69242278 = $$pre$i2$i$i69242$ph;$776 = 0;
       }
      }
      $619 = HEAP32[$__b>>2]|0;
      $620 = (($619) + 12|0);
      $621 = HEAP32[$620>>2]|0;
      $622 = (($619) + 16|0);
      $623 = HEAP32[$622>>2]|0;
      $624 = ($621|0)==($623|0);
      if ($624) {
       $625 = HEAP32[$619>>2]|0;
       $626 = (($625) + 36|0);
       $627 = HEAP32[$626>>2]|0;
       $628 = (FUNCTION_TABLE_ii[$627 & 127]($619)|0);
       $$0$i$i60 = $628;
      } else {
       $629 = HEAP8[$621>>0]|0;
       $630 = $629&255;
       $$0$i$i60 = $630;
      }
      $631 = $$0$i$i60&255;
      $isascii1$i58 = ($631<<24>>24)>(-1);
      if (!($isascii1$i58)) {
       label = 237;
       break L1;
      }
      $sext = $$0$i$i60 << 24;
      $632 = $sext >> 24;
      $633 = HEAP32[$4>>2]|0;
      $634 = (($633) + ($632<<1)|0);
      $635 = HEAP16[$634>>1]|0;
      $636 = $635 & 2048;
      $637 = ($636<<16>>16)==(0);
      if ($637) {
       label = 237;
       break L1;
      }
      $640 = HEAP32[$__wn>>2]|0;
      $641 = HEAP32[$0>>2]|0;
      $642 = ($640|0)==($641|0);
      if ($642) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
      }
      $643 = HEAP32[$__b>>2]|0;
      $644 = (($643) + 12|0);
      $645 = HEAP32[$644>>2]|0;
      $646 = (($643) + 16|0);
      $647 = HEAP32[$646>>2]|0;
      $648 = ($645|0)==($647|0);
      if ($648) {
       $649 = HEAP32[$643>>2]|0;
       $650 = (($649) + 36|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = (FUNCTION_TABLE_ii[$651 & 127]($643)|0);
       $$0$i$i53 = $652;
      } else {
       $653 = HEAP8[$645>>0]|0;
       $654 = $653&255;
       $$0$i$i53 = $654;
      }
      $655 = $$0$i$i53&255;
      $656 = HEAP32[$__wn>>2]|0;
      $657 = (($656) + 1|0);
      HEAP32[$__wn>>2] = $657;
      HEAP8[$656>>0] = $655;
      $658 = (($659) + -1)|0;
      HEAP32[$__fd>>2] = $658;
      $660 = HEAP32[$__b>>2]|0;
      $661 = (($660) + 12|0);
      $662 = HEAP32[$661>>2]|0;
      $663 = (($660) + 16|0);
      $664 = HEAP32[$663>>2]|0;
      $665 = ($662|0)==($664|0);
      if ($665) {
       $666 = HEAP32[$660>>2]|0;
       $667 = (($666) + 40|0);
       $668 = HEAP32[$667>>2]|0;
       (FUNCTION_TABLE_ii[$668 & 127]($660)|0);
      } else {
       $670 = (($662) + 1|0);
       HEAP32[$661>>2] = $670;
      }
      $669 = ($658|0)>(0);
      if ($669) {
       $$pre$i2$i$i69 = $$pre$i2$i$i69242278;$606 = $776;$659 = $658;
      } else {
       $774 = $$pre$i2$i$i69242278;
       break;
      }
     }
    } else {
     $774 = $$pre$i2$i$i93;
    }
    $671 = HEAP32[$__wn>>2]|0;
    $672 = HEAP32[$__wb>>2]|0;
    $673 = ($671|0)==($672|0);
    if ($673) {
     label = 248;
     break L1;
    } else {
     $764 = $774;$765 = $773;$__trailing_sign$1 = $__trailing_sign$0229;
    }
    break;
   }
   case 0:  {
    label = 27;
    break;
   }
   case 3:  {
    $147 = HEAP8[$__psn>>0]|0;
    $148 = $147 & 1;
    $149 = ($148<<24>>24)==(0);
    if ($149) {
     $151 = $147&255;
     $152 = $151 >>> 1;
     $161 = $152;
    } else {
     $150 = HEAP32[$9>>2]|0;
     $161 = $150;
    }
    $153 = HEAP8[$__nsn>>0]|0;
    $154 = $153 & 1;
    $155 = ($154<<24>>24)==(0);
    if ($155) {
     $157 = $153&255;
     $158 = $157 >>> 1;
     $160 = $158;
    } else {
     $156 = HEAP32[$6>>2]|0;
     $160 = $156;
    }
    $159 = (0 - ($160))|0;
    $162 = ($161|0)==($159|0);
    if ($162) {
     $764 = $762;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
    } else {
     if ($149) {
      $164 = $147&255;
      $165 = $164 >>> 1;
      $166 = $165;
     } else {
      $163 = HEAP32[$9>>2]|0;
      $166 = $163;
     }
     $167 = ($166|0)==(0);
     if (!($167)) {
      if ($155) {
       $169 = $153&255;
       $170 = $169 >>> 1;
       $171 = $170;
      } else {
       $168 = HEAP32[$6>>2]|0;
       $171 = $168;
      }
      $172 = ($171|0)==(0);
      if (!($172)) {
       $246 = HEAP32[$__b>>2]|0;
       $247 = (($246) + 12|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = (($246) + 16|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = ($248|0)==($250|0);
       if ($251) {
        $252 = HEAP32[$246>>2]|0;
        $253 = (($252) + 36|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = (FUNCTION_TABLE_ii[$254 & 127]($246)|0);
        $$pre270 = HEAP8[$__psn>>0]|0;
        $$0$i$i106 = $255;$260 = $$pre270;
       } else {
        $256 = HEAP8[$248>>0]|0;
        $257 = $256&255;
        $$0$i$i106 = $257;$260 = $147;
       }
       $258 = $$0$i$i106&255;
       $259 = $260 & 1;
       $261 = ($259<<24>>24)==(0);
       $262 = HEAP32[$10>>2]|0;
       $$284 = $261 ? $8 : $262;
       $263 = HEAP8[$$284>>0]|0;
       $264 = ($258<<24>>24)==($263<<24>>24);
       $265 = HEAP32[$__b>>2]|0;
       $266 = (($265) + 12|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (($265) + 16|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267|0)==($269|0);
       if ($264) {
        if ($270) {
         $271 = HEAP32[$265>>2]|0;
         $272 = (($271) + 40|0);
         $273 = HEAP32[$272>>2]|0;
         (FUNCTION_TABLE_ii[$273 & 127]($265)|0);
        } else {
         $274 = (($267) + 1|0);
         HEAP32[$266>>2] = $274;
        }
        $275 = HEAP8[$__psn>>0]|0;
        $276 = $275 & 1;
        $277 = ($276<<24>>24)==(0);
        if ($277) {
         $279 = $275&255;
         $280 = $279 >>> 1;
         $281 = $280;
        } else {
         $278 = HEAP32[$9>>2]|0;
         $281 = $278;
        }
        $282 = ($281>>>0)>(1);
        $__psn$__trailing_sign$05 = $282 ? $__psn : $__trailing_sign$0229;
        $764 = $762;$765 = $761;$__trailing_sign$1 = $__psn$__trailing_sign$05;
        break L21;
       }
       if ($270) {
        $283 = HEAP32[$265>>2]|0;
        $284 = (($283) + 36|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = (FUNCTION_TABLE_ii[$285 & 127]($265)|0);
        $$0$i$i115 = $286;
       } else {
        $287 = HEAP8[$267>>0]|0;
        $288 = $287&255;
        $$0$i$i115 = $288;
       }
       $289 = $$0$i$i115&255;
       $290 = HEAP8[$__nsn>>0]|0;
       $291 = $290 & 1;
       $292 = ($291<<24>>24)==(0);
       $293 = HEAP32[$7>>2]|0;
       $$285 = $292 ? $5 : $293;
       $294 = HEAP8[$$285>>0]|0;
       $295 = ($289<<24>>24)==($294<<24>>24);
       if (!($295)) {
        label = 113;
        break L1;
       }
       $296 = HEAP32[$__b>>2]|0;
       $297 = (($296) + 12|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = (($296) + 16|0);
       $300 = HEAP32[$299>>2]|0;
       $301 = ($298|0)==($300|0);
       if ($301) {
        $302 = HEAP32[$296>>2]|0;
        $303 = (($302) + 40|0);
        $304 = HEAP32[$303>>2]|0;
        (FUNCTION_TABLE_ii[$304 & 127]($296)|0);
       } else {
        $305 = (($298) + 1|0);
        HEAP32[$297>>2] = $305;
       }
       HEAP8[$__neg>>0] = 1;
       $306 = HEAP8[$__nsn>>0]|0;
       $307 = $306 & 1;
       $308 = ($307<<24>>24)==(0);
       if ($308) {
        $310 = $306&255;
        $311 = $310 >>> 1;
        $312 = $311;
       } else {
        $309 = HEAP32[$6>>2]|0;
        $312 = $309;
       }
       $313 = ($312>>>0)>(1);
       $__nsn$__trailing_sign$06 = $313 ? $__nsn : $__trailing_sign$0229;
       $764 = $762;$765 = $761;$__trailing_sign$1 = $__nsn$__trailing_sign$06;
       break L21;
      }
     }
     if ($149) {
      $174 = $147&255;
      $175 = $174 >>> 1;
      $176 = $175;
     } else {
      $173 = HEAP32[$9>>2]|0;
      $176 = $173;
     }
     $177 = ($176|0)==(0);
     $178 = HEAP32[$__b>>2]|0;
     $179 = (($178) + 12|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($178) + 16|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ($180|0)==($182|0);
     if ($177) {
      if ($183) {
       $215 = HEAP32[$178>>2]|0;
       $216 = (($215) + 36|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = (FUNCTION_TABLE_ii[$217 & 127]($178)|0);
       $$pre268 = HEAP8[$__nsn>>0]|0;
       $$0$i$i99 = $218;$223 = $$pre268;
      } else {
       $219 = HEAP8[$180>>0]|0;
       $220 = $219&255;
       $$0$i$i99 = $220;$223 = $153;
      }
      $221 = $$0$i$i99&255;
      $222 = $223 & 1;
      $224 = ($222<<24>>24)==(0);
      $225 = HEAP32[$7>>2]|0;
      $$283 = $224 ? $5 : $225;
      $226 = HEAP8[$$283>>0]|0;
      $227 = ($221<<24>>24)==($226<<24>>24);
      if (!($227)) {
       $764 = $762;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
       break L21;
      }
      $228 = HEAP32[$__b>>2]|0;
      $229 = (($228) + 12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($228) + 16|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ($230|0)==($232|0);
      if ($233) {
       $234 = HEAP32[$228>>2]|0;
       $235 = (($234) + 40|0);
       $236 = HEAP32[$235>>2]|0;
       (FUNCTION_TABLE_ii[$236 & 127]($228)|0);
      } else {
       $237 = (($230) + 1|0);
       HEAP32[$229>>2] = $237;
      }
      HEAP8[$__neg>>0] = 1;
      $238 = HEAP8[$__nsn>>0]|0;
      $239 = $238 & 1;
      $240 = ($239<<24>>24)==(0);
      if ($240) {
       $242 = $238&255;
       $243 = $242 >>> 1;
       $244 = $243;
      } else {
       $241 = HEAP32[$6>>2]|0;
       $244 = $241;
      }
      $245 = ($244>>>0)>(1);
      $__nsn$__trailing_sign$0 = $245 ? $__nsn : $__trailing_sign$0229;
      $764 = $762;$765 = $761;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
      break L21;
     }
     if ($183) {
      $184 = HEAP32[$178>>2]|0;
      $185 = (($184) + 36|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (FUNCTION_TABLE_ii[$186 & 127]($178)|0);
      $$pre269 = HEAP8[$__psn>>0]|0;
      $$0$i$i79 = $187;$192 = $$pre269;
     } else {
      $188 = HEAP8[$180>>0]|0;
      $189 = $188&255;
      $$0$i$i79 = $189;$192 = $147;
     }
     $190 = $$0$i$i79&255;
     $191 = $192 & 1;
     $193 = ($191<<24>>24)==(0);
     $194 = HEAP32[$10>>2]|0;
     $$ = $193 ? $8 : $194;
     $195 = HEAP8[$$>>0]|0;
     $196 = ($190<<24>>24)==($195<<24>>24);
     if (!($196)) {
      HEAP8[$__neg>>0] = 1;
      $764 = $762;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
      break L21;
     }
     $197 = HEAP32[$__b>>2]|0;
     $198 = (($197) + 12|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = (($197) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($199|0)==($201|0);
     if ($202) {
      $203 = HEAP32[$197>>2]|0;
      $204 = (($203) + 40|0);
      $205 = HEAP32[$204>>2]|0;
      (FUNCTION_TABLE_ii[$205 & 127]($197)|0);
     } else {
      $206 = (($199) + 1|0);
      HEAP32[$198>>2] = $206;
     }
     $207 = HEAP8[$__psn>>0]|0;
     $208 = $207 & 1;
     $209 = ($208<<24>>24)==(0);
     if ($209) {
      $211 = $207&255;
      $212 = $211 >>> 1;
      $213 = $212;
     } else {
      $210 = HEAP32[$9>>2]|0;
      $213 = $210;
     }
     $214 = ($213>>>0)>(1);
     $__psn$__trailing_sign$0 = $214 ? $__psn : $__trailing_sign$0229;
     $764 = $762;$765 = $761;$__trailing_sign$1 = $__psn$__trailing_sign$0;
    }
    break;
   }
   default: {
    $764 = $762;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
   }
   }
  } while(0);
  L306: do {
   if ((label|0) == 27) {
    label = 0;
    $86 = ($__p$0227|0)==(3);
    if ($86) {
     $753 = $761;$763 = $762;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
     label = 250;
     break L1;
    } else {
     $$pre$i2$i$i39 = $762;$101 = $762;
    }
    while(1) {
     $87 = HEAP32[$__b>>2]|0;
     $88 = ($87|0)==(0|0);
     do {
      if ($88) {
       $99 = 0;
      } else {
       $89 = (($87) + 12|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (($87) + 16|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($90|0)==($92|0);
       if ($93) {
        $94 = HEAP32[$87>>2]|0;
        $95 = (($94) + 36|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (FUNCTION_TABLE_ii[$96 & 127]($87)|0);
        $98 = ($97|0)==(-1);
        if ($98) {
         HEAP32[$__b>>2] = 0;
         $99 = 0;
         break;
        } else {
         $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
         $99 = $$pre$i$i$i35;
         break;
        }
       } else {
        $99 = $87;
       }
      }
     } while(0);
     $100 = ($99|0)==(0|0);
     $102 = ($101|0)==(0|0);
     do {
      if ($102) {
       $$pre$i2$i$i39235 = $$pre$i2$i$i39;
       label = 38;
      } else {
       $103 = (($101) + 12|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = (($101) + 16|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($104|0)==($106|0);
       if (!($107)) {
        if ($100) {
         $$pre$i2$i$i39237 = $$pre$i2$i$i39;$766 = $101;
         break;
        } else {
         $764 = $$pre$i2$i$i39;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
         break L306;
        }
       }
       $108 = HEAP32[$101>>2]|0;
       $109 = (($108) + 36|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (FUNCTION_TABLE_ii[$110 & 127]($101)|0);
       $112 = ($111|0)==(-1);
       if ($112) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i39235 = 0;
        label = 38;
        break;
       } else {
        $113 = ($$pre$i2$i$i39|0)==(0|0);
        $tmp$i$i41 = $100 ^ $113;
        if ($tmp$i$i41) {
         $$pre$i2$i$i39237 = $$pre$i2$i$i39;$766 = $$pre$i2$i$i39;
         break;
        } else {
         $764 = $$pre$i2$i$i39;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
         break L306;
        }
       }
      }
     } while(0);
     if ((label|0) == 38) {
      label = 0;
      if ($100) {
       $764 = $$pre$i2$i$i39235;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
       break L306;
      } else {
       $$pre$i2$i$i39237 = $$pre$i2$i$i39235;$766 = 0;
      }
     }
     $114 = HEAP32[$__b>>2]|0;
     $115 = (($114) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (($114) + 16|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($116|0)==($118|0);
     if ($119) {
      $120 = HEAP32[$114>>2]|0;
      $121 = (($120) + 36|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (FUNCTION_TABLE_ii[$122 & 127]($114)|0);
      $$0$i$i45 = $123;
     } else {
      $124 = HEAP8[$116>>0]|0;
      $125 = $124&255;
      $$0$i$i45 = $125;
     }
     $126 = $$0$i$i45&255;
     $isascii1$i48 = ($126<<24>>24)>(-1);
     if (!($isascii1$i48)) {
      $764 = $$pre$i2$i$i39237;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
      break L306;
     }
     $sext195 = $$0$i$i45 << 24;
     $127 = $sext195 >> 24;
     $128 = HEAP32[$4>>2]|0;
     $129 = (($128) + ($127<<1)|0);
     $130 = HEAP16[$129>>1]|0;
     $131 = $130 & 8192;
     $132 = ($131<<16>>16)==(0);
     if ($132) {
      $764 = $$pre$i2$i$i39237;$765 = $761;$__trailing_sign$1 = $__trailing_sign$0229;
      break L306;
     }
     $133 = HEAP32[$__b>>2]|0;
     $134 = (($133) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$133>>2]|0;
      $140 = (($139) + 40|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (FUNCTION_TABLE_ii[$141 & 127]($133)|0);
      $$0$i$i50 = $142;
     } else {
      $143 = (($135) + 1|0);
      HEAP32[$134>>2] = $143;
      $144 = HEAP8[$135>>0]|0;
      $145 = $144&255;
      $$0$i$i50 = $145;
     }
     $146 = $$0$i$i50&255;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$146);
     $$pre$i2$i$i39 = $$pre$i2$i$i39237;$101 = $766;
    }
   }
  } while(0);
  $676 = (($__p$0227) + 1)|0;
  $677 = ($676>>>0)<(4);
  if ($677) {
   $761 = $765;$__p$0227 = $676;$__trailing_sign$0229 = $__trailing_sign$1;
  } else {
   $753 = $765;$763 = $764;$__trailing_sign$0$lcssa = $__trailing_sign$1;
   label = 250;
   break;
  }
 }
 L339: do {
  if ((label|0) == 26) {
   $84 = HEAP32[$__err>>2]|0;
   $85 = $84 | 4;
   HEAP32[$__err>>2] = $85;
   $$0 = 0;
  }
  else if ((label|0) == 113) {
   $314 = HEAP32[$__err>>2]|0;
   $315 = $314 | 4;
   HEAP32[$__err>>2] = $315;
   $$0 = 0;
  }
  else if ((label|0) == 164) {
   $453 = HEAP32[$__err>>2]|0;
   $454 = $453 | 4;
   HEAP32[$__err>>2] = $454;
   $$0 = 0;
  }
  else if ((label|0) == 216) {
   $580 = HEAP32[$__err>>2]|0;
   $581 = $580 | 4;
   HEAP32[$__err>>2] = $581;
   $$0 = 0;
  }
  else if ((label|0) == 237) {
   $638 = HEAP32[$__err>>2]|0;
   $639 = $638 | 4;
   HEAP32[$__err>>2] = $639;
   $$0 = 0;
  }
  else if ((label|0) == 248) {
   $674 = HEAP32[$__err>>2]|0;
   $675 = $674 | 4;
   HEAP32[$__err>>2] = $675;
   $$0 = 0;
  }
  else if ((label|0) == 250) {
   $678 = ($__trailing_sign$0$lcssa|0)==(0|0);
   L347: do {
    if (!($678)) {
     $679 = (($__trailing_sign$0$lcssa) + 1|0);
     $680 = (($__trailing_sign$0$lcssa) + 8|0);
     $681 = (($__trailing_sign$0$lcssa) + 4|0);
     $$pre$i2$i$i = $763;$704 = $763;$__i$0 = 1;
     L349: while(1) {
      $682 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $683 = $682 & 1;
      $684 = ($683<<24>>24)==(0);
      if ($684) {
       $686 = $682&255;
       $687 = $686 >>> 1;
       $689 = $687;
      } else {
       $685 = HEAP32[$681>>2]|0;
       $689 = $685;
      }
      $688 = ($__i$0>>>0)<($689>>>0);
      if (!($688)) {
       break L347;
      }
      $690 = HEAP32[$__b>>2]|0;
      $691 = ($690|0)==(0|0);
      do {
       if ($691) {
        $702 = 0;
       } else {
        $692 = (($690) + 12|0);
        $693 = HEAP32[$692>>2]|0;
        $694 = (($690) + 16|0);
        $695 = HEAP32[$694>>2]|0;
        $696 = ($693|0)==($695|0);
        if ($696) {
         $697 = HEAP32[$690>>2]|0;
         $698 = (($697) + 36|0);
         $699 = HEAP32[$698>>2]|0;
         $700 = (FUNCTION_TABLE_ii[$699 & 127]($690)|0);
         $701 = ($700|0)==(-1);
         if ($701) {
          HEAP32[$__b>>2] = 0;
          $702 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $702 = $$pre$i$i$i;
          break;
         }
        } else {
         $702 = $690;
        }
       }
      } while(0);
      $703 = ($702|0)==(0|0);
      $705 = ($704|0)==(0|0);
      do {
       if ($705) {
        $$pre$i2$i$i244$ph = $$pre$i2$i$i;
        label = 266;
       } else {
        $706 = (($704) + 12|0);
        $707 = HEAP32[$706>>2]|0;
        $708 = (($704) + 16|0);
        $709 = HEAP32[$708>>2]|0;
        $710 = ($707|0)==($709|0);
        if (!($710)) {
         if ($703) {
          $$pre$i2$i$i244281 = $$pre$i2$i$i;$777 = $704;
          break;
         } else {
          break L349;
         }
        }
        $711 = HEAP32[$704>>2]|0;
        $712 = (($711) + 36|0);
        $713 = HEAP32[$712>>2]|0;
        $714 = (FUNCTION_TABLE_ii[$713 & 127]($704)|0);
        $715 = ($714|0)==(-1);
        if ($715) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i244$ph = 0;
         label = 266;
         break;
        } else {
         $716 = ($$pre$i2$i$i|0)==(0|0);
         $tmp$i$i = $703 ^ $716;
         if ($tmp$i$i) {
          $$pre$i2$i$i244281 = $$pre$i2$i$i;$777 = $$pre$i2$i$i;
          break;
         } else {
          break L349;
         }
        }
       }
      } while(0);
      if ((label|0) == 266) {
       label = 0;
       if ($703) {
        break;
       } else {
        $$pre$i2$i$i244281 = $$pre$i2$i$i244$ph;$777 = 0;
       }
      }
      $717 = HEAP32[$__b>>2]|0;
      $718 = (($717) + 12|0);
      $719 = HEAP32[$718>>2]|0;
      $720 = (($717) + 16|0);
      $721 = HEAP32[$720>>2]|0;
      $722 = ($719|0)==($721|0);
      if ($722) {
       $723 = HEAP32[$717>>2]|0;
       $724 = (($723) + 36|0);
       $725 = HEAP32[$724>>2]|0;
       $726 = (FUNCTION_TABLE_ii[$725 & 127]($717)|0);
       $$0$i$i = $726;
      } else {
       $727 = HEAP8[$719>>0]|0;
       $728 = $727&255;
       $$0$i$i = $728;
      }
      $729 = $$0$i$i&255;
      $730 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $731 = $730 & 1;
      $732 = ($731<<24>>24)==(0);
      if ($732) {
       $735 = $679;
      } else {
       $733 = HEAP32[$680>>2]|0;
       $735 = $733;
      }
      $734 = (($735) + ($__i$0)|0);
      $736 = HEAP8[$734>>0]|0;
      $737 = ($729<<24>>24)==($736<<24>>24);
      if (!($737)) {
       break;
      }
      $740 = (($__i$0) + 1)|0;
      $741 = HEAP32[$__b>>2]|0;
      $742 = (($741) + 12|0);
      $743 = HEAP32[$742>>2]|0;
      $744 = (($741) + 16|0);
      $745 = HEAP32[$744>>2]|0;
      $746 = ($743|0)==($745|0);
      if ($746) {
       $747 = HEAP32[$741>>2]|0;
       $748 = (($747) + 40|0);
       $749 = HEAP32[$748>>2]|0;
       (FUNCTION_TABLE_ii[$749 & 127]($741)|0);
       $$pre$i2$i$i = $$pre$i2$i$i244281;$704 = $777;$__i$0 = $740;
       continue;
      } else {
       $750 = (($743) + 1|0);
       HEAP32[$742>>2] = $750;
       $$pre$i2$i$i = $$pre$i2$i$i244281;$704 = $777;$__i$0 = $740;
       continue;
      }
     }
     $738 = HEAP32[$__err>>2]|0;
     $739 = $738 | 4;
     HEAP32[$__err>>2] = $739;
     $$0 = 0;
     break L339;
    }
   } while(0);
   $751 = HEAP32[$__gb>>2]|0;
   $752 = ($751|0)==($753|0);
   if ($752) {
    $$0 = 1;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$751,$753,$__et);
    $754 = HEAP32[$__et>>2]|0;
    $755 = ($754|0)==(0);
    if ($755) {
     $$0 = 1;
    } else {
     $756 = HEAP32[$__err>>2]|0;
     $757 = $756 | 4;
     HEAP32[$__err>>2] = $757;
     $$0 = 0;
    }
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $758 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $759 = ($758|0)==(0|0);
 if ($759) {
  STACKTOP = sp;return ($$0|0);
 }
 $760 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$760 & 511]($758);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __ZNSt13runtime_errorC2EPKc($0,$msg);
 ___cxa_throw(($0|0),(418256|0),(231|0));
 // unreachable;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 244;
 $2 = (($__wbuf) + 100|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 if ($7) {
  $8 = HEAP8[$__v>>0]|0;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $14 = (($__v) + 1|0);
   HEAP8[$14>>0] = 0;
   HEAP8[$__v>>0] = 0;
  } else {
   $11 = (($__v) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP8[$12>>0] = 0;
   $13 = (($__v) + 4|0);
   HEAP32[$13>>2] = 0;
  }
  $15 = HEAP8[$__neg>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if (!($16)) {
   $17 = HEAP32[$3>>2]|0;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iii[$19 & 31]($3,45)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$20);
  }
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 31]($3,48)|0);
  $25 = HEAP32[$__wb>>2]|0;
  $26 = HEAP32[$__wn>>2]|0;
  $27 = (($26) + -1|0);
  $28 = ($25>>>0)<($27>>>0);
  L10: do {
   if ($28) {
    $__w$05 = $25;
    while(1) {
     $31 = HEAP8[$__w$05>>0]|0;
     $32 = ($31<<24>>24)==($24<<24>>24);
     $29 = (($__w$05) + 1|0);
     if (!($32)) {
      $__w$0$lcssa = $__w$05;
      break L10;
     }
     $30 = ($29>>>0)<($27>>>0);
     if ($30) {
      $__w$05 = $29;
     } else {
      $__w$0$lcssa = $29;
      break;
     }
    }
   } else {
    $__w$0$lcssa = $25;
   }
  } while(0);
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w$0$lcssa,$26)|0);
 }
 $33 = HEAP32[$__b>>2]|0;
 $34 = ($33|0)==(0|0);
 do {
  if ($34) {
   $45 = 0;
  } else {
   $35 = (($33) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($33) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$33>>2]|0;
    $41 = (($40) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_ii[$42 & 127]($33)|0);
    $44 = ($43|0)==(-1);
    if ($44) {
     HEAP32[$__b>>2] = 0;
     $45 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $45 = $$pre$i$i$i;
     break;
    }
   } else {
    $45 = $33;
   }
  }
 } while(0);
 $46 = ($45|0)==(0|0);
 $47 = ($4|0)==(0|0);
 do {
  if ($47) {
   label = 21;
  } else {
   $48 = (($4) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($4) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   if (!($52)) {
    if ($46) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $53 = HEAP32[$4>>2]|0;
   $54 = (($53) + 36|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 127]($4)|0);
   $57 = ($56|0)==(-1);
   if ($57) {
    HEAP32[$__e>>2] = 0;
    label = 21;
    break;
   } else {
    $58 = ($4|0)==(0|0);
    $tmp$i$i = $46 ^ $58;
    if ($tmp$i$i) {
     break;
    } else {
     label = 23;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  if ($46) {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  $59 = HEAP32[$__err>>2]|0;
  $60 = $59 | 2;
  HEAP32[$__err>>2] = $60;
 }
 $61 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $61;
 $62 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($62)|0);
 $63 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  STACKTOP = sp;return;
 }
 $65 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$65 & 511]($63);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = $5;$16 = 10;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $7;$16 = $phitmp$i;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($16) - ($15))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($15) + ($12))|0;
  $19 = (($18) - ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($15)|0);
 $28 = (($15) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01>>0]|0;
  HEAP8[$__p$02>>0] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4>>0] = 0;
 $33 = (($15) + ($12))|0;
 $34 = HEAP8[$this>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this>>0] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409016)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 63]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 63]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $25 = HEAP32[$10>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 63]($2,$10);
  $28 = HEAP8[$__psn>>0]|0;
  $29 = $28 & 1;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $34 = (($__psn) + 1|0);
   HEAP8[$34>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $31 = (($__psn) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   HEAP8[$32>>0] = 0;
   $33 = (($__psn) + 4|0);
   HEAP32[$33>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $35 = HEAP32[$10>>2]|0;
  $36 = (($35) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_ii[$37 & 127]($10)|0);
  HEAP8[$__dp>>0] = $38;
  $39 = HEAP32[$10>>2]|0;
  $40 = (($39) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_ii[$41 & 127]($10)|0);
  HEAP8[$__ts>>0] = $42;
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 63]($3,$10);
  $46 = HEAP8[$__grp>>0]|0;
  $47 = $46 & 1;
  $48 = ($47<<24>>24)==(0);
  if ($48) {
   $52 = (($__grp) + 1|0);
   HEAP8[$52>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $49 = (($__grp) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   HEAP8[$50>>0] = 0;
   $51 = (($__grp) + 4|0);
   HEAP32[$51>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $53 = HEAP32[$10>>2]|0;
  $54 = (($53) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vii[$55 & 63]($4,$10);
  $56 = HEAP8[$__sym>>0]|0;
  $57 = $56 & 1;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $62 = (($__sym) + 1|0);
   HEAP8[$62>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $59 = (($__sym) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP8[$60>>0] = 0;
   $61 = (($__sym) + 4|0);
   HEAP32[$61>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $63 = HEAP32[$10>>2]|0;
  $64 = (($63) + 36|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (FUNCTION_TABLE_ii[$65 & 127]($10)|0);
  $storemerge = $66;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $67 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,408952)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 44|0);
  $70 = HEAP32[$69>>2]|0;
  FUNCTION_TABLE_vii[$70 & 63]($5,$67);
  $71 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$71&255;HEAP8[$__pat+1>>0]=($71>>8)&255;HEAP8[$__pat+2>>0]=($71>>16)&255;HEAP8[$__pat+3>>0]=$71>>24;
  $72 = HEAP32[$67>>2]|0;
  $73 = (($72) + 32|0);
  $74 = HEAP32[$73>>2]|0;
  FUNCTION_TABLE_vii[$74 & 63]($6,$67);
  $75 = HEAP8[$__nsn>>0]|0;
  $76 = $75 & 1;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $81 = (($__nsn) + 1|0);
   HEAP8[$81>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $78 = (($__nsn) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   HEAP8[$79>>0] = 0;
   $80 = (($__nsn) + 4|0);
   HEAP32[$80>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $82 = HEAP32[$67>>2]|0;
  $83 = (($82) + 28|0);
  $84 = HEAP32[$83>>2]|0;
  FUNCTION_TABLE_vii[$84 & 63]($7,$67);
  $85 = HEAP8[$__psn>>0]|0;
  $86 = $85 & 1;
  $87 = ($86<<24>>24)==(0);
  if ($87) {
   $91 = (($__psn) + 1|0);
   HEAP8[$91>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $88 = (($__psn) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   HEAP8[$89>>0] = 0;
   $90 = (($__psn) + 4|0);
   HEAP32[$90>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $92 = HEAP32[$67>>2]|0;
  $93 = (($92) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 127]($67)|0);
  HEAP8[$__dp>>0] = $95;
  $96 = HEAP32[$67>>2]|0;
  $97 = (($96) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (FUNCTION_TABLE_ii[$98 & 127]($67)|0);
  HEAP8[$__ts>>0] = $99;
  $100 = HEAP32[$67>>2]|0;
  $101 = (($100) + 20|0);
  $102 = HEAP32[$101>>2]|0;
  FUNCTION_TABLE_vii[$102 & 63]($8,$67);
  $103 = HEAP8[$__grp>>0]|0;
  $104 = $103 & 1;
  $105 = ($104<<24>>24)==(0);
  if ($105) {
   $109 = (($__grp) + 1|0);
   HEAP8[$109>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $106 = (($__grp) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   HEAP8[$107>>0] = 0;
   $108 = (($__grp) + 4|0);
   HEAP32[$108>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $110 = HEAP32[$67>>2]|0;
  $111 = (($110) + 24|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vii[$112 & 63]($9,$67);
  $113 = HEAP8[$__sym>>0]|0;
  $114 = $113 & 1;
  $115 = ($114<<24>>24)==(0);
  if ($115) {
   $119 = (($__sym) + 1|0);
   HEAP8[$119>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $116 = (($__sym) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   HEAP8[$117>>0] = 0;
   $118 = (($__sym) + 4|0);
   HEAP32[$118>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $120 = HEAP32[$67>>2]|0;
  $121 = (($120) + 36|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 127]($67)|0);
  $storemerge = $123;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(244|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($2) {
  HEAP32[$__b>>2] = $14;
  $19 = $14;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  HEAP32[$__b>>2] = $14;
  $16 = ($$pr|0)==(0|0);
  if ($16) {
   $19 = $14;
  } else {
   $17 = HEAP32[$0>>2]|0;
   FUNCTION_TABLE_vi[$17 & 511]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $19 = $$pre;
  }
 }
 HEAP32[$0>>2] = 245;
 $18 = (($19) + ($12)|0);
 HEAP32[$__n>>2] = $18;
 $20 = HEAP32[$__b>>2]|0;
 $21 = (($20) + ($$)|0);
 HEAP32[$__e>>2] = $21;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(244|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($2) {
  HEAP32[$__b>>2] = $15;
  $21 = $15;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  HEAP32[$__b>>2] = $15;
  $17 = ($$pr|0)==(0|0);
  if ($17) {
   $21 = $15;
  } else {
   $18 = HEAP32[$0>>2]|0;
   FUNCTION_TABLE_vi[$18 & 511]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $21 = $$pre;
  }
 }
 HEAP32[$0>>2] = 245;
 $19 = $$ >>> 2;
 $20 = (($21) + ($13<<2)|0);
 HEAP32[$__n>>2] = $20;
 $22 = HEAP32[$__b>>2]|0;
 $23 = (($22) + ($19<<2)|0);
 HEAP32[$__e>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $$byval_copy = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 572|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 472|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 244;
 $2 = (($__wbuf) + 400|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 do {
  if ($7) {
   $8 = HEAP32[$3>>2]|0;
   $9 = (($8) + 48|0);
   $10 = HEAP32[$9>>2]|0;
   (FUNCTION_TABLE_iiiii[$10 & 15]($3,409272,((409272 + 10|0)),$__atoms)|0);
   $11 = HEAP32[$__wn>>2]|0;
   $12 = HEAP32[$__wb>>2]|0;
   $13 = $11;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = ($15|0)>(392);
   if ($16) {
    $17 = $15 >> 2;
    $18 = (($17) + 2)|0;
    $19 = (_malloc($18)|0);
    $20 = ($19|0)==(0|0);
    if ($20) {
     __ZSt17__throw_bad_allocv();
     // unreachable;
    } else {
     $43 = $19;$__nc$0 = $19;
    }
   } else {
    $43 = 0;$__nc$0 = $__nbuf;
   }
   $21 = HEAP8[$__neg>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $__nc$1 = $__nc$0;
   } else {
    $23 = (($__nc$0) + 1|0);
    HEAP8[$__nc$0>>0] = 45;
    $__nc$1 = $23;
   }
   $24 = ($12>>>0)<($11>>>0);
   if ($24) {
    $25 = (($__atoms) + 40|0);
    $26 = $__atoms;
    $__nc$26 = $__nc$1;$__w$07 = $12;
    while(1) {
     $27 = HEAP32[$__w$07>>2]|0;
     $$01$i = $__atoms;
     while(1) {
      $30 = HEAP32[$$01$i>>2]|0;
      $31 = ($30|0)==($27|0);
      $28 = (($$01$i) + 4|0);
      if ($31) {
       $$0$lcssa$i = $$01$i;
       break;
      }
      $29 = ($28|0)==($25|0);
      if ($29) {
       $$0$lcssa$i = $25;
       break;
      } else {
       $$01$i = $28;
      }
     }
     $32 = $$0$lcssa$i;
     $33 = (($32) - ($26))|0;
     $34 = $33 >> 2;
     $35 = (409272 + ($34)|0);
     $36 = HEAP8[$35>>0]|0;
     HEAP8[$__nc$26>>0] = $36;
     $37 = (($__w$07) + 4|0);
     $38 = (($__nc$26) + 1|0);
     $39 = HEAP32[$__wn>>2]|0;
     $40 = ($37>>>0)<($39>>>0);
     if ($40) {
      $__nc$26 = $38;$__w$07 = $37;
     } else {
      $__nc$2$lcssa = $38;
      break;
     }
    }
   } else {
    $__nc$2$lcssa = $__nc$1;
   }
   HEAP8[$__nc$2$lcssa>>0] = 0;
   HEAP32[$$byval_copy>>2] = $__v;
   $41 = (_sscanf($__nbuf,409208,$$byval_copy)|0);
   $42 = ($41|0)==(1);
   if ($42) {
    _free($43);
    break;
   } else {
    __ZNSt3__121__throw_runtime_errorEPKc(409216);
    // unreachable;
   }
  }
 } while(0);
 $44 = HEAP32[$__b>>2]|0;
 $45 = ($44|0)==(0|0);
 do {
  if ($45) {
   $77 = 1;
  } else {
   $46 = (($44) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($44) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($47|0)==($49|0);
   if ($50) {
    $51 = HEAP32[$44>>2]|0;
    $52 = (($51) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (FUNCTION_TABLE_ii[$53 & 127]($44)|0);
    $$0$i$i$i$i = $54;
   } else {
    $55 = HEAP32[$47>>2]|0;
    $$0$i$i$i$i = $55;
   }
   $56 = ($$0$i$i$i$i|0)==(-1);
   if ($56) {
    HEAP32[$__b>>2] = 0;
    $77 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $77 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $57 = HEAP32[$__e>>2]|0;
 $58 = ($57|0)==(0|0);
 do {
  if ($58) {
   label = 29;
  } else {
   $59 = (($57) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($57) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($60|0)==($62|0);
   if ($63) {
    $64 = HEAP32[$57>>2]|0;
    $65 = (($64) + 36|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (FUNCTION_TABLE_ii[$66 & 127]($57)|0);
    $$0$i$i1$i$i = $67;
   } else {
    $68 = HEAP32[$60>>2]|0;
    $$0$i$i1$i$i = $68;
   }
   $69 = ($$0$i$i1$i$i|0)==(-1);
   if ($69) {
    HEAP32[$__e>>2] = 0;
    label = 29;
    break;
   } else {
    if ($77) {
     break;
    } else {
     label = 31;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 29) {
  if ($77) {
   label = 31;
  }
 }
 if ((label|0) == 31) {
  $70 = HEAP32[$__err>>2]|0;
  $71 = $70 | 2;
  HEAP32[$__err>>2] = $71;
 }
 $72 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $72;
 $73 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($73)|0);
 $74 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  STACKTOP = sp;return;
 }
 $76 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$76 & 511]($74);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i$i$i144 = 0, $$0$i$i$i$i169 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i78 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i118 = 0, $$0$i$i1$i$i150 = 0, $$0$i$i1$i$i175 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0, $$0$i$i1$i$i84 = 0, $$0$i$i105 = 0, $$0$i$i108 = 0, $$0$i$i130 = 0;
 var $$0$i$i141 = 0, $$0$i$i165 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i72 = 0, $$0$i$i75 = 0, $$0$i$i96 = 0, $$292 = 0, $$293 = 0, $$294 = 0, $$295 = 0, $$296 = 0, $$297 = 0, $$298 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i114 = 0;
 var $$pre$i$i$i146 = 0, $$pre$i$i$i171 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i80 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i120 = 0, $$pre$i3$i$i152 = 0, $$pre$i3$i$i177 = 0, $$pre$i3$i$i177258 = 0, $$pre$i3$i$i177259 = 0, $$pre$i3$i$i264$ph = 0, $$pre$i3$i$i264291 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47255 = 0, $$pre$i3$i$i47257 = 0, $$pre$i3$i$i86 = 0, $$pre$i3$i$i86262$ph = 0, $$pre$i3$i$i86262288 = 0, $$pre276 = 0;
 var $$pre277 = 0, $$pre278 = 0, $$pre279 = 0, $$pre280 = 0, $$pre281 = 0, $$pre282 = 0, $$pre283 = 0, $$sum = 0, $$sum284 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0;
 var $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0245 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0247 = 0, $__trailing_sign$1 = 0;
 var $__ts = 0, $brmerge = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond299 = 0, $or$cond7$not = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i115 = 0, $phitmp$i$i$i147 = 0, $phitmp$i$i$i172 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i81 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i153 = 0, $phitmp$i4$i$i178 = 0, $phitmp$i4$i$i48 = 0;
 var $phitmp$i4$i$i87 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i155 = 0, $tmp$i$i180 = 0, $tmp$i$i50 = 0, $tmp$i$i89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 84|0;
 $__ge = sp + 80|0;
 $__pat = sp + 76|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 244;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $3 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $3;
 $4 = (($__nsn) + 4|0);
 $5 = (($__nsn) + 8|0);
 $6 = (($__psn) + 4|0);
 $7 = (($__psn) + 8|0);
 $8 = $__flags & 512;
 $9 = ($8|0)!=(0);
 $10 = (($__sym) + 4|0);
 $11 = (($__sym) + 8|0);
 $12 = (($__spaces) + 4|0);
 $13 = (($__spaces) + 8|0);
 $14 = (($__pat) + 3|0);
 $15 = (($__grp) + 4|0);
 $728 = $__gbuf;$__p$0245 = 0;$__trailing_sign$0247 = 0;
 L1: while(1) {
  $16 = HEAP32[$__b>>2]|0;
  $17 = ($16|0)==(0|0);
  do {
   if ($17) {
    $729 = 1;
   } else {
    $18 = (($16) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($16) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)==($21|0);
    if ($22) {
     $23 = HEAP32[$16>>2]|0;
     $24 = (($23) + 36|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (FUNCTION_TABLE_ii[$25 & 127]($16)|0);
     $$0$i$i$i$i18 = $26;
    } else {
     $27 = HEAP32[$19>>2]|0;
     $$0$i$i$i$i18 = $27;
    }
    $28 = ($$0$i$i$i$i18|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $729 = 1;
     break;
    } else {
     $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
     $729 = $phitmp$i$i$i21;
     break;
    }
   }
  } while(0);
  $29 = HEAP32[$__e>>2]|0;
  $30 = ($29|0)==(0|0);
  do {
   if ($30) {
    label = 15;
   } else {
    $31 = (($29) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($32|0)==($34|0);
    if ($35) {
     $36 = HEAP32[$29>>2]|0;
     $37 = (($36) + 36|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (FUNCTION_TABLE_ii[$38 & 127]($29)|0);
     $$0$i$i1$i$i24 = $39;
    } else {
     $40 = HEAP32[$32>>2]|0;
     $$0$i$i1$i$i24 = $40;
    }
    $41 = ($$0$i$i1$i$i24|0)==(-1);
    if ($41) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($729) {
      $731 = $29;
      break;
     } else {
      $720 = $728;$730 = $29;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
      label = 268;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($729) {
    $720 = $728;$730 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
    label = 268;
    break;
   } else {
    $731 = 0;
   }
  }
  $42 = (($__pat) + ($__p$0245)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  L25: do {
   switch ($44|0) {
   case 2:  {
    $291 = ($__trailing_sign$0247|0)!=(0|0);
    $292 = ($__p$0245>>>0)<(2);
    $or$cond = $291 | $292;
    if (!($or$cond)) {
     $293 = ($__p$0245|0)==(2);
     if ($293) {
      $294 = HEAP8[$14>>0]|0;
      $295 = ($294<<24>>24)!=(0);
      $296 = $295;
     } else {
      $296 = 0;
     }
     $brmerge = $9 | $296;
     if (!($brmerge)) {
      $732 = $731;$733 = $728;$__trailing_sign$1 = 0;
      break L25;
     }
    }
    $297 = HEAP8[$__sym>>0]|0;
    $298 = $297 & 1;
    $299 = ($298<<24>>24)==(0);
    $300 = HEAP32[$11>>2]|0;
    $$295 = $299 ? $10 : $300;
    $301 = ($__p$0245|0)==(0);
    L33: do {
     if ($301) {
      $$pre$i3$i$i177 = $731;$363 = $297;$372 = $$295;$387 = $731;
     } else {
      $302 = (($__p$0245) + -1)|0;
      $303 = (($__pat) + ($302)|0);
      $304 = HEAP8[$303>>0]|0;
      $switch = ($304&255)<(2);
      if ($switch) {
       $306 = $297;$315 = $$295;
       while(1) {
        $305 = $306 & 1;
        $307 = ($305<<24>>24)==(0);
        if ($307) {
         $310 = $306&255;
         $311 = $310 >>> 1;
         $313 = $10;$314 = $311;
        } else {
         $308 = HEAP32[$11>>2]|0;
         $309 = HEAP32[$10>>2]|0;
         $313 = $308;$314 = $309;
        }
        $312 = (($313) + ($314<<2)|0);
        $316 = ($315|0)==($312|0);
        if ($316) {
         $324 = $306;
         break;
        }
        $317 = HEAP32[$315>>2]|0;
        $318 = HEAP32[$__ct>>2]|0;
        $319 = (($318) + 12|0);
        $320 = HEAP32[$319>>2]|0;
        $321 = (FUNCTION_TABLE_iiii[$320 & 63]($__ct,8192,$317)|0);
        if (!($321)) {
         label = 130;
         break;
        }
        $322 = (($315) + 4|0);
        $$pre279 = HEAP8[$__sym>>0]|0;
        $306 = $$pre279;$315 = $322;
       }
       if ((label|0) == 130) {
        label = 0;
        $$pre280 = HEAP8[$__sym>>0]|0;
        $324 = $$pre280;
       }
       $323 = $324 & 1;
       $325 = ($323<<24>>24)==(0);
       $326 = HEAP32[$11>>2]|0;
       $$296 = $325 ? $10 : $326;
       $327 = $315;
       $328 = $$296;
       $329 = (($327) - ($328))|0;
       $330 = $329 >> 2;
       $331 = HEAP8[$__spaces>>0]|0;
       $332 = $331 & 1;
       $333 = ($332<<24>>24)==(0);
       if ($333) {
        $335 = $331&255;
        $336 = $335 >>> 1;
        $338 = $336;
       } else {
        $334 = HEAP32[$12>>2]|0;
        $338 = $334;
       }
       $337 = ($330>>>0)>($338>>>0);
       L50: do {
        if (!($337)) {
         if ($333) {
          $342 = $331&255;
          $343 = $342 >>> 1;
          $$sum284 = (($343) - ($330))|0;
          $344 = (($12) + ($$sum284<<2)|0);
          $345 = $331&255;
          $346 = $345 >>> 1;
          $348 = $12;$349 = $346;$351 = $344;
         } else {
          $339 = HEAP32[$13>>2]|0;
          $340 = HEAP32[$12>>2]|0;
          $$sum = (($340) - ($330))|0;
          $341 = (($339) + ($$sum<<2)|0);
          $348 = $339;$349 = $340;$351 = $341;
         }
         $347 = (($348) + ($349<<2)|0);
         $350 = HEAP32[$11>>2]|0;
         $$297 = $325 ? $10 : $350;
         $352 = ($351|0)==($347|0);
         if ($352) {
          $$pre$i3$i$i177 = $731;$363 = $324;$372 = $315;$387 = $731;
          break L33;
         } else {
          $354 = $351;$356 = $$297;
         }
         while(1) {
          $353 = HEAP32[$354>>2]|0;
          $355 = HEAP32[$356>>2]|0;
          $357 = ($353|0)==($355|0);
          if (!($357)) {
           break L50;
          }
          $358 = (($354) + 4|0);
          $359 = ($358|0)==($347|0);
          if ($359) {
           $$pre$i3$i$i177 = $731;$363 = $324;$372 = $315;$387 = $731;
           break L33;
          }
          $360 = (($356) + 4|0);
          $354 = $358;$356 = $360;
         }
        }
       } while(0);
       $361 = HEAP32[$11>>2]|0;
       $$298 = $325 ? $10 : $361;
       $$pre$i3$i$i177 = $731;$363 = $324;$372 = $$298;$387 = $731;
      } else {
       $$pre$i3$i$i177 = $731;$363 = $297;$372 = $$295;$387 = $731;
      }
     }
    } while(0);
    L61: while(1) {
     $362 = $363 & 1;
     $364 = ($362<<24>>24)==(0);
     if ($364) {
      $367 = $363&255;
      $368 = $367 >>> 1;
      $370 = $10;$371 = $368;
     } else {
      $365 = HEAP32[$11>>2]|0;
      $366 = HEAP32[$10>>2]|0;
      $370 = $365;$371 = $366;
     }
     $369 = (($370) + ($371<<2)|0);
     $373 = ($372|0)==($369|0);
     if ($373) {
      $735 = $$pre$i3$i$i177;
      break;
     }
     $374 = HEAP32[$__b>>2]|0;
     $375 = ($374|0)==(0|0);
     do {
      if ($375) {
       $400 = 1;
      } else {
       $376 = (($374) + 12|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = (($374) + 16|0);
       $379 = HEAP32[$378>>2]|0;
       $380 = ($377|0)==($379|0);
       if ($380) {
        $381 = HEAP32[$374>>2]|0;
        $382 = (($381) + 36|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = (FUNCTION_TABLE_ii[$383 & 127]($374)|0);
        $$0$i$i$i$i169 = $384;
       } else {
        $385 = HEAP32[$377>>2]|0;
        $$0$i$i$i$i169 = $385;
       }
       $386 = ($$0$i$i$i$i169|0)==(-1);
       if ($386) {
        HEAP32[$__b>>2] = 0;
        $400 = 1;
        break;
       } else {
        $$pre$i$i$i171 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i172 = ($$pre$i$i$i171|0)==(0|0);
        $400 = $phitmp$i$i$i172;
        break;
       }
      }
     } while(0);
     $388 = ($387|0)==(0|0);
     do {
      if ($388) {
       $$pre$i3$i$i177259 = $$pre$i3$i$i177;
       label = 160;
      } else {
       $389 = (($387) + 12|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = (($387) + 16|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = ($390|0)==($392|0);
       if ($393) {
        $394 = HEAP32[$387>>2]|0;
        $395 = (($394) + 36|0);
        $396 = HEAP32[$395>>2]|0;
        $397 = (FUNCTION_TABLE_ii[$396 & 127]($387)|0);
        $$0$i$i1$i$i175 = $397;
       } else {
        $398 = HEAP32[$390>>2]|0;
        $$0$i$i1$i$i175 = $398;
       }
       $399 = ($$0$i$i1$i$i175|0)==(-1);
       if ($399) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i177259 = 0;
        label = 160;
        break;
       } else {
        $phitmp$i4$i$i178 = ($$pre$i3$i$i177|0)==(0|0);
        $tmp$i$i180 = $400 ^ $phitmp$i4$i$i178;
        if ($tmp$i$i180) {
         $$pre$i3$i$i177258 = $$pre$i3$i$i177;$736 = $$pre$i3$i$i177;
         break;
        } else {
         $735 = $$pre$i3$i$i177;
         break L61;
        }
       }
      }
     } while(0);
     if ((label|0) == 160) {
      label = 0;
      if ($400) {
       $735 = $$pre$i3$i$i177259;
       break;
      } else {
       $$pre$i3$i$i177258 = $$pre$i3$i$i177259;$736 = 0;
      }
     }
     $401 = HEAP32[$__b>>2]|0;
     $402 = (($401) + 12|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = (($401) + 16|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = ($403|0)==($405|0);
     if ($406) {
      $407 = HEAP32[$401>>2]|0;
      $408 = (($407) + 36|0);
      $409 = HEAP32[$408>>2]|0;
      $410 = (FUNCTION_TABLE_ii[$409 & 127]($401)|0);
      $$0$i$i165 = $410;
     } else {
      $411 = HEAP32[$403>>2]|0;
      $$0$i$i165 = $411;
     }
     $412 = HEAP32[$372>>2]|0;
     $413 = ($$0$i$i165|0)==($412|0);
     if (!($413)) {
      $735 = $$pre$i3$i$i177258;
      break;
     }
     $414 = HEAP32[$__b>>2]|0;
     $415 = (($414) + 12|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = (($414) + 16|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = ($416|0)==($418|0);
     if ($419) {
      $420 = HEAP32[$414>>2]|0;
      $421 = (($420) + 40|0);
      $422 = HEAP32[$421>>2]|0;
      (FUNCTION_TABLE_ii[$422 & 127]($414)|0);
     } else {
      $423 = (($416) + 4|0);
      HEAP32[$415>>2] = $423;
     }
     $424 = (($372) + 4|0);
     $$pre = HEAP8[$__sym>>0]|0;
     $$pre$i3$i$i177 = $$pre$i3$i$i177258;$363 = $$pre;$372 = $424;$387 = $736;
    }
    if ($9) {
     $425 = HEAP8[$__sym>>0]|0;
     $426 = $425 & 1;
     $427 = ($426<<24>>24)==(0);
     if ($427) {
      $430 = $425&255;
      $431 = $430 >>> 1;
      $433 = $10;$434 = $431;
     } else {
      $428 = HEAP32[$11>>2]|0;
      $429 = HEAP32[$10>>2]|0;
      $433 = $428;$434 = $429;
     }
     $432 = (($433) + ($434<<2)|0);
     $435 = ($372|0)==($432|0);
     if ($435) {
      $732 = $735;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
     } else {
      label = 175;
      break L1;
     }
    } else {
     $732 = $735;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
    }
    break;
   }
   case 0:  {
    label = 29;
    break;
   }
   case 1:  {
    $cond = ($__p$0245|0)==(3);
    if ($cond) {
     $720 = $728;$730 = $731;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
     label = 268;
     break L1;
    }
    $46 = HEAP32[$__b>>2]|0;
    $47 = (($46) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($46) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$46>>2]|0;
     $53 = (($52) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
     $$0$i$i33 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $$0$i$i33 = $56;
    }
    $57 = HEAP32[$__ct>>2]|0;
    $58 = (($57) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (FUNCTION_TABLE_iiii[$59 & 63]($__ct,8192,$$0$i$i33)|0);
    if (!($60)) {
     label = 28;
     break L1;
    }
    $61 = HEAP32[$__b>>2]|0;
    $62 = (($61) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($61) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$61>>2]|0;
     $68 = (($67) + 40|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 127]($61)|0);
     $$0$i$i37 = $70;
    } else {
     $71 = (($63) + 4|0);
     HEAP32[$62>>2] = $71;
     $72 = HEAP32[$63>>2]|0;
     $$0$i$i37 = $72;
    }
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$$0$i$i37);
    label = 29;
    break;
   }
   case 4:  {
    $45 = HEAP32[$__ts>>2]|0;
    $$pre$i3$i$i152 = $731;$451 = $731;$495 = $728;$__ng$0 = 0;
    L117: while(1) {
     $438 = HEAP32[$__b>>2]|0;
     $439 = ($438|0)==(0|0);
     do {
      if ($439) {
       $464 = 1;
      } else {
       $440 = (($438) + 12|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = (($438) + 16|0);
       $443 = HEAP32[$442>>2]|0;
       $444 = ($441|0)==($443|0);
       if ($444) {
        $445 = HEAP32[$438>>2]|0;
        $446 = (($445) + 36|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = (FUNCTION_TABLE_ii[$447 & 127]($438)|0);
        $$0$i$i$i$i144 = $448;
       } else {
        $449 = HEAP32[$441>>2]|0;
        $$0$i$i$i$i144 = $449;
       }
       $450 = ($$0$i$i$i$i144|0)==(-1);
       if ($450) {
        HEAP32[$__b>>2] = 0;
        $464 = 1;
        break;
       } else {
        $$pre$i$i$i146 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i147 = ($$pre$i$i$i146|0)==(0|0);
        $464 = $phitmp$i$i$i147;
        break;
       }
      }
     } while(0);
     $452 = ($451|0)==(0|0);
     do {
      if ($452) {
       $737 = $$pre$i3$i$i152;
       label = 189;
      } else {
       $453 = (($451) + 12|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = (($451) + 16|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = ($454|0)==($456|0);
       if ($457) {
        $458 = HEAP32[$451>>2]|0;
        $459 = (($458) + 36|0);
        $460 = HEAP32[$459>>2]|0;
        $461 = (FUNCTION_TABLE_ii[$460 & 127]($451)|0);
        $$0$i$i1$i$i150 = $461;
       } else {
        $462 = HEAP32[$454>>2]|0;
        $$0$i$i1$i$i150 = $462;
       }
       $463 = ($$0$i$i1$i$i150|0)==(-1);
       if ($463) {
        HEAP32[$__e>>2] = 0;
        $737 = 0;
        label = 189;
        break;
       } else {
        $phitmp$i4$i$i153 = ($$pre$i3$i$i152|0)==(0|0);
        $tmp$i$i155 = $464 ^ $phitmp$i4$i$i153;
        if ($tmp$i$i155) {
         $738 = $$pre$i3$i$i152;$739 = $$pre$i3$i$i152;
         break;
        } else {
         $$pre$i3$i$i120 = $$pre$i3$i$i152;
         break L117;
        }
       }
      }
     } while(0);
     if ((label|0) == 189) {
      label = 0;
      if ($464) {
       $$pre$i3$i$i120 = $737;
       break;
      } else {
       $738 = $737;$739 = 0;
      }
     }
     $465 = HEAP32[$__b>>2]|0;
     $466 = (($465) + 12|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = (($465) + 16|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = ($467|0)==($469|0);
     if ($470) {
      $471 = HEAP32[$465>>2]|0;
      $472 = (($471) + 36|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = (FUNCTION_TABLE_ii[$473 & 127]($465)|0);
      $$0$i$i141 = $474;
     } else {
      $475 = HEAP32[$467>>2]|0;
      $$0$i$i141 = $475;
     }
     $476 = HEAP32[$__ct>>2]|0;
     $477 = (($476) + 12|0);
     $478 = HEAP32[$477>>2]|0;
     $479 = (FUNCTION_TABLE_iiii[$478 & 63]($__ct,2048,$$0$i$i141)|0);
     if ($479) {
      $480 = HEAP32[$__wn>>2]|0;
      $481 = HEAP32[$0>>2]|0;
      $482 = ($480|0)==($481|0);
      if ($482) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
       $$pre282 = HEAP32[$__wn>>2]|0;
       $484 = $$pre282;
      } else {
       $484 = $480;
      }
      $483 = (($484) + 4|0);
      HEAP32[$__wn>>2] = $483;
      HEAP32[$484>>2] = $$0$i$i141;
      $485 = (($__ng$0) + 1)|0;
      $740 = $495;$__ng$1 = $485;
     } else {
      $486 = HEAP8[$__grp>>0]|0;
      $487 = $486 & 1;
      $488 = ($487<<24>>24)==(0);
      if ($488) {
       $490 = $486&255;
       $491 = $490 >>> 1;
       $492 = $491;
      } else {
       $489 = HEAP32[$15>>2]|0;
       $492 = $489;
      }
      $notlhs = ($492|0)!=(0);
      $notrhs = ($__ng$0|0)!=(0);
      $or$cond7$not = $notrhs & $notlhs;
      $493 = ($$0$i$i141|0)==($45|0);
      $or$cond299 = $or$cond7$not & $493;
      if (!($or$cond299)) {
       $$pre$i3$i$i120 = $738;
       break;
      }
      $494 = HEAP32[$__ge>>2]|0;
      $496 = ($495|0)==($494|0);
      if ($496) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
       $$pre283 = HEAP32[$__gn>>2]|0;
       $498 = $$pre283;
      } else {
       $498 = $495;
      }
      $497 = (($498) + 4|0);
      HEAP32[$__gn>>2] = $497;
      HEAP32[$498>>2] = $__ng$0;
      $740 = $497;$__ng$1 = 0;
     }
     $499 = HEAP32[$__b>>2]|0;
     $500 = (($499) + 12|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = (($499) + 16|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = ($501|0)==($503|0);
     if ($504) {
      $505 = HEAP32[$499>>2]|0;
      $506 = (($505) + 40|0);
      $507 = HEAP32[$506>>2]|0;
      (FUNCTION_TABLE_ii[$507 & 127]($499)|0);
      $$pre$i3$i$i152 = $738;$451 = $739;$495 = $740;$__ng$0 = $__ng$1;
      continue;
     } else {
      $508 = (($501) + 4|0);
      HEAP32[$500>>2] = $508;
      $$pre$i3$i$i152 = $738;$451 = $739;$495 = $740;$__ng$0 = $__ng$1;
      continue;
     }
    }
    $509 = HEAP32[$__gb>>2]|0;
    $510 = ($509|0)==($495|0);
    $511 = ($__ng$0|0)==(0);
    $or$cond8 = $510 | $511;
    if ($or$cond8) {
     $741 = $495;
    } else {
     $512 = HEAP32[$__ge>>2]|0;
     $513 = ($495|0)==($512|0);
     if ($513) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
      $$pre281 = HEAP32[$__gn>>2]|0;
      $515 = $$pre281;
     } else {
      $515 = $495;
     }
     $514 = (($515) + 4|0);
     HEAP32[$__gn>>2] = $514;
     HEAP32[$515>>2] = $__ng$0;
     $741 = $514;
    }
    $516 = HEAP32[$__fd>>2]|0;
    $517 = ($516|0)>(0);
    if ($517) {
     $518 = HEAP32[$__b>>2]|0;
     $519 = ($518|0)==(0|0);
     do {
      if ($519) {
       $743 = 1;
      } else {
       $520 = (($518) + 12|0);
       $521 = HEAP32[$520>>2]|0;
       $522 = (($518) + 16|0);
       $523 = HEAP32[$522>>2]|0;
       $524 = ($521|0)==($523|0);
       if ($524) {
        $525 = HEAP32[$518>>2]|0;
        $526 = (($525) + 36|0);
        $527 = HEAP32[$526>>2]|0;
        $528 = (FUNCTION_TABLE_ii[$527 & 127]($518)|0);
        $$0$i$i$i$i112 = $528;
       } else {
        $529 = HEAP32[$521>>2]|0;
        $$0$i$i$i$i112 = $529;
       }
       $530 = ($$0$i$i$i$i112|0)==(-1);
       if ($530) {
        HEAP32[$__b>>2] = 0;
        $743 = 1;
        break;
       } else {
        $$pre$i$i$i114 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i115 = ($$pre$i$i$i114|0)==(0|0);
        $743 = $phitmp$i$i$i115;
        break;
       }
      }
     } while(0);
     $531 = ($$pre$i3$i$i120|0)==(0|0);
     do {
      if ($531) {
       label = 226;
      } else {
       $532 = (($$pre$i3$i$i120) + 12|0);
       $533 = HEAP32[$532>>2]|0;
       $534 = (($$pre$i3$i$i120) + 16|0);
       $535 = HEAP32[$534>>2]|0;
       $536 = ($533|0)==($535|0);
       if ($536) {
        $537 = HEAP32[$$pre$i3$i$i120>>2]|0;
        $538 = (($537) + 36|0);
        $539 = HEAP32[$538>>2]|0;
        $540 = (FUNCTION_TABLE_ii[$539 & 127]($$pre$i3$i$i120)|0);
        $$0$i$i1$i$i118 = $540;
       } else {
        $541 = HEAP32[$533>>2]|0;
        $$0$i$i1$i$i118 = $541;
       }
       $542 = ($$0$i$i1$i$i118|0)==(-1);
       if ($542) {
        HEAP32[$__e>>2] = 0;
        label = 226;
        break;
       } else {
        if ($743) {
         $744 = $$pre$i3$i$i120;
         break;
        } else {
         label = 232;
         break L1;
        }
       }
      }
     } while(0);
     if ((label|0) == 226) {
      label = 0;
      if ($743) {
       label = 232;
       break L1;
      } else {
       $744 = 0;
      }
     }
     $543 = HEAP32[$__b>>2]|0;
     $544 = (($543) + 12|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = (($543) + 16|0);
     $547 = HEAP32[$546>>2]|0;
     $548 = ($545|0)==($547|0);
     if ($548) {
      $549 = HEAP32[$543>>2]|0;
      $550 = (($549) + 36|0);
      $551 = HEAP32[$550>>2]|0;
      $552 = (FUNCTION_TABLE_ii[$551 & 127]($543)|0);
      $$0$i$i105 = $552;
     } else {
      $553 = HEAP32[$545>>2]|0;
      $$0$i$i105 = $553;
     }
     $554 = HEAP32[$__dp>>2]|0;
     $555 = ($$0$i$i105|0)==($554|0);
     if (!($555)) {
      label = 232;
      break L1;
     }
     $558 = HEAP32[$__b>>2]|0;
     $559 = (($558) + 12|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = (($558) + 16|0);
     $562 = HEAP32[$561>>2]|0;
     $563 = ($560|0)==($562|0);
     if ($563) {
      $564 = HEAP32[$558>>2]|0;
      $565 = (($564) + 40|0);
      $566 = HEAP32[$565>>2]|0;
      (FUNCTION_TABLE_ii[$566 & 127]($558)|0);
      $$pre$i3$i$i86 = $744;$581 = $744;$629 = $516;
     } else {
      $567 = (($560) + 4|0);
      HEAP32[$559>>2] = $567;
      $$pre$i3$i$i86 = $744;$581 = $744;$629 = $516;
     }
     while(1) {
      $568 = HEAP32[$__b>>2]|0;
      $569 = ($568|0)==(0|0);
      do {
       if ($569) {
        $594 = 1;
       } else {
        $570 = (($568) + 12|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = (($568) + 16|0);
        $573 = HEAP32[$572>>2]|0;
        $574 = ($571|0)==($573|0);
        if ($574) {
         $575 = HEAP32[$568>>2]|0;
         $576 = (($575) + 36|0);
         $577 = HEAP32[$576>>2]|0;
         $578 = (FUNCTION_TABLE_ii[$577 & 127]($568)|0);
         $$0$i$i$i$i78 = $578;
        } else {
         $579 = HEAP32[$571>>2]|0;
         $$0$i$i$i$i78 = $579;
        }
        $580 = ($$0$i$i$i$i78|0)==(-1);
        if ($580) {
         HEAP32[$__b>>2] = 0;
         $594 = 1;
         break;
        } else {
         $$pre$i$i$i80 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i81 = ($$pre$i$i$i80|0)==(0|0);
         $594 = $phitmp$i$i$i81;
         break;
        }
       }
      } while(0);
      $582 = ($581|0)==(0|0);
      do {
       if ($582) {
        $$pre$i3$i$i86262$ph = $$pre$i3$i$i86;
        label = 249;
       } else {
        $583 = (($581) + 12|0);
        $584 = HEAP32[$583>>2]|0;
        $585 = (($581) + 16|0);
        $586 = HEAP32[$585>>2]|0;
        $587 = ($584|0)==($586|0);
        if ($587) {
         $588 = HEAP32[$581>>2]|0;
         $589 = (($588) + 36|0);
         $590 = HEAP32[$589>>2]|0;
         $591 = (FUNCTION_TABLE_ii[$590 & 127]($581)|0);
         $$0$i$i1$i$i84 = $591;
        } else {
         $592 = HEAP32[$584>>2]|0;
         $$0$i$i1$i$i84 = $592;
        }
        $593 = ($$0$i$i1$i$i84|0)==(-1);
        if ($593) {
         HEAP32[$__e>>2] = 0;
         $$pre$i3$i$i86262$ph = 0;
         label = 249;
         break;
        } else {
         $phitmp$i4$i$i87 = ($$pre$i3$i$i86|0)==(0|0);
         $tmp$i$i89 = $594 ^ $phitmp$i4$i$i87;
         if ($tmp$i$i89) {
          $$pre$i3$i$i86262288 = $$pre$i3$i$i86;$745 = $$pre$i3$i$i86;
          break;
         } else {
          label = 255;
          break L1;
         }
        }
       }
      } while(0);
      if ((label|0) == 249) {
       label = 0;
       if ($594) {
        label = 255;
        break L1;
       } else {
        $$pre$i3$i$i86262288 = $$pre$i3$i$i86262$ph;$745 = 0;
       }
      }
      $595 = HEAP32[$__b>>2]|0;
      $596 = (($595) + 12|0);
      $597 = HEAP32[$596>>2]|0;
      $598 = (($595) + 16|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = ($597|0)==($599|0);
      if ($600) {
       $601 = HEAP32[$595>>2]|0;
       $602 = (($601) + 36|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = (FUNCTION_TABLE_ii[$603 & 127]($595)|0);
       $$0$i$i72 = $604;
      } else {
       $605 = HEAP32[$597>>2]|0;
       $$0$i$i72 = $605;
      }
      $606 = HEAP32[$__ct>>2]|0;
      $607 = (($606) + 12|0);
      $608 = HEAP32[$607>>2]|0;
      $609 = (FUNCTION_TABLE_iiii[$608 & 63]($__ct,2048,$$0$i$i72)|0);
      if (!($609)) {
       label = 255;
       break L1;
      }
      $612 = HEAP32[$__wn>>2]|0;
      $613 = HEAP32[$0>>2]|0;
      $614 = ($612|0)==($613|0);
      if ($614) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
      }
      $615 = HEAP32[$__b>>2]|0;
      $616 = (($615) + 12|0);
      $617 = HEAP32[$616>>2]|0;
      $618 = (($615) + 16|0);
      $619 = HEAP32[$618>>2]|0;
      $620 = ($617|0)==($619|0);
      if ($620) {
       $621 = HEAP32[$615>>2]|0;
       $622 = (($621) + 36|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = (FUNCTION_TABLE_ii[$623 & 127]($615)|0);
       $$0$i$i64 = $624;
      } else {
       $625 = HEAP32[$617>>2]|0;
       $$0$i$i64 = $625;
      }
      $626 = HEAP32[$__wn>>2]|0;
      $627 = (($626) + 4|0);
      HEAP32[$__wn>>2] = $627;
      HEAP32[$626>>2] = $$0$i$i64;
      $628 = (($629) + -1)|0;
      HEAP32[$__fd>>2] = $628;
      $630 = HEAP32[$__b>>2]|0;
      $631 = (($630) + 12|0);
      $632 = HEAP32[$631>>2]|0;
      $633 = (($630) + 16|0);
      $634 = HEAP32[$633>>2]|0;
      $635 = ($632|0)==($634|0);
      if ($635) {
       $636 = HEAP32[$630>>2]|0;
       $637 = (($636) + 40|0);
       $638 = HEAP32[$637>>2]|0;
       (FUNCTION_TABLE_ii[$638 & 127]($630)|0);
      } else {
       $640 = (($632) + 4|0);
       HEAP32[$631>>2] = $640;
      }
      $639 = ($628|0)>(0);
      if ($639) {
       $$pre$i3$i$i86 = $$pre$i3$i$i86262288;$581 = $745;$629 = $628;
      } else {
       $742 = $$pre$i3$i$i86262288;
       break;
      }
     }
    } else {
     $742 = $$pre$i3$i$i120;
    }
    $641 = HEAP32[$__wn>>2]|0;
    $642 = HEAP32[$__wb>>2]|0;
    $643 = ($641|0)==($642|0);
    if ($643) {
     label = 266;
     break L1;
    } else {
     $732 = $742;$733 = $741;$__trailing_sign$1 = $__trailing_sign$0247;
    }
    break;
   }
   case 3:  {
    $130 = HEAP8[$__psn>>0]|0;
    $131 = $130 & 1;
    $132 = ($131<<24>>24)==(0);
    if ($132) {
     $134 = $130&255;
     $135 = $134 >>> 1;
     $144 = $135;
    } else {
     $133 = HEAP32[$6>>2]|0;
     $144 = $133;
    }
    $136 = HEAP8[$__nsn>>0]|0;
    $137 = $136 & 1;
    $138 = ($137<<24>>24)==(0);
    if ($138) {
     $140 = $136&255;
     $141 = $140 >>> 1;
     $143 = $141;
    } else {
     $139 = HEAP32[$4>>2]|0;
     $143 = $139;
    }
    $142 = (0 - ($143))|0;
    $145 = ($144|0)==($142|0);
    if ($145) {
     $732 = $731;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
    } else {
     if ($132) {
      $147 = $130&255;
      $148 = $147 >>> 1;
      $149 = $148;
     } else {
      $146 = HEAP32[$6>>2]|0;
      $149 = $146;
     }
     $150 = ($149|0)==(0);
     if (!($150)) {
      if ($138) {
       $152 = $136&255;
       $153 = $152 >>> 1;
       $154 = $153;
      } else {
       $151 = HEAP32[$4>>2]|0;
       $154 = $151;
      }
      $155 = ($154|0)==(0);
      if (!($155)) {
       $225 = HEAP32[$__b>>2]|0;
       $226 = (($225) + 12|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = (($225) + 16|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($227|0)==($229|0);
       if ($230) {
        $231 = HEAP32[$225>>2]|0;
        $232 = (($231) + 36|0);
        $233 = HEAP32[$232>>2]|0;
        $234 = (FUNCTION_TABLE_ii[$233 & 127]($225)|0);
        $$pre278 = HEAP8[$__psn>>0]|0;
        $$0$i$i108 = $234;$237 = $$pre278;
       } else {
        $235 = HEAP32[$227>>2]|0;
        $$0$i$i108 = $235;$237 = $130;
       }
       $236 = $237 & 1;
       $238 = ($236<<24>>24)==(0);
       $239 = HEAP32[$7>>2]|0;
       $$293 = $238 ? $6 : $239;
       $240 = HEAP32[$$293>>2]|0;
       $241 = ($$0$i$i108|0)==($240|0);
       $242 = HEAP32[$__b>>2]|0;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (($242) + 16|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($244|0)==($246|0);
       if ($241) {
        if ($247) {
         $248 = HEAP32[$242>>2]|0;
         $249 = (($248) + 40|0);
         $250 = HEAP32[$249>>2]|0;
         (FUNCTION_TABLE_ii[$250 & 127]($242)|0);
        } else {
         $251 = (($244) + 4|0);
         HEAP32[$243>>2] = $251;
        }
        $252 = HEAP8[$__psn>>0]|0;
        $253 = $252 & 1;
        $254 = ($253<<24>>24)==(0);
        if ($254) {
         $256 = $252&255;
         $257 = $256 >>> 1;
         $258 = $257;
        } else {
         $255 = HEAP32[$6>>2]|0;
         $258 = $255;
        }
        $259 = ($258>>>0)>(1);
        $__psn$__trailing_sign$05 = $259 ? $__psn : $__trailing_sign$0247;
        $732 = $731;$733 = $728;$__trailing_sign$1 = $__psn$__trailing_sign$05;
        break L25;
       }
       if ($247) {
        $260 = HEAP32[$242>>2]|0;
        $261 = (($260) + 36|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = (FUNCTION_TABLE_ii[$262 & 127]($242)|0);
        $$0$i$i130 = $263;
       } else {
        $264 = HEAP32[$244>>2]|0;
        $$0$i$i130 = $264;
       }
       $265 = HEAP8[$__nsn>>0]|0;
       $266 = $265 & 1;
       $267 = ($266<<24>>24)==(0);
       $268 = HEAP32[$5>>2]|0;
       $$294 = $267 ? $4 : $268;
       $269 = HEAP32[$$294>>2]|0;
       $270 = ($$0$i$i130|0)==($269|0);
       if (!($270)) {
        label = 117;
        break L1;
       }
       $271 = HEAP32[$__b>>2]|0;
       $272 = (($271) + 12|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = (($271) + 16|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = ($273|0)==($275|0);
       if ($276) {
        $277 = HEAP32[$271>>2]|0;
        $278 = (($277) + 40|0);
        $279 = HEAP32[$278>>2]|0;
        (FUNCTION_TABLE_ii[$279 & 127]($271)|0);
       } else {
        $280 = (($273) + 4|0);
        HEAP32[$272>>2] = $280;
       }
       HEAP8[$__neg>>0] = 1;
       $281 = HEAP8[$__nsn>>0]|0;
       $282 = $281 & 1;
       $283 = ($282<<24>>24)==(0);
       if ($283) {
        $285 = $281&255;
        $286 = $285 >>> 1;
        $287 = $286;
       } else {
        $284 = HEAP32[$4>>2]|0;
        $287 = $284;
       }
       $288 = ($287>>>0)>(1);
       $__nsn$__trailing_sign$06 = $288 ? $__nsn : $__trailing_sign$0247;
       $732 = $731;$733 = $728;$__trailing_sign$1 = $__nsn$__trailing_sign$06;
       break L25;
      }
     }
     if ($132) {
      $157 = $130&255;
      $158 = $157 >>> 1;
      $159 = $158;
     } else {
      $156 = HEAP32[$6>>2]|0;
      $159 = $156;
     }
     $160 = ($159|0)==(0);
     $161 = HEAP32[$__b>>2]|0;
     $162 = (($161) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($161) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($160) {
      if ($166) {
       $196 = HEAP32[$161>>2]|0;
       $197 = (($196) + 36|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = (FUNCTION_TABLE_ii[$198 & 127]($161)|0);
       $$pre276 = HEAP8[$__nsn>>0]|0;
       $$0$i$i96 = $199;$202 = $$pre276;
      } else {
       $200 = HEAP32[$163>>2]|0;
       $$0$i$i96 = $200;$202 = $136;
      }
      $201 = $202 & 1;
      $203 = ($201<<24>>24)==(0);
      $204 = HEAP32[$5>>2]|0;
      $$292 = $203 ? $4 : $204;
      $205 = HEAP32[$$292>>2]|0;
      $206 = ($$0$i$i96|0)==($205|0);
      if (!($206)) {
       $732 = $731;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
       break L25;
      }
      $207 = HEAP32[$__b>>2]|0;
      $208 = (($207) + 12|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (($207) + 16|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = ($209|0)==($211|0);
      if ($212) {
       $213 = HEAP32[$207>>2]|0;
       $214 = (($213) + 40|0);
       $215 = HEAP32[$214>>2]|0;
       (FUNCTION_TABLE_ii[$215 & 127]($207)|0);
      } else {
       $216 = (($209) + 4|0);
       HEAP32[$208>>2] = $216;
      }
      HEAP8[$__neg>>0] = 1;
      $217 = HEAP8[$__nsn>>0]|0;
      $218 = $217 & 1;
      $219 = ($218<<24>>24)==(0);
      if ($219) {
       $221 = $217&255;
       $222 = $221 >>> 1;
       $223 = $222;
      } else {
       $220 = HEAP32[$4>>2]|0;
       $223 = $220;
      }
      $224 = ($223>>>0)>(1);
      $__nsn$__trailing_sign$0 = $224 ? $__nsn : $__trailing_sign$0247;
      $732 = $731;$733 = $728;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
      break L25;
     }
     if ($166) {
      $167 = HEAP32[$161>>2]|0;
      $168 = (($167) + 36|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (FUNCTION_TABLE_ii[$169 & 127]($161)|0);
      $$pre277 = HEAP8[$__psn>>0]|0;
      $$0$i$i75 = $170;$173 = $$pre277;
     } else {
      $171 = HEAP32[$163>>2]|0;
      $$0$i$i75 = $171;$173 = $130;
     }
     $172 = $173 & 1;
     $174 = ($172<<24>>24)==(0);
     $175 = HEAP32[$7>>2]|0;
     $$ = $174 ? $6 : $175;
     $176 = HEAP32[$$>>2]|0;
     $177 = ($$0$i$i75|0)==($176|0);
     if (!($177)) {
      HEAP8[$__neg>>0] = 1;
      $732 = $731;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
      break L25;
     }
     $178 = HEAP32[$__b>>2]|0;
     $179 = (($178) + 12|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($178) + 16|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ($180|0)==($182|0);
     if ($183) {
      $184 = HEAP32[$178>>2]|0;
      $185 = (($184) + 40|0);
      $186 = HEAP32[$185>>2]|0;
      (FUNCTION_TABLE_ii[$186 & 127]($178)|0);
     } else {
      $187 = (($180) + 4|0);
      HEAP32[$179>>2] = $187;
     }
     $188 = HEAP8[$__psn>>0]|0;
     $189 = $188 & 1;
     $190 = ($189<<24>>24)==(0);
     if ($190) {
      $192 = $188&255;
      $193 = $192 >>> 1;
      $194 = $193;
     } else {
      $191 = HEAP32[$6>>2]|0;
      $194 = $191;
     }
     $195 = ($194>>>0)>(1);
     $__psn$__trailing_sign$0 = $195 ? $__psn : $__trailing_sign$0247;
     $732 = $731;$733 = $728;$__trailing_sign$1 = $__psn$__trailing_sign$0;
    }
    break;
   }
   default: {
    $732 = $731;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
   }
   }
  } while(0);
  L328: do {
   if ((label|0) == 29) {
    label = 0;
    $75 = ($__p$0245|0)==(3);
    if ($75) {
     $720 = $728;$730 = $731;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
     label = 268;
     break L1;
    } else {
     $$pre$i3$i$i47 = $731;$89 = $731;
    }
    while(1) {
     $76 = HEAP32[$__b>>2]|0;
     $77 = ($76|0)==(0|0);
     do {
      if ($77) {
       $102 = 1;
      } else {
       $78 = (($76) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (($76) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($79|0)==($81|0);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = (($83) + 36|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = (FUNCTION_TABLE_ii[$85 & 127]($76)|0);
        $$0$i$i$i$i39 = $86;
       } else {
        $87 = HEAP32[$79>>2]|0;
        $$0$i$i$i$i39 = $87;
       }
       $88 = ($$0$i$i$i$i39|0)==(-1);
       if ($88) {
        HEAP32[$__b>>2] = 0;
        $102 = 1;
        break;
       } else {
        $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
        $102 = $phitmp$i$i$i42;
        break;
       }
      }
     } while(0);
     $90 = ($89|0)==(0|0);
     do {
      if ($90) {
       $$pre$i3$i$i47255 = $$pre$i3$i$i47;
       label = 43;
      } else {
       $91 = (($89) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($89) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$89>>2]|0;
        $97 = (($96) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (FUNCTION_TABLE_ii[$98 & 127]($89)|0);
        $$0$i$i1$i$i45 = $99;
       } else {
        $100 = HEAP32[$92>>2]|0;
        $$0$i$i1$i$i45 = $100;
       }
       $101 = ($$0$i$i1$i$i45|0)==(-1);
       if ($101) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i47255 = 0;
        label = 43;
        break;
       } else {
        $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
        $tmp$i$i50 = $102 ^ $phitmp$i4$i$i48;
        if ($tmp$i$i50) {
         $$pre$i3$i$i47257 = $$pre$i3$i$i47;$734 = $$pre$i3$i$i47;
         break;
        } else {
         $732 = $$pre$i3$i$i47;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
         break L328;
        }
       }
      }
     } while(0);
     if ((label|0) == 43) {
      label = 0;
      if ($102) {
       $732 = $$pre$i3$i$i47255;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
       break L328;
      } else {
       $$pre$i3$i$i47257 = $$pre$i3$i$i47255;$734 = 0;
      }
     }
     $103 = HEAP32[$__b>>2]|0;
     $104 = (($103) + 12|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($103) + 16|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($105|0)==($107|0);
     if ($108) {
      $109 = HEAP32[$103>>2]|0;
      $110 = (($109) + 36|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (FUNCTION_TABLE_ii[$111 & 127]($103)|0);
      $$0$i$i54 = $112;
     } else {
      $113 = HEAP32[$105>>2]|0;
      $$0$i$i54 = $113;
     }
     $114 = HEAP32[$__ct>>2]|0;
     $115 = (($114) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (FUNCTION_TABLE_iiii[$116 & 63]($__ct,8192,$$0$i$i54)|0);
     if (!($117)) {
      $732 = $$pre$i3$i$i47257;$733 = $728;$__trailing_sign$1 = $__trailing_sign$0247;
      break L328;
     }
     $118 = HEAP32[$__b>>2]|0;
     $119 = (($118) + 12|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($118) + 16|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($120|0)==($122|0);
     if ($123) {
      $124 = HEAP32[$118>>2]|0;
      $125 = (($124) + 40|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (FUNCTION_TABLE_ii[$126 & 127]($118)|0);
      $$0$i$i59 = $127;
     } else {
      $128 = (($120) + 4|0);
      HEAP32[$119>>2] = $128;
      $129 = HEAP32[$120>>2]|0;
      $$0$i$i59 = $129;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$$0$i$i59);
     $$pre$i3$i$i47 = $$pre$i3$i$i47257;$89 = $734;
    }
   }
  } while(0);
  $646 = (($__p$0245) + 1)|0;
  $647 = ($646>>>0)<(4);
  if ($647) {
   $728 = $733;$__p$0245 = $646;$__trailing_sign$0247 = $__trailing_sign$1;
  } else {
   $720 = $733;$730 = $732;$__trailing_sign$0$lcssa = $__trailing_sign$1;
   label = 268;
   break;
  }
 }
 L364: do {
  if ((label|0) == 28) {
   $73 = HEAP32[$__err>>2]|0;
   $74 = $73 | 4;
   HEAP32[$__err>>2] = $74;
   $$0 = 0;
  }
  else if ((label|0) == 117) {
   $289 = HEAP32[$__err>>2]|0;
   $290 = $289 | 4;
   HEAP32[$__err>>2] = $290;
   $$0 = 0;
  }
  else if ((label|0) == 175) {
   $436 = HEAP32[$__err>>2]|0;
   $437 = $436 | 4;
   HEAP32[$__err>>2] = $437;
   $$0 = 0;
  }
  else if ((label|0) == 232) {
   $556 = HEAP32[$__err>>2]|0;
   $557 = $556 | 4;
   HEAP32[$__err>>2] = $557;
   $$0 = 0;
  }
  else if ((label|0) == 255) {
   $610 = HEAP32[$__err>>2]|0;
   $611 = $610 | 4;
   HEAP32[$__err>>2] = $611;
   $$0 = 0;
  }
  else if ((label|0) == 266) {
   $644 = HEAP32[$__err>>2]|0;
   $645 = $644 | 4;
   HEAP32[$__err>>2] = $645;
   $$0 = 0;
  }
  else if ((label|0) == 268) {
   $648 = ($__trailing_sign$0$lcssa|0)==(0|0);
   L372: do {
    if (!($648)) {
     $649 = (($__trailing_sign$0$lcssa) + 4|0);
     $650 = (($__trailing_sign$0$lcssa) + 8|0);
     $$pre$i3$i$i = $730;$672 = $730;$__i$0 = 1;
     L374: while(1) {
      $651 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $652 = $651 & 1;
      $653 = ($652<<24>>24)==(0);
      if ($653) {
       $655 = $651&255;
       $656 = $655 >>> 1;
       $658 = $656;
      } else {
       $654 = HEAP32[$649>>2]|0;
       $658 = $654;
      }
      $657 = ($__i$0>>>0)<($658>>>0);
      if (!($657)) {
       break L372;
      }
      $659 = HEAP32[$__b>>2]|0;
      $660 = ($659|0)==(0|0);
      do {
       if ($660) {
        $685 = 1;
       } else {
        $661 = (($659) + 12|0);
        $662 = HEAP32[$661>>2]|0;
        $663 = (($659) + 16|0);
        $664 = HEAP32[$663>>2]|0;
        $665 = ($662|0)==($664|0);
        if ($665) {
         $666 = HEAP32[$659>>2]|0;
         $667 = (($666) + 36|0);
         $668 = HEAP32[$667>>2]|0;
         $669 = (FUNCTION_TABLE_ii[$668 & 127]($659)|0);
         $$0$i$i$i$i = $669;
        } else {
         $670 = HEAP32[$662>>2]|0;
         $$0$i$i$i$i = $670;
        }
        $671 = ($$0$i$i$i$i|0)==(-1);
        if ($671) {
         HEAP32[$__b>>2] = 0;
         $685 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $685 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $673 = ($672|0)==(0|0);
      do {
       if ($673) {
        $$pre$i3$i$i264$ph = $$pre$i3$i$i;
        label = 287;
       } else {
        $674 = (($672) + 12|0);
        $675 = HEAP32[$674>>2]|0;
        $676 = (($672) + 16|0);
        $677 = HEAP32[$676>>2]|0;
        $678 = ($675|0)==($677|0);
        if ($678) {
         $679 = HEAP32[$672>>2]|0;
         $680 = (($679) + 36|0);
         $681 = HEAP32[$680>>2]|0;
         $682 = (FUNCTION_TABLE_ii[$681 & 127]($672)|0);
         $$0$i$i1$i$i = $682;
        } else {
         $683 = HEAP32[$675>>2]|0;
         $$0$i$i1$i$i = $683;
        }
        $684 = ($$0$i$i1$i$i|0)==(-1);
        if ($684) {
         HEAP32[$__e>>2] = 0;
         $$pre$i3$i$i264$ph = 0;
         label = 287;
         break;
        } else {
         $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
         $tmp$i$i = $685 ^ $phitmp$i4$i$i;
         if ($tmp$i$i) {
          $$pre$i3$i$i264291 = $$pre$i3$i$i;$746 = $$pre$i3$i$i;
          break;
         } else {
          break L374;
         }
        }
       }
      } while(0);
      if ((label|0) == 287) {
       label = 0;
       if ($685) {
        break;
       } else {
        $$pre$i3$i$i264291 = $$pre$i3$i$i264$ph;$746 = 0;
       }
      }
      $686 = HEAP32[$__b>>2]|0;
      $687 = (($686) + 12|0);
      $688 = HEAP32[$687>>2]|0;
      $689 = (($686) + 16|0);
      $690 = HEAP32[$689>>2]|0;
      $691 = ($688|0)==($690|0);
      if ($691) {
       $692 = HEAP32[$686>>2]|0;
       $693 = (($692) + 36|0);
       $694 = HEAP32[$693>>2]|0;
       $695 = (FUNCTION_TABLE_ii[$694 & 127]($686)|0);
       $$0$i$i = $695;
      } else {
       $696 = HEAP32[$688>>2]|0;
       $$0$i$i = $696;
      }
      $697 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $698 = $697 & 1;
      $699 = ($698<<24>>24)==(0);
      if ($699) {
       $702 = $649;
      } else {
       $700 = HEAP32[$650>>2]|0;
       $702 = $700;
      }
      $701 = (($702) + ($__i$0<<2)|0);
      $703 = HEAP32[$701>>2]|0;
      $704 = ($$0$i$i|0)==($703|0);
      if (!($704)) {
       break;
      }
      $707 = (($__i$0) + 1)|0;
      $708 = HEAP32[$__b>>2]|0;
      $709 = (($708) + 12|0);
      $710 = HEAP32[$709>>2]|0;
      $711 = (($708) + 16|0);
      $712 = HEAP32[$711>>2]|0;
      $713 = ($710|0)==($712|0);
      if ($713) {
       $714 = HEAP32[$708>>2]|0;
       $715 = (($714) + 40|0);
       $716 = HEAP32[$715>>2]|0;
       (FUNCTION_TABLE_ii[$716 & 127]($708)|0);
       $$pre$i3$i$i = $$pre$i3$i$i264291;$672 = $746;$__i$0 = $707;
       continue;
      } else {
       $717 = (($710) + 4|0);
       HEAP32[$709>>2] = $717;
       $$pre$i3$i$i = $$pre$i3$i$i264291;$672 = $746;$__i$0 = $707;
       continue;
      }
     }
     $705 = HEAP32[$__err>>2]|0;
     $706 = $705 | 4;
     HEAP32[$__err>>2] = $706;
     $$0 = 0;
     break L364;
    }
   } while(0);
   $718 = HEAP32[$__gb>>2]|0;
   $719 = ($718|0)==($720|0);
   if ($719) {
    $$0 = 1;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$718,$720,$__et);
    $721 = HEAP32[$__et>>2]|0;
    $722 = ($721|0)==(0);
    if ($722) {
     $$0 = 1;
    } else {
     $723 = HEAP32[$__err>>2]|0;
     $724 = $723 | 4;
     HEAP32[$__err>>2] = $724;
     $$0 = 0;
    }
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $725 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $726 = ($725|0)==(0|0);
 if ($726) {
  STACKTOP = sp;return ($$0|0);
 }
 $727 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$727 & 511]($725);
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 244;
 $2 = (($__wbuf) + 400|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 if ($7) {
  $8 = HEAP8[$__v>>0]|0;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $14 = (($__v) + 4|0);
   HEAP32[$14>>2] = 0;
   HEAP8[$__v>>0] = 0;
  } else {
   $11 = (($__v) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$12>>2] = 0;
   $13 = (($__v) + 4|0);
   HEAP32[$13>>2] = 0;
  }
  $15 = HEAP8[$__neg>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if (!($16)) {
   $17 = HEAP32[$3>>2]|0;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iii[$19 & 31]($3,45)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$20);
  }
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 31]($3,48)|0);
  $25 = HEAP32[$__wb>>2]|0;
  $26 = HEAP32[$__wn>>2]|0;
  $27 = (($26) + -4|0);
  $28 = ($25>>>0)<($27>>>0);
  L10: do {
   if ($28) {
    $__w$05 = $25;
    while(1) {
     $31 = HEAP32[$__w$05>>2]|0;
     $32 = ($31|0)==($24|0);
     $29 = (($__w$05) + 4|0);
     if (!($32)) {
      $__w$0$lcssa = $__w$05;
      break L10;
     }
     $30 = ($29>>>0)<($27>>>0);
     if ($30) {
      $__w$05 = $29;
     } else {
      $__w$0$lcssa = $29;
      break;
     }
    }
   } else {
    $__w$0$lcssa = $25;
   }
  } while(0);
  (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w$0$lcssa,$26)|0);
 }
 $33 = HEAP32[$__b>>2]|0;
 $34 = ($33|0)==(0|0);
 do {
  if ($34) {
   $65 = 1;
  } else {
   $35 = (($33) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($33) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$33>>2]|0;
    $41 = (($40) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_ii[$42 & 127]($33)|0);
    $$0$i$i$i$i = $43;
   } else {
    $44 = HEAP32[$36>>2]|0;
    $$0$i$i$i$i = $44;
   }
   $45 = ($$0$i$i$i$i|0)==(-1);
   if ($45) {
    HEAP32[$__b>>2] = 0;
    $65 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $65 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $46 = ($4|0)==(0|0);
 do {
  if ($46) {
   label = 24;
  } else {
   $47 = (($4) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($4) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $52 = HEAP32[$4>>2]|0;
    $53 = (($52) + 36|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (FUNCTION_TABLE_ii[$54 & 127]($4)|0);
    $$0$i$i1$i$i = $55;
   } else {
    $56 = HEAP32[$48>>2]|0;
    $$0$i$i1$i$i = $56;
   }
   $57 = ($$0$i$i1$i$i|0)==(-1);
   if ($57) {
    HEAP32[$__e>>2] = 0;
    label = 24;
    break;
   } else {
    if ($65) {
     break;
    } else {
     label = 26;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 24) {
  if ($65) {
   label = 26;
  }
 }
 if ((label|0) == 26) {
  $58 = HEAP32[$__err>>2]|0;
  $59 = $58 | 2;
  HEAP32[$__err>>2] = $59;
 }
 $60 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $60;
 $61 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($61)|0);
 $62 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $63 = ($62|0)==(0|0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$64 & 511]($62);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = $5;$17 = 1;$45 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $7;$17 = $phitmp$i;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($17) - ($16))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($16) + ($13))|0;
  $20 = (($19) - ($17))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$17,$20,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $22 = $$pre;
 } else {
  $22 = $45;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($16<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = (0 - ($0))|0;
  $uglygep = (($scevgep) + ($30)|0);
  $uglygep4 = $uglygep;
  $31 = $uglygep4 >>> 2;
  $32 = (($16) + ($31))|0;
  $33 = (($32) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $34 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $34;
   $35 = (($__p$02) + 4|0);
   $36 = (($$01) + 4|0);
   $37 = ($36|0)==($__last|0);
   if ($37) {
    break;
   } else {
    $$01 = $36;$__p$02 = $35;
   }
  }
  $scevgep5 = (($28) + ($33<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $38 = (($16) + ($13))|0;
 $39 = HEAP8[$this>>0]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$this>>0] = $44;
  STACKTOP = sp;return ($this|0);
 } else {
  $42 = (($this) + 4|0);
  HEAP32[$42>>2] = $38;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409144)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 63]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 63]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 4|0);
   HEAP32[$24>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $25 = HEAP32[$10>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 63]($2,$10);
  $28 = HEAP8[$__psn>>0]|0;
  $29 = $28 & 1;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $34 = (($__psn) + 4|0);
   HEAP32[$34>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $31 = (($__psn) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   HEAP32[$32>>2] = 0;
   $33 = (($__psn) + 4|0);
   HEAP32[$33>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $35 = HEAP32[$10>>2]|0;
  $36 = (($35) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_ii[$37 & 127]($10)|0);
  HEAP32[$__dp>>2] = $38;
  $39 = HEAP32[$10>>2]|0;
  $40 = (($39) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_ii[$41 & 127]($10)|0);
  HEAP32[$__ts>>2] = $42;
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 63]($3,$10);
  $46 = HEAP8[$__grp>>0]|0;
  $47 = $46 & 1;
  $48 = ($47<<24>>24)==(0);
  if ($48) {
   $52 = (($__grp) + 1|0);
   HEAP8[$52>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $49 = (($__grp) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   HEAP8[$50>>0] = 0;
   $51 = (($__grp) + 4|0);
   HEAP32[$51>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $53 = HEAP32[$10>>2]|0;
  $54 = (($53) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vii[$55 & 63]($4,$10);
  $56 = HEAP8[$__sym>>0]|0;
  $57 = $56 & 1;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $62 = (($__sym) + 4|0);
   HEAP32[$62>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $59 = (($__sym) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$60>>2] = 0;
   $61 = (($__sym) + 4|0);
   HEAP32[$61>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $63 = HEAP32[$10>>2]|0;
  $64 = (($63) + 36|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (FUNCTION_TABLE_ii[$65 & 127]($10)|0);
  $storemerge = $66;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $67 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409080)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 44|0);
  $70 = HEAP32[$69>>2]|0;
  FUNCTION_TABLE_vii[$70 & 63]($5,$67);
  $71 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$71&255;HEAP8[$__pat+1>>0]=($71>>8)&255;HEAP8[$__pat+2>>0]=($71>>16)&255;HEAP8[$__pat+3>>0]=$71>>24;
  $72 = HEAP32[$67>>2]|0;
  $73 = (($72) + 32|0);
  $74 = HEAP32[$73>>2]|0;
  FUNCTION_TABLE_vii[$74 & 63]($6,$67);
  $75 = HEAP8[$__nsn>>0]|0;
  $76 = $75 & 1;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $81 = (($__nsn) + 4|0);
   HEAP32[$81>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $78 = (($__nsn) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   HEAP32[$79>>2] = 0;
   $80 = (($__nsn) + 4|0);
   HEAP32[$80>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $82 = HEAP32[$67>>2]|0;
  $83 = (($82) + 28|0);
  $84 = HEAP32[$83>>2]|0;
  FUNCTION_TABLE_vii[$84 & 63]($7,$67);
  $85 = HEAP8[$__psn>>0]|0;
  $86 = $85 & 1;
  $87 = ($86<<24>>24)==(0);
  if ($87) {
   $91 = (($__psn) + 4|0);
   HEAP32[$91>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $88 = (($__psn) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   HEAP32[$89>>2] = 0;
   $90 = (($__psn) + 4|0);
   HEAP32[$90>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $92 = HEAP32[$67>>2]|0;
  $93 = (($92) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 127]($67)|0);
  HEAP32[$__dp>>2] = $95;
  $96 = HEAP32[$67>>2]|0;
  $97 = (($96) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (FUNCTION_TABLE_ii[$98 & 127]($67)|0);
  HEAP32[$__ts>>2] = $99;
  $100 = HEAP32[$67>>2]|0;
  $101 = (($100) + 20|0);
  $102 = HEAP32[$101>>2]|0;
  FUNCTION_TABLE_vii[$102 & 63]($8,$67);
  $103 = HEAP8[$__grp>>0]|0;
  $104 = $103 & 1;
  $105 = ($104<<24>>24)==(0);
  if ($105) {
   $109 = (($__grp) + 1|0);
   HEAP8[$109>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $106 = (($__grp) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   HEAP8[$107>>0] = 0;
   $108 = (($__grp) + 4|0);
   HEAP32[$108>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $110 = HEAP32[$67>>2]|0;
  $111 = (($110) + 24|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vii[$112 & 63]($9,$67);
  $113 = HEAP8[$__sym>>0]|0;
  $114 = $113 & 1;
  $115 = ($114<<24>>24)==(0);
  if ($115) {
   $119 = (($__sym) + 4|0);
   HEAP32[$119>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $116 = (($__sym) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   HEAP32[$117>>2] = 0;
   $118 = (($__sym) + 4|0);
   HEAP32[$118>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $120 = HEAP32[$67>>2]|0;
  $121 = (($120) + 36|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 127]($67)|0);
  $storemerge = $123;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(244|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($2) {
  HEAP32[$__b>>2] = $15;
  $21 = $15;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  HEAP32[$__b>>2] = $15;
  $17 = ($$pr|0)==(0|0);
  if ($17) {
   $21 = $15;
  } else {
   $18 = HEAP32[$0>>2]|0;
   FUNCTION_TABLE_vi[$18 & 511]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $21 = $$pre;
  }
 }
 HEAP32[$0>>2] = 245;
 $19 = $$ >>> 2;
 $20 = (($21) + ($13<<2)|0);
 HEAP32[$__n>>2] = $20;
 $22 = HEAP32[$__b>>2]|0;
 $23 = (($22) + ($19<<2)|0);
 HEAP32[$__e>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__bb = 0;
 var $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $$byval_copy = sp;
 $__buf = sp + 276|0;
 $__bb = sp + 68|0;
 $__digits = sp + 176|0;
 $__loc = sp + 64|0;
 $__pat = sp + 60|0;
 $__dp = sp + 173|0;
 $__ts = sp + 172|0;
 $__grp = sp + 48|0;
 $__sym = sp + 36|0;
 $__sn = sp + 24|0;
 $__fd = sp + 20|0;
 $__mbuf = sp + 72|0;
 $__mi = sp + 16|0;
 $__me = sp + 12|0;
 $0 = sp + 8|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,409328,$$byval_copy)|0);
 $2 = ($1>>>0)>(99);
 if ($2) {
  $3 = (__ZNSt3__16__clocEv()|0);
  HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $4 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$3,409328,$$byval_copy)|0);
  $5 = HEAP32[$__bb>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $7 = (_malloc($4)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $75 = $7;$76 = $5;$__db$0 = $7;$__n$0 = $4;
  }
 } else {
  $75 = 0;$76 = 0;$__db$0 = $__digits;$__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $9 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 $10 = HEAP32[$__bb>>2]|0;
 $11 = (($10) + ($__n$0)|0);
 $12 = HEAP32[$9>>2]|0;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_iiiii[$14 & 15]($9,$10,$11,$__db$0)|0);
 $15 = ($__n$0|0)==(0);
 if ($15) {
  $19 = 0;
 } else {
  $16 = HEAP32[$__bb>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(45);
  $19 = $18;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$19,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $20 = HEAP32[$__fd>>2]|0;
 $21 = ($__n$0|0)>($20|0);
 if ($21) {
  $22 = (($__n$0) - ($20))|0;
  $23 = $22 << 1;
  $24 = HEAP8[$__sn>>0]|0;
  $25 = $24 & 1;
  $26 = ($25<<24>>24)==(0);
  if ($26) {
   $29 = $24&255;
   $30 = $29 >>> 1;
   $40 = $30;
  } else {
   $27 = (($__sn) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $40 = $28;
  }
  $31 = HEAP8[$__sym>>0]|0;
  $32 = $31 & 1;
  $33 = ($32<<24>>24)==(0);
  if ($33) {
   $36 = $31&255;
   $37 = $36 >>> 1;
   $42 = $37;
  } else {
   $34 = (($__sym) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $42 = $35;
  }
  $38 = $23 | 1;
  $39 = (($40) + ($38))|0;
  $41 = (($39) + ($42))|0;
  $$pn = $41;
 } else {
  $43 = HEAP8[$__sn>>0]|0;
  $44 = $43 & 1;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   $48 = $43&255;
   $49 = $48 >>> 1;
   $58 = $49;
  } else {
   $46 = (($__sn) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $58 = $47;
  }
  $50 = HEAP8[$__sym>>0]|0;
  $51 = $50 & 1;
  $52 = ($51<<24>>24)==(0);
  if ($52) {
   $55 = $50&255;
   $56 = $55 >>> 1;
   $60 = $56;
  } else {
   $53 = (($__sym) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $60 = $54;
  }
  $57 = (($58) + 2)|0;
  $59 = (($57) + ($60))|0;
  $$pn = $59;
 }
 $61 = (($$pn) + ($20))|0;
 $62 = ($61>>>0)>(100);
 if ($62) {
  $63 = (_malloc($61)|0);
  $64 = ($63|0)==(0|0);
  if ($64) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $73 = $63;$__mb$0 = $63;
  }
 } else {
  $73 = 0;$__mb$0 = $__mbuf;
 }
 $65 = (($__iob) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($__db$0) + ($__n$0)|0);
 $68 = HEAP8[$__dp>>0]|0;
 $69 = HEAP8[$__ts>>0]|0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$66,$__db$0,$67,$9,$19,$__pat,$68,$69,$__grp,$__sym,$__sn,$20);
 $70 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $70;
 $71 = HEAP32[$__mi>>2]|0;
 $72 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$71,$72,$__iob,$__fl);
 _free($73);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $74 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($74)|0);
 _free($75);
 _free($76);
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409016)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = (($13) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 63]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 63]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $26 = (($__sn) + 1|0);
    HEAP8[$26>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = (($__sn) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP8[$24>>0] = 0;
    $25 = (($__sn) + 4|0);
    HEAP32[$25>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  } else {
   $27 = (($13) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_vii[$28 & 63]($2,$12);
   $29 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$29&255;HEAP8[$__pat+1>>0]=($29>>8)&255;HEAP8[$__pat+2>>0]=($29>>16)&255;HEAP8[$__pat+3>>0]=$29>>24;
   $30 = HEAP32[$12>>2]|0;
   $31 = (($30) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vii[$32 & 63]($3,$12);
   $33 = HEAP8[$__sn>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $39 = (($__sn) + 1|0);
    HEAP8[$39>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $36 = (($__sn) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    HEAP8[$37>>0] = 0;
    $38 = (($__sn) + 4|0);
    HEAP32[$38>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  }
  $40 = HEAP32[$12>>2]|0;
  $41 = (($40) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_ii[$42 & 127]($12)|0);
  HEAP8[$__dp>>0] = $43;
  $44 = HEAP32[$12>>2]|0;
  $45 = (($44) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_ii[$46 & 127]($12)|0);
  HEAP8[$__ts>>0] = $47;
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 63]($4,$12);
  $51 = HEAP8[$__grp>>0]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__grp) + 1|0);
   HEAP8[$57>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $54 = (($__grp) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP8[$55>>0] = 0;
   $56 = (($__grp) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $58 = HEAP32[$12>>2]|0;
  $59 = (($58) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 63]($5,$12);
  $61 = HEAP8[$__sym>>0]|0;
  $62 = $61 & 1;
  $63 = ($62<<24>>24)==(0);
  if ($63) {
   $67 = (($__sym) + 1|0);
   HEAP8[$67>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $64 = (($__sym) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   HEAP8[$65>>0] = 0;
   $66 = (($__sym) + 4|0);
   HEAP32[$66>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $68 = HEAP32[$12>>2]|0;
  $69 = (($68) + 36|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (FUNCTION_TABLE_ii[$70 & 127]($12)|0);
  $storemerge = $71;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $72 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,408952)|0);
  $73 = HEAP32[$72>>2]|0;
  if ($__neg) {
   $74 = (($73) + 44|0);
   $75 = HEAP32[$74>>2]|0;
   FUNCTION_TABLE_vii[$75 & 63]($6,$72);
   $76 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$76&255;HEAP8[$__pat+1>>0]=($76>>8)&255;HEAP8[$__pat+2>>0]=($76>>16)&255;HEAP8[$__pat+3>>0]=$76>>24;
   $77 = HEAP32[$72>>2]|0;
   $78 = (($77) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   FUNCTION_TABLE_vii[$79 & 63]($7,$72);
   $80 = HEAP8[$__sn>>0]|0;
   $81 = $80 & 1;
   $82 = ($81<<24>>24)==(0);
   if ($82) {
    $86 = (($__sn) + 1|0);
    HEAP8[$86>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $83 = (($__sn) + 8|0);
    $84 = HEAP32[$83>>2]|0;
    HEAP8[$84>>0] = 0;
    $85 = (($__sn) + 4|0);
    HEAP32[$85>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  } else {
   $87 = (($73) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   FUNCTION_TABLE_vii[$88 & 63]($8,$72);
   $89 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$89&255;HEAP8[$__pat+1>>0]=($89>>8)&255;HEAP8[$__pat+2>>0]=($89>>16)&255;HEAP8[$__pat+3>>0]=$89>>24;
   $90 = HEAP32[$72>>2]|0;
   $91 = (($90) + 28|0);
   $92 = HEAP32[$91>>2]|0;
   FUNCTION_TABLE_vii[$92 & 63]($9,$72);
   $93 = HEAP8[$__sn>>0]|0;
   $94 = $93 & 1;
   $95 = ($94<<24>>24)==(0);
   if ($95) {
    $99 = (($__sn) + 1|0);
    HEAP8[$99>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $96 = (($__sn) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    HEAP8[$97>>0] = 0;
    $98 = (($__sn) + 4|0);
    HEAP32[$98>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  }
  $100 = HEAP32[$72>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_ii[$102 & 127]($72)|0);
  HEAP8[$__dp>>0] = $103;
  $104 = HEAP32[$72>>2]|0;
  $105 = (($104) + 16|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_ii[$106 & 127]($72)|0);
  HEAP8[$__ts>>0] = $107;
  $108 = HEAP32[$72>>2]|0;
  $109 = (($108) + 20|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 63]($10,$72);
  $111 = HEAP8[$__grp>>0]|0;
  $112 = $111 & 1;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   $117 = (($__grp) + 1|0);
   HEAP8[$117>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $114 = (($__grp) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP8[$115>>0] = 0;
   $116 = (($__grp) + 4|0);
   HEAP32[$116>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $118 = HEAP32[$72>>2]|0;
  $119 = (($118) + 24|0);
  $120 = HEAP32[$119>>2]|0;
  FUNCTION_TABLE_vii[$120 & 63]($11,$72);
  $121 = HEAP8[$__sym>>0]|0;
  $122 = $121 & 1;
  $123 = ($122<<24>>24)==(0);
  if ($123) {
   $127 = (($__sym) + 1|0);
   HEAP8[$127>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $124 = (($__sym) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   HEAP8[$125>>0] = 0;
   $126 = (($__sym) + 4|0);
   HEAP32[$126>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $128 = HEAP32[$72>>2]|0;
  $129 = (($128) + 36|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 127]($72)|0);
  $storemerge = $131;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$139 = 0;
 var $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$050) + 1|0);
   $$$0 = $__neg ? $61 : $$050;
   $62 = ($$$0>>>0)<($__de>>>0);
   L5: do {
    if ($62) {
     $__d$029 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$029>>0]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L5;
      }
      $66 = $65 << 24 >> 24;
      $67 = HEAP32[$12>>2]|0;
      $68 = (($67) + ($66<<1)|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 & 2048;
      $71 = ($70<<16>>16)==(0);
      $63 = (($__d$029) + 1|0);
      if ($71) {
       $__d$0$lcssa = $__d$029;
       break L5;
      }
      $64 = ($63>>>0)<($__de>>>0);
      if ($64) {
       $__d$029 = $63;
      } else {
       $__d$0$lcssa = $63;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $72 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($72) {
     $73 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($73)|0);
     $scevgep59 = $scevgep;
     $74 = ($scevgep59>>>0)<($13>>>0);
     $umax = $74 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $78 = $60;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $75 = (($__d$132) + -1|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($78) + 1|0);
      HEAP32[$__me>>2] = $77;
      HEAP8[$78>>0] = $76;
      $79 = (($__f$033) + -1)|0;
      $80 = ($75>>>0)>($$$0>>>0);
      $81 = ($79|0)>(0);
      $or$cond = $80 & $81;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $78 = $$pre;$__d$132 = $75;$__f$033 = $79;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($81) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $89 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 31]($__ct,48)|0);
     $89 = $85;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $86 = ($__f$0$lcssa71|0)>(0);
    $87 = HEAP32[$__me>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$__me>>2] = $88;
    if ($86) {
     $90 = $87;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$90>>0] = $89;
      $91 = (($__f$139) + -1)|0;
      $92 = ($91|0)>(0);
      $93 = HEAP32[$__me>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$__me>>2] = $94;
      if ($92) {
       $90 = $93;$__f$139 = $91;
      } else {
       $$lcssa38 = $93;
       break;
      }
     }
    } else {
     $$lcssa38 = $87;
    }
    HEAP8[$$lcssa38>>0] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $95 = ($__d$2|0)==($$$0|0);
   if ($95) {
    $96 = HEAP32[$__ct>>2]|0;
    $97 = (($96) + 28|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (FUNCTION_TABLE_iii[$98 & 31]($__ct,48)|0);
    $100 = HEAP32[$__me>>2]|0;
    $101 = (($100) + 1|0);
    HEAP32[$__me>>2] = $101;
    HEAP8[$100>>0] = $99;
   } else {
    $102 = HEAP8[$__grp>>0]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if ($104) {
     $106 = $102&255;
     $107 = $106 >>> 1;
     $108 = $107;
    } else {
     $105 = HEAP32[$11>>2]|0;
     $108 = $105;
    }
    $109 = ($108|0)==(0);
    if ($109) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($104) {
      $112 = $9;
     } else {
      $110 = HEAP32[$10>>2]|0;
      $112 = $110;
     }
     $111 = HEAP8[$112>>0]|0;
     $113 = $111 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $113;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $114 = ($__ng$044|0)==($__gl$046|0);
     if ($114) {
      $115 = HEAP32[$__me>>2]|0;
      $116 = (($115) + 1|0);
      HEAP32[$__me>>2] = $116;
      HEAP8[$115>>0] = $__ts;
      $117 = (($__ig$045) + 1)|0;
      $118 = HEAP8[$__grp>>0]|0;
      $119 = $118 & 1;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $122 = $118&255;
       $123 = $122 >>> 1;
       $125 = $123;
      } else {
       $121 = HEAP32[$11>>2]|0;
       $125 = $121;
      }
      $124 = ($117>>>0)<($125>>>0);
      if ($124) {
       if ($120) {
        $128 = $9;
       } else {
        $126 = HEAP32[$10>>2]|0;
        $128 = $126;
       }
       $127 = (($128) + ($117)|0);
       $129 = HEAP8[$127>>0]|0;
       $130 = ($129<<24>>24)==(127);
       if ($130) {
        $__gl$1 = -1;$__ig$1 = $117;$__ng$1 = 0;
       } else {
        if ($120) {
         $133 = $9;
        } else {
         $131 = HEAP32[$10>>2]|0;
         $133 = $131;
        }
        $132 = (($133) + ($117)|0);
        $134 = HEAP8[$132>>0]|0;
        $135 = $134 << 24 >> 24;
        $__gl$1 = $135;$__ig$1 = $117;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $117;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $136 = (($__d$343) + -1|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = HEAP32[$__me>>2]|0;
     $139 = (($138) + 1|0);
     HEAP32[$__me>>2] = $139;
     HEAP8[$138>>0] = $137;
     $140 = (($__ng$1) + 1)|0;
     $141 = ($136|0)==($$$0|0);
     if ($141) {
      break;
     } else {
      $__d$343 = $136;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $140;
     }
    }
   }
   $142 = HEAP32[$__me>>2]|0;
   $143 = ($60|0)==($142|0);
   if ($143) {
    $$2 = $$$0;
   } else {
    $144 = (($142) + -1|0);
    $145 = ($144>>>0)>($60>>>0);
    if ($145) {
     $$012$i$i = $60;$148 = $144;
     while(1) {
      $146 = HEAP8[$$012$i$i>>0]|0;
      $147 = HEAP8[$148>>0]|0;
      HEAP8[$$012$i$i>>0] = $147;
      HEAP8[$148>>0] = $146;
      $149 = (($$012$i$i) + 1|0);
      $150 = (($148) + -1|0);
      $151 = ($149>>>0)<($150>>>0);
      if ($151) {
       $$012$i$i = $149;$148 = $150;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $44 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $44 = $41;
   }
   $45 = ($44|0)==(0);
   $brmerge = $45 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($51|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$56 = $51;
     while(1) {
      $55 = HEAP8[$56>>0]|0;
      HEAP8[$$01$i$i15>>0] = $55;
      $57 = (($56) + 1|0);
      $58 = (($$01$i$i15) + 1|0);
      $59 = ($57|0)==($50|0);
      if ($59) {
       $$0$lcssa$i$i17 = $58;
       break;
      } else {
       $$01$i$i15 = $58;$56 = $57;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 31]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$050;
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $31 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $31 = $28;
   }
   $32 = ($31|0)==(0);
   if ($32) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$050;
   }
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $152 = (($__p$049) + 1)|0;
  $exitcond = ($152|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $152;
  }
 }
 $153 = HEAP8[$__sn>>0]|0;
 $154 = $153 & 1;
 $155 = ($154<<24>>24)==(0);
 if ($155) {
  $157 = $153&255;
  $158 = $157 >>> 1;
  $159 = $158;
 } else {
  $156 = HEAP32[$2>>2]|0;
  $159 = $156;
 }
 $160 = ($159>>>0)>(1);
 if ($160) {
  if ($155) {
   $163 = $153&255;
   $164 = $163 >>> 1;
   $$pn = $0;$167 = $164;
  } else {
   $161 = HEAP32[$1>>2]|0;
   $162 = HEAP32[$2>>2]|0;
   $$pn = $161;$167 = $162;
  }
  $165 = (($$pn) + 1|0);
  $166 = (($$pn) + ($167)|0);
  $168 = HEAP32[$__me>>2]|0;
  $169 = ($165|0)==($166|0);
  if ($169) {
   $$0$lcssa$i$i = $168;
  } else {
   $$01$i$i = $168;$171 = $165;
   while(1) {
    $170 = HEAP8[$171>>0]|0;
    HEAP8[$$01$i$i>>0] = $170;
    $172 = (($171) + 1|0);
    $173 = (($$01$i$i) + 1|0);
    $174 = ($172|0)==($166|0);
    if ($174) {
     $$0$lcssa$i$i = $173;
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $175 = $__flags & 176;
 if ((($175|0) == 32)) {
  $176 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $176;
  STACKTOP = sp;return;
 } else if ((($175|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 60|0;
 $__loc = sp + 56|0;
 $__pat = sp + 52|0;
 $__dp = sp + 165|0;
 $__ts = sp + 164|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 64|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409576)|0);
 $2 = HEAP8[$__digits>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  $9 = $8;
 } else {
  $5 = (($__digits) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = ($9|0)==(0);
 if ($10) {
  $21 = 0;
 } else {
  if ($4) {
   $13 = (($__digits) + 1|0);
   $15 = $13;
  } else {
   $11 = (($__digits) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;
  }
  $14 = HEAP8[$15>>0]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 31]($1,45)|0);
  $20 = ($14<<24>>24)==($19<<24>>24);
  $21 = $20;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$21,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $22 = HEAP8[$__digits>>0]|0;
 $23 = $22 & 1;
 $24 = ($23<<24>>24)==(0);
 if ($24) {
  $27 = $22&255;
  $28 = $27 >>> 1;
  $30 = $28;
 } else {
  $25 = (($__digits) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $30 = $26;
 }
 $29 = HEAP32[$__fd>>2]|0;
 $31 = ($30|0)>($29|0);
 if ($31) {
  if ($24) {
   $34 = $22&255;
   $35 = $34 >>> 1;
   $37 = $35;
  } else {
   $32 = (($__digits) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $37 = $33;
  }
  $36 = (($37) - ($29))|0;
  $38 = $36 << 1;
  $39 = HEAP8[$__sn>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $44 = $39&255;
   $45 = $44 >>> 1;
   $55 = $45;
  } else {
   $42 = (($__sn) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $55 = $43;
  }
  $46 = HEAP8[$__sym>>0]|0;
  $47 = $46 & 1;
  $48 = ($47<<24>>24)==(0);
  if ($48) {
   $51 = $46&255;
   $52 = $51 >>> 1;
   $57 = $52;
  } else {
   $49 = (($__sym) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $57 = $50;
  }
  $53 = $38 | 1;
  $54 = (($55) + ($53))|0;
  $56 = (($54) + ($57))|0;
  $$pn = $56;
 } else {
  $58 = HEAP8[$__sn>>0]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $63 = $58&255;
   $64 = $63 >>> 1;
   $73 = $64;
  } else {
   $61 = (($__sn) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $73 = $62;
  }
  $65 = HEAP8[$__sym>>0]|0;
  $66 = $65 & 1;
  $67 = ($66<<24>>24)==(0);
  if ($67) {
   $70 = $65&255;
   $71 = $70 >>> 1;
   $75 = $71;
  } else {
   $68 = (($__sym) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $75 = $69;
  }
  $72 = (($73) + 2)|0;
  $74 = (($72) + ($75))|0;
  $$pn = $74;
 }
 $76 = (($$pn) + ($29))|0;
 $77 = ($76>>>0)>(100);
 if ($77) {
  $78 = (_malloc($76)|0);
  $79 = ($78|0)==(0|0);
  if ($79) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $99 = $78;$__mb$0 = $78;
  }
 } else {
  $99 = 0;$__mb$0 = $__mbuf;
 }
 $80 = (($__iob) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $22 & 1;
 $83 = ($82<<24>>24)==(0);
 if ($83) {
  $88 = (($__digits) + 1|0);
  $89 = $22&255;
  $90 = $89 >>> 1;
  $92 = $88;$93 = $90;
 } else {
  $84 = (($__digits) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($__digits) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $92 = $85;$93 = $87;
 }
 $91 = (($92) + ($93)|0);
 $94 = HEAP8[$__dp>>0]|0;
 $95 = HEAP8[$__ts>>0]|0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$81,$92,$91,$1,$21,$__pat,$94,$95,$__grp,$__sym,$__sn,$29);
 $96 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $96;
 $97 = HEAP32[$__mi>>2]|0;
 $98 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$97,$98,$__iob,$__fl);
 _free($99);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $100 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0;
 $$byval_copy = sp;
 $__buf = sp + 884|0;
 $__bb = sp + 880|0;
 $__digits = sp + 480|0;
 $__loc = sp + 476|0;
 $__pat = sp + 472|0;
 $__dp = sp + 468|0;
 $__ts = sp + 464|0;
 $__grp = sp + 452|0;
 $__sym = sp + 440|0;
 $__sn = sp + 428|0;
 $__fd = sp + 424|0;
 $__mbuf = sp + 24|0;
 $__mi = sp + 16|0;
 $__me = sp + 12|0;
 $0 = sp + 8|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,409328,$$byval_copy)|0);
 $2 = ($1>>>0)>(99);
 if ($2) {
  $3 = (__ZNSt3__16__clocEv()|0);
  HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $4 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$3,409328,$$byval_copy)|0);
  $5 = HEAP32[$__bb>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $7 = $4 << 2;
  $8 = (_malloc($7)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $78 = $8;$80 = $5;$__db$0 = $8;$__n$0 = $4;
  }
 } else {
  $78 = 0;$80 = 0;$__db$0 = $__digits;$__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 $11 = HEAP32[$__bb>>2]|0;
 $12 = (($11) + ($__n$0)|0);
 $13 = HEAP32[$10>>2]|0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 (FUNCTION_TABLE_iiiii[$15 & 15]($10,$11,$12,$__db$0)|0);
 $16 = ($__n$0|0)==(0);
 if ($16) {
  $20 = 0;
 } else {
  $17 = HEAP32[$__bb>>2]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(45);
  $20 = $19;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$20,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $21 = HEAP32[$__fd>>2]|0;
 $22 = ($__n$0|0)>($21|0);
 if ($22) {
  $23 = (($__n$0) - ($21))|0;
  $24 = $23 << 1;
  $25 = HEAP8[$__sn>>0]|0;
  $26 = $25 & 1;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $30 = $25&255;
   $31 = $30 >>> 1;
   $41 = $31;
  } else {
   $28 = (($__sn) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $41 = $29;
  }
  $32 = HEAP8[$__sym>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $37 = $32&255;
   $38 = $37 >>> 1;
   $43 = $38;
  } else {
   $35 = (($__sym) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $43 = $36;
  }
  $39 = $24 | 1;
  $40 = (($41) + ($39))|0;
  $42 = (($40) + ($43))|0;
  $$pn = $42;
 } else {
  $44 = HEAP8[$__sn>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $49 = $44&255;
   $50 = $49 >>> 1;
   $59 = $50;
  } else {
   $47 = (($__sn) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $59 = $48;
  }
  $51 = HEAP8[$__sym>>0]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $56 = $51&255;
   $57 = $56 >>> 1;
   $61 = $57;
  } else {
   $54 = (($__sym) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $61 = $55;
  }
  $58 = (($59) + 2)|0;
  $60 = (($58) + ($61))|0;
  $$pn = $60;
 }
 $62 = (($$pn) + ($21))|0;
 $63 = ($62>>>0)>(100);
 if ($63) {
  $64 = $62 << 2;
  $65 = (_malloc($64)|0);
  $66 = ($65|0)==(0|0);
  if ($66) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $75 = $65;$__mb$0 = $65;
  }
 } else {
  $75 = 0;$__mb$0 = $__mbuf;
 }
 $67 = (($__iob) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($__db$0) + ($__n$0<<2)|0);
 $70 = HEAP32[$__dp>>2]|0;
 $71 = HEAP32[$__ts>>2]|0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$68,$__db$0,$69,$10,$20,$__pat,$70,$71,$__grp,$__sym,$__sn,$21);
 $72 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $72;
 $73 = HEAP32[$__mi>>2]|0;
 $74 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$73,$74,$__iob,$__fl);
 $76 = ($75|0)==(0|0);
 if (!($76)) {
  _free($75);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $77 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($77)|0);
 $79 = ($78|0)==(0|0);
 if ($79) {
  _free($80);
  STACKTOP = sp;return;
 }
 _free($78);
 _free($80);
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409144)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = (($13) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 63]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 63]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $26 = (($__sn) + 4|0);
    HEAP32[$26>>2] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = (($__sn) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$24>>2] = 0;
    $25 = (($__sn) + 4|0);
    HEAP32[$25>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  } else {
   $27 = (($13) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_vii[$28 & 63]($2,$12);
   $29 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$29&255;HEAP8[$__pat+1>>0]=($29>>8)&255;HEAP8[$__pat+2>>0]=($29>>16)&255;HEAP8[$__pat+3>>0]=$29>>24;
   $30 = HEAP32[$12>>2]|0;
   $31 = (($30) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vii[$32 & 63]($3,$12);
   $33 = HEAP8[$__sn>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $39 = (($__sn) + 4|0);
    HEAP32[$39>>2] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $36 = (($__sn) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    HEAP32[$37>>2] = 0;
    $38 = (($__sn) + 4|0);
    HEAP32[$38>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
  }
  $40 = HEAP32[$12>>2]|0;
  $41 = (($40) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_ii[$42 & 127]($12)|0);
  HEAP32[$__dp>>2] = $43;
  $44 = HEAP32[$12>>2]|0;
  $45 = (($44) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_ii[$46 & 127]($12)|0);
  HEAP32[$__ts>>2] = $47;
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 63]($4,$12);
  $51 = HEAP8[$__grp>>0]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__grp) + 1|0);
   HEAP8[$57>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $54 = (($__grp) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP8[$55>>0] = 0;
   $56 = (($__grp) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $58 = HEAP32[$12>>2]|0;
  $59 = (($58) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 63]($5,$12);
  $61 = HEAP8[$__sym>>0]|0;
  $62 = $61 & 1;
  $63 = ($62<<24>>24)==(0);
  if ($63) {
   $67 = (($__sym) + 4|0);
   HEAP32[$67>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $64 = (($__sym) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   HEAP32[$65>>2] = 0;
   $66 = (($__sym) + 4|0);
   HEAP32[$66>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $68 = HEAP32[$12>>2]|0;
  $69 = (($68) + 36|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (FUNCTION_TABLE_ii[$70 & 127]($12)|0);
  $storemerge = $71;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $72 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409080)|0);
  $73 = HEAP32[$72>>2]|0;
  if ($__neg) {
   $74 = (($73) + 44|0);
   $75 = HEAP32[$74>>2]|0;
   FUNCTION_TABLE_vii[$75 & 63]($6,$72);
   $76 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$76&255;HEAP8[$__pat+1>>0]=($76>>8)&255;HEAP8[$__pat+2>>0]=($76>>16)&255;HEAP8[$__pat+3>>0]=$76>>24;
   $77 = HEAP32[$72>>2]|0;
   $78 = (($77) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   FUNCTION_TABLE_vii[$79 & 63]($7,$72);
   $80 = HEAP8[$__sn>>0]|0;
   $81 = $80 & 1;
   $82 = ($81<<24>>24)==(0);
   if ($82) {
    $86 = (($__sn) + 4|0);
    HEAP32[$86>>2] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $83 = (($__sn) + 8|0);
    $84 = HEAP32[$83>>2]|0;
    HEAP32[$84>>2] = 0;
    $85 = (($__sn) + 4|0);
    HEAP32[$85>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  } else {
   $87 = (($73) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   FUNCTION_TABLE_vii[$88 & 63]($8,$72);
   $89 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$89&255;HEAP8[$__pat+1>>0]=($89>>8)&255;HEAP8[$__pat+2>>0]=($89>>16)&255;HEAP8[$__pat+3>>0]=$89>>24;
   $90 = HEAP32[$72>>2]|0;
   $91 = (($90) + 28|0);
   $92 = HEAP32[$91>>2]|0;
   FUNCTION_TABLE_vii[$92 & 63]($9,$72);
   $93 = HEAP8[$__sn>>0]|0;
   $94 = $93 & 1;
   $95 = ($94<<24>>24)==(0);
   if ($95) {
    $99 = (($__sn) + 4|0);
    HEAP32[$99>>2] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $96 = (($__sn) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    HEAP32[$97>>2] = 0;
    $98 = (($__sn) + 4|0);
    HEAP32[$98>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  }
  $100 = HEAP32[$72>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_ii[$102 & 127]($72)|0);
  HEAP32[$__dp>>2] = $103;
  $104 = HEAP32[$72>>2]|0;
  $105 = (($104) + 16|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_ii[$106 & 127]($72)|0);
  HEAP32[$__ts>>2] = $107;
  $108 = HEAP32[$72>>2]|0;
  $109 = (($108) + 20|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 63]($10,$72);
  $111 = HEAP8[$__grp>>0]|0;
  $112 = $111 & 1;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   $117 = (($__grp) + 1|0);
   HEAP8[$117>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $114 = (($__grp) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP8[$115>>0] = 0;
   $116 = (($__grp) + 4|0);
   HEAP32[$116>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $118 = HEAP32[$72>>2]|0;
  $119 = (($118) + 24|0);
  $120 = HEAP32[$119>>2]|0;
  FUNCTION_TABLE_vii[$120 & 63]($11,$72);
  $121 = HEAP8[$__sym>>0]|0;
  $122 = $121 & 1;
  $123 = ($122<<24>>24)==(0);
  if ($123) {
   $127 = (($__sym) + 4|0);
   HEAP32[$127>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $124 = (($__sym) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   HEAP32[$125>>2] = 0;
   $126 = (($__sym) + 4|0);
   HEAP32[$126>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $128 = HEAP32[$72>>2]|0;
  $129 = (($128) + 36|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 127]($72)|0);
  $storemerge = $131;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $86$phi = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0;
 var $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep70 = 0, $uglygep$i$i = 0;
 var $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $40 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $40 = $37;
   }
   $41 = ($40|0)==(0);
   $brmerge = $41 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($47|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $47;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $51 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($51)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $52 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$54 = $47;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$01$i$i19>>2] = $53;
      $55 = (($54) + 4|0);
      $56 = ($55|0)==($46|0);
      if ($56) {
       break;
      }
      $57 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $57;$54 = $55;
     }
     $58 = (($52) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($58<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $27 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $27 = $24;
   }
   $28 = ($27|0)==(0);
   if ($28) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$059) + 4|0);
   $$$0 = $__neg ? $60 : $$059;
   $61 = ($$$0>>>0)<($__de>>>0);
   L32: do {
    if ($61) {
     $__d$034 = $$$0;
     while(1) {
      $64 = HEAP32[$__d$034>>2]|0;
      $65 = HEAP32[$__ct>>2]|0;
      $66 = (($65) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_iiii[$67 & 63]($__ct,2048,$64)|0);
      $62 = (($__d$034) + 4|0);
      if (!($68)) {
       $__d$0$lcssa = $__d$034;
       break L32;
      }
      $63 = ($62>>>0)<($__de>>>0);
      if ($63) {
       $__d$034 = $62;
      } else {
       $__d$0$lcssa = $62;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $69 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($69) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $73 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $70 = (($__d$137) + -4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($73) + 4|0);
      HEAP32[$73>>2] = $71;
      $74 = (($__f$038) + -1)|0;
      $75 = ($70>>>0)>($$$0>>>0);
      $76 = ($74|0)>(0);
      $or$cond = $75 & $76;
      if ($or$cond) {
       $73 = $72;$__d$137 = $70;$__f$038 = $74;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $72;
     if ($76) {
      $__d$1$lcssa79 = $70;$__f$0$lcssa77 = $74;
      label = 34;
     } else {
      $77 = HEAP32[$__me>>2]|0;
      $78 = (($77) + 4|0);
      HEAP32[$__me>>2] = $78;
      $$lcssa44 = $77;$__d$1$lcssa7880 = $70;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $79 = HEAP32[$__ct>>2]|0;
     $80 = (($79) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (FUNCTION_TABLE_iii[$81 & 31]($__ct,48)|0);
     $83 = ($__f$0$lcssa77|0)>(0);
     $84 = HEAP32[$__me>>2]|0;
     $85 = (($84) + 4|0);
     HEAP32[$__me>>2] = $85;
     if ($83) {
      $86 = $84;$90 = $85;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$86>>2] = $82;
       $87 = (($__f$145) + -1)|0;
       $88 = ($87|0)>(0);
       $89 = (($90) + 4|0);
       if ($88) {
        $86$phi = $90;$90 = $89;$__f$145 = $87;$86 = $86$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($84) + ($$sum75<<2)|0);
      $scevgep70 = (($84) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $84;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $91 = ($__d$2|0)==($$$0|0);
   if ($91) {
    $92 = HEAP32[$__ct>>2]|0;
    $93 = (($92) + 44|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (FUNCTION_TABLE_iii[$94 & 31]($__ct,48)|0);
    $96 = HEAP32[$__me>>2]|0;
    $97 = (($96) + 4|0);
    HEAP32[$__me>>2] = $97;
    HEAP32[$96>>2] = $95;
    $139 = $97;
   } else {
    $98 = HEAP8[$__grp>>0]|0;
    $99 = $98 & 1;
    $100 = ($99<<24>>24)==(0);
    if ($100) {
     $102 = $98&255;
     $103 = $102 >>> 1;
     $104 = $103;
    } else {
     $101 = HEAP32[$9>>2]|0;
     $104 = $101;
    }
    $105 = ($104|0)==(0);
    if ($105) {
     $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
    } else {
     if ($100) {
      $108 = $7;
     } else {
      $106 = HEAP32[$8>>2]|0;
      $108 = $106;
     }
     $107 = HEAP8[$108>>0]|0;
     $109 = $107 << 24 >> 24;
     $__d$353 = $__d$2;$__gl$056 = $109;$__ig$055 = 0;$__ng$054 = 0;
    }
    while(1) {
     $110 = ($__ng$054|0)==($__gl$056|0);
     $111 = HEAP32[$__me>>2]|0;
     if ($110) {
      $112 = (($111) + 4|0);
      HEAP32[$__me>>2] = $112;
      HEAP32[$111>>2] = $__ts;
      $113 = (($__ig$055) + 1)|0;
      $114 = HEAP8[$__grp>>0]|0;
      $115 = $114 & 1;
      $116 = ($115<<24>>24)==(0);
      if ($116) {
       $118 = $114&255;
       $119 = $118 >>> 1;
       $121 = $119;
      } else {
       $117 = HEAP32[$9>>2]|0;
       $121 = $117;
      }
      $120 = ($113>>>0)<($121>>>0);
      if ($120) {
       if ($116) {
        $124 = $7;
       } else {
        $122 = HEAP32[$8>>2]|0;
        $124 = $122;
       }
       $123 = (($124) + ($113)|0);
       $125 = HEAP8[$123>>0]|0;
       $126 = ($125<<24>>24)==(127);
       if ($126) {
        $135 = $112;$__gl$1 = -1;$__ig$1 = $113;$__ng$1 = 0;
       } else {
        if ($116) {
         $129 = $7;
        } else {
         $127 = HEAP32[$8>>2]|0;
         $129 = $127;
        }
        $128 = (($129) + ($113)|0);
        $130 = HEAP8[$128>>0]|0;
        $131 = $130 << 24 >> 24;
        $135 = $112;$__gl$1 = $131;$__ig$1 = $113;$__ng$1 = 0;
       }
      } else {
       $135 = $112;$__gl$1 = $__gl$056;$__ig$1 = $113;$__ng$1 = 0;
      }
     } else {
      $135 = $111;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $132 = (($__d$353) + -4|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($135) + 4|0);
     HEAP32[$__me>>2] = $134;
     HEAP32[$135>>2] = $133;
     $136 = (($__ng$1) + 1)|0;
     $137 = ($132|0)==($$$0|0);
     if ($137) {
      $139 = $134;
      break;
     } else {
      $__d$353 = $132;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $136;
     }
    }
   }
   $138 = ($59|0)==($139|0);
   if ($138) {
    $$2 = $$$0;
   } else {
    $140 = (($139) + -4|0);
    $141 = ($140>>>0)>($59>>>0);
    if ($141) {
     $$012$i$i = $59;$144 = $140;
     while(1) {
      $142 = HEAP32[$$012$i$i>>2]|0;
      $143 = HEAP32[$144>>2]|0;
      HEAP32[$$012$i$i>>2] = $143;
      HEAP32[$144>>2] = $142;
      $145 = (($$012$i$i) + 4|0);
      $146 = (($144) + -4|0);
      $147 = ($145>>>0)<($146>>>0);
      if ($147) {
       $$012$i$i = $145;$144 = $146;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 31]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $148 = (($__p$058) + 1)|0;
  $exitcond = ($148|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $148;
  }
 }
 $149 = HEAP8[$__sn>>0]|0;
 $150 = $149 & 1;
 $151 = ($150<<24>>24)==(0);
 if ($151) {
  $153 = $149&255;
  $154 = $153 >>> 1;
  $155 = $154;
 } else {
  $152 = HEAP32[$0>>2]|0;
  $155 = $152;
 }
 $156 = ($155>>>0)>(1);
 if ($156) {
  if ($151) {
   $159 = $149&255;
   $160 = $159 >>> 1;
   $$pn = $0;$163 = $160;
  } else {
   $157 = HEAP32[$1>>2]|0;
   $158 = HEAP32[$0>>2]|0;
   $$pn = $157;$163 = $158;
  }
  $161 = (($$pn) + 4|0);
  $162 = (($$pn) + ($163<<2)|0);
  $164 = HEAP32[$__me>>2]|0;
  $165 = ($161|0)==($162|0);
  if ($165) {
   $$0$lcssa$i$i = $164;
  } else {
   $$promoted4$i$i = $161;
   $$sum = (($163) + -1)|0;
   $scevgep$i$i = (($$pn) + ($$sum<<2)|0);
   $166 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($166)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $167 = $uglygep5$i$i >>> 2;
   $$01$i$i = $164;$169 = $161;
   while(1) {
    $168 = HEAP32[$169>>2]|0;
    HEAP32[$$01$i$i>>2] = $168;
    $170 = (($169) + 4|0);
    $171 = (($$01$i$i) + 4|0);
    $172 = ($170|0)==($162|0);
    if ($172) {
     break;
    } else {
     $$01$i$i = $171;$169 = $170;
    }
   }
   $173 = (($167) + 1)|0;
   $scevgep6$i$i = (($164) + ($173<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $174 = $__flags & 176;
 if ((($174|0) == 32)) {
  $175 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $175;
  STACKTOP = sp;return;
 } else if ((($174|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $$byval_copy = sp + 472|0;
 $__loc = sp + 468|0;
 $__pat = sp + 464|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,409568)|0);
 $2 = HEAP8[$__digits>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  $9 = $8;
 } else {
  $5 = (($__digits) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = ($9|0)==(0);
 if ($10) {
  $21 = 0;
 } else {
  if ($4) {
   $13 = (($__digits) + 4|0);
   $15 = $13;
  } else {
   $11 = (($__digits) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;
  }
  $14 = HEAP32[$15>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 44|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 31]($1,45)|0);
  $20 = ($14|0)==($19|0);
  $21 = $20;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$21,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $22 = HEAP8[$__digits>>0]|0;
 $23 = $22 & 1;
 $24 = ($23<<24>>24)==(0);
 if ($24) {
  $27 = $22&255;
  $28 = $27 >>> 1;
  $30 = $28;
 } else {
  $25 = (($__digits) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $30 = $26;
 }
 $29 = HEAP32[$__fd>>2]|0;
 $31 = ($30|0)>($29|0);
 if ($31) {
  if ($24) {
   $34 = $22&255;
   $35 = $34 >>> 1;
   $37 = $35;
  } else {
   $32 = (($__digits) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $37 = $33;
  }
  $36 = (($37) - ($29))|0;
  $38 = $36 << 1;
  $39 = HEAP8[$__sn>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $44 = $39&255;
   $45 = $44 >>> 1;
   $55 = $45;
  } else {
   $42 = (($__sn) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $55 = $43;
  }
  $46 = HEAP8[$__sym>>0]|0;
  $47 = $46 & 1;
  $48 = ($47<<24>>24)==(0);
  if ($48) {
   $51 = $46&255;
   $52 = $51 >>> 1;
   $57 = $52;
  } else {
   $49 = (($__sym) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $57 = $50;
  }
  $53 = $38 | 1;
  $54 = (($55) + ($53))|0;
  $56 = (($54) + ($57))|0;
  $$pn = $56;
 } else {
  $58 = HEAP8[$__sn>>0]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $63 = $58&255;
   $64 = $63 >>> 1;
   $73 = $64;
  } else {
   $61 = (($__sn) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $73 = $62;
  }
  $65 = HEAP8[$__sym>>0]|0;
  $66 = $65 & 1;
  $67 = ($66<<24>>24)==(0);
  if ($67) {
   $70 = $65&255;
   $71 = $70 >>> 1;
   $75 = $71;
  } else {
   $68 = (($__sym) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $75 = $69;
  }
  $72 = (($73) + 2)|0;
  $74 = (($72) + ($75))|0;
  $$pn = $74;
 }
 $76 = (($$pn) + ($29))|0;
 $77 = ($76>>>0)>(100);
 if ($77) {
  $78 = $76 << 2;
  $79 = (_malloc($78)|0);
  $80 = ($79|0)==(0|0);
  if ($80) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $100 = $79;$__mb$0 = $79;
  }
 } else {
  $100 = 0;$__mb$0 = $__mbuf;
 }
 $81 = (($__iob) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $22 & 1;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  $89 = (($__digits) + 4|0);
  $90 = $22&255;
  $91 = $90 >>> 1;
  $93 = $89;$94 = $91;
 } else {
  $85 = (($__digits) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($__digits) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $93 = $86;$94 = $88;
 }
 $92 = (($93) + ($94<<2)|0);
 $95 = HEAP32[$__dp>>2]|0;
 $96 = HEAP32[$__ts>>2]|0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$82,$93,$92,$1,$21,$__pat,$95,$96,$__grp,$__sym,$__sn,$29);
 $97 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $97;
 $98 = HEAP32[$__mi>>2]|0;
 $99 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$98,$99,$__iob,$__fl);
 $101 = ($100|0)==(0|0);
 if ($101) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
  $102 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
  STACKTOP = sp;return;
 }
 _free($100);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $102 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01$i = 0, $$01$i7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$14 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$14 = $4;
 }
 $11 = (($12) + ($13)|0);
 $15 = ($14>>>0)<($11>>>0);
 if ($15) {
  $$01$i7 = $14;
  while(1) {
   $20 = HEAP8[$$01$i7>>0]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$20);
   $21 = (($$01$i7) + 1|0);
   $exitcond$i8 = ($21|0)==($11|0);
   if ($exitcond$i8) {
    break;
   } else {
    $$01$i7 = $21;
   }
  }
  $$pre = HEAP8[$__ndflt>>0]|0;
  $phitmp = $$pre & 1;
  $phitmp18 = ($phitmp<<24>>24)==(0);
  $22 = ($__c|0)==(-1);
  $23 = $__c << 1;
  $24 = $23;
  $25 = $22 ? (-1) : $24;
  if ($phitmp18) {
   $37 = $25;
   label = 9;
  } else {
   $26 = (($__ndflt) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $29 = $25;$30 = $27;
  }
 } else {
  $16 = ($__c|0)==(-1);
  $17 = $__c << 1;
  $18 = $17;
  $19 = $16 ? (-1) : $18;
  $37 = $19;
  label = 9;
 }
 if ((label|0) == 9) {
  $28 = (($__ndflt) + 1|0);
  $29 = $37;$30 = $28;
 }
 $31 = (_catgets(($29|0),($__set|0),($__msgid|0),($30|0))|0);
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $32 = (_strlen(($31|0))|0);
 $33 = (($31) + ($32)|0);
 $34 = ($32|0)>(0);
 if ($34) {
  $$01$i = $31;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 while(1) {
  $35 = HEAP8[$$01$i>>0]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$35);
  $36 = (($$01$i) + 1|0);
  $exitcond$i = ($36|0)==($33|0);
  if ($exitcond$i) {
   break;
  } else {
   $$01$i = $36;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $__bn$i14 = 0, $__buf$i13 = 0, $__mb$i11 = 0, $__ndflt = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__mb$i11 = sp;
 $__buf$i13 = sp + 48|0;
 $__bn$i14 = sp + 40|0;
 $__wn$i = sp + 36|0;
 $__ndflt = sp + 24|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((411224 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$21 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$21 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $22 = ($21>>>0)<($14>>>0);
 L5: do {
  if ($22) {
   $23 = (($__buf$i13) + 32|0);
   $$04$i16 = $21;$25 = ((411224 + 8|0));
   while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    $27 = (FUNCTION_TABLE_iiiiiiiii[$26 & 15]($0,$__mb$i11,$$04$i16,$14,$__wn$i,$__buf$i13,$23,$__bn$i14)|0);
    $28 = ($27|0)==(2);
    $29 = HEAP32[$__wn$i>>2]|0;
    $30 = ($29|0)==($$04$i16|0);
    $or$cond2$i17 = $28 | $30;
    if ($or$cond2$i17) {
     break;
    }
    $31 = HEAP32[$__bn$i14>>2]|0;
    $32 = ($__buf$i13>>>0)<($31>>>0);
    if ($32) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $33 = HEAP8[$__p$03$i20>>0]|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$33);
      $34 = (($__p$03$i20) + 1|0);
      $35 = HEAP32[$__bn$i14>>2]|0;
      $36 = ($34>>>0)<($35>>>0);
      if ($36) {
       $__p$03$i20 = $34;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $37 = $$pre$i21;
    } else {
     $37 = $29;
    }
    $38 = ($37>>>0)<($14>>>0);
    if (!($38)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $37;$25 = $$pre;
   }
   __ZNSt3__121__throw_runtime_errorEPKc(410456);
   // unreachable;
  }
 } while(0);
 $39 = ($__c|0)==(-1);
 $40 = $__c << 1;
 $41 = $40;
 $42 = $39 ? (-1) : $41;
 $43 = HEAP8[$__ndflt>>0]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = (($__ndflt) + 1|0);
  $49 = $48;
 } else {
  $46 = (($__ndflt) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $49 = $47;
 }
 $50 = (_catgets(($42|0),($__set|0),($__msgid|0),($49|0))|0);
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $51 = (($1) + 4|0);
 HEAP32[$51>>2] = 0;
 HEAP32[$1>>2] = ((411328 + 8|0));
 $52 = (_strlen(($50|0))|0);
 $53 = (($50) + ($52)|0);
 $54 = $__mb$i11;
 $55 = $54;
 HEAP32[$55>>2] = 0;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = 0;
 $58 = ($52|0)>(0);
 if (!($58)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $59 = $53;
 $60 = (($__buf$i13) + 128|0);
 $$04$i = $50;$62 = ((411328 + 8|0));
 while(1) {
  HEAP32[$__wn$i>>2] = $$04$i;
  $61 = (($62) + 16|0);
  $63 = HEAP32[$61>>2]|0;
  $64 = $$04$i;
  $65 = (($59) - ($64))|0;
  $66 = ($65|0)>(32);
  $67 = (($$04$i) + 32|0);
  $68 = $66 ? $67 : $53;
  $69 = (FUNCTION_TABLE_iiiiiiiii[$63 & 15]($1,$__mb$i11,$$04$i,$68,$__wn$i,$__buf$i13,$60,$__bn$i14)|0);
  $70 = ($69|0)==(2);
  $71 = HEAP32[$__wn$i>>2]|0;
  $72 = ($71|0)==($$04$i|0);
  $or$cond2$i = $70 | $72;
  if ($or$cond2$i) {
   label = 20;
   break;
  }
  $73 = HEAP32[$__bn$i14>>2]|0;
  $74 = ($__buf$i13>>>0)<($73>>>0);
  if ($74) {
   $__p$03$i = $__buf$i13;
   while(1) {
    $75 = HEAP32[$__p$03$i>>2]|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result,$75);
    $76 = (($__p$03$i) + 4|0);
    $77 = HEAP32[$__bn$i14>>2]|0;
    $78 = ($76>>>0)<($77>>>0);
    if ($78) {
     $__p$03$i = $76;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__wn$i>>2]|0;
   $79 = $$pre$i;
  } else {
   $79 = $71;
  }
  $80 = ($79>>>0)<($53>>>0);
  if (!($80)) {
   label = 25;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$04$i = $79;$62 = $$pre44;
 }
 if ((label|0) == 20) {
  __ZNSt3__121__throw_runtime_errorEPKc(410456);
  // unreachable;
 }
 else if ((label|0) == 25) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((409656 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 $3 = ($1|0)==($2|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 _freelocale(($4|0));
 STACKTOP = sp;return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __ZNSt11logic_errorC2EPKc($0,409456);
 HEAP32[$0>>2] = ((418104 + 8|0));
 ___cxa_throw(($0|0),(418152|0),(229|0));
 // unreachable;
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((409488 + 8|0));
 $2 = (($this) + 8|0);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($2,28);
 $3 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,409480,1);
 $4 = HEAP32[$2>>2]|0;
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($4|0);
 if (!($7)) {
  $__new_last2$i$i$i = $4;
  $scevgep$i$i$i = (($6) + -4|0);
  $8 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($8)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $9 = $uglygep3$i$i$i >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($6) + ($10<<2)|0);
  HEAP32[$5>>2] = $scevgep4$i$i$i;
 }
 HEAP32[((414384 + 4|0))>>2] = 0;
 HEAP32[414384>>2] = ((407936 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,414384);
 HEAP32[((414376 + 4|0))>>2] = 0;
 HEAP32[414376>>2] = ((407976 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,414376);
 __ZNSt3__15ctypeIcEC2EPKtbj(414360,0,0,1);
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,414360);
 HEAP32[((414352 + 4|0))>>2] = 0;
 HEAP32[414352>>2] = ((410544 + 8|0));
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,414352);
 HEAP32[((414344 + 4|0))>>2] = 0;
 HEAP32[414344>>2] = ((410760 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,414344);
 __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej(414328,1);
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,414328);
 HEAP32[((414320 + 4|0))>>2] = 0;
 HEAP32[414320>>2] = ((410984 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,414320);
 HEAP32[((414312 + 4|0))>>2] = 0;
 HEAP32[414312>>2] = ((411104 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,414312);
 HEAP32[((414288 + 4|0))>>2] = 0;
 HEAP32[414288>>2] = ((409736 + 8|0));
 HEAP8[((414288 + 8|0))>>0] = 46;
 HEAP8[((414288 + 9|0))>>0] = 44;
 ;HEAP32[((414288 + 12|0))+0>>2]=0|0;HEAP32[((414288 + 12|0))+4>>2]=0|0;HEAP32[((414288 + 12|0))+8>>2]=0|0;
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,414288);
 HEAP32[((414256 + 4|0))>>2] = 0;
 HEAP32[414256>>2] = ((409776 + 8|0));
 HEAP32[((414256 + 8|0))>>2] = 46;
 HEAP32[((414256 + 12|0))>>2] = 44;
 ;HEAP32[((414256 + 16|0))+0>>2]=0|0;HEAP32[((414256 + 16|0))+4>>2]=0|0;HEAP32[((414256 + 16|0))+8>>2]=0|0;
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,414256);
 HEAP32[((414248 + 4|0))>>2] = 0;
 HEAP32[414248>>2] = ((408016 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,414248);
 HEAP32[((414240 + 4|0))>>2] = 0;
 HEAP32[414240>>2] = ((408136 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,414240);
 HEAP32[((414232 + 4|0))>>2] = 0;
 HEAP32[414232>>2] = ((408208 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,414232);
 HEAP32[((414224 + 4|0))>>2] = 0;
 HEAP32[414224>>2] = ((408304 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,414224);
 HEAP32[((414216 + 4|0))>>2] = 0;
 HEAP32[414216>>2] = ((408896 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,414216);
 HEAP32[((414208 + 4|0))>>2] = 0;
 HEAP32[414208>>2] = ((408960 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,414208);
 HEAP32[((414200 + 4|0))>>2] = 0;
 HEAP32[414200>>2] = ((409024 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,414200);
 HEAP32[((414192 + 4|0))>>2] = 0;
 HEAP32[414192>>2] = ((409088 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,414192);
 HEAP32[((414184 + 4|0))>>2] = 0;
 HEAP32[414184>>2] = ((409152 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,414184);
 HEAP32[((414176 + 4|0))>>2] = 0;
 HEAP32[414176>>2] = ((409232 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,414176);
 HEAP32[((414168 + 4|0))>>2] = 0;
 HEAP32[414168>>2] = ((409288 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,414168);
 HEAP32[((414160 + 4|0))>>2] = 0;
 HEAP32[414160>>2] = ((409336 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,414160);
 HEAP32[((414144 + 4|0))>>2] = 0;
 HEAP32[414144>>2] = ((408384 + 8|0));
 HEAP32[((414144 + 8|0))>>2] = ((408384 + 56|0));
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,414144);
 HEAP32[((414128 + 4|0))>>2] = 0;
 HEAP32[414128>>2] = ((408536 + 8|0));
 HEAP32[((414128 + 8|0))>>2] = ((408536 + 56|0));
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,414128);
 HEAP32[((414112 + 4|0))>>2] = 0;
 HEAP32[414112>>2] = ((410480 + 8|0));
 $11 = (__ZNSt3__16__clocEv()|0);
 HEAP32[((414112 + 8|0))>>2] = $11;
 HEAP32[414112>>2] = ((408832 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,414112);
 HEAP32[((414096 + 4|0))>>2] = 0;
 HEAP32[414096>>2] = ((410480 + 8|0));
 $12 = (__ZNSt3__16__clocEv()|0);
 HEAP32[((414096 + 8|0))>>2] = $12;
 HEAP32[414096>>2] = ((408864 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,414096);
 HEAP32[((414088 + 4|0))>>2] = 0;
 HEAP32[414088>>2] = ((409376 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,414088);
 HEAP32[((414080 + 4|0))>>2] = 0;
 HEAP32[414080>>2] = ((409416 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,414080);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(407968)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408008)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409576)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409568)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409640)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409704)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409712)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409720)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409728)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408080)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408200)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408264)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408360)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408952)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409016)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409080)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409144)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409184)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409264)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409320)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409368)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408472)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408624)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(408888)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409408)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(409448)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409528>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((409528|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__16locale5__imp12make_classicEv()|0);
   HEAP32[409520>>2] = 409512;
   ___cxa_guard_release((409528|0));
  }
 }
 $4 = HEAP32[409520>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if ($8) {
  $11 = $3;
 } else {
  $9 = (($id) + 1)|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0,$9);
  $$pre2 = HEAP32[$0>>2]|0;
  $11 = $$pre2;
 }
 $10 = (($11) + ($id<<2)|0);
 $12 = HEAP32[$10>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $15 = $11;
  $14 = (($15) + ($id<<2)|0);
  HEAP32[$14>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
 $$pre = HEAP32[$0>>2]|0;
 $15 = $$pre;
 $14 = (($15) + ($id<<2)|0);
 HEAP32[$14>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((409488 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $18 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $10 = $18;$12 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $10 = $$pre;$12 = $$pre2;
   }
   $9 = (($i$01) + 1)|0;
   $11 = $10;
   $13 = $12;
   $14 = (($11) - ($13))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $18 = $10;$6 = $12;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  STACKTOP = sp;return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $__new_last2$i$i = $10;
 $scevgep$i$i = (($1) + -4|0);
 $12 = (0 - ($__new_last2$i$i))|0;
 $uglygep$i$i = (($scevgep$i$i) + ($12)|0);
 $uglygep3$i$i = $uglygep$i$i;
 $13 = $uglygep3$i$i >>> 2;
 $14 = $13 ^ -1;
 $scevgep4$i$i = (($1) + ($14<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = (($this) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(418352|0),(235|0));
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = (($3) + ($id<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(413920,1);
 HEAP32[409512>>2] = 413920;
 STACKTOP = sp;return (409512|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[409536>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;return (409536|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409552>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((409552|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__16locale5__imp11make_globalEv()|0);
   HEAP32[409544>>2] = 409536;
   ___cxa_guard_release((409552|0));
  }
 }
 $4 = HEAP32[409544>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale8__globalEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$this>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9has_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (246);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,247);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 511]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[409560>>2]|0;HEAP32[409560>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 $1 = (($0) + ($c<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & $m;
 $4 = ($3<<16>>16)!=(0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_b_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0;
 var $uglygep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $vec;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $6 = (($5) + ($4<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7;
  } else {
   $8 = 0;
  }
  HEAP16[$$03>>1] = $8;
  $9 = (($$012) + 4|0);
  $10 = (($$03) + 2|0);
  $11 = ($9|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$012 = $9;$$03 = $10;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = (($$01) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $3 = HEAP32[$$01>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $4 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $5 = (($4) + ($3<<1)|0);
    $6 = HEAP16[$5>>1]|0;
    $7 = $6 & $m;
    $8 = ($7<<16>>16)==(0);
    $1 = (($$01) + 4|0);
    if ($8) {
     $$0$lcssa = $$01;
     break L1;
    }
    $2 = ($1|0)==($high|0);
    if ($2) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_toupper_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low3))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep4 = $uglygep;
 $2 = $uglygep4 >>> 2;
 $3 = (($2) + 1)|0;
 $$01 = $low;
 while(1) {
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$01>>2] = $8;
  $9 = (($$01) + 4|0);
  $10 = ($9|0)==($high|0);
  if ($10) {
   break;
  } else {
   $$01 = $9;
  }
 }
 $scevgep5 = (($low) + ($3<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_tolower_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low3))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep4 = $uglygep;
 $2 = $uglygep4 >>> 2;
 $3 = (($2) + 1)|0;
 $$01 = $low;
 while(1) {
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$01>>2] = $8;
  $9 = (($$01) + 4|0);
  $10 = ($9|0)==($high|0);
  if ($10) {
   break;
  } else {
   $$01 = $9;
  }
 }
 $scevgep5 = (($low) + ($3<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((409584 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $tab;
 $3 = (($this) + 12|0);
 $4 = $del&1;
 HEAP8[$3>>0] = $4;
 $5 = ($tab|0)==(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 HEAP32[$2>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((409584 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c&255;
 $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c << 24 >> 24;
 $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((409656 + 8|0));
 $2 = (__ZNSt3__16__clocEv()|0);
 $3 = (($this) + 8|0);
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $73 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $1 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $2 = ($1|0)==($frm_end|0);
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $1;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $73 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     $26 = (_wcsnrtombs($$0247,$frm_nxt,$21,$23,$st)|0);
     $27 = ($25|0)==(0|0);
     if (!($27)) {
      (_uselocale(($25|0))|0);
     }
     if ((($26|0) == 0)) {
      $$0 = 1;
      label = 33;
      break;
     } else if ((($26|0) == -1)) {
      label = 10;
      break;
     }
     $42 = HEAP32[$to_nxt>>2]|0;
     $43 = (($42) + ($26)|0);
     HEAP32[$to_nxt>>2] = $43;
     $44 = ($43|0)==($to_end|0);
     if ($44) {
      label = 31;
      break;
     }
     $45 = ($fend$149|0)==($frm_end|0);
     if ($45) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $69 = $$pre98;$71 = $43;$fend$3 = $frm_end;
     } else {
      $46 = HEAP32[$7>>2]|0;
      $47 = (_uselocale(($46|0))|0);
      $48 = (_wcrtomb($tmp,0,$st)|0);
      $49 = ($47|0)==(0|0);
      if (!($49)) {
       (_uselocale(($47|0))|0);
      }
      $50 = ($48|0)==(-1);
      if ($50) {
       $$0 = 2;
       label = 33;
       break;
      }
      $51 = HEAP32[$to_nxt>>2]|0;
      $52 = $51;
      $53 = (($6) - ($52))|0;
      $54 = ($48>>>0)>($53>>>0);
      if ($54) {
       $$0 = 1;
       label = 33;
       break;
      }
      $55 = ($48|0)==(0);
      L21: do {
       if (!($55)) {
        $58 = $51;$n$011 = $48;$p$012 = $tmp;
        while(1) {
         $56 = HEAP8[$p$012>>0]|0;
         $57 = (($58) + 1|0);
         HEAP32[$to_nxt>>2] = $57;
         HEAP8[$58>>0] = $56;
         $59 = (($n$011) + -1)|0;
         $60 = ($59|0)==(0);
         if ($60) {
          break L21;
         }
         $61 = (($p$012) + 1|0);
         $$pre99 = HEAP32[$to_nxt>>2]|0;
         $58 = $$pre99;$n$011 = $59;$p$012 = $61;
        }
       }
      } while(0);
      $62 = HEAP32[$frm_nxt>>2]|0;
      $63 = (($62) + 4|0);
      HEAP32[$frm_nxt>>2] = $63;
      $64 = ($63|0)==($frm_end|0);
      L26: do {
       if ($64) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $63;
        while(1) {
         $67 = HEAP32[$fend$215>>2]|0;
         $68 = ($67|0)==(0);
         $65 = (($fend$215) + 4|0);
         if ($68) {
          $fend$2$lcssa = $fend$215;
          break L26;
         }
         $66 = ($65|0)==($frm_end|0);
         if ($66) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $65;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $69 = $63;$71 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $70 = ($69|0)==($frm_end|0);
     $72 = ($71|0)==($to_end|0);
     $or$cond = $70 | $72;
     if ($or$cond) {
      $73 = $69;
      break L1;
     } else {
      $$0148 = $69;$$0247 = $71;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     HEAP32[$to_nxt>>2] = $$0247;
     $28 = HEAP32[$frm_nxt>>2]|0;
     $29 = ($$0148|0)==($28|0);
     L39: do {
      if ($29) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$33 = $$0247;
       while(1) {
        $30 = HEAP32[$$19>>2]|0;
        $31 = HEAP32[$7>>2]|0;
        $32 = (_uselocale(($31|0))|0);
        $34 = (_wcrtomb($33,$30,$save_state)|0);
        $35 = ($32|0)==(0|0);
        if (!($35)) {
         (_uselocale(($32|0))|0);
        }
        $36 = ($34|0)==(-1);
        if ($36) {
         $$1$lcssa = $$19;
         break L39;
        }
        $37 = HEAP32[$to_nxt>>2]|0;
        $38 = (($37) + ($34)|0);
        HEAP32[$to_nxt>>2] = $38;
        $39 = (($$19) + 4|0);
        $40 = HEAP32[$frm_nxt>>2]|0;
        $41 = ($39|0)==($40|0);
        if ($41) {
         $$1$lcssa = $39;
         break;
        } else {
         $$19 = $39;$33 = $38;
        }
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 31) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $73 = $$pre;
     break;
    }
    else if ((label|0) == 33) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($73|0)!=($frm_end|0);
 $74 = $not$&1;
 $$0 = $74;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0;
 var $fend$216 = 0, $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $65 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $1 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $2 = ($1|0)==($frm_end|0);
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $1;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $65 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     $26 = (_mbsnrtowcs($$0254,$frm_nxt,$20,$23,$st)|0);
     $27 = ($25|0)==(0|0);
     if (!($27)) {
      (_uselocale(($25|0))|0);
     }
     if ((($26|0) == -1)) {
      label = 10;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 32;
      break;
     }
     $43 = HEAP32[$to_nxt>>2]|0;
     $44 = (($43) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $44;
     $45 = ($44|0)==($to_end|0);
     if ($45) {
      label = 30;
      break;
     }
     $46 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($46) {
      $61 = $$pre113;$63 = $44;$fend$3 = $frm_end;
     } else {
      $47 = HEAP32[$7>>2]|0;
      $48 = (_uselocale(($47|0))|0);
      $49 = (_mbrtowc($44,$$pre113,1,$st)|0);
      $50 = ($48|0)==(0|0);
      if (!($50)) {
       (_uselocale(($48|0))|0);
      }
      $51 = ($49|0)==(0);
      if (!($51)) {
       $$0 = 2;
       label = 32;
       break;
      }
      $52 = HEAP32[$to_nxt>>2]|0;
      $53 = (($52) + 4|0);
      HEAP32[$to_nxt>>2] = $53;
      $54 = HEAP32[$frm_nxt>>2]|0;
      $55 = (($54) + 1|0);
      HEAP32[$frm_nxt>>2] = $55;
      $56 = ($55|0)==($frm_end|0);
      L20: do {
       if ($56) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $55;
        while(1) {
         $59 = HEAP8[$fend$216>>0]|0;
         $60 = ($59<<24>>24)==(0);
         $57 = (($fend$216) + 1|0);
         if ($60) {
          $fend$2$lcssa = $fend$216;
          break L20;
         }
         $58 = ($57|0)==($frm_end|0);
         if ($58) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $57;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $61 = $55;$63 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $62 = ($61|0)==($frm_end|0);
     $64 = ($63|0)==($to_end|0);
     $or$cond = $62 | $64;
     if ($or$cond) {
      $65 = $61;
      break L1;
     } else {
      $$0155 = $61;$$0254 = $63;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     HEAP32[$to_nxt>>2] = $$0254;
     $28 = HEAP32[$frm_nxt>>2]|0;
     $29 = ($$0155|0)==($28|0);
     L29: do {
      if ($29) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $30 = $$115;
        $31 = (($18) - ($30))|0;
        $32 = HEAP32[$7>>2]|0;
        $33 = (_uselocale(($32|0))|0);
        $34 = (_mbrtowc($storemerge14,$$115,$31,$save_state)|0);
        $35 = ($33|0)==(0|0);
        if (!($35)) {
         (_uselocale(($33|0))|0);
        }
        if ((($34|0) == -2)) {
         label = 16;
         break;
        } else if ((($34|0) == 0)) {
         $36 = (($$115) + 1|0);
         $$2 = $36;
        } else if ((($34|0) == -1)) {
         label = 15;
         break;
        } else {
         $37 = (($$115) + ($34)|0);
         $$2 = $37;
        }
        $38 = HEAP32[$to_nxt>>2]|0;
        $39 = (($38) + 4|0);
        HEAP32[$to_nxt>>2] = $39;
        $40 = HEAP32[$frm_nxt>>2]|0;
        $41 = ($$2|0)==($40|0);
        if ($41) {
         $$1$lcssa = $$2;
         break L29;
        } else {
         $$115 = $$2;$storemerge14 = $39;
        }
       }
       if ((label|0) == 15) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 16) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $42 = $not$3&1;
     $$0 = $42;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 30) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $65 = $$pre;
     break;
    }
    else if ((label|0) == 32) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($65|0)!=($frm_end|0);
 $66 = $not$&1;
 $$0 = $66;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = (_wcrtomb($tmp,0,$st)|0);
 $4 = ($2|0)==(0|0);
 if (!($4)) {
  (_uselocale(($2|0))|0);
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($3) + -1)|0;
 $6 = HEAP32[$to_nxt>>2]|0;
 $7 = $to_end;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ($5>>>0)>($9>>>0);
 if ($10) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $14 = $6;$n$02 = $5;$p$03 = $tmp;
 }
 while(1) {
  $12 = HEAP8[$p$03>>0]|0;
  $13 = (($14) + 1|0);
  HEAP32[$to_nxt>>2] = $13;
  HEAP8[$14>>0] = $12;
  $15 = (($n$02) + -1)|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $$0 = 0;
   break;
  }
  $17 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $14 = $$pre;$n$02 = $15;$p$03 = $17;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = (_mbtowc(0,0,4)|0);
 $4 = ($2|0)==(0|0);
 if (!($4)) {
  (_uselocale(($2|0))|0);
 }
 $5 = ($3|0)==(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 1;
  } else {
   $8 = (_uselocale(($6|0))|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 0;
   } else {
    (_uselocale(($8|0))|0);
    $$0 = 0;
   }
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0;
 var $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  $8 = (_mbrlen($$016,$5,$st)|0);
  $9 = ($7|0)==(0|0);
  if (!($9)) {
   (_uselocale(($7|0))|0);
  }
  if ((($8|0) == 0)) {
   $10 = (($$016) + 1|0);
   $$1 = $10;$$pn = 1;
  } else if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 9;
   break;
  } else {
   $11 = (($$016) + ($8)|0);
   $$1 = $11;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $12 = (($nwchar_t$08) + 1)|0;
  $13 = ($12>>>0)>=($mx>>>0);
  $14 = ($$1|0)==($frm_end|0);
  $or$cond = $13 | $14;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 9;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $12;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = 1;
 } else {
  $3 = (_uselocale(($1|0))|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = 4;
  } else {
   (_uselocale(($3|0))|0);
   $5 = 4;
  }
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113>>0] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125>>0] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130>>0] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87>>0] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105>>0] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110>>0] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $15 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $15 = $14;
     } else {
      $15 = $$pre5;
     }
    } else {
     $15 = $$pre5;
    }
   } else {
    $15 = $$pre5;
   }
  } else {
   $15 = $$pre5;
  }
 }
 $16 = ($15>>>0)<($frm_end>>>0);
 L8: do {
  if ($16) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre;$22 = $15;
   L10: while(1) {
    $20 = ($19>>>0)<($to_end>>>0);
    if (!($20)) {
     $134 = $22;
     break L8;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$19>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$19>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$19>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $19;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$19>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($19) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $19 = $131;$22 = $132;
    } else {
     $134 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $134 = $15;
  }
 } while(0);
 $135 = ($134>>>0)<($frm_end>>>0);
 $136 = $135&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($mx) - ($nchar16_t$014))|0;
      $77 = ($76>>>0)<(2);
      if ($77) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $78 = (($frm_nxt$115) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$115) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 36;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 34;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 38;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $113 = (($nchar16_t$014) + 1)|0;
      $114 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41>>0] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69>>0] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75>>0] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80>>0] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $15 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $15 = $14;
     } else {
      $15 = $$pre5;
     }
    } else {
     $15 = $$pre5;
    }
   } else {
    $15 = $$pre5;
   }
  } else {
   $15 = $$pre5;
  }
 }
 $16 = ($15>>>0)<($frm_end>>>0);
 L8: do {
  if ($16) {
   $17 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $18 = $$pre;$21 = $15;
   while(1) {
    $19 = ($18>>>0)<($to_end>>>0);
    if (!($19)) {
     $107 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$18>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$18>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$18>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$18>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $18 = $104;$21 = $105;
    } else {
     $107 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $107 = $15;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $108 = ($107>>>0)<($frm_end>>>0);
  $109 = $108&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $113 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $112 & $113;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $114 = $frm_nxt$1$lcssa;
 $115 = $frm;
 $116 = (($114) - ($115))|0;
 $$0 = $116;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((409736 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((409776 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,409816,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(409824)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,409824,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,409848,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(409856)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,409856,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0 = 16;
 } else if ((($2|0) == 0)) {
  $$0 = 0;
 } else if ((($2|0) == 64)) {
  $$0 = 8;
 } else {
  $$0 = 10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409888>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[409880>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((409888|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[409880>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[417088>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((417088|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((416920|0),0,168)|0;
   (___cxa_atexit((248|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((417088|0));
  }
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(416920,417096)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 12|0)),417104)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 24|0)),417112)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 36|0)),417120)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 48|0)),417136)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 60|0)),417152)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 72|0)),417160)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 84|0)),417176)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 96|0)),417184)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 108|0)),417192)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 120|0)),417200)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 132|0)),417208)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 144|0)),417216)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((416920 + 156|0)),417224)|0);
 HEAP32[409880>>2] = 416920;
 ___cxa_guard_release((409888|0));
 $8 = HEAP32[409880>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409904>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[409896>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((409904|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[409896>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[416552>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((416552|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((416384|0),0,168)|0;
   (___cxa_atexit((249|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((416552|0));
  }
 }
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(416384,416560)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 12|0)),416592)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 24|0)),416624)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 36|0)),416656)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 48|0)),416696)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 60|0)),416736)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 72|0)),416768)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 84|0)),416808)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 96|0)),416824)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 108|0)),416840)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 120|0)),416856)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 132|0)),416872)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 144|0)),416888)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((416384 + 156|0)),416904)|0);
 HEAP32[409896>>2] = 416384;
 ___cxa_guard_release((409904|0));
 $8 = HEAP32[409896>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409920>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[409912>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((409920|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[409912>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[416160>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((416160|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((415872|0),0,288)|0;
   (___cxa_atexit((250|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((416160|0));
  }
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(415872,416168)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 12|0)),416176)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 24|0)),416192)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 36|0)),416200)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 48|0)),416208)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 60|0)),416216)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 72|0)),416224)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 84|0)),416232)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 96|0)),416240)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 108|0)),416256)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 120|0)),416264)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 132|0)),416280)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 144|0)),416296)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 156|0)),416304)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 168|0)),416312)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 180|0)),416320)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 192|0)),416208)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 204|0)),416328)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 216|0)),416336)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 228|0)),416344)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 240|0)),416352)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 252|0)),416360)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 264|0)),416368)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((415872 + 276|0)),416376)|0);
 HEAP32[409912>>2] = 415872;
 ___cxa_guard_release((409920|0));
 $8 = HEAP32[409912>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409936>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[409928>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((409936|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[409928>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[415320>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((415320|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((415032|0),0,288)|0;
   (___cxa_atexit((251|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((415320|0));
  }
 }
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(415032,415328)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 12|0)),415360)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 24|0)),415400)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 36|0)),415424)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 48|0)),415744)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 60|0)),415448)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 72|0)),415472)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 84|0)),415496)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 96|0)),415528)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 108|0)),415568)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 120|0)),415600)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 132|0)),415640)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 144|0)),415680)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 156|0)),415696)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 168|0)),415712)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 180|0)),415728)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 192|0)),415744)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 204|0)),415760)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 216|0)),415776)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 228|0)),415792)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 240|0)),415808)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 252|0)),415824)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 264|0)),415840)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((415032 + 276|0)),415856)|0);
 HEAP32[409928>>2] = 415032;
 ___cxa_guard_release((409936|0));
 $8 = HEAP32[409928>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409952>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[409944>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((409952|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[409944>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[415008>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((415008|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((414720|0),0,288)|0;
   (___cxa_atexit((252|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((415008|0));
  }
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(414720,415016)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((414720 + 12|0)),415024)|0);
 HEAP32[409944>>2] = 414720;
 ___cxa_guard_release((409952|0));
 $8 = HEAP32[409944>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409968>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[409960>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((409968|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[409960>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[414680>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((414680|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((414392|0),0,288)|0;
   (___cxa_atexit((253|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((414680|0));
  }
 }
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(414392,414688)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((414392 + 12|0)),414704)|0);
 HEAP32[409960>>2] = 414392;
 ___cxa_guard_release((409968|0));
 $8 = HEAP32[409960>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[409992>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((409992|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(409976,410000,8);
   (___cxa_atexit((254|0),(409976|0),(___dso_handle|0))|0);
   ___cxa_guard_release((409992|0));
  }
 }
 STACKTOP = sp;return (409976|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[410032>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (410016|0);
 }
 $2 = (___cxa_guard_acquire((410032|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (410016|0);
 }
 $4 = (_wcslen(410040)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(410016,410040,$4);
 (___cxa_atexit((255|0),(410016|0),(___dso_handle|0))|0);
 ___cxa_guard_release((410032|0));
 STACKTOP = sp;return (410016|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[410096>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((410096|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(410080,410104,8);
   (___cxa_atexit((254|0),(410080|0),(___dso_handle|0))|0);
   ___cxa_guard_release((410096|0));
  }
 }
 STACKTOP = sp;return (410080|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[410136>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (410120|0);
 }
 $2 = (___cxa_guard_acquire((410136|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (410120|0);
 }
 $4 = (_wcslen(410144)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(410120,410144,$4);
 (___cxa_atexit((255|0),(410120|0),(___dso_handle|0))|0);
 ___cxa_guard_release((410136|0));
 STACKTOP = sp;return (410120|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[410200>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (410184|0);
 }
 $2 = (___cxa_guard_acquire((410200|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (410184|0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(410184,410208,20);
 (___cxa_atexit((254|0),(410184|0),(___dso_handle|0))|0);
 ___cxa_guard_release((410200|0));
 STACKTOP = sp;return (410184|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[410248>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (410232|0);
 }
 $2 = (___cxa_guard_acquire((410248|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (410232|0);
 }
 $4 = (_wcslen(410256)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(410232,410256,$4);
 (___cxa_atexit((255|0),(410232|0),(___dso_handle|0))|0);
 ___cxa_guard_release((410248|0));
 STACKTOP = sp;return (410232|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[410360>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (410344|0);
 }
 $2 = (___cxa_guard_acquire((410360|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (410344|0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(410344,410368,11);
 (___cxa_atexit((254|0),(410344|0),(___dso_handle|0))|0);
 ___cxa_guard_release((410360|0));
 STACKTOP = sp;return (410344|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[410400>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (410384|0);
 }
 $2 = (___cxa_guard_acquire((410400|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (410384|0);
 }
 $4 = (_wcslen(410408)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(410384,410408,$4);
 (___cxa_atexit((255|0),(410384|0),(___dso_handle|0))|0);
 ___cxa_guard_release((410400|0));
 STACKTOP = sp;return (410384|0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (+_strtold_l($__a,$__p2,$3));
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($5|0)==(34);
 if ($9) {
  HEAP32[$__err>>2] = 4;
 }
 $10 = $4;
 $$0 = $10;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($7|0)==(0);
 $15 = ($6>>>0)>(4294967295);
 $16 = $14 & $15;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($7|0)==(0);
 $15 = ($6>>>0)>(4294967295);
 $16 = $14 & $15;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($7|0)==(0);
 $15 = ($6>>>0)>(65535);
 $16 = $14 & $15;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $18 = $6&65535;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $10 = ($6|0)==(34);
 if ($10) {
  HEAP32[$__err>>2] = 4;
  $11 = ($5|0)>(0);
  $12 = ($5|0)==(0);
  $13 = ($4>>>0)>(0);
  $14 = $12 & $13;
  $15 = $11 | $14;
  $16 = $15 ? -1 : 0;
  $17 = $15 ? 2147483647 : -2147483648;
  tempRet0 = $17;
  STACKTOP = sp;return ($16|0);
 } else {
  $18 = $5;$19 = $4;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($6|0)==(34);
 do {
  if ($10) {
   HEAP32[$__err>>2] = 4;
   $21 = ($5|0)>(0);
   $22 = ($5|0)==(0);
   $23 = ($4>>>0)>(0);
   $24 = $22 & $23;
   $25 = $21 | $24;
   if ($25) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $11 = ($5|0)<(-1);
   $12 = ($5|0)==(-1);
   $13 = ($4>>>0)<(2147483648);
   $14 = $12 & $13;
   $15 = $11 | $14;
   if ($15) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $16 = ($5|0)>(0);
   $17 = ($5|0)==(0);
   $18 = ($4>>>0)>(2147483647);
   $19 = $17 & $18;
   $20 = $16 | $19;
   if ($20) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $4;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $$index1 = (($0) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
  FUNCTION_TABLE_vi[$10 & 511]($3);
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
  FUNCTION_TABLE_vi[$10 & 511]($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 16|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 2;
 $14 = (($13) + ($__n))|0;
 $15 = ($14>>>0)>(1073741823);
 if ($15) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $16 = (($4) - ($11))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)<(536870911);
 if ($18) {
  $19 = $16 >> 1;
  $20 = ($19>>>0)<($14>>>0);
  $21 = $20 ? $14 : $19;
  $$0$i = $21;
 } else {
  $$0$i = 1073741823;
 }
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  $2 = ($1|0)==(0|0);
  if ($2) {
   $4 = 0;
  } else {
   HEAP32[$1>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  $2 = ($1|0)==(0|0);
  if ($2) {
   $4 = 0;
  } else {
   HEAP32[$1>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $__new_last2$i$i$i = $1;
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($5)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $6 = $uglygep3$i$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (($this) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==($8|0);
 if ($12) {
  $13 = (($11) + 112|0);
  HEAP8[$13>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($8);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $9 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   $6 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $6;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $9 = $__a;
    break;
   } else {
    $7 = $__cap << 2;
    $8 = (__Znwj($7)|0);
    $9 = $8;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $9;
 $10 = (($9) + ($__start<<2)|0);
 $11 = (($this) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = (($this) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = (($9) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $4 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $4;
 if ($or$cond$i$i) {
  $5 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $5;
 } else {
  $6 = $__n << 2;
  $7 = (__Znwj($6)|0);
  $$0$i$i = $7;
 }
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $9 = (($$0$i$i) + ($__n<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $__new_last2$i$i = $0;
  $scevgep$i$i = (($3) + -4|0);
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = (($this) + 16|0);
 $9 = ($8|0)==($0|0);
 if ($9) {
  $10 = (($this) + 128|0);
  HEAP8[$10>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((414392 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(414392);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((414720 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(414720);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((415032 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(415032);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((415872 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(415872);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((416384 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(416384);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((416920 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(416920);
 STACKTOP = sp;return;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 417440;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 417448 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (417232 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0;
 var $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)==(0|0);
 $3 = ($wn$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$17 = $0;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $0;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $4 = $$026 >>> 2;
    $5 = ($4>>>0)>=($$0423>>>0);
    $6 = ($$026>>>0)>(131);
    $or$cond7 = $5 | $6;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$17 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = (($$026) - ($$04$))|0;
    $8 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     break;
    }
    $10 = ($ws$025|0)==($wbuf|0);
    if ($10) {
     $$15 = $$0423;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$025) + ($8<<2)|0);
     $12 = (($$0423) - ($8))|0;
     $$15 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$024))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ($$15|0)==(0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$1 = $7;$$26 = $$15;$17 = $14;$cnt$1 = $13;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;$$0423 = $$15;$$pr41 = $14;$cnt$024 = $13;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $7;$$26 = 0;$17 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 L11: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$26|0)==(0);
   $20 = ($$1|0)==(0);
   $or$cond810 = $19 | $20;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $17;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
    while(1) {
     $22 = (_mbrtowc($ws$213,$21,$$214,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$214) - ($22))|0;
     $28 = (($ws$213) + 4|0);
     $29 = (($$311) + -1)|0;
     $30 = (($cnt$212) + 1)|0;
     $31 = ($29|0)==(0);
     $32 = ($$214|0)==($22|0);
     $or$cond8 = $31 | $32;
     if ($or$cond8) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $27;$$311 = $29;$21 = $26;$cnt$212 = $30;$ws$213 = $28;
     }
    }
    if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $33 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $33;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$443 = 0, $$444 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$842 = 0, $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1045 = 0, $s$1046 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $65 = HEAP8[$s$524>>0]|0;
    $66 = $65&255;
    $67 = (($66) + -1)|0;
    $68 = ($67>>>0)<(127);
    do {
     if ($68) {
      $69 = $s$524;
      $70 = $69 & 3;
      $71 = ($70|0)==(0);
      $72 = ($$4622>>>0)>(4);
      $or$cond = $71 & $72;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $73 = HEAP32[$s$614>>2]|0;
        $74 = (($73) + -16843009)|0;
        $75 = $74 | $73;
        $76 = $75 & -2139062144;
        $77 = ($76|0)==(0);
        if (!($77)) {
         label = 31;
         break;
        }
        $78 = (($s$614) + 1|0);
        $79 = $73 & 255;
        $80 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $79;
        $81 = (($s$614) + 2|0);
        $82 = HEAP8[$78>>0]|0;
        $83 = $82&255;
        $84 = (($$113) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$614) + 3|0);
        $86 = HEAP8[$81>>0]|0;
        $87 = $86&255;
        $88 = (($$113) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$614) + 4|0);
        $90 = HEAP8[$85>>0]|0;
        $91 = $90&255;
        $92 = (($$113) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$512) + -4)|0;
        $94 = ($93>>>0)>(4);
        if ($94) {
         $$113 = $92;$$512 = $93;$s$614 = $89;
        } else {
         label = 32;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $95 = $73&255;
        $$2 = $$113;$$6 = $$512;$97 = $95;$s$7 = $s$614;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $$pre$pre = HEAP8[$89>>0]|0;
        $$2 = $92;$$6 = $93;$97 = $$pre$pre;$s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
     }
    } while(0);
    $96 = $97&255;
    $98 = (($96) + -1)|0;
    $99 = ($98>>>0)<(127);
    if (!($99)) {
     break;
    }
    $100 = (($s$7) + 1|0);
    $101 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $96;
    $102 = (($$6) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $s$5$lcssa = $100;
     label = 26;
     break L7;
    } else {
     $$0123 = $101;$$4622 = $102;$s$524 = $100;
    }
   }
   $104 = (($96) + -194)|0;
   $105 = ($104>>>0)>(50);
   if ($105) {
    $$444 = $$2;$$842 = $$6;$s$1046 = $s$7;
    label = 48;
    break;
   }
   $106 = (($s$7) + 1|0);
   $107 = (417232 + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $108;$s$8 = $106;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$24 = $$13$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$24) + -1)|0;
    $$02 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$444 = $ws;$$842 = $$24;$s$1046 = $s$2;
    label = 48;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (417232 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$35 = $$24;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50&255;
    $52 = (($51) + -128)|0;
    $53 = ($52>>>0)>(63);
    if ($53) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55>>0]|0;
     $59 = $58&255;
     $60 = (($59) + -128)|0;
     $61 = ($60>>>0)>(63);
     if ($61) {
      label = 23;
      break;
     }
     $63 = (($s$3) + 3|0);
     $s$4 = $63;
    }
   }
   $64 = (($$35) + -1)|0;
   $$02 = $64;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $109 = HEAP8[$s$8>>0]|0;
   $110 = $109&255;
   $111 = $110 >>> 3;
   $112 = (($111) + -16)|0;
   $113 = $c$4 >> 26;
   $114 = (($111) + ($113))|0;
   $115 = $112 | $114;
   $116 = ($115>>>0)>(7);
   if ($116) {
    label = 38;
    break;
   }
   $118 = $c$4 << 6;
   $119 = (($s$8) + 1|0);
   $120 = (($110) + -128)|0;
   $121 = $120 | $118;
   $122 = ($121|0)<(0);
   if ($122) {
    $123 = HEAP8[$119>>0]|0;
    $124 = $123&255;
    $125 = (($124) + -128)|0;
    $126 = ($125>>>0)>(63);
    if ($126) {
     label = 41;
     break;
    }
    $128 = $121 << 6;
    $129 = (($s$8) + 2|0);
    $130 = $125 | $128;
    $131 = ($130|0)<(0);
    if ($131) {
     $132 = HEAP8[$129>>0]|0;
     $133 = $132&255;
     $134 = (($133) + -128)|0;
     $135 = ($134>>>0)>(63);
     if ($135) {
      label = 44;
      break;
     }
     $137 = $130 << 6;
     $138 = (($s$8) + 3|0);
     $139 = $134 | $137;
     $c$5 = $139;$s$9 = $138;
    } else {
     $c$5 = $130;$s$9 = $129;
    }
   } else {
    $c$5 = $121;$s$9 = $119;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$01$ph = $140;$$46$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $54;
  label = 47;
 }
 else if ((label|0) == 23) {
  $62 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $62;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 38) {
  $117 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $117;
  label = 47;
 }
 else if ((label|0) == 41) {
  $127 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $121;$s$10 = $127;
  label = 47;
 }
 else if ((label|0) == 44) {
  $136 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $130;$s$10 = $136;
  label = 47;
 }
 if ((label|0) == 47) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$444 = $$4;$$842 = $$8;$s$1046 = $s$10;
   label = 48;
  } else {
   $$443 = $$4;$s$1045 = $s$10;
  }
 }
 if ((label|0) == 48) {
  $143 = HEAP8[$s$1046>>0]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$444|0)==(0|0);
   if (!($145)) {
    HEAP32[$$444>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$842))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$443 = $$444;$s$1045 = $s$1046;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$443|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1045;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (417232 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0;
 var $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)==(0|0);
 $3 = ($n$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$16 = $0;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $0;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $4 = ($$026>>>0)>=($$0423>>>0);
    $5 = ($$026>>>0)>(32);
    $or$cond7 = $4 | $5;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$16 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = (($$026) - ($$04$$0))|0;
    $7 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     break;
    }
    $9 = ($s$025|0)==($buf|0);
    if ($9) {
     $$15 = $$0423;$s$1 = $buf;
    } else {
     $10 = (($s$025) + ($7)|0);
     $11 = (($$0423) - ($7))|0;
     $$15 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$024))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)==(0|0);
    $15 = ($$15|0)==(0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     $$1 = $6;$$26 = $$15;$16 = $13;$cnt$1 = $12;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;$$0423 = $$15;$$pr41 = $13;$cnt$024 = $12;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $6;$$26 = 0;$16 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $17 = ($16|0)==(0|0);
 L11: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $18 = ($$26|0)==(0);
   $19 = ($$1|0)==(0);
   $or$cond810 = $18 | $19;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $16;$cnt$212 = $cnt$1;$s$213 = $s$018;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$213,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$214) + -1)|0;
     $29 = (($s$213) + ($22)|0);
     $30 = (($$311) - ($22))|0;
     $31 = (($cnt$212) + 1)|0;
     $32 = ($$311|0)==($22|0);
     $33 = ($28|0)==(0);
     $or$cond8 = $32 | $33;
     if ($or$cond8) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$214 = $28;$$311 = $30;$21 = $27;$cnt$212 = $31;$s$213 = $29;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $34 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $34;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$026 = 0;$5 = $3;$ws2$07 = $2;
  }
  while(1) {
   $6 = ($5>>>0)>(127);
   if ($6) {
    $7 = (_wcrtomb($buf,$5,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$026))|0;
   $9 = (($ws2$07) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;$5 = $10;$ws2$07 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre40 = HEAP32[$ws>>2]|0;
   $$0125 = $s;$$2424 = $n;$14 = $$pre40;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      break;
     }
     $19 = (_wcrtomb($$0125,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0125) + ($19)|0);
     $22 = (($$2424) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0125) + 1|0);
     HEAP8[$$0125>>0] = $23;
     $25 = (($$2424) + -1)|0;
     $$pre41 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre41;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0125 = $$1;$$2424 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0125>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2424))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $$215 = $$01$lcssa;$$414 = $$24$lcssa;$30 = $$pre;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($35>>>0)>($$414>>>0);
   if ($37) {
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$215,$39,0)|0);
   $40 = (($$215) + ($35)|0);
   $41 = (($$414) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$215) + 1|0);
   HEAP8[$$215>>0] = $42;
   $44 = (($$414) + -1)|0;
   $$pre39 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre39;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;$$414 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$215>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$414))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$414))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa18 = 0, $$matches$0 = 0, $$not = 0, $$pre = 0, $$pre$phi241Z2D = 0, $$pre221 = 0, $$pre234 = 0, $$pre235 = 0, $$pre236 = 0, $$pre237 = 0, $$pre238 = 0, $$pre239 = 0, $$pre240 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $factor = 0;
 var $factor14 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit3 = 0, $isdigit320 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp219 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0130 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond5 = 0, $or$cond6 = 0, $p$0136 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0;
 var $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0135 = 0, $pos$1 = 0, $pos$2 = 0, $s$0128 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0;
 var $wcs$0129 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph160 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0130 = 0;$p$0136 = $fmt;$pos$0135 = 0;$s$0128 = 0;$wcs$0129 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0136>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L8: do {
     if ($43) {
      $44 = (($p$0136) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 37)) {
        break L8;
       } else if ((($45<<24>>24) == 42)) {
        $65 = (($p$0136) + 2|0);
        $dest$0 = 0;$p$2 = $65;
       } else {
        $66 = $45&255;
        $isdigittmp = (($66) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $67 = (($p$0136) + 2|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(36);
         if ($69) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $70 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $71 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $72 = (($i$0$i) + -1)|0;
           if ($70) {
            $i$0$i = $72;
           } else {
            break;
           }
          }
          $73 = (($p$0136) + 3|0);
          $dest$0 = $71;$p$2 = $73;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $74 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $74;$p$2 = $44;
       }
      } while(0);
      $75 = HEAP8[$p$2>>0]|0;
      $76 = $75&255;
      $isdigittmp219 = (($76) + -48)|0;
      $isdigit320 = ($isdigittmp219>>>0)<(10);
      if ($isdigit320) {
       $80 = $76;$p$321 = $p$2;$width$022 = 0;
       while(1) {
        $77 = ($width$022*10)|0;
        $78 = (($77) + -48)|0;
        $79 = (($78) + ($80))|0;
        $81 = (($p$321) + 1|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp2 = (($83) + -48)|0;
        $isdigit3 = ($isdigittmp2>>>0)<(10);
        if ($isdigit3) {
         $80 = $83;$p$321 = $81;$width$022 = $79;
        } else {
         $$lcssa18 = $82;$p$3$lcssa = $81;$width$0$lcssa = $79;
         break;
        }
       }
      } else {
       $$lcssa18 = $75;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $84 = ($$lcssa18<<24>>24)==(109);
      if ($84) {
       $85 = ($dest$0|0)!=(0|0);
       $86 = $85&1;
       $87 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$87>>0]|0;
       $90 = $$pre;$alloc$0 = $86;$p$4 = $87;$s$1 = 0;$wcs$1 = 0;
      } else {
       $90 = $$lcssa18;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0128;$wcs$1 = $wcs$0129;
      }
      $88 = (($p$4) + 1|0);
      $89 = $90&255;
      switch ($89|0) {
      case 116: case 122:  {
       $p$5 = $88;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $88;$size$0 = 2;
       break;
      }
      case 108:  {
       $94 = HEAP8[$88>>0]|0;
       $95 = ($94<<24>>24)==(108);
       $96 = (($p$4) + 2|0);
       $$9 = $95 ? $96 : $88;
       $$10 = $95 ? 3 : 1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 104:  {
       $91 = HEAP8[$88>>0]|0;
       $92 = ($91<<24>>24)==(104);
       $93 = (($p$4) + 2|0);
       $$7 = $92 ? $93 : $88;
       $$8 = $92 ? -2 : -1;
       $p$5 = $$7;$size$0 = $$8;
       break;
      }
      case 106:  {
       $p$5 = $88;$size$0 = 3;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $97 = HEAP8[$p$5>>0]|0;
      $98 = $97&255;
      $99 = $98 & 47;
      $100 = ($99|0)==(3);
      $101 = $98 | 32;
      $$ = $100 ? $101 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $102 = ($width$0$lcssa|0)<(1);
       $$width$0 = $102 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0135;$width$1 = $$width$0;
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0135;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 110)) {
       $103 = ($pos$0135|0)<(0);
       $104 = $103 << 31 >> 31;
       $105 = ($dest$0|0)==(0|0);
       if ($105) {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case 3:  {
        $108 = $dest$0;
        $109 = $108;
        HEAP32[$109>>2] = $pos$0135;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $104;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $106 = $pos$0135&255;
        HEAP8[$dest$0>>0] = $106;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $107 = $pos$0135&65535;
        HEAP16[$dest$0>>1] = $107;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0135;
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0130;$p$11 = $p$5;$pos$2 = $pos$0135;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $112 = HEAP32[$3>>2]|0;
        $113 = HEAP32[$4>>2]|0;
        $114 = ($112>>>0)<($113>>>0);
        if ($114) {
         $115 = (($112) + 1|0);
         HEAP32[$3>>2] = $115;
         $116 = HEAP8[$112>>0]|0;
         $117 = $116&255;
         $119 = $117;
        } else {
         $118 = (___shgetc($f)|0);
         $119 = $118;
        }
        $120 = (_isspace($119)|0);
        $121 = ($120|0)==(0);
        if ($121) {
         break;
        }
       }
       $122 = HEAP32[$4>>2]|0;
       $123 = ($122|0)==(0|0);
       $$pre234 = HEAP32[$3>>2]|0;
       if ($123) {
        $127 = $$pre234;
       } else {
        $124 = (($$pre234) + -1|0);
        HEAP32[$3>>2] = $124;
        $127 = $124;
       }
       $125 = HEAP32[$5>>2]|0;
       $126 = HEAP32[$6>>2]|0;
       $128 = $127;
       $129 = $126;
       $130 = (($125) + ($pos$0135))|0;
       $131 = (($130) + ($128))|0;
       $132 = (($131) - ($129))|0;
       $pos$1 = $132;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $133 = HEAP32[$3>>2]|0;
      $134 = HEAP32[$4>>2]|0;
      $135 = ($133>>>0)<($134>>>0);
      if ($135) {
       $136 = (($133) + 1|0);
       HEAP32[$3>>2] = $136;
       $139 = $134;
      } else {
       $137 = (___shgetc($f)|0);
       $138 = ($137|0)<(0);
       if ($138) {
        $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre235 = HEAP32[$4>>2]|0;
       $139 = $$pre235;
      }
      $140 = ($139|0)==(0|0);
      if (!($140)) {
       $141 = HEAP32[$3>>2]|0;
       $142 = (($141) + -1|0);
       HEAP32[$3>>2] = $142;
      }
      L65: do {
       switch ($$|0) {
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $322 = (+___floatscan($f,$$size$0,0));
        $323 = HEAP32[$5>>2]|0;
        $324 = HEAP32[$3>>2]|0;
        $325 = HEAP32[$6>>2]|0;
        $326 = $324;
        $327 = $325;
        $328 = (($327) - ($326))|0;
        $329 = ($323|0)==($328|0);
        if ($329) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $331 = $322;
          HEAPF32[$dest$0>>2] = $331;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         }
        }
        break;
       }
       case 91: case 99: case 115:  {
        $143 = ($$|0)==(99);
        $144 = $$ & 239;
        $145 = ($144|0)==(99);
        L77: do {
         if ($145) {
          $146 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($146) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $147 = (($p$5) + 1|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = ($148<<24>>24)==(94);
          $150 = (($p$5) + 2|0);
          $invert$0 = $149&1;
          $p$6 = $149 ? $150 : $147;
          $151 = $149&1;
          _memset(($scanset|0),($151|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $152 = HEAP8[$p$6>>0]|0;
          if ((($152<<24>>24) == 45)) {
           $153 = (($p$6) + 1|0);
           $154 = $invert$0 ^ 1;
           $155 = $154&255;
           HEAP8[$10>>0] = $155;
           $$pre$phi241Z2D = $155;$p$7$ph = $153;
          } else if ((($152<<24>>24) == 93)) {
           $156 = (($p$6) + 1|0);
           $157 = $invert$0 ^ 1;
           $158 = $157&255;
           HEAP8[$11>>0] = $158;
           $$pre$phi241Z2D = $158;$p$7$ph = $156;
          } else {
           $$pre239 = $invert$0 ^ 1;
           $$pre240 = $$pre239&255;
           $$pre$phi241Z2D = $$pre240;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $159 = HEAP8[$p$7>>0]|0;
           if ((($159<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else if ((($159<<24>>24) == 45)) {
            $160 = (($p$7) + 1|0);
            $161 = HEAP8[$160>>0]|0;
            if ((($161<<24>>24) == 93) | (($161<<24>>24) == 0)) {
             $172 = 45;$p$8 = $p$7;
            } else {
             $162 = (($p$7) + -1|0);
             $163 = HEAP8[$162>>0]|0;
             $164 = ($163&255)<($161&255);
             if ($164) {
              $165 = $163&255;
              $c$027 = $165;
              while(1) {
               $166 = (($c$027) + 1)|0;
               $167 = (($scanset) + ($166)|0);
               HEAP8[$167>>0] = $$pre$phi241Z2D;
               $168 = HEAP8[$160>>0]|0;
               $169 = $168&255;
               $170 = ($166|0)<($169|0);
               if ($170) {
                $c$027 = $166;
               } else {
                $172 = $168;$p$8 = $160;
                break;
               }
              }
             } else {
              $172 = $161;$p$8 = $160;
             }
            }
           } else if ((($159<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L77;
           } else {
            $172 = $159;$p$8 = $p$7;
           }
           $171 = $172&255;
           $173 = (($171) + 1)|0;
           $174 = (($scanset) + ($173)|0);
           HEAP8[$174>>0] = $$pre$phi241Z2D;
           $175 = (($p$8) + 1|0);
           $p$7 = $175;
          }
         }
        } while(0);
        $176 = (($width$1) + 1)|0;
        $$4 = $143 ? $176 : 31;
        $177 = ($$size$0|0)==(1);
        $178 = ($alloc$0|0)!=(0);
        L96: do {
         if ($177) {
          if ($178) {
           $179 = $$4 << 2;
           $180 = (_malloc($179)|0);
           $181 = ($180|0)==(0|0);
           if ($181) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $180;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $180;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$4;$wcs$3$ph = $wcs$2;
          L131: while(1) {
           $182 = ($wcs$3$ph|0)==(0|0);
           if ($182) {
            while(1) {
             $185 = HEAP32[$3>>2]|0;
             $196 = HEAP32[$4>>2]|0;
             $197 = ($185>>>0)<($196>>>0);
             if ($197) {
              $184 = (($185) + 1|0);
              HEAP32[$3>>2] = $184;
              $186 = HEAP8[$185>>0]|0;
              $187 = $186&255;
              $189 = $187;
             } else {
              $183 = (___shgetc($f)|0);
              $189 = $183;
             }
             $188 = (($189) + 1)|0;
             $190 = (($scanset) + ($188)|0);
             $191 = HEAP8[$190>>0]|0;
             $192 = ($191<<24>>24)==(0);
             if ($192) {
              $i$0$ph46$lcssa = $i$0$ph;$wcs$3$ph160 = 0;
              break L131;
             }
             $193 = $189&255;
             HEAP8[$0>>0] = $193;
             $194 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($194|0) == -1)) {
              $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             } else if ((($194|0) == -2)) {
              continue;
             }
             $195 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $178 & $195;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($178) {
             $i$0$ph46$us53 = $i$0$ph;
            } else {
             $i$0$ph46 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $200 = HEAP32[$3>>2]|0;
              $214 = HEAP32[$4>>2]|0;
              $215 = ($200>>>0)<($214>>>0);
              if ($215) {
               $199 = (($200) + 1|0);
               HEAP32[$3>>2] = $199;
               $201 = HEAP8[$200>>0]|0;
               $202 = $201&255;
               $204 = $202;
              } else {
               $198 = (___shgetc($f)|0);
               $204 = $198;
              }
              $203 = (($204) + 1)|0;
              $205 = (($scanset) + ($203)|0);
              $206 = HEAP8[$205>>0]|0;
              $207 = ($206<<24>>24)==(0);
              if ($207) {
               $i$0$ph46$lcssa = $i$0$ph46$us53;$wcs$3$ph160 = $wcs$3$ph;
               break L131;
              }
              $208 = $204&255;
              HEAP8[$0>>0] = $208;
              $209 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($209|0) == -1)) {
               $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($209|0) == -2))) {
               break;
              }
             }
             $210 = HEAP32[$wc>>2]|0;
             $211 = (($i$0$ph46$us53) + 1)|0;
             $212 = (($wcs$3$ph) + ($i$0$ph46$us53<<2)|0);
             HEAP32[$212>>2] = $210;
             $213 = ($211|0)==($k$0$ph|0);
             if ($213) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph46$us53 = $211;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $233 = $factor | 1;
           $234 = $233 << 2;
           $235 = (_realloc($wcs$3$ph,$234)|0);
           $236 = ($235|0)==(0|0);
           if ($236) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $233;$wcs$3$ph = $235;
          }
          L155: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $216 = HEAP32[$3>>2]|0;
              $217 = HEAP32[$4>>2]|0;
              $218 = ($216>>>0)<($217>>>0);
              if ($218) {
               $219 = (($216) + 1|0);
               HEAP32[$3>>2] = $219;
               $220 = HEAP8[$216>>0]|0;
               $221 = $220&255;
               $224 = $221;
              } else {
               $222 = (___shgetc($f)|0);
               $224 = $222;
              }
              $223 = (($224) + 1)|0;
              $225 = (($scanset) + ($223)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($226<<24>>24)==(0);
              if ($227) {
               $i$0$ph46$lcssa = $i$0$ph46;$wcs$3$ph160 = $wcs$3$ph;
               break L155;
              }
              $228 = $224&255;
              HEAP8[$0>>0] = $228;
              $229 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($229|0) == -1)) {
               $alloc$1 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($229|0) == -2))) {
               break;
              }
             }
             $230 = HEAP32[$wc>>2]|0;
             $231 = (($i$0$ph46) + 1)|0;
             $232 = (($wcs$3$ph) + ($i$0$ph46<<2)|0);
             HEAP32[$232>>2] = $230;
             $i$0$ph46 = $231;
             label = 98;
            }
           }
          } while(0);
          $237 = (_mbsinit($st)|0);
          $238 = ($237|0)==(0);
          if ($238) {
           $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph160;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph46$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph160;
          }
         } else {
          if ($178) {
           $239 = (_malloc($$4)|0);
           $240 = ($239|0)==(0|0);
           if ($240) {
            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$4;$s$2$ph = $239;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $241 = HEAP32[$3>>2]|0;
             $242 = HEAP32[$4>>2]|0;
             $243 = ($241>>>0)<($242>>>0);
             if ($243) {
              $244 = (($241) + 1|0);
              HEAP32[$3>>2] = $244;
              $245 = HEAP8[$241>>0]|0;
              $246 = $245&255;
              $249 = $246;
             } else {
              $247 = (___shgetc($f)|0);
              $249 = $247;
             }
             $248 = (($249) + 1)|0;
             $250 = (($scanset) + ($248)|0);
             $251 = HEAP8[$250>>0]|0;
             $252 = ($251<<24>>24)==(0);
             if ($252) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L96;
             }
             $253 = $249&255;
             $254 = (($i$2) + 1)|0;
             $255 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$255>>0] = $253;
             $256 = ($254|0)==($k$1$ph|0);
             if ($256) {
              break;
             } else {
              $i$2 = $254;
             }
            }
            $factor14 = $k$1$ph << 1;
            $257 = $factor14 | 1;
            $258 = (_realloc($s$2$ph,$257)|0);
            $259 = ($258|0)==(0|0);
            if ($259) {
             $alloc$1 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $257;$s$2$ph = $258;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $260 = ($dest$0|0)==(0|0);
          if ($260) {
           $278 = $139;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = (($276) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L96;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $278 = $$pre237;
           }
          } else {
           $263 = $139;$i$3 = 0;
           while(1) {
            $261 = HEAP32[$3>>2]|0;
            $262 = ($261>>>0)<($263>>>0);
            if ($262) {
             $264 = (($261) + 1|0);
             HEAP32[$3>>2] = $264;
             $265 = HEAP8[$261>>0]|0;
             $266 = $265&255;
             $269 = $266;
            } else {
             $267 = (___shgetc($f)|0);
             $269 = $267;
            }
            $268 = (($269) + 1)|0;
            $270 = (($scanset) + ($268)|0);
            $271 = HEAP8[$270>>0]|0;
            $272 = ($271<<24>>24)==(0);
            if ($272) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L96;
            }
            $273 = $269&255;
            $274 = (($i$3) + 1)|0;
            $275 = (($dest$0) + ($i$3)|0);
            HEAP8[$275>>0] = $273;
            $$pre221 = HEAP32[$4>>2]|0;
            $263 = $$pre221;$i$3 = $274;
           }
          }
         }
        } while(0);
        $288 = HEAP32[$4>>2]|0;
        $289 = ($288|0)==(0|0);
        $$pre236 = HEAP32[$3>>2]|0;
        if ($289) {
         $293 = $$pre236;
        } else {
         $290 = (($$pre236) + -1|0);
         HEAP32[$3>>2] = $290;
         $293 = $290;
        }
        $291 = HEAP32[$5>>2]|0;
        $292 = HEAP32[$6>>2]|0;
        $294 = $293;
        $295 = $292;
        $296 = (($294) - ($295))|0;
        $297 = (($296) + ($291))|0;
        $298 = ($297|0)==(0);
        if ($298) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        $$not = $143 ^ 1;
        $299 = ($297|0)==($width$1|0);
        $or$cond5 = $299 | $$not;
        if (!($or$cond5)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$3;$wcs$8 = $wcs$4;
         break L4;
        }
        do {
         if ($178) {
          if ($177) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($143) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $300 = ($wcs$4|0)==(0|0);
         if (!($300)) {
          $301 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$301>>2] = 0;
         }
         $302 = ($s$3|0)==(0|0);
         if ($302) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $303 = (($s$3) + ($i$4)|0);
          HEAP8[$303>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L184: do {
       if ((label|0) == 144) {
        label = 0;
        $304 = (___intscan($f,$base$0,0,-1,-1)|0);
        $305 = tempRet0;
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$3>>2]|0;
        $308 = HEAP32[$6>>2]|0;
        $309 = $307;
        $310 = $308;
        $311 = (($310) - ($309))|0;
        $312 = ($306|0)==($311|0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0130;$s$7 = $s$1;$wcs$8 = $wcs$1;
         break L4;
        }
        $313 = ($$|0)!=(112);
        $314 = ($dest$0|0)==(0|0);
        $or$cond6 = $313 | $314;
        if (!($or$cond6)) {
         $315 = $304;
         HEAP32[$dest$0>>2] = $315;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        if ($314) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $316 = $304&255;
          HEAP8[$dest$0>>0] = $316;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case -1:  {
          $317 = $304&65535;
          HEAP16[$dest$0>>1] = $317;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         case 3:  {
          $318 = $dest$0;
          $319 = $318;
          HEAP32[$319>>2] = $304;
          $320 = (($318) + 4)|0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L184;
         }
         }
        }
       }
      } while(0);
      $332 = HEAP32[$5>>2]|0;
      $333 = HEAP32[$3>>2]|0;
      $334 = HEAP32[$6>>2]|0;
      $335 = $333;
      $336 = $334;
      $337 = (($332) + ($pos$1))|0;
      $338 = (($337) + ($335))|0;
      $339 = (($338) - ($336))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $340 = $not$&1;
      $matches$0$ = (($340) + ($matches$0130))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $339;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0136) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     label = 19;
     break L4;
    }
    $64 = (($pos$0135) + 1)|0;
    $matches$1 = $matches$0130;$p$11 = $47;$pos$2 = $64;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   } else {
    $p$1 = $p$0136;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre238 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre238;
    } else {
     $33 = (($$pre238) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0135))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0130;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0128;$wcs$6 = $wcs$0129;
   }
  } while(0);
  $341 = (($p$11) + 1|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $13 = $342;$matches$0130 = $matches$1;$p$0136 = $341;$pos$0135 = $pos$2;$s$0128 = $s$5;$wcs$0129 = $wcs$6;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($57|0)<(0);
  if ($63) {
   $alloc$1 = 0;$s$6 = $s$0128;$wcs$7 = $wcs$0129;
   label = 162;
  } else {
   $matches$3 = $matches$0130;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $344 = ($matches$0130|0)==(0);
  $345 = $344 << 31 >> 31;
  $$matches$0 = (($345) + ($matches$0130))|0;
  $alloc$2 = $alloc$1;$matches$2 = $$matches$0;$s$7 = $s$6;$wcs$8 = $wcs$7;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$7);
 _free($wcs$8);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 38;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer10 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer10 = sp;
 $thrown_object = sp + 12|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _abort_message(417624,$vararg_buffer10);
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _abort_message(417624,$vararg_buffer10);
  // unreachable;
 }
 $4 = (($2) + 80|0);
 $5 = (($2) + 48|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $8 & -256;
 $13 = ($12|0)==(1126902528);
 $14 = ($11|0)==(1129074247);
 $15 = $13 & $14;
 if (!($15)) {
  $36 = HEAP32[417464>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $36;
  _abort_message(417584,$vararg_buffer10);
  // unreachable;
 }
 $16 = ($8|0)==(1126902529);
 $17 = ($11|0)==(1129074247);
 $18 = $16 & $17;
 if ($18) {
  $19 = (($2) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20;
 } else {
  $21 = $4;
 }
 HEAP32[$thrown_object>>2] = $21;
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[418016>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 63](418016,$22,$thrown_object)|0);
 if ($28) {
  $29 = HEAP32[$thrown_object>>2]|0;
  $30 = HEAP32[417464>>2]|0;
  $31 = HEAP32[$29>>2]|0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_ii[$33 & 127]($29)|0);
  HEAP32[$vararg_buffer10>>2] = $30;
  $vararg_ptr1 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = (($vararg_buffer10) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $34;
  _abort_message(417488,$vararg_buffer10);
  // unreachable;
 } else {
  $35 = HEAP32[417464>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $35;
  $vararg_ptr6 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $24;
  _abort_message(417536,$vararg_buffer10);
  // unreachable;
 }
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_once((417648|0),(3|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[417640>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(417656,$vararg_buffer);
  // unreachable;
 }
 return 0|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((417640|0),(256|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(417712,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[417640>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(417768,$vararg_buffer);
  // unreachable;
 }
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 3]();
  $5 = (_malloc($$size)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $$lcssa = $5;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (___cxa_allocate_exception(4)|0);
  HEAP32[$7>>2] = ((417824 + 8|0));
  ___cxa_throw(($7|0),(417880|0),(227|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((417824 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (417848|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(417896,$vararg_buffer);
 // unreachable;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($2) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = (($2) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = HEAP32[104364]|0;HEAP32[104364] = (($17+0)|0);
 $18 = $17;
 __ZSt11__terminatePFvvE($18);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[417992>>2]|0;HEAP32[417992>>2] = (($0+0)|0);
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((418024 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((418048 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((418272 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (418296|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,418408,418464,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 15]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 15]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 15]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 31]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 3]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   if (!($42)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  if (!($29)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[$11>>2]|0;
  $$1 = $33 ? $34 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $22 = $path_below;
 } else {
  $22 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $23 = ($22|0)==(1);
 $or$cond1 = $21 & $23;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 31]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 3]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 3]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 31]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 31]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if (!($4)) {
  STACKTOP = sp;return ($5|0);
 }
 $6 = HEAP32[$temp>>2]|0;
 HEAP32[$thrown>>2] = $6;
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,418408,418576,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(417880|0),(227|0));
 // unreachable;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[418824>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((418824 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((418824 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[418824>>2] = $22;
     } else {
      $23 = HEAP32[((418824 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((418824 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((418824 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((418824 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[418824>>2] = $74;
      } else {
       $75 = HEAP32[((418824 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((418824 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((418824 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((418824 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[418824>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[418824>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((418824 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((418824 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((418824 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((418824 + 8|0))>>2] = $81;
     HEAP32[((418824 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((418824 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((418824 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((418824 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((418824 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((418824 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((418824 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((418824 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((418824 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((418824 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((418824 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((418824 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((418824 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((418824 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[418824>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[418824>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((418824 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((418824 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((418824 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((418824 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((418824 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((418824 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((418824 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((418824 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((418824 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((418824 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((418824 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((418824 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((418824 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((418824 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((418824 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((418824 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((418824 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((418824 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[418824>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[418824>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((418824 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((418824 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((418824 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((418824 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((418824 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((418824 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((418824 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((418824 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((418824 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((418824 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((418824 + 20|0))>>2] = $516;
   HEAP32[((418824 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((418824 + 8|0))>>2] = 0;
   HEAP32[((418824 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((418824 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((418824 + 12|0))>>2] = $530;
  $531 = HEAP32[((418824 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((418824 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[419296>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((419296 + 8|0))>>2] = $540;
    HEAP32[((419296 + 4|0))>>2] = $540;
    HEAP32[((419296 + 12|0))>>2] = -1;
    HEAP32[((419296 + 16|0))>>2] = -1;
    HEAP32[((419296 + 20|0))>>2] = 0;
    HEAP32[((418824 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[419296>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((419296 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((418824 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((418824 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((418824 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((418824 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((418824 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((418824 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((419296 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((418824 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((418824 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((419296 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((418824 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((418824 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((418824 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((418824 + 432|0))>>2] = $633;
  $634 = HEAP32[((418824 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((418824 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((418824 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((418824 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((418824 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((418824 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((418824 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((418824 + 460|0))>>2] = 0;
    $641 = HEAP32[419296>>2]|0;
    HEAP32[((418824 + 36|0))>>2] = $641;
    HEAP32[((418824 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((418824 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((418824 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((418824 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((418824 + 24|0))>>2] = $654;
    HEAP32[((418824 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((419296 + 16|0))>>2]|0;
    HEAP32[((418824 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((418824 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((418824 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((418824 + 24|0))>>2] = $684;
       HEAP32[((418824 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((419296 + 16|0))>>2]|0;
       HEAP32[((418824 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((418824 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((418824 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((418824 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((418824 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((418824 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((418824 + 12|0))>>2] = $732;
        HEAP32[((418824 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((418824 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((418824 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((418824 + 8|0))>>2] = $738;
         HEAP32[((418824 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((418824 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((418824 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[418824>>2]|0;
            $765 = $764 & $763;
            HEAP32[418824>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((418824 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((418824 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((418824 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((418824 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((418824 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((418824 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((418824 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((418824 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((418824 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((418824 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((418824 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[418824>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[418824>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((418824 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((418824 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((418824 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((418824 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((418824 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((418824 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((418824 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((418824 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((418824 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((418824 + 24|0))>>2] = $958;
    HEAP32[((418824 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((419296 + 16|0))>>2]|0;
    HEAP32[((418824 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((418824 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((418824 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((418824 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((418824 + 448|0))+12>>2]|0;
    HEAP32[((418824 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((418824 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((418824 + 460|0))>>2] = 0;
    HEAP32[((418824 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((418824 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[418824>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[418824>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((418824 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((418824 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((418824 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((418824 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((418824 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((418824 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((418824 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((418824 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((418824 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((418824 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((418824 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((418824 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((418824 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((418824 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((418824 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((418824 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[418824>>2]|0;
     $36 = $35 & $34;
     HEAP32[418824>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((418824 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((418824 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((418824 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((418824 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((418824 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((418824 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((418824 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((418824 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((418824 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((418824 + 12|0))>>2] = $122;
   HEAP32[((418824 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((418824 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((418824 + 20|0))>>2] = 0;
   HEAP32[((418824 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((418824 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((418824 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((418824 + 8|0))>>2] = $130;
   HEAP32[((418824 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((418824 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((418824 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[418824>>2]|0;
     $154 = $153 & $152;
     HEAP32[418824>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((418824 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((418824 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((418824 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((418824 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((418824 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((418824 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((418824 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((418824 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((418824 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((418824 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((418824 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((418824 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((418824 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[418824>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[418824>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((418824 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((418824 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((418824 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((418824 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((418824 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((418824 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((418824 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((418824 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((418824 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((418824 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((418824 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((418824 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((418824 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((419296 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((418824 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((418824 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((418824 + 24|0))>>2] = $38;
  HEAP32[((418824 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((418824 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((418824 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((418824 + 8|0))>>2] = $storemerge21;
  HEAP32[((418824 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((418824 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[418824>>2]|0;
    $90 = $89 & $88;
    HEAP32[418824>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((418824 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((418824 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((418824 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((418824 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((418824 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((418824 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((418824 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((418824 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((418824 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((418824 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((418824 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[418824>>2]|0;
     $32 = $31 & $30;
     HEAP32[418824>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((418824 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((418824 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((418824 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((418824 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((418824 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((418824 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((418824 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((418824 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((418824 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((418824 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((418824 + 12|0))>>2] = $117;
   HEAP32[((418824 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((418824 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((418824 + 20|0))>>2] = 0;
   HEAP32[((418824 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((418824 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((418824 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((418824 + 8|0))>>2] = $125;
   HEAP32[((418824 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((418824 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[418824>>2]|0;
     $148 = $147 & $146;
     HEAP32[418824>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((418824 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((418824 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((418824 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((418824 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((418824 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((418824 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((418824 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((418824 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((418824 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((418824 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[418824>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[418824>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((418824 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((418824 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((418824 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((418824 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((418824 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((418824 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((418824 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((418824 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (419320 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (419320 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$87 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $88 = ($87|0)<(0);
     $89 = $88 << 31 >> 31;
     $90 = $87 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $87;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($87|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$87 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $251 = $283;$254 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $251 = $281;$254 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (419584 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (419320 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (419320 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$151 = 0;$154 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$151 = 0;$154 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $152 = ($151>>>0)>($147>>>0);
    $153 = ($151|0)==($147|0);
    $155 = ($154>>>0)>($146>>>0);
    $156 = $153 & $155;
    $157 = $152 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $154;$285 = $151;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $154;$159 = $151;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (419320 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (419320 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (419320 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $201 = $287;$204 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $202 = ($201>>>0)>($200>>>0);
     $203 = ($201|0)==($200|0);
     $205 = ($204>>>0)>($199>>>0);
     $206 = $203 & $205;
     $207 = $202 | $206;
     if ($207) {
      $$121 = $$122;$284 = $204;$285 = $201;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($204|0),($201|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $204;$285 = $201;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (419320 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $201 = $219;$204 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (419320 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (419320 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $251 = $1;$254 = $0;
  } else {
   $251 = $285;$254 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $252 = ($251>>>0)<($1>>>0);
 $253 = ($251|0)==($1|0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = $253 & $255;
 $257 = $252 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($251>>>0)>($1>>>0);
  $267 = ($251|0)==($1|0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $254 ^ $neg$0;
 $275 = $251 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (419600 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (419616 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $153 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $153 = $152;
          }
          $154 = ($153|0)==(48);
          if (!($154)) {
           $168 = 0;$171 = 0;$211 = $155;$213 = $156;$c$2$i = $153;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L66;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L79: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $171;$713 = $168;$714 = $171;$715 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $169 = ($168|0)<(0);
        $170 = ($168|0)==(0);
        $172 = ($171>>>0)<(8);
        $173 = $170 & $172;
        $174 = $169 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($168|0)<(0);
          $178 = ($168|0)==(0);
          $179 = ($171>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($171|0),($168|0),1,0)|0);
        $191 = tempRet0;
        $712 = $211;$713 = $213;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $212 = $210 ? $171 : $211;
      $214 = $210 ? $168 : $213;
      $215 = ($168|0)<(0);
      $216 = ($168|0)==(0);
      $217 = ($171>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $171;$222 = $168;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($212|0),($214|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L168: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L168;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L182: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L182;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$385 = $722;$386 = $724;$388 = $723;$389 = $725;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$385 = $716;$386 = 0;$388 = $717;$389 = 0;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $387 = $384 ? $386 : $385;
     $390 = $384 ? $389 : $388;
     $$388$i = $$3$lcssa$i;$405 = $387;$406 = $390;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $419 = $407;$422 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $419 = $405;$422 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $419 = $405;$422 = $406;
      }
     } else {
      $419 = $405;$422 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $420 = ($419|0)==($421|0);
    $423 = ($422|0)==($424|0);
    $425 = $420 & $423;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($422|0)>($439|0);
    $441 = ($422|0)==($439|0);
    $442 = ($419>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($422|0)<($451|0);
    $453 = ($422|0)==($451|0);
    $454 = ($419>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($419|0);
      $470 = ($419|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($419|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($419|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($419))|0;
        $482 = (419632 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($419, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($419) + -10)|0;
       $495 = (419632 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($419|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $419;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($419|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (419632 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $419;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $419;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L280: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L280;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L311: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $626 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (419624 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $593 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $594 = ($593|0)<(2);
        if ($594) {
         $i$025$i = $593;
        } else {
         $i$1$i = $593;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L311;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $627 = ($626|0)==($a$5$i|0);
      if (!($627)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $626;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($626) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $626;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $644 = (($687) - ($emin$0$ph))|0;
    $711 = ($644|0)<($bits$0$ph|0);
    if ($711) {
     $645 = ($644|0)<(0);
     $$$i22 = $645 ? 0 : $644;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($644|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $75 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $75 = $74;
    }
    $76 = ($75|0)==(40);
    if ($76) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $7 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   } else if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $64 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $64 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $64 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $65 = ($64<<24>>24)==(42);
  do {
   if ($65) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $64 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((419664 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$228 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$228 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($228|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $228;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 420128;
     label = 94;
    } else {
     $$13 = $252 ? 420128 : ((420128 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 117:  {
    $276 = $207;$278 = $228;$pl$0 = 0;$prefix$0 = 420128;
    label = 89;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 420144 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $228;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 420128;$z$2 = $2;
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($228|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($228|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $276 = $271;$278 = $270;$pl$0 = 1;$prefix$0 = 420128;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 420128 : ((420128 + 2|0));
     $276 = $207;$278 = $228;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $276 = $207;$278 = $228;$pl$0 = 1;$prefix$0 = ((420128 + 1|0));
     label = 89;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $228;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($228|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 420152;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((420152 + 1|0)) : ((420152 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((420152 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 420176 : 420184;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 420192 : 420200;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (420208 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (420208 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (420208 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (420208 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$581 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$581 = $$pre$i;
    }
    $582 = ($581|0)<(0);
    $$31$i = $582 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $590 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $591 = ($590|0)>(29);
      $592 = $591 ? 29 : $590;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $590 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L245: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $630 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $630;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $631 = ($630|0)==(0);
          if ($631) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $630;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L245;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(420224,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(420224,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   default: {
    $1053 = $228;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 420128;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $229 = ($228|0)==(0);
    $230 = $227 & $229;
    if ($230) {
     $307 = $207;$310 = $228;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 420128;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $228;
     while(1) {
      $231 = $232 & 15;
      $233 = (420208 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 420128;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (420128 + ($247)|0);
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $277 = $276;
    $279 = ($278>>>0)>(0);
    $280 = ($278|0)==(0);
    $281 = ($277>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $279 | $282;
    if ($283) {
     $$05$i = $2;$284 = $277;$285 = $278;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $277;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $307 = $276;$310 = $278;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $307 = $276;$310 = $278;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 420128;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 420128;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $334 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $335 = ($334>>>0)<($p$4296>>>0);
     if ($335) {
      $i$0168 = $334;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $334;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $308 = $307;
   $309 = ($308|0)==(0);
   $311 = ($310|0)==(0);
   $312 = $309 & $311;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $310;$1054 = $307;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $310;$1054 = $307;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L481: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L481;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L481;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $228;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L531: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L531;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1040 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1041 = ($1040|0)<(10);
   if ($1041) {
    $i$388 = $1040;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=420232+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$4 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $5 = ($4<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $5;
    if (!($or$cond4)) {
     $11 = $4;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$4 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function dynCall_vid(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=+a2;
      FUNCTION_TABLE_vid[index&3](a1|0,+a2);
    }
  

    function dynCall_di(index,a1) {
      index = index|0;
      a1=a1|0;
      return +FUNCTION_TABLE_di[index&3](a1|0);
    }
  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&511](a1|0);
    }
  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
    }
  

    function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return FUNCTION_TABLE_iiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }
  

    function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }
  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&127](a1|0)|0;
    }
  

    function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      FUNCTION_TABLE_viiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }
  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
    }
  

    function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      FUNCTION_TABLE_viiiiid[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }
  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&3]();
    }
  

    function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }
  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&15](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      FUNCTION_TABLE_viiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }
  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
    }
  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = +p1; abort(2); }
  function b3(p0) { p0 = p0|0; abort(3);return +0; }
  function b4(p0) { p0 = p0|0; abort(4); }
  function b5(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(5); }
  function b6(p0,p1) { p0 = p0|0;p1 = p1|0; abort(6); }
  function b7(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(7);return 0; }
  function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(8); }
  function b9(p0) { p0 = p0|0; abort(9);return 0; }
  function b10(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; abort(10); }
  function b11(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(11); }
  function b12(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; abort(12); }
  function b13() { ; abort(13); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function b14(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(14);return 0; }
  function b15(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(15);return 0; }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(16); }
  function b17(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(17); }
  function b18(p0,p1) { p0 = p0|0;p1 = p1|0; abort(18);return 0; }
  function b19(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(19);return 0; }
  function b20(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(20); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,__ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEPcj,__ZNK5MeCab12_GLOBAL__N_19ModelImpl15transition_costEtt,__ZN5MeCab12_GLOBAL__N_110TaggerImpl10parseNBestEjPKc,__ZN5MeCab12_GLOBAL__N_110TaggerImpl5parseEPKcj,__ZN5MeCab12_GLOBAL__N_110TaggerImpl11parseToNodeEPKcj,__ZN5MeCab12_GLOBAL__N_110TaggerImpl14parseNBestInitEPKcj,__ZN5MeCab12_GLOBAL__N_110TaggerImpl4nextEPcj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw
  ,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,__ZNK5MeCab6Writer12writeLatticeEPNS_7LatticeEPNS_12StringBufferE,__ZNK5MeCab6Writer11writeWakatiEPNS_7LatticeEPNS_12StringBufferE,__ZNK5MeCab6Writer9writeNoneEPNS_7LatticeEPNS_12StringBufferE,__ZNK5MeCab6Writer9writeDumpEPNS_7LatticeEPNS_12StringBufferE,__ZNK5MeCab6Writer7writeEMEPNS_7LatticeEPNS_12StringBufferE,__ZNK5MeCab6Writer9writeUserEPNS_7LatticeEPNS_12StringBufferE,_do_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
  var FUNCTION_TABLE_vid = [b2,__ZN5MeCab12_GLOBAL__N_111LatticeImpl5set_ZEd,__ZN5MeCab12_GLOBAL__N_111LatticeImpl9set_thetaEf,__ZN5MeCab12_GLOBAL__N_110TaggerImpl9set_thetaEf];
  var FUNCTION_TABLE_di = [b3,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl1ZEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl5thetaEv,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl5thetaEv];
  var FUNCTION_TABLE_vi = [b4,__ZN5MeCab7ViterbiD2Ev,__ZN5MeCab7ViterbiD0Ev,__ZN5MeCab14NBestGeneratorD1Ev,__ZN5MeCab14NBestGeneratorD0Ev,__ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED1Ev,__ZN5MeCab8FreeListINS_14NBestGenerator12QueueElementEED0Ev,__ZN5MeCab8FreeListI12mecab_path_tED1Ev,__ZN5MeCab8FreeListI12mecab_path_tED0Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
  ,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZN5MeCab10scoped_ptrIiED1Ev,__ZN5MeCab10scoped_ptrIiED0Ev,__ZN5MeCab10scoped_ptrINS_9ConnectorEED1Ev,__ZN5MeCab10scoped_ptrINS_9ConnectorEED0Ev,__ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED1Ev,__ZN5MeCab10scoped_ptrINS_9TokenizerI12mecab_node_t12mecab_path_tEEED0Ev,__ZN5MeCab12scoped_arrayIcED1Ev,__ZN5MeCab12scoped_arrayIcED0Ev,__ZN5MeCab9ConnectorD1Ev,__ZN5MeCab9ConnectorD0Ev,__ZN5MeCab10scoped_ptrINS_4MmapIsEEED1Ev,__ZN5MeCab10scoped_ptrINS_4MmapIsEEED0Ev,__ZN5MeCab4MmapIsED1Ev,__ZN5MeCab4MmapIsED0Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZN5MeCab18scoped_fixed_arrayIcLi8192EED1Ev,__ZN5MeCab18scoped_fixed_arrayIcLi8192EED0Ev,__ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED1Ev,__ZN5MeCab10scoped_ptrINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED0Ev,__ZN5MeCab10scoped_ptrIbED1Ev,__ZN5MeCab10scoped_ptrIbED0Ev,__ZN5MeCab10scoped_ptrINS_6TaggerEED1Ev,__ZN5MeCab10scoped_ptrINS_6TaggerEED0Ev,__ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEED2Ev,__ZN5MeCab10scoped_ptrINS_12_GLOBAL__N_19ModelImplEED0Ev
  ,__ZN5MeCab5ParamD1Ev,__ZN5MeCab5ParamD0Ev,__ZN5MeCab15ostream_wrapperD1Ev,__ZN5MeCab15ostream_wrapperD0Ev,__ZN5MeCab15istream_wrapperD1Ev,__ZN5MeCab15istream_wrapperD0Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZN5MeCab10scoped_ptrIdED1Ev,__ZN5MeCab10scoped_ptrIdED0Ev,__ZN5MeCab12_GLOBAL__N_111LatticeImpl5clearEv,__ZN5MeCab12_GLOBAL__N_111LatticeImplD2Ev,__ZN5MeCab12_GLOBAL__N_111LatticeImplD0Ev,__ZN5MeCab13ChunkFreeListIcED1Ev,__ZN5MeCab13ChunkFreeListIcED0Ev,__ZN5MeCab10scoped_ptrINS_12StringBufferEED1Ev,__ZN5MeCab10scoped_ptrINS_12StringBufferEED0Ev,__ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED1Ev,__ZN5MeCab10scoped_ptrINS_9AllocatorI12mecab_node_t12mecab_path_tEEED0Ev,__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tED1Ev,__ZN5MeCab9AllocatorI12mecab_node_t12mecab_path_tED0Ev,__ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED1Ev
  ,__ZN5MeCab12scoped_arrayINS_5Darts15DoubleArrayImplIchijNS1_6LengthIcEEE16result_pair_typeEED0Ev,__ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED1Ev,__ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_node_tEEED0Ev,__ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED1Ev,__ZN5MeCab10scoped_ptrINS_8FreeListI12mecab_path_tEEED0Ev,__ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED1Ev,__ZN5MeCab10scoped_ptrINS_13ChunkFreeListIcEEED0Ev,__ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED1Ev,__ZN5MeCab10scoped_ptrINS_14NBestGeneratorEED0Ev,__ZN5MeCab8FreeListI12mecab_node_tED1Ev,__ZN5MeCab8FreeListI12mecab_node_tED0Ev,__ZN5MeCab7LatticeD1Ev,__ZN5MeCab7LatticeD0Ev,__ZN5MeCab12_GLOBAL__N_19ModelImplD2Ev,__ZN5MeCab12_GLOBAL__N_19ModelImplD0Ev,__ZN5MeCab10scoped_ptrINS_5ModelEED1Ev,__ZN5MeCab10scoped_ptrINS_5ModelEED0Ev,__ZN5MeCab10scoped_ptrINS_6WriterEED1Ev,__ZN5MeCab10scoped_ptrINS_6WriterEED0Ev,__ZN5MeCab5ModelD1Ev,__ZN5MeCab5ModelD0Ev,__ZN5MeCab12_GLOBAL__N_110TaggerImplD2Ev,__ZN5MeCab12_GLOBAL__N_110TaggerImplD0Ev,__ZN5MeCab10scoped_ptrINS_7LatticeEED1Ev,__ZN5MeCab10scoped_ptrINS_7LatticeEED0Ev,__ZN5MeCab6TaggerD1Ev,__ZN5MeCab6TaggerD0Ev,__ZN5MeCab18scoped_fixed_arrayIPcLi8192EED1Ev,__ZN5MeCab18scoped_fixed_arrayIPcLi8192EED0Ev,__ZN5MeCab4MmapIcED1Ev
  ,__ZN5MeCab4MmapIcED0Ev,__ZN5MeCab12CharPropertyD1Ev,__ZN5MeCab12CharPropertyD0Ev,__ZN5MeCab10scoped_ptrINS_4MmapIcEEED1Ev,__ZN5MeCab10scoped_ptrINS_4MmapIcEEED0Ev,__ZN5MeCab10DictionaryD1Ev,__ZN5MeCab10DictionaryD0Ev,__ZN5MeCab6WriterD2Ev,__ZN5MeCab6WriterD0Ev,__ZN5MeCab18scoped_fixed_arrayIPcLi64EED1Ev,__ZN5MeCab18scoped_fixed_arrayIPcLi64EED0Ev,__ZN5MeCab13scoped_stringD1Ev,__ZN5MeCab13scoped_stringD0Ev,__ZN5MeCab12StringBufferD2Ev,__ZN5MeCab12StringBufferD0Ev,__ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tED1Ev,__ZN5MeCab9TokenizerI12mecab_node_t12mecab_path_tED0Ev,__ZN5MeCab10scoped_ptrIjED1Ev,__ZN5MeCab10scoped_ptrIjED0Ev,__ZN5MeCab8FreeListI23mecab_dictionary_info_tED1Ev,__ZN5MeCab8FreeListI23mecab_dictionary_info_tED0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__112system_errorD2Ev
  ,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
  ,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev
  ,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev
  ,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__112__do_nothingEPv,_free,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4];
  var FUNCTION_TABLE_viiiiiii = [b5,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_vii = [b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZN5MeCab12_GLOBAL__N_111LatticeImpl12set_sentenceEPKc,__ZN5MeCab12_GLOBAL__N_111LatticeImpl16set_request_typeEi,__ZN5MeCab12_GLOBAL__N_111LatticeImpl16add_request_typeEi,__ZN5MeCab12_GLOBAL__N_111LatticeImpl19remove_request_typeEi,__ZN5MeCab12_GLOBAL__N_111LatticeImpl10set_resultEPKc,__ZN5MeCab12_GLOBAL__N_111LatticeImpl8set_whatEPKc,__ZN5MeCab12_GLOBAL__N_110TaggerImpl16set_request_typeEi,__ZN5MeCab12_GLOBAL__N_110TaggerImpl11set_partialEb,__ZN5MeCab12_GLOBAL__N_110TaggerImpl17set_lattice_levelEi,__ZN5MeCab12_GLOBAL__N_110TaggerImpl14set_all_morphsEb,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv
  ,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiii = [b7,__ZN5MeCab12_GLOBAL__N_110TaggerImpl10parseNBestEjPKcjPcj];
  var FUNCTION_TABLE_viiiiiiiii = [b8,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b8];
  var FUNCTION_TABLE_ii = [b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl12is_availableEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl8bos_nodeEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl8eos_nodeEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl11begin_nodesEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl9end_nodesEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl8sentenceEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl4sizeEv,__ZN5MeCab12_GLOBAL__N_111LatticeImpl4nextEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl12request_typeEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl9allocatorEv,__ZN5MeCab12_GLOBAL__N_111LatticeImpl7newNodeEv,__ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl14has_constraintEv,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl4whatEv,__ZNK5MeCab12_GLOBAL__N_19ModelImpl15dictionary_infoEv,__ZNK5MeCab12_GLOBAL__N_19ModelImpl12createTaggerEv,__ZNK5MeCab12_GLOBAL__N_19ModelImpl13createLatticeEv,__ZN5MeCab12_GLOBAL__N_110TaggerImpl8nextNodeEv,__ZN5MeCab12_GLOBAL__N_110TaggerImpl4nextEv,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl12request_typeEv,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl7partialEv,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl13lattice_levelEv
  ,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl10all_morphsEv,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl15dictionary_infoEv,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl4whatEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv
  ,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv
  ,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiid = [b10,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b10];
  var FUNCTION_TABLE_viii = [b11,__ZN5MeCab12_GLOBAL__N_111LatticeImpl12set_sentenceEPKcj,__ZN5MeCab12_GLOBAL__N_111LatticeImpl23set_boundary_constraintEji,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,b11,b11,b11];
  var FUNCTION_TABLE_viiiiid = [b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b12,b12,b12];
  var FUNCTION_TABLE_v = [b13,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
  var FUNCTION_TABLE_iiiiiiiii = [b14,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b14,b14,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_iiiii = [b15,__ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEPK12mecab_node_tPcj,__ZN5MeCab12_GLOBAL__N_111LatticeImpl17enumNBestAsStringEjPcj,__ZNK5MeCab12_GLOBAL__N_19ModelImpl6lookupEPKcS3_PNS_7LatticeE,__ZN5MeCab12_GLOBAL__N_110TaggerImpl10parseNBestEjPKcj,__ZN5MeCab12_GLOBAL__N_110TaggerImpl10formatNodeEPK12mecab_node_tPcj,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b15,b15,b15,b15,b15];
  var FUNCTION_TABLE_viiiiiiii = [b16,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b16];
  var FUNCTION_TABLE_viiiiii = [b17,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17];
  var FUNCTION_TABLE_iii = [b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl9end_nodesEj,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl11begin_nodesEj,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl16has_request_typeEi,__ZN5MeCab12_GLOBAL__N_111LatticeImpl8toStringEPK12mecab_node_t,__ZN5MeCab12_GLOBAL__N_111LatticeImpl17enumNBestAsStringEj,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl19boundary_constraintEj,__ZNK5MeCab12_GLOBAL__N_111LatticeImpl18feature_constraintEj,__ZN5MeCab12_GLOBAL__N_19ModelImpl4swapEPNS_5ModelE,__ZNK5MeCab12_GLOBAL__N_110TaggerImpl5parseEPNS_7LatticeE,__ZN5MeCab12_GLOBAL__N_110TaggerImpl5parseEPKc,__ZN5MeCab12_GLOBAL__N_110TaggerImpl11parseToNodeEPKc,__ZN5MeCab12_GLOBAL__N_110TaggerImpl14parseNBestInitEPKc,__ZN5MeCab12_GLOBAL__N_110TaggerImpl10formatNodeEPK12mecab_node_t,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc
  ,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc];
  var FUNCTION_TABLE_iiiiii = [b19,__ZN5MeCab12_GLOBAL__N_110TaggerImpl5parseEPKcjPcj,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19];
  var FUNCTION_TABLE_viiii = [b20,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZN5MeCab12_GLOBAL__N_111LatticeImpl22set_feature_constraintEjjPKc,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b20,b20,b20,b20,b20];

    return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _mecab_do2: _mecab_do2, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _strncpy: _strncpy, _memcpy: _memcpy, _strlen: _strlen, _memmove: _memmove, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_di: dynCall_di, dynCall_vi: dynCall_vi, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_di": invoke_di, "invoke_vi": invoke_vi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_exp": _exp, "_log": _log, "_fread": _fread, "___cxa_guard_acquire": ___cxa_guard_acquire, "_fmodl": _fmodl, "_fstat": _fstat, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_fsync": _fsync, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_sched_yield": _sched_yield, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_send": _send, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "___resumeException": ___resumeException, "_freelocale": _freelocale, "_pthread_once": _pthread_once, "_stat": _stat, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_catopen": _catopen, "_exit": _exit, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "_lseek": _lseek, "_vfprintf": _vfprintf, "___cxa_allocate_exception": ___cxa_allocate_exception, "___buildEnvironment": ___buildEnvironment, "_pwrite": _pwrite, "_open": _open, "_uselocale": _uselocale, "___cxa_end_catch": ___cxa_end_catch, "_strftime": _strftime, "_fseek": _fseek, "_getenv": _getenv, "_fclose": _fclose, "_pthread_key_create": _pthread_key_create, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_copysign": _copysign, "_abort": _abort, "_fopen": _fopen, "___cxa_pure_virtual": ___cxa_pure_virtual, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_ungetc": _ungetc, "_calloc": _calloc, "_fflush": _fflush, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "__reallyNegative": __reallyNegative, "_catgets": _catgets, "_fileno": _fileno, "__exit": __exit, "__arraySum": __arraySum, "_fseeko": _fseeko, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "_getc": _getc, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_copysignl": _copysignl, "_strerror": _strerror, "_ftello": _ftello, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
  var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _mecab_do2 = Module["_mecab_do2"] = asm["_mecab_do2"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



